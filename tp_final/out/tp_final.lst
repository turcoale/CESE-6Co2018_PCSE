
PCSE/tp_final/out/tp_final.elf:     file format elf32-littlearm
PCSE/tp_final/out/tp_final.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00298d

Program Header:
0x70000001 off    0x0000b448 vaddr 0x1a003448 paddr 0x1a003448 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00000394 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00003450 memsz 0x00003450 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a003450 align 2**15
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003448  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a003450  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
  6 .bss          000002c4  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a003448  1a003448  0000b448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000100cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 17 .noinit       00000000  10000394  10000394  000100cc  2**2
                  CONTENTS
 18 .debug_info   0001854b  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003ad2  00000000  00000000  00028617  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000afe1  00000000  00000000  0002c0e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000c10  00000000  00000000  000370ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000ae0  00000000  00000000  00037cda  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000b7de  00000000  00000000  000387ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000ebd9  00000000  00000000  00043f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001fc01  00000000  00000000  00052b71  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  00072772  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  000727e2  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000020cc  00000000  00000000  0007281c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003448 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000394 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a00157c l     F .text	000000ac uartProcessIRQ
10000318 l     O .bss	00000004 rxIsrCallbackUART0
1000031c l     O .bss	00000004 txIsrCallbackUART0
10000320 l     O .bss	00000004 txIsrCallbackUART2
10000324 l     O .bss	00000004 txIsrCallbackUART3
1a00325c l     O .text	00000048 lpcUarts
10000328 l     O .bss	00000004 rxIsrCallbackUART2
1000032c l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 tp_final.c
100000d0 l     O .bss	00000001 consolePrint
100000d4 l     O .bss	00000230 fs
10000304 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 ff.c
1a0004f0 l     F .text	0000000a ld_word
1a0004fc l     F .text	00000016 ld_dword
1a000514 l     F .text	00000056 get_ldnumber
1a00056c l     F .text	00000054 sync_window
1a0005c0 l     F .text	00000034 move_window
1a0005f4 l     F .text	0000007c check_fs
1a000670 l     F .text	000002d4 find_volume
10000306 l     O .bss	00000002 Fsid
10000308 l     O .bss	00000004 FatFs
00000000 l    df *ABS*	00000000 mmc.c
1a00099c l     F .text	00000004 chk_power
1a0009a0 l     F .text	00000024 SSPSend
1a0009c4 l     F .text	00000018 xmit_spi
1a000a00 l     F .text	0000001c rcvr_spi
1a000a1c l     F .text	00000024 wait_ready
1a000a40 l     F .text	00000018 deselect
1a000a58 l     F .text	00000024 select_
1a000a7c l     F .text	0000007e send_cmd
1a000afc l     F .text	0000005c xmit_datablock
1a000b58 l     F .text	00000064 rcvr_datablock
1000030c l     O .bss	00000001 pv.10205
1000030d l     O .bss	00000001 Timer1
1000030e l     O .bss	00000001 Timer2
1000030f l     O .bss	00000001 CardType
10000000 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001168 l     F .text	00000010 clearInterrupt
1a001178 l     F .text	00000060 serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a003120 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0011fc l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001904 l     F .text	00000002 errorOcurred
1a001908 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a001b24 l     F .text	00000040 Board_LED_Init
1a001b64 l     F .text	0000003c Board_TEC_Init
1a001ba0 l     F .text	0000003c Board_GPIO_Init
1a001bdc l     F .text	00000038 Board_SPI_Init
1a001c14 l     F .text	00000024 Board_I2C_Init
1a001c38 l     F .text	00000030 Board_ADC_Init
1a0032a4 l     O .text	00000012 GpioPorts
1a0032c0 l     O .text	00000008 GpioButtons
1a0032c8 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0032d4 l     O .text	0000000c InitClkStates
1a0032e0 l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001e04 l     F .text	0000002c Chip_UART_GetIndex
1a003378 l     O .text	00000008 UART_BClock
1a003380 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a001fa8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001fbc l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002080 l     F .text	000000a8 pll_calc_divs
1a002128 l     F .text	00000104 pll_get_frac
1a00222c l     F .text	00000048 Chip_Clock_FindBaseClock
1a002498 l     F .text	00000022 Chip_Clock_GetDivRate
10000330 l     O .bss	00000008 audio_usb_pll_freq
1a003394 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003400 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002798 l     F .text	0000001a SSP_Write2BFifo
1a0027b4 l     F .text	00000018 SSP_Write1BFifo
1a0027cc l     F .text	0000002a SSP_Read2BFifo
1a0027f8 l     F .text	0000002a SSP_Read1BFifo
1a002824 l     F .text	00000014 Chip_SSP_GetClockIndex
1a002838 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a003450 l       .ARM.exidx	00000000 __exidx_end
1a003450 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a003448 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 _printf_float
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a003448 l       .bss_RAM5	00000000 __init_array_end
1a003448 l       .bss_RAM5	00000000 __preinit_array_end
10000394 l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a003448 l       .bss_RAM5	00000000 __init_array_start
1a003448 l       .bss_RAM5	00000000 __preinit_array_start
1a0022c0 g     F .text	0000001c Chip_Clock_GetDividerSource
1a002a74 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a001988 g     F .text	00000040 TIMER2_IRQHandler
1a001658 g     F .text	00000014 uartRxRead
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a002aa8 g     F .text	0000029c .hidden __divdi3
1a003110 g     O .text	00000010 CODESD
1a000114 g       .text	00000000 __section_table_start
10000338 g     O .bss	00000012 blt
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a0016fc g     F .text	0000001c uartReadByte
1a0018c4 g     F .text	0000003e delayRead
10000314 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a002060 g     F .text	0000000c Chip_ADC_SetResolution
1000034a g     O .bss	00000001 resp
1a00154c g     F .text	00000030 SysTick_Handler
1a001e84 g     F .text	00000040 Chip_UART_SetBaud
1a001a18 g     F .text	00000008 printString
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
53ff4eb2 g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a001718 g     F .text	0000007c waitForReceiveStringOrTimeout
1a0019c8 g     F .text	00000040 TIMER3_IRQHandler
1a002524 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a000bbc g     F .text	00000158 disk_initialize
1a002a14 g     F .text	00000000 .hidden __aeabi_uldivmod
10000394 g       .noinit	00000000 _noinit
1a0017ec g     F .text	00000018 uartWriteString
10000390 g     O .bss	00000004 SystemCoreClock
1a001e30 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a000194  w    F .text	00000002 UsageFault_Handler
1a0025a0 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a001a08 g     F .text	0000000e printInitUart
10000380 g     O .bss	00000008 tickCounter
1a000d14 g     F .text	00000014 disk_status
1000034c g     O .bss	00000010 buff
1a001d18 g     F .text	0000006c Board_SetupClocking
1a0032bc g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000e5c g     F .text	00000284 disk_ioctl
1a0011e4 g     F .text	0000000a GPIO1_IRQHandler
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a001628 g     F .text	00000018 uartRxReady
1a0002fc g     O .text	00000004 CRP_WORD
1a002fb0 g     F .text	0000004c __libc_init_array
1a002d44 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a001c8c g     F .text	0000003c Board_Init
1a002a10 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a000370 g     F .text	0000008c allConfig
1a002864 g     F .text	000000b0 Chip_SSP_RWFrames_Blocking
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10000394 g       .bss	00000000 _ebss
1a00190c g     F .text	0000003c TIMER0_IRQHandler
1a0014d0 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a001dd4 g     F .text	00000030 Chip_I2C_SetClockRate
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a002274 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000308 g     F .text	0000002c hm10bleTest
1a0001ac g     F .text	0000001a data_init
1a001948 g     F .text	00000040 TIMER1_IRQHandler
1a001db0 g     F .text	00000024 Chip_I2C_Init
1a001804 g     F .text	0000000a UART2_IRQHandler
1a001a20 g     F .text	00000010 printEnter
1a002430 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a003124 g     O .text	00000136 gpioPinsInit
1a0017d0 g     F .text	0000001a uartWriteByte
1a002850 g     F .text	00000012 Chip_SSP_SetClockRate
1a0003fc g     F .text	000000c8 login
1a001474 g     F .text	00000016 gpioToggle
1a0011f0 g     F .text	0000000a GPIO2_IRQHandler
1a002500 g     F .text	00000024 Chip_Clock_GetBaseClock
1a0010e0 g     F .text	0000006c disk_timerproc
100000d0 g       .bss	00000000 _bss
1a00202c g     F .text	00000032 Chip_ADC_SetSampleRate
1a0018a4 g     F .text	00000020 delayInit
1a0009dc g     F .text	00000024 SSPReceive
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a002914 g     F .text	0000003e Chip_SSP_SetBitRate
1a002794 g     F .text	00000002 Chip_GPIO_Init
1a0032b8 g     O .text	00000004 OscRateIn
1a001680 g     F .text	0000007c uartInit
10000394 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000300 g     F .text	00000008 diskTickHook
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001228 g     F .text	0000019c gpioInit
1a002aa4  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a003020 g     O .text	00000010 CODEMAC
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a0022dc g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
10000305 g     O .bss	00000001 data
1a002ffc g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a0004c4 g     F .text	0000002c main
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a00181c g     F .text	00000050 spiInit
1a000198  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a001640 g     F .text	00000018 uartTxReady
1a000944 g     F .text	00000058 f_mount
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a002530 g     F .text	0000003c Chip_Clock_EnableOpts
1a0022f8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a00273c g     F .text	00000058 fpuInit
1a00300c g     F .text	00000014 strcmp
1a0023b0 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001cc8 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a00186c g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0013c4 g     F .text	00000058 gpioWrite
1a001fec g     F .text	00000040 Chip_ADC_Init
1a001ce4 g     F .text	00000034 Board_SetupMuxing
1a001ec4 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a00148c g     F .text	0000000c tickRead
10000388 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000310 g     O .bss	00000004 tickHookFunction
1000035c g     O .bss	00000001 stt
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1000035d g     O .bss	00000001 logok
1a001794 g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a00166c g     F .text	00000014 uartTxWrite
1a000334 g     F .text	0000003a doProgram
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001498 g     F .text	00000020 tickCallbackSet
1a000178 g       .text	00000000 __section_table_end
1a002954 g     F .text	00000038 Chip_SSP_Init
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a001c68 g     F .text	00000024 Board_Debug_Init
100000cc g       .data	00000000 _edata
1a001d90 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a0025ec g     F .text	00000150 Chip_SetupCoreClock
1a0011d8 g     F .text	0000000a GPIO0_IRQHandler
1a000db0 g     F .text	000000ac disk_write
1a000000 g     O .text	00000114 g_pfnVectors
1a00298c g     F .text	00000084 ResetISR
1a00206c g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a002aa4  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a000d28 g     F .text	00000088 disk_read
1a00256c g     F .text	00000034 Chip_Clock_Enable
1a001810 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a002a44 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a00141c g     F .text	00000058 gpioRead
1a001a30 g     F .text	000000f4 boardInit
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a0014b8 g     F .text	00000018 tickPowerSet
1a0024bc g     F .text	00000044 Chip_Clock_SetBaseClock
1a00114c g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
10000360 g     O .bss	00000020 cid
1a001d84 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 8d 29 00 1a 85 01 00 1a 89 01 00 1a     .....)..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a b2 4e ff 53     .............N.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	4d 15 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     M...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 0d 19 00 1a 49 19 00 1a 89 19 00 1a     ........I.......
1a00007c:	c9 19 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 05 18 00 1a     ....y...........
1a0000ac:	11 18 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000bc:	a9 01 00 1a d9 11 00 1a e5 11 00 1a f1 11 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a003450 	.word	0x1a003450
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a003450 	.word	0x1a003450
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003450 	.word	0x1a003450
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003450 	.word	0x1a003450
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003450 	.word	0x1a003450
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	000002c4 	.word	0x000002c4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f001 f9fe 	bl	1a00157c <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <diskTickHook>:
	gpioWrite( LED3, valor );

}

// FUNCION que se ejecuta cada vezque ocurre un Tick
void diskTickHook( void *ptr ){
1a000300:	b508      	push	{r3, lr}
	disk_timerproc();   // Disk timer process
1a000302:	f000 feed 	bl	1a0010e0 <disk_timerproc>
1a000306:	bd08      	pop	{r3, pc}

1a000308 <hm10bleTest>:

/*==================[definiciones de funciones externas]=====================*/


bool_t hm10bleTest ( int32_t uart )
{
1a000308:	b510      	push	{r4, lr}
1a00030a:	b082      	sub	sp, #8
	uartWriteString( uart, "AT\r\n" );
1a00030c:	b2c4      	uxtb	r4, r0
1a00030e:	4620      	mov	r0, r4
1a000310:	4906      	ldr	r1, [pc, #24]	; (1a00032c <hm10bleTest+0x24>)
1a000312:	f001 fa6b 	bl	1a0017ec <uartWriteString>
	return waitForReceiveStringOrTimeoutBlocking( uart,
1a000316:	2232      	movs	r2, #50	; 0x32
1a000318:	2300      	movs	r3, #0
1a00031a:	e9cd 2300 	strd	r2, r3, [sp]
1a00031e:	4620      	mov	r0, r4
1a000320:	4903      	ldr	r1, [pc, #12]	; (1a000330 <hm10bleTest+0x28>)
1a000322:	2204      	movs	r2, #4
1a000324:	f001 fa36 	bl	1a001794 <waitForReceiveStringOrTimeoutBlocking>
			"OK\r\n", strlen("OK\r\n"),
			50 );
}
1a000328:	b002      	add	sp, #8
1a00032a:	bd10      	pop	{r4, pc}
1a00032c:	1a003030 	.word	0x1a003030
1a000330:	1a003038 	.word	0x1a003038

1a000334 <doProgram>:
	delay(500);
	uartWriteString( uart, "AT+HELP\r\n" );
}

void doProgram (void)
{
1a000334:	b508      	push	{r3, lr}
	bool_t valor;
	//Programa a ejecutar si el usuario está autorizado
	valor = !gpioRead( TEC1 );
1a000336:	2024      	movs	r0, #36	; 0x24
1a000338:	f001 f870 	bl	1a00141c <gpioRead>
1a00033c:	fab0 f180 	clz	r1, r0
1a000340:	0949      	lsrs	r1, r1, #5
	gpioWrite( LED1, valor );
1a000342:	202b      	movs	r0, #43	; 0x2b
1a000344:	f001 f83e 	bl	1a0013c4 <gpioWrite>

	valor = !gpioRead( TEC2 );
1a000348:	2025      	movs	r0, #37	; 0x25
1a00034a:	f001 f867 	bl	1a00141c <gpioRead>
1a00034e:	fab0 f180 	clz	r1, r0
1a000352:	0949      	lsrs	r1, r1, #5
	gpioWrite( LED2, valor );
1a000354:	202c      	movs	r0, #44	; 0x2c
1a000356:	f001 f835 	bl	1a0013c4 <gpioWrite>

	valor = !gpioRead( TEC3 );
1a00035a:	2026      	movs	r0, #38	; 0x26
1a00035c:	f001 f85e 	bl	1a00141c <gpioRead>
1a000360:	fab0 f180 	clz	r1, r0
1a000364:	0949      	lsrs	r1, r1, #5
	gpioWrite( LED3, valor );
1a000366:	202d      	movs	r0, #45	; 0x2d
1a000368:	f001 f82c 	bl	1a0013c4 <gpioWrite>
1a00036c:	bd08      	pop	{r3, pc}
1a00036e:	bf00      	nop

1a000370 <allConfig>:
void diskTickHook( void *ptr ){
	disk_timerproc();   // Disk timer process
}

void allConfig(void)
{
1a000370:	b510      	push	{r4, lr}
	// Inicializar UART_USB para conectar a la PC
	debugPrintConfigUart( UART_PC, 9600 );
1a000372:	4c1b      	ldr	r4, [pc, #108]	; (1a0003e0 <allConfig+0x70>)
1a000374:	4620      	mov	r0, r4
1a000376:	2103      	movs	r1, #3
1a000378:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a00037c:	f001 fb44 	bl	1a001a08 <printInitUart>
	debugPrintlnString( "UART_PC configurada." );
1a000380:	7820      	ldrb	r0, [r4, #0]
1a000382:	4918      	ldr	r1, [pc, #96]	; (1a0003e4 <allConfig+0x74>)
1a000384:	f001 fb48 	bl	1a001a18 <printString>
1a000388:	7820      	ldrb	r0, [r4, #0]
1a00038a:	f001 fb49 	bl	1a001a20 <printEnter>

	// Inicializar UART_232 para conectar al modulo bluetooth
	consolePrintConfigUart( UART_BLUETOOTH, 9600 );
1a00038e:	4816      	ldr	r0, [pc, #88]	; (1a0003e8 <allConfig+0x78>)
1a000390:	2105      	movs	r1, #5
1a000392:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a000396:	f001 fb37 	bl	1a001a08 <printInitUart>
	debugPrintlnString( "UART_BLUETOOTH para modulo Bluetooth configurada." );
1a00039a:	7820      	ldrb	r0, [r4, #0]
1a00039c:	4913      	ldr	r1, [pc, #76]	; (1a0003ec <allConfig+0x7c>)
1a00039e:	f001 fb3b 	bl	1a001a18 <printString>
1a0003a2:	7820      	ldrb	r0, [r4, #0]
1a0003a4:	f001 fb3c 	bl	1a001a20 <printEnter>


	uartWriteString( UART_PC, "Testeto si el modulo esta conectado enviando: AT\r\n" );
1a0003a8:	2003      	movs	r0, #3
1a0003aa:	4911      	ldr	r1, [pc, #68]	; (1a0003f0 <allConfig+0x80>)
1a0003ac:	f001 fa1e 	bl	1a0017ec <uartWriteString>
	if( hm10bleTest( UART_BLUETOOTH ) ){
1a0003b0:	2005      	movs	r0, #5
1a0003b2:	f7ff ffa9 	bl	1a000308 <hm10bleTest>
1a0003b6:	b130      	cbz	r0, 1a0003c6 <allConfig+0x56>
		debugPrintlnString( "Modulo conectado correctamente." );
1a0003b8:	7820      	ldrb	r0, [r4, #0]
1a0003ba:	490e      	ldr	r1, [pc, #56]	; (1a0003f4 <allConfig+0x84>)
1a0003bc:	f001 fb2c 	bl	1a001a18 <printString>
1a0003c0:	7820      	ldrb	r0, [r4, #0]
1a0003c2:	f001 fb2d 	bl	1a001a20 <printEnter>
	}

	// SPI configuration
	spiConfig( SPI0 );
1a0003c6:	2000      	movs	r0, #0
1a0003c8:	f001 fa28 	bl	1a00181c <spiInit>


	// Inicializar el conteo de Ticks con resolucion de 10ms,
	// con tickHook diskTickHook
	tickConfig( 10 );
1a0003cc:	200a      	movs	r0, #10
1a0003ce:	2100      	movs	r1, #0
1a0003d0:	f001 f87e 	bl	1a0014d0 <tickInit>
	tickCallbackSet( diskTickHook, NULL );
1a0003d4:	4808      	ldr	r0, [pc, #32]	; (1a0003f8 <allConfig+0x88>)
1a0003d6:	2100      	movs	r1, #0
1a0003d8:	f001 f85e 	bl	1a001498 <tickCallbackSet>
1a0003dc:	bd10      	pop	{r4, pc}
1a0003de:	bf00      	nop
1a0003e0:	10000304 	.word	0x10000304
1a0003e4:	1a00304c 	.word	0x1a00304c
1a0003e8:	100000d0 	.word	0x100000d0
1a0003ec:	1a003064 	.word	0x1a003064
1a0003f0:	1a003098 	.word	0x1a003098
1a0003f4:	1a0030cc 	.word	0x1a0030cc
1a0003f8:	1a000301 	.word	0x1a000301

1a0003fc <login>:

}

bool_t login(void)
{
1a0003fc:	b510      	push	{r4, lr}
	uint8_t i;
	disk_initialize(0);
1a0003fe:	2000      	movs	r0, #0
1a000400:	f000 fbdc 	bl	1a000bbc <disk_initialize>

	// Give a work area to the default drive
	if( f_mount( &fs, "", 0 ) != FR_OK ){
1a000404:	4825      	ldr	r0, [pc, #148]	; (1a00049c <login+0xa0>)
1a000406:	4926      	ldr	r1, [pc, #152]	; (1a0004a0 <login+0xa4>)
1a000408:	2200      	movs	r2, #0
1a00040a:	f000 fa9b 	bl	1a000944 <f_mount>
		// If this fails, it means that the function could
		// not register a file system object.
		// Check whether the SD card is correctly connected
	}
	resp = disk_ioctl(0,12,cid);
1a00040e:	2000      	movs	r0, #0
1a000410:	210c      	movs	r1, #12
1a000412:	4a24      	ldr	r2, [pc, #144]	; (1a0004a4 <login+0xa8>)
1a000414:	f000 fd22 	bl	1a000e5c <disk_ioctl>
1a000418:	b2c4      	uxtb	r4, r0
1a00041a:	4b23      	ldr	r3, [pc, #140]	; (1a0004a8 <login+0xac>)
1a00041c:	701c      	strb	r4, [r3, #0]
	if(resp == 0)
1a00041e:	b9c4      	cbnz	r4, 1a000452 <login+0x56>
	{
		if( strcmp(cid , CODESD ) == 0 )
1a000420:	4820      	ldr	r0, [pc, #128]	; (1a0004a4 <login+0xa8>)
1a000422:	4922      	ldr	r1, [pc, #136]	; (1a0004ac <login+0xb0>)
1a000424:	f002 fdf2 	bl	1a00300c <strcmp>
1a000428:	bbb0      	cbnz	r0, 1a000498 <login+0x9c>
		{
			gpioToggle(LEDR);
1a00042a:	2028      	movs	r0, #40	; 0x28
1a00042c:	f001 f822 	bl	1a001474 <gpioToggle>
			gpioToggle(LEDG);
1a000430:	2029      	movs	r0, #41	; 0x29
1a000432:	f001 f81f 	bl	1a001474 <gpioToggle>
			return TRUE;
1a000436:	2401      	movs	r4, #1
1a000438:	e02e      	b.n	1a000498 <login+0x9c>
	} else
	{
		i = 0;
		while(i < 18)
		{
			if (uartReadByte( UART_BLUETOOTH, &data ))
1a00043a:	2005      	movs	r0, #5
1a00043c:	491c      	ldr	r1, [pc, #112]	; (1a0004b0 <login+0xb4>)
1a00043e:	f001 f95d 	bl	1a0016fc <uartReadByte>
1a000442:	b138      	cbz	r0, 1a000454 <login+0x58>
			{
				blt[i]= data;
1a000444:	4b1a      	ldr	r3, [pc, #104]	; (1a0004b0 <login+0xb4>)
1a000446:	781a      	ldrb	r2, [r3, #0]
1a000448:	4b1a      	ldr	r3, [pc, #104]	; (1a0004b4 <login+0xb8>)
1a00044a:	551a      	strb	r2, [r3, r4]
				i++;
1a00044c:	3401      	adds	r4, #1
1a00044e:	b2e4      	uxtb	r4, r4
1a000450:	e000      	b.n	1a000454 <login+0x58>
1a000452:	2400      	movs	r4, #0

		}
	} else
	{
		i = 0;
		while(i < 18)
1a000454:	2c11      	cmp	r4, #17
1a000456:	d9f0      	bls.n	1a00043a <login+0x3e>
				blt[i]= data;
				i++;
			}
		}

		if( strcmp( blt , CODEMAC ) == 0 )
1a000458:	4816      	ldr	r0, [pc, #88]	; (1a0004b4 <login+0xb8>)
1a00045a:	4917      	ldr	r1, [pc, #92]	; (1a0004b8 <login+0xbc>)
1a00045c:	f002 fdd6 	bl	1a00300c <strcmp>
1a000460:	b980      	cbnz	r0, 1a000484 <login+0x88>
		{
			uartWriteString( UART_BLUETOOTH, "Identificado\r\n" );
1a000462:	2005      	movs	r0, #5
1a000464:	4915      	ldr	r1, [pc, #84]	; (1a0004bc <login+0xc0>)
1a000466:	f001 f9c1 	bl	1a0017ec <uartWriteString>
			delay(1000);
1a00046a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a00046e:	2100      	movs	r1, #0
1a000470:	f001 f9fc 	bl	1a00186c <delay>
			gpioToggle(LEDR);
1a000474:	2028      	movs	r0, #40	; 0x28
1a000476:	f000 fffd 	bl	1a001474 <gpioToggle>
			gpioToggle(LEDG);
1a00047a:	2029      	movs	r0, #41	; 0x29
1a00047c:	f000 fffa 	bl	1a001474 <gpioToggle>
			return TRUE;
1a000480:	2401      	movs	r4, #1
1a000482:	e009      	b.n	1a000498 <login+0x9c>

		} else
		{
			uartWriteString( UART_BLUETOOTH, "No Identificado\r\n" );
1a000484:	2005      	movs	r0, #5
1a000486:	490e      	ldr	r1, [pc, #56]	; (1a0004c0 <login+0xc4>)
1a000488:	f001 f9b0 	bl	1a0017ec <uartWriteString>
			delay(1000);
1a00048c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000490:	2100      	movs	r1, #0
1a000492:	f001 f9eb 	bl	1a00186c <delay>
			return false;
1a000496:	2400      	movs	r4, #0




	return false;
}
1a000498:	4620      	mov	r0, r4
1a00049a:	bd10      	pop	{r4, pc}
1a00049c:	100000d4 	.word	0x100000d4
1a0004a0:	1a00303c 	.word	0x1a00303c
1a0004a4:	10000360 	.word	0x10000360
1a0004a8:	1000034a 	.word	0x1000034a
1a0004ac:	1a003110 	.word	0x1a003110
1a0004b0:	10000305 	.word	0x10000305
1a0004b4:	10000338 	.word	0x10000338
1a0004b8:	1a003020 	.word	0x1a003020
1a0004bc:	1a0030ec 	.word	0x1a0030ec
1a0004c0:	1a0030fc 	.word	0x1a0030fc

1a0004c4 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a0004c4:	b508      	push	{r3, lr}
	// ---------- CONFIGURACIONES ------------------------------

	// Inicializar y configurar la plataforma
	boardConfig();
1a0004c6:	f001 fab3 	bl	1a001a30 <boardInit>
	allConfig();
1a0004ca:	f7ff ff51 	bl	1a000370 <allConfig>

	gpioToggle(LEDR);
1a0004ce:	2028      	movs	r0, #40	; 0x28
1a0004d0:	f000 ffd0 	bl	1a001474 <gpioToggle>
	while(!logok)
1a0004d4:	e003      	b.n	1a0004de <main+0x1a>
	{
		logok = login();
1a0004d6:	f7ff ff91 	bl	1a0003fc <login>
1a0004da:	4b04      	ldr	r3, [pc, #16]	; (1a0004ec <main+0x28>)
1a0004dc:	7018      	strb	r0, [r3, #0]
	// Inicializar y configurar la plataforma
	boardConfig();
	allConfig();

	gpioToggle(LEDR);
	while(!logok)
1a0004de:	4b03      	ldr	r3, [pc, #12]	; (1a0004ec <main+0x28>)
1a0004e0:	781b      	ldrb	r3, [r3, #0]
1a0004e2:	2b00      	cmp	r3, #0
1a0004e4:	d0f7      	beq.n	1a0004d6 <main+0x12>
		logok = login();
	}

	while (TRUE)
	{
		doProgram();
1a0004e6:	f7ff ff25 	bl	1a000334 <doProgram>
	}
1a0004ea:	e7fc      	b.n	1a0004e6 <main+0x22>
1a0004ec:	1000035d 	.word	0x1000035d

1a0004f0 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a0004f0:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a0004f2:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a0004f4:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a0004f8:	4770      	bx	lr
1a0004fa:	bf00      	nop

1a0004fc <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a0004fc:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a0004fe:	7883      	ldrb	r3, [r0, #2]
1a000500:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a000504:	7843      	ldrb	r3, [r0, #1]
1a000506:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a00050a:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a00050c:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a000510:	4770      	bx	lr
1a000512:	bf00      	nop

1a000514 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
1a000514:	6801      	ldr	r1, [r0, #0]
1a000516:	b921      	cbnz	r1, 1a000522 <get_ldnumber+0xe>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a000518:	f04f 33ff 	mov.w	r3, #4294967295
1a00051c:	e01f      	b.n	1a00055e <get_ldnumber+0x4a>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
1a00051e:	3201      	adds	r2, #1
1a000520:	e000      	b.n	1a000524 <get_ldnumber+0x10>
1a000522:	460a      	mov	r2, r1
1a000524:	7813      	ldrb	r3, [r2, #0]
1a000526:	2b20      	cmp	r3, #32
1a000528:	d901      	bls.n	1a00052e <get_ldnumber+0x1a>
1a00052a:	2b3a      	cmp	r3, #58	; 0x3a
1a00052c:	d1f7      	bne.n	1a00051e <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
1a00052e:	2b3a      	cmp	r3, #58	; 0x3a
1a000530:	d114      	bne.n	1a00055c <get_ldnumber+0x48>

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
1a000532:	b410      	push	{r4}

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
1a000534:	1c4c      	adds	r4, r1, #1
1a000536:	780b      	ldrb	r3, [r1, #0]
1a000538:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
1a00053a:	2b09      	cmp	r3, #9
1a00053c:	d805      	bhi.n	1a00054a <get_ldnumber+0x36>
1a00053e:	4294      	cmp	r4, r2
1a000540:	d106      	bne.n	1a000550 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
1a000542:	b943      	cbnz	r3, 1a000556 <get_ldnumber+0x42>
					vol = (int)i;
					*path = ++tt;
1a000544:	3201      	adds	r2, #1
1a000546:	6002      	str	r2, [r0, #0]
1a000548:	e00b      	b.n	1a000562 <get_ldnumber+0x4e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a00054a:	f04f 33ff 	mov.w	r3, #4294967295
1a00054e:	e008      	b.n	1a000562 <get_ldnumber+0x4e>
1a000550:	f04f 33ff 	mov.w	r3, #4294967295
1a000554:	e005      	b.n	1a000562 <get_ldnumber+0x4e>
1a000556:	f04f 33ff 	mov.w	r3, #4294967295
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
1a00055a:	e002      	b.n	1a000562 <get_ldnumber+0x4e>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
1a00055c:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
1a00055e:	4618      	mov	r0, r3
1a000560:	4770      	bx	lr
1a000562:	4618      	mov	r0, r3
1a000564:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000568:	4770      	bx	lr
1a00056a:	bf00      	nop

1a00056c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
1a00056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
1a00056e:	78c3      	ldrb	r3, [r0, #3]
1a000570:	b303      	cbz	r3, 1a0005b4 <sync_window+0x48>
1a000572:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
1a000574:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
1a000576:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a00057a:	7840      	ldrb	r0, [r0, #1]
1a00057c:	4639      	mov	r1, r7
1a00057e:	4632      	mov	r2, r6
1a000580:	2301      	movs	r3, #1
1a000582:	f000 fc15 	bl	1a000db0 <disk_write>
1a000586:	b9b8      	cbnz	r0, 1a0005b8 <sync_window+0x4c>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
1a000588:	2300      	movs	r3, #0
1a00058a:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
1a00058c:	6a23      	ldr	r3, [r4, #32]
1a00058e:	1af3      	subs	r3, r6, r3
1a000590:	69a2      	ldr	r2, [r4, #24]
1a000592:	4293      	cmp	r3, r2
1a000594:	d212      	bcs.n	1a0005bc <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a000596:	78a5      	ldrb	r5, [r4, #2]
1a000598:	e008      	b.n	1a0005ac <sync_window+0x40>
					wsect += fs->fsize;
1a00059a:	69a3      	ldr	r3, [r4, #24]
1a00059c:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
1a00059e:	7860      	ldrb	r0, [r4, #1]
1a0005a0:	4639      	mov	r1, r7
1a0005a2:	4632      	mov	r2, r6
1a0005a4:	2301      	movs	r3, #1
1a0005a6:	f000 fc03 	bl	1a000db0 <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a0005aa:	3d01      	subs	r5, #1
1a0005ac:	2d01      	cmp	r5, #1
1a0005ae:	d8f4      	bhi.n	1a00059a <sync_window+0x2e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a0005b0:	2000      	movs	r0, #0
1a0005b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0005b4:	2000      	movs	r0, #0
1a0005b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
1a0005b8:	2001      	movs	r0, #1
1a0005ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a0005bc:	2000      	movs	r0, #0
				}
			}
		}
	}
	return res;
}
1a0005be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0005c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
1a0005c0:	b570      	push	{r4, r5, r6, lr}
1a0005c2:	4604      	mov	r4, r0
1a0005c4:	460d      	mov	r5, r1
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
1a0005c6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1a0005c8:	428b      	cmp	r3, r1
1a0005ca:	d010      	beq.n	1a0005ee <move_window+0x2e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
1a0005cc:	f7ff ffce 	bl	1a00056c <sync_window>
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
1a0005d0:	4606      	mov	r6, r0
1a0005d2:	b968      	cbnz	r0, 1a0005f0 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
1a0005d4:	7860      	ldrb	r0, [r4, #1]
1a0005d6:	f104 0130 	add.w	r1, r4, #48	; 0x30
1a0005da:	462a      	mov	r2, r5
1a0005dc:	2301      	movs	r3, #1
1a0005de:	f000 fba3 	bl	1a000d28 <disk_read>
1a0005e2:	b110      	cbz	r0, 1a0005ea <move_window+0x2a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
1a0005e4:	2601      	movs	r6, #1
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
1a0005e6:	f04f 35ff 	mov.w	r5, #4294967295
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
1a0005ea:	62e5      	str	r5, [r4, #44]	; 0x2c
1a0005ec:	e000      	b.n	1a0005f0 <move_window+0x30>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
1a0005ee:	2600      	movs	r6, #0
			}
			fs->winsect = sector;
		}
	}
	return res;
}
1a0005f0:	4630      	mov	r0, r6
1a0005f2:	bd70      	pop	{r4, r5, r6, pc}

1a0005f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
1a0005f4:	b510      	push	{r4, lr}
1a0005f6:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a0005f8:	2300      	movs	r3, #0
1a0005fa:	70c3      	strb	r3, [r0, #3]
1a0005fc:	f04f 33ff 	mov.w	r3, #4294967295
1a000600:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000602:	f7ff ffdd 	bl	1a0005c0 <move_window>
1a000606:	bb18      	cbnz	r0, 1a000650 <check_fs+0x5c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a000608:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a00060c:	f7ff ff70 	bl	1a0004f0 <ld_word>
1a000610:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000614:	4298      	cmp	r0, r3
1a000616:	d11d      	bne.n	1a000654 <check_fs+0x60>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
1a000618:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a00061c:	2be9      	cmp	r3, #233	; 0xe9
1a00061e:	d005      	beq.n	1a00062c <check_fs+0x38>
1a000620:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000622:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
1a000626:	4a0f      	ldr	r2, [pc, #60]	; (1a000664 <check_fs+0x70>)
1a000628:	4293      	cmp	r3, r2
1a00062a:	d115      	bne.n	1a000658 <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a00062c:	f104 0066 	add.w	r0, r4, #102	; 0x66
1a000630:	f7ff ff64 	bl	1a0004fc <ld_dword>
1a000634:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
1a000638:	4b0b      	ldr	r3, [pc, #44]	; (1a000668 <check_fs+0x74>)
1a00063a:	4298      	cmp	r0, r3
1a00063c:	d00e      	beq.n	1a00065c <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a00063e:	f104 0082 	add.w	r0, r4, #130	; 0x82
1a000642:	f7ff ff5b 	bl	1a0004fc <ld_dword>
1a000646:	4b09      	ldr	r3, [pc, #36]	; (1a00066c <check_fs+0x78>)
1a000648:	4298      	cmp	r0, r3
1a00064a:	d009      	beq.n	1a000660 <check_fs+0x6c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a00064c:	2002      	movs	r0, #2
1a00064e:	bd10      	pop	{r4, pc}
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000650:	2004      	movs	r0, #4
1a000652:	bd10      	pop	{r4, pc}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a000654:	2003      	movs	r0, #3
1a000656:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a000658:	2002      	movs	r0, #2
1a00065a:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a00065c:	2000      	movs	r0, #0
1a00065e:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a000660:	2000      	movs	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
1a000662:	bd10      	pop	{r4, pc}
1a000664:	009000eb 	.word	0x009000eb
1a000668:	00544146 	.word	0x00544146
1a00066c:	33544146 	.word	0x33544146

1a000670 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
1a000670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000674:	b084      	sub	sp, #16
1a000676:	460e      	mov	r6, r1
1a000678:	4617      	mov	r7, r2
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
1a00067a:	2300      	movs	r3, #0
1a00067c:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a00067e:	f7ff ff49 	bl	1a000514 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a000682:	1e05      	subs	r5, r0, #0
1a000684:	f2c0 812b 	blt.w	1a0008de <find_volume+0x26e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
1a000688:	4baa      	ldr	r3, [pc, #680]	; (1a000934 <find_volume+0x2c4>)
1a00068a:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a00068e:	2c00      	cmp	r4, #0
1a000690:	f000 8127 	beq.w	1a0008e2 <find_volume+0x272>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
1a000694:	6034      	str	r4, [r6, #0]

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
1a000696:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
1a00069a:	7823      	ldrb	r3, [r4, #0]
1a00069c:	b173      	cbz	r3, 1a0006bc <find_volume+0x4c>
		stat = disk_status(fs->drv);
1a00069e:	7860      	ldrb	r0, [r4, #1]
1a0006a0:	f000 fb38 	bl	1a000d14 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a0006a4:	f010 0f01 	tst.w	r0, #1
1a0006a8:	d108      	bne.n	1a0006bc <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a0006aa:	2f00      	cmp	r7, #0
1a0006ac:	f000 811b 	beq.w	1a0008e6 <find_volume+0x276>
1a0006b0:	f010 0f04 	tst.w	r0, #4
1a0006b4:	f040 8119 	bne.w	1a0008ea <find_volume+0x27a>
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a0006b8:	2000      	movs	r0, #0
1a0006ba:	e137      	b.n	1a00092c <find_volume+0x2bc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
1a0006bc:	2300      	movs	r3, #0
1a0006be:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a0006c0:	b2e8      	uxtb	r0, r5
1a0006c2:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
1a0006c4:	f000 fa7a 	bl	1a000bbc <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a0006c8:	f010 0f01 	tst.w	r0, #1
1a0006cc:	f040 810f 	bne.w	1a0008ee <find_volume+0x27e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a0006d0:	b11f      	cbz	r7, 1a0006da <find_volume+0x6a>
1a0006d2:	f010 0f04 	tst.w	r0, #4
1a0006d6:	f040 810c 	bne.w	1a0008f2 <find_volume+0x282>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a0006da:	4620      	mov	r0, r4
1a0006dc:	2100      	movs	r1, #0
1a0006de:	f7ff ff89 	bl	1a0005f4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a0006e2:	2802      	cmp	r0, #2
1a0006e4:	d014      	beq.n	1a000710 <find_volume+0xa0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
1a0006e6:	2600      	movs	r6, #0
1a0006e8:	e027      	b.n	1a00073a <find_volume+0xca>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a0006ea:	eb04 1005 	add.w	r0, r4, r5, lsl #4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a0006ee:	f890 31f2 	ldrb.w	r3, [r0, #498]	; 0x1f2
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a0006f2:	f500 70f7 	add.w	r0, r0, #494	; 0x1ee
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a0006f6:	b11b      	cbz	r3, 1a000700 <find_volume+0x90>
1a0006f8:	3008      	adds	r0, #8
1a0006fa:	f7ff feff 	bl	1a0004fc <ld_dword>
1a0006fe:	e000      	b.n	1a000702 <find_volume+0x92>
1a000700:	2000      	movs	r0, #0
1a000702:	ab04      	add	r3, sp, #16
1a000704:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000708:	f843 0c10 	str.w	r0, [r3, #-16]
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
1a00070c:	3501      	adds	r5, #1
1a00070e:	e000      	b.n	1a000712 <find_volume+0xa2>
1a000710:	2500      	movs	r5, #0
1a000712:	2d03      	cmp	r5, #3
1a000714:	d9e9      	bls.n	1a0006ea <find_volume+0x7a>
1a000716:	2500      	movs	r5, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
1a000718:	ab04      	add	r3, sp, #16
1a00071a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00071e:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000722:	b126      	cbz	r6, 1a00072e <find_volume+0xbe>
1a000724:	4620      	mov	r0, r4
1a000726:	4631      	mov	r1, r6
1a000728:	f7ff ff64 	bl	1a0005f4 <check_fs>
1a00072c:	e000      	b.n	1a000730 <find_volume+0xc0>
1a00072e:	2003      	movs	r0, #3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
1a000730:	2801      	cmp	r0, #1
1a000732:	d902      	bls.n	1a00073a <find_volume+0xca>
1a000734:	3501      	adds	r5, #1
1a000736:	2d03      	cmp	r5, #3
1a000738:	d9ee      	bls.n	1a000718 <find_volume+0xa8>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00073a:	2804      	cmp	r0, #4
1a00073c:	f000 80db 	beq.w	1a0008f6 <find_volume+0x286>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a000740:	2801      	cmp	r0, #1
1a000742:	f200 80da 	bhi.w	1a0008fa <find_volume+0x28a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000746:	f104 003b 	add.w	r0, r4, #59	; 0x3b
1a00074a:	f7ff fed1 	bl	1a0004f0 <ld_word>
1a00074e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a000752:	f040 80d4 	bne.w	1a0008fe <find_volume+0x28e>

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
1a000756:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a00075a:	f7ff fec9 	bl	1a0004f0 <ld_word>
1a00075e:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a000760:	b920      	cbnz	r0, 1a00076c <find_volume+0xfc>
1a000762:	f104 0054 	add.w	r0, r4, #84	; 0x54
1a000766:	f7ff fec9 	bl	1a0004fc <ld_dword>
1a00076a:	4680      	mov	r8, r0
		fs->fsize = fasize;
1a00076c:	f8c4 8018 	str.w	r8, [r4, #24]

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
1a000770:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
1a000774:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000778:	f109 33ff 	add.w	r3, r9, #4294967295
1a00077c:	b2db      	uxtb	r3, r3
1a00077e:	2b01      	cmp	r3, #1
1a000780:	f200 80bf 	bhi.w	1a000902 <find_volume+0x292>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
1a000784:	fb08 f909 	mul.w	r9, r8, r9

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
1a000788:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
1a00078c:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a00078e:	2d00      	cmp	r5, #0
1a000790:	f000 80b9 	beq.w	1a000906 <find_volume+0x296>
1a000794:	1e6b      	subs	r3, r5, #1
1a000796:	421d      	tst	r5, r3
1a000798:	f040 80b7 	bne.w	1a00090a <find_volume+0x29a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a00079c:	f104 0041 	add.w	r0, r4, #65	; 0x41
1a0007a0:	f7ff fea6 	bl	1a0004f0 <ld_word>
1a0007a4:	4682      	mov	sl, r0
1a0007a6:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a0007a8:	f010 0f0f 	tst.w	r0, #15
1a0007ac:	f040 80af 	bne.w	1a00090e <find_volume+0x29e>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
1a0007b0:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a0007b4:	f7ff fe9c 	bl	1a0004f0 <ld_word>
1a0007b8:	4607      	mov	r7, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a0007ba:	b920      	cbnz	r0, 1a0007c6 <find_volume+0x156>
1a0007bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a0007c0:	f7ff fe9c 	bl	1a0004fc <ld_dword>
1a0007c4:	4607      	mov	r7, r0

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
1a0007c6:	f104 003e 	add.w	r0, r4, #62	; 0x3e
1a0007ca:	f7ff fe91 	bl	1a0004f0 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a0007ce:	4603      	mov	r3, r0
1a0007d0:	2800      	cmp	r0, #0
1a0007d2:	f000 809e 	beq.w	1a000912 <find_volume+0x2a2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a0007d6:	eb00 0209 	add.w	r2, r0, r9
1a0007da:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a0007de:	4297      	cmp	r7, r2
1a0007e0:	f0c0 8099 	bcc.w	1a000916 <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
1a0007e4:	1abf      	subs	r7, r7, r2
1a0007e6:	fbb7 f5f5 	udiv	r5, r7, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a0007ea:	2d00      	cmp	r5, #0
1a0007ec:	f000 8095 	beq.w	1a00091a <find_volume+0x2aa>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a0007f0:	f64f 71f5 	movw	r1, #65525	; 0xfff5
1a0007f4:	428d      	cmp	r5, r1
1a0007f6:	d901      	bls.n	1a0007fc <find_volume+0x18c>
		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
1a0007f8:	2703      	movs	r7, #3
1a0007fa:	e000      	b.n	1a0007fe <find_volume+0x18e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a0007fc:	2702      	movs	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a0007fe:	f640 71f5 	movw	r1, #4085	; 0xff5
1a000802:	428d      	cmp	r5, r1
1a000804:	d800      	bhi.n	1a000808 <find_volume+0x198>
1a000806:	2701      	movs	r7, #1

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
1a000808:	3502      	adds	r5, #2
1a00080a:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
1a00080c:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
1a00080e:	4433      	add	r3, r6
1a000810:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
1a000812:	4432      	add	r2, r6
1a000814:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
1a000816:	2f03      	cmp	r7, #3
1a000818:	d10f      	bne.n	1a00083a <find_volume+0x1ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a00081a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
1a00081e:	f7ff fe67 	bl	1a0004f0 <ld_word>
1a000822:	2800      	cmp	r0, #0
1a000824:	d17b      	bne.n	1a00091e <find_volume+0x2ae>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000826:	f1ba 0f00 	cmp.w	sl, #0
1a00082a:	d17a      	bne.n	1a000922 <find_volume+0x2b2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a00082c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a000830:	f7ff fe64 	bl	1a0004fc <ld_dword>
1a000834:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
1a000836:	00ad      	lsls	r5, r5, #2
1a000838:	e00e      	b.n	1a000858 <find_volume+0x1e8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a00083a:	f1ba 0f00 	cmp.w	sl, #0
1a00083e:	d072      	beq.n	1a000926 <find_volume+0x2b6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
1a000840:	444b      	add	r3, r9
1a000842:	6263      	str	r3, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a000844:	2f02      	cmp	r7, #2
1a000846:	d101      	bne.n	1a00084c <find_volume+0x1dc>
1a000848:	006d      	lsls	r5, r5, #1
1a00084a:	e005      	b.n	1a000858 <find_volume+0x1e8>
1a00084c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a000850:	f005 0501 	and.w	r5, r5, #1
1a000854:	eb05 0553 	add.w	r5, r5, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a000858:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
1a00085c:	ebb8 2f55 	cmp.w	r8, r5, lsr #9
1a000860:	d363      	bcc.n	1a00092a <find_volume+0x2ba>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a000862:	f04f 33ff 	mov.w	r3, #4294967295
1a000866:	6123      	str	r3, [r4, #16]
1a000868:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
1a00086a:	2380      	movs	r3, #128	; 0x80
1a00086c:	7123      	strb	r3, [r4, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
1a00086e:	2f03      	cmp	r7, #3
1a000870:	d12c      	bne.n	1a0008cc <find_volume+0x25c>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a000872:	f104 0060 	add.w	r0, r4, #96	; 0x60
1a000876:	f7ff fe3b 	bl	1a0004f0 <ld_word>
1a00087a:	2801      	cmp	r0, #1
1a00087c:	d126      	bne.n	1a0008cc <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
1a00087e:	4620      	mov	r0, r4
1a000880:	1c71      	adds	r1, r6, #1
1a000882:	f7ff fe9d 	bl	1a0005c0 <move_window>
1a000886:	bb08      	cbnz	r0, 1a0008cc <find_volume+0x25c>
		{
			fs->fsi_flag = 0;
1a000888:	2300      	movs	r3, #0
1a00088a:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
1a00088c:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000890:	f7ff fe2e 	bl	1a0004f0 <ld_word>
1a000894:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000898:	4298      	cmp	r0, r3
1a00089a:	d117      	bne.n	1a0008cc <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a00089c:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a0008a0:	f7ff fe2c 	bl	1a0004fc <ld_dword>
1a0008a4:	4b24      	ldr	r3, [pc, #144]	; (1a000938 <find_volume+0x2c8>)
1a0008a6:	4298      	cmp	r0, r3
1a0008a8:	d110      	bne.n	1a0008cc <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a0008aa:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a0008ae:	f7ff fe25 	bl	1a0004fc <ld_dword>
1a0008b2:	4b22      	ldr	r3, [pc, #136]	; (1a00093c <find_volume+0x2cc>)
1a0008b4:	4298      	cmp	r0, r3
1a0008b6:	d109      	bne.n	1a0008cc <find_volume+0x25c>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a0008b8:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a0008bc:	f7ff fe1e 	bl	1a0004fc <ld_dword>
1a0008c0:	6120      	str	r0, [r4, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a0008c2:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a0008c6:	f7ff fe19 	bl	1a0004fc <ld_dword>
1a0008ca:	60e0      	str	r0, [r4, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
1a0008cc:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
1a0008ce:	4a1c      	ldr	r2, [pc, #112]	; (1a000940 <find_volume+0x2d0>)
1a0008d0:	8813      	ldrh	r3, [r2, #0]
1a0008d2:	3301      	adds	r3, #1
1a0008d4:	b29b      	uxth	r3, r3
1a0008d6:	8013      	strh	r3, [r2, #0]
1a0008d8:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
1a0008da:	2000      	movs	r0, #0
1a0008dc:	e026      	b.n	1a00092c <find_volume+0x2bc>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
1a0008de:	200b      	movs	r0, #11
1a0008e0:	e024      	b.n	1a00092c <find_volume+0x2bc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a0008e2:	200c      	movs	r0, #12
1a0008e4:	e022      	b.n	1a00092c <find_volume+0x2bc>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a0008e6:	2000      	movs	r0, #0
1a0008e8:	e020      	b.n	1a00092c <find_volume+0x2bc>
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
1a0008ea:	200a      	movs	r0, #10
1a0008ec:	e01e      	b.n	1a00092c <find_volume+0x2bc>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a0008ee:	2003      	movs	r0, #3
1a0008f0:	e01c      	b.n	1a00092c <find_volume+0x2bc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
1a0008f2:	200a      	movs	r0, #10
1a0008f4:	e01a      	b.n	1a00092c <find_volume+0x2bc>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a0008f6:	2001      	movs	r0, #1
1a0008f8:	e018      	b.n	1a00092c <find_volume+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a0008fa:	200d      	movs	r0, #13
1a0008fc:	e016      	b.n	1a00092c <find_volume+0x2bc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a0008fe:	200d      	movs	r0, #13
1a000900:	e014      	b.n	1a00092c <find_volume+0x2bc>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000902:	200d      	movs	r0, #13
1a000904:	e012      	b.n	1a00092c <find_volume+0x2bc>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000906:	200d      	movs	r0, #13
1a000908:	e010      	b.n	1a00092c <find_volume+0x2bc>
1a00090a:	200d      	movs	r0, #13
1a00090c:	e00e      	b.n	1a00092c <find_volume+0x2bc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a00090e:	200d      	movs	r0, #13
1a000910:	e00c      	b.n	1a00092c <find_volume+0x2bc>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000912:	200d      	movs	r0, #13
1a000914:	e00a      	b.n	1a00092c <find_volume+0x2bc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000916:	200d      	movs	r0, #13
1a000918:	e008      	b.n	1a00092c <find_volume+0x2bc>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a00091a:	200d      	movs	r0, #13
1a00091c:	e006      	b.n	1a00092c <find_volume+0x2bc>
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a00091e:	200d      	movs	r0, #13
1a000920:	e004      	b.n	1a00092c <find_volume+0x2bc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000922:	200d      	movs	r0, #13
1a000924:	e002      	b.n	1a00092c <find_volume+0x2bc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a000926:	200d      	movs	r0, #13
1a000928:	e000      	b.n	1a00092c <find_volume+0x2bc>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00092a:	200d      	movs	r0, #13
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
1a00092c:	b004      	add	sp, #16
1a00092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000932:	bf00      	nop
1a000934:	10000308 	.word	0x10000308
1a000938:	41615252 	.word	0x41615252
1a00093c:	61417272 	.word	0x61417272
1a000940:	10000306 	.word	0x10000306

1a000944 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a000944:	b510      	push	{r4, lr}
1a000946:	b084      	sub	sp, #16
1a000948:	9001      	str	r0, [sp, #4]
1a00094a:	9100      	str	r1, [sp, #0]
1a00094c:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a00094e:	a804      	add	r0, sp, #16
1a000950:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
1a000954:	f7ff fdde 	bl	1a000514 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a000958:	2800      	cmp	r0, #0
1a00095a:	db16      	blt.n	1a00098a <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a00095c:	4b0e      	ldr	r3, [pc, #56]	; (1a000998 <f_mount+0x54>)
1a00095e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a000962:	b10b      	cbz	r3, 1a000968 <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a000964:	2200      	movs	r2, #0
1a000966:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a000968:	9b01      	ldr	r3, [sp, #4]
1a00096a:	b10b      	cbz	r3, 1a000970 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a00096c:	2200      	movs	r2, #0
1a00096e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a000970:	9b01      	ldr	r3, [sp, #4]
1a000972:	4a09      	ldr	r2, [pc, #36]	; (1a000998 <f_mount+0x54>)
1a000974:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a000978:	b14b      	cbz	r3, 1a00098e <f_mount+0x4a>
1a00097a:	2c01      	cmp	r4, #1
1a00097c:	d109      	bne.n	1a000992 <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a00097e:	4668      	mov	r0, sp
1a000980:	a901      	add	r1, sp, #4
1a000982:	2200      	movs	r2, #0
1a000984:	f7ff fe74 	bl	1a000670 <find_volume>
	LEAVE_FF(fs, res);
1a000988:	e004      	b.n	1a000994 <f_mount+0x50>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
1a00098a:	200b      	movs	r0, #11
1a00098c:	e002      	b.n	1a000994 <f_mount+0x50>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a00098e:	2000      	movs	r0, #0
1a000990:	e000      	b.n	1a000994 <f_mount+0x50>
1a000992:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a000994:	b004      	add	sp, #16
1a000996:	bd10      	pop	{r4, pc}
1a000998:	10000308 	.word	0x10000308

1a00099c <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a00099c:	2001      	movs	r0, #1
1a00099e:	4770      	bx	lr

1a0009a0 <SSPSend>:

static
BYTE CardType;			/* Card type flags */

static void SSPSend(uint8_t *buf, uint32_t Length)
{
1a0009a0:	b500      	push	{lr}
1a0009a2:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = buf;
1a0009a4:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a0009a6:	2300      	movs	r3, #0
1a0009a8:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a0009aa:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a0009ac:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a0009ae:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a0009b0:	4803      	ldr	r0, [pc, #12]	; (1a0009c0 <SSPSend+0x20>)
1a0009b2:	a901      	add	r1, sp, #4
1a0009b4:	f001 ff56 	bl	1a002864 <Chip_SSP_RWFrames_Blocking>
}
1a0009b8:	b007      	add	sp, #28
1a0009ba:	f85d fb04 	ldr.w	pc, [sp], #4
1a0009be:	bf00      	nop
1a0009c0:	400c5000 	.word	0x400c5000

1a0009c4 <xmit_spi>:
/* Transmit a byte to MMC via SPI  (Platform dependent)                  */
/*-----------------------------------------------------------------------*/

//#define xmit_spi(dat) (SSPSend((uint8_t*)&(dat), 1))
static void xmit_spi(BYTE dat)
{
1a0009c4:	b500      	push	{lr}
1a0009c6:	b083      	sub	sp, #12
1a0009c8:	ab02      	add	r3, sp, #8
1a0009ca:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a0009ce:	4618      	mov	r0, r3
1a0009d0:	2101      	movs	r1, #1
1a0009d2:	f7ff ffe5 	bl	1a0009a0 <SSPSend>
}
1a0009d6:	b003      	add	sp, #12
1a0009d8:	f85d fb04 	ldr.w	pc, [sp], #4

1a0009dc <SSPReceive>:

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
}

void SSPReceive( uint8_t *buf, uint32_t Length )
{
1a0009dc:	b500      	push	{lr}
1a0009de:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = NULL;
1a0009e0:	2300      	movs	r3, #0
1a0009e2:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a0009e4:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a0009e6:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a0009e8:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a0009ea:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a0009ec:	4803      	ldr	r0, [pc, #12]	; (1a0009fc <SSPReceive+0x20>)
1a0009ee:	a901      	add	r1, sp, #4
1a0009f0:	f001 ff38 	bl	1a002864 <Chip_SSP_RWFrames_Blocking>
}
1a0009f4:	b007      	add	sp, #28
1a0009f6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0009fa:	bf00      	nop
1a0009fc:	400c5000 	.word	0x400c5000

1a000a00 <rcvr_spi>:
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
1a000a00:	b500      	push	{lr}
1a000a02:	b083      	sub	sp, #12
    BYTE data = 0;
1a000a04:	a802      	add	r0, sp, #8
1a000a06:	2300      	movs	r3, #0
1a000a08:	f800 3d01 	strb.w	r3, [r0, #-1]!

    SSPReceive(&data, 1);
1a000a0c:	2101      	movs	r1, #1
1a000a0e:	f7ff ffe5 	bl	1a0009dc <SSPReceive>

    return data;
}
1a000a12:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a000a16:	b003      	add	sp, #12
1a000a18:	f85d fb04 	ldr.w	pc, [sp], #4

1a000a1c <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
1a000a1c:	b508      	push	{r3, lr}
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a000a1e:	2232      	movs	r2, #50	; 0x32
1a000a20:	4b06      	ldr	r3, [pc, #24]	; (1a000a3c <wait_ready+0x20>)
1a000a22:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a000a24:	f7ff ffec 	bl	1a000a00 <rcvr_spi>
	do
		res = rcvr_spi();
1a000a28:	f7ff ffea 	bl	1a000a00 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a000a2c:	28ff      	cmp	r0, #255	; 0xff
1a000a2e:	d004      	beq.n	1a000a3a <wait_ready+0x1e>
1a000a30:	4b02      	ldr	r3, [pc, #8]	; (1a000a3c <wait_ready+0x20>)
1a000a32:	781b      	ldrb	r3, [r3, #0]
1a000a34:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000a38:	d1f6      	bne.n	1a000a28 <wait_ready+0xc>

	return res;
}
1a000a3a:	bd08      	pop	{r3, pc}
1a000a3c:	1000030e 	.word	0x1000030e

1a000a40 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
1a000a40:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a000a42:	2101      	movs	r1, #1
1a000a44:	f242 230c 	movw	r3, #8716	; 0x220c
1a000a48:	4a02      	ldr	r2, [pc, #8]	; (1a000a54 <deselect+0x14>)
1a000a4a:	50d1      	str	r1, [r2, r3]
	CS_HIGH();
	rcvr_spi();
1a000a4c:	f7ff ffd8 	bl	1a000a00 <rcvr_spi>
1a000a50:	bd08      	pop	{r3, pc}
1a000a52:	bf00      	nop
1a000a54:	400f4000 	.word	0x400f4000

1a000a58 <select_>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select_ (void)	/* TRUE:Successful, FALSE:Timeout */
{
1a000a58:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a000a5a:	2101      	movs	r1, #1
1a000a5c:	f242 238c 	movw	r3, #8844	; 0x228c
1a000a60:	4a05      	ldr	r2, [pc, #20]	; (1a000a78 <select_+0x20>)
1a000a62:	50d1      	str	r1, [r2, r3]
	CS_LOW();
	if (wait_ready() != 0xFF) {
1a000a64:	f7ff ffda 	bl	1a000a1c <wait_ready>
1a000a68:	28ff      	cmp	r0, #255	; 0xff
1a000a6a:	d003      	beq.n	1a000a74 <select_+0x1c>
		deselect();
1a000a6c:	f7ff ffe8 	bl	1a000a40 <deselect>
		return FALSE;
1a000a70:	2000      	movs	r0, #0
1a000a72:	bd08      	pop	{r3, pc}
	}
	return TRUE;
1a000a74:	2001      	movs	r0, #1
}
1a000a76:	bd08      	pop	{r3, pc}
1a000a78:	400f4000 	.word	0x400f4000

1a000a7c <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a000a7c:	b538      	push	{r3, r4, r5, lr}
1a000a7e:	4604      	mov	r4, r0
1a000a80:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a000a82:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000a86:	d007      	beq.n	1a000a98 <send_cmd+0x1c>
		cmd &= 0x7F;
1a000a88:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a000a8c:	2077      	movs	r0, #119	; 0x77
1a000a8e:	2100      	movs	r1, #0
1a000a90:	f7ff fff4 	bl	1a000a7c <send_cmd>
		if (res > 1) return res;
1a000a94:	2801      	cmp	r0, #1
1a000a96:	d82f      	bhi.n	1a000af8 <send_cmd+0x7c>
	}

	/* Select the card and wait for ready */
	deselect();
1a000a98:	f7ff ffd2 	bl	1a000a40 <deselect>
	if (!select_()) return 0xFF;
1a000a9c:	f7ff ffdc 	bl	1a000a58 <select_>
1a000aa0:	b348      	cbz	r0, 1a000af6 <send_cmd+0x7a>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a000aa2:	4620      	mov	r0, r4
1a000aa4:	f7ff ff8e 	bl	1a0009c4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a000aa8:	0e28      	lsrs	r0, r5, #24
1a000aaa:	f7ff ff8b 	bl	1a0009c4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a000aae:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a000ab2:	f7ff ff87 	bl	1a0009c4 <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a000ab6:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a000aba:	f7ff ff83 	bl	1a0009c4 <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a000abe:	b2e8      	uxtb	r0, r5
1a000ac0:	f7ff ff80 	bl	1a0009c4 <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0_) n = 0x95;			/* Valid CRC for CMD0_(0) */
1a000ac4:	2c40      	cmp	r4, #64	; 0x40
1a000ac6:	d001      	beq.n	1a000acc <send_cmd+0x50>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
1a000ac8:	2001      	movs	r0, #1
1a000aca:	e000      	b.n	1a000ace <send_cmd+0x52>
	if (cmd == CMD0_) n = 0x95;			/* Valid CRC for CMD0_(0) */
1a000acc:	2095      	movs	r0, #149	; 0x95
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a000ace:	2c48      	cmp	r4, #72	; 0x48
1a000ad0:	d100      	bne.n	1a000ad4 <send_cmd+0x58>
1a000ad2:	2087      	movs	r0, #135	; 0x87
	xmit_spi(n);
1a000ad4:	f7ff ff76 	bl	1a0009c4 <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
1a000ad8:	2c4c      	cmp	r4, #76	; 0x4c
1a000ada:	d101      	bne.n	1a000ae0 <send_cmd+0x64>
1a000adc:	f7ff ff90 	bl	1a000a00 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0_) n = 0x95;			/* Valid CRC for CMD0_(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a000ae0:	240a      	movs	r4, #10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
1a000ae2:	f7ff ff8d 	bl	1a000a00 <rcvr_spi>
	while ((res & 0x80) && --n);
1a000ae6:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000aea:	d005      	beq.n	1a000af8 <send_cmd+0x7c>
1a000aec:	1e63      	subs	r3, r4, #1
1a000aee:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a000af2:	d1f6      	bne.n	1a000ae2 <send_cmd+0x66>

	return res;			/* Return with the response value */
1a000af4:	bd38      	pop	{r3, r4, r5, pc}
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select_()) return 0xFF;
1a000af6:	20ff      	movs	r0, #255	; 0xff
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
1a000af8:	bd38      	pop	{r3, r4, r5, pc}
1a000afa:	bf00      	nop

1a000afc <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
1a000afc:	b570      	push	{r4, r5, r6, lr}
1a000afe:	4606      	mov	r6, r0
1a000b00:	460c      	mov	r4, r1
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a000b02:	f7ff ff8b 	bl	1a000a1c <wait_ready>
1a000b06:	28ff      	cmp	r0, #255	; 0xff
1a000b08:	d120      	bne.n	1a000b4c <xmit_datablock+0x50>

	xmit_spi(token);					/* Xmit data token */
1a000b0a:	4620      	mov	r0, r4
1a000b0c:	f7ff ff5a 	bl	1a0009c4 <xmit_spi>
	if (token != 0xFD) {	/* Is data token */
1a000b10:	2cfd      	cmp	r4, #253	; 0xfd
1a000b12:	d01d      	beq.n	1a000b50 <xmit_datablock+0x54>
1a000b14:	2400      	movs	r4, #0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
1a000b16:	4635      	mov	r5, r6
1a000b18:	f815 0b02 	ldrb.w	r0, [r5], #2
1a000b1c:	f7ff ff52 	bl	1a0009c4 <xmit_spi>
			xmit_spi(*buff++);
1a000b20:	7870      	ldrb	r0, [r6, #1]
1a000b22:	f7ff ff4f 	bl	1a0009c4 <xmit_spi>
		} while (--wc);
1a000b26:	1e63      	subs	r3, r4, #1
	xmit_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
1a000b28:	462e      	mov	r6, r5
		} while (--wc);
1a000b2a:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a000b2e:	d1f2      	bne.n	1a000b16 <xmit_datablock+0x1a>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a000b30:	20ff      	movs	r0, #255	; 0xff
1a000b32:	f7ff ff47 	bl	1a0009c4 <xmit_spi>
		xmit_spi(0xFF);
1a000b36:	20ff      	movs	r0, #255	; 0xff
1a000b38:	f7ff ff44 	bl	1a0009c4 <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a000b3c:	f7ff ff60 	bl	1a000a00 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a000b40:	f000 001f 	and.w	r0, r0, #31
1a000b44:	2805      	cmp	r0, #5
1a000b46:	d005      	beq.n	1a000b54 <xmit_datablock+0x58>
			return FALSE;
1a000b48:	2000      	movs	r0, #0
1a000b4a:	bd70      	pop	{r4, r5, r6, pc}
)
{
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a000b4c:	2000      	movs	r0, #0
1a000b4e:	bd70      	pop	{r4, r5, r6, pc}
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
1a000b50:	2001      	movs	r0, #1
1a000b52:	bd70      	pop	{r4, r5, r6, pc}
1a000b54:	2001      	movs	r0, #1
}
1a000b56:	bd70      	pop	{r4, r5, r6, pc}

1a000b58 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
1a000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000b5a:	4604      	mov	r4, r0
1a000b5c:	460e      	mov	r6, r1
	BYTE token;


	Timer1 = 20;
1a000b5e:	2214      	movs	r2, #20
1a000b60:	4b15      	ldr	r3, [pc, #84]	; (1a000bb8 <rcvr_datablock+0x60>)
1a000b62:	701a      	strb	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
1a000b64:	f7ff ff4c 	bl	1a000a00 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
1a000b68:	28ff      	cmp	r0, #255	; 0xff
1a000b6a:	d104      	bne.n	1a000b76 <rcvr_datablock+0x1e>
1a000b6c:	4b12      	ldr	r3, [pc, #72]	; (1a000bb8 <rcvr_datablock+0x60>)
1a000b6e:	781b      	ldrb	r3, [r3, #0]
1a000b70:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000b74:	d1f6      	bne.n	1a000b64 <rcvr_datablock+0xc>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a000b76:	28fe      	cmp	r0, #254	; 0xfe
1a000b78:	d11b      	bne.n	1a000bb2 <rcvr_datablock+0x5a>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
1a000b7a:	1c65      	adds	r5, r4, #1
1a000b7c:	4620      	mov	r0, r4
1a000b7e:	2101      	movs	r1, #1
1a000b80:	f7ff ff2c 	bl	1a0009dc <SSPReceive>
		rcvr_spi_m(buff++);
1a000b84:	1ca7      	adds	r7, r4, #2
1a000b86:	4628      	mov	r0, r5
1a000b88:	2101      	movs	r1, #1
1a000b8a:	f7ff ff27 	bl	1a0009dc <SSPReceive>
		rcvr_spi_m(buff++);
1a000b8e:	1ce5      	adds	r5, r4, #3
1a000b90:	4638      	mov	r0, r7
1a000b92:	2101      	movs	r1, #1
1a000b94:	f7ff ff22 	bl	1a0009dc <SSPReceive>
		rcvr_spi_m(buff++);
1a000b98:	4628      	mov	r0, r5
1a000b9a:	3404      	adds	r4, #4
1a000b9c:	2101      	movs	r1, #1
1a000b9e:	f7ff ff1d 	bl	1a0009dc <SSPReceive>
	} while (btr -= 4);
1a000ba2:	3e04      	subs	r6, #4
1a000ba4:	d1e9      	bne.n	1a000b7a <rcvr_datablock+0x22>
	rcvr_spi();						/* Discard CRC */
1a000ba6:	f7ff ff2b 	bl	1a000a00 <rcvr_spi>
	rcvr_spi();
1a000baa:	f7ff ff29 	bl	1a000a00 <rcvr_spi>

	return TRUE;					/* Return with success */
1a000bae:	2001      	movs	r0, #1
1a000bb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a000bb2:	2000      	movs	r0, #0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
}
1a000bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000bb6:	bf00      	nop
1a000bb8:	1000030d 	.word	0x1000030d

1a000bbc <disk_initialize>:
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a000bbc:	2800      	cmp	r0, #0
1a000bbe:	f040 809e 	bne.w	1a000cfe <disk_initialize+0x142>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
1a000bc2:	4b51      	ldr	r3, [pc, #324]	; (1a000d08 <disk_initialize+0x14c>)
1a000bc4:	781b      	ldrb	r3, [r3, #0]
1a000bc6:	f013 0f02 	tst.w	r3, #2
1a000bca:	d008      	beq.n	1a000bde <disk_initialize+0x22>
1a000bcc:	4b4e      	ldr	r3, [pc, #312]	; (1a000d08 <disk_initialize+0x14c>)
1a000bce:	7818      	ldrb	r0, [r3, #0]
1a000bd0:	b2c0      	uxtb	r0, r0
1a000bd2:	4770      	bx	lr

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a000bd4:	f7ff ff14 	bl	1a000a00 <rcvr_spi>
1a000bd8:	3c01      	subs	r4, #1
1a000bda:	b2e4      	uxtb	r4, r4
1a000bdc:	e002      	b.n	1a000be4 <disk_initialize+0x28>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
1a000bde:	b530      	push	{r4, r5, lr}
1a000be0:	b083      	sub	sp, #12
1a000be2:	240a      	movs	r4, #10
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a000be4:	2c00      	cmp	r4, #0
1a000be6:	d1f5      	bne.n	1a000bd4 <disk_initialize+0x18>

	ty = 0;
	if (send_cmd(CMD0_, 0) == 1) {			/* Enter Idle state */
1a000be8:	2040      	movs	r0, #64	; 0x40
1a000bea:	2100      	movs	r1, #0
1a000bec:	f7ff ff46 	bl	1a000a7c <send_cmd>
1a000bf0:	2801      	cmp	r0, #1
1a000bf2:	d16b      	bne.n	1a000ccc <disk_initialize+0x110>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
1a000bf4:	2264      	movs	r2, #100	; 0x64
1a000bf6:	4b45      	ldr	r3, [pc, #276]	; (1a000d0c <disk_initialize+0x150>)
1a000bf8:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
1a000bfa:	2048      	movs	r0, #72	; 0x48
1a000bfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a000c00:	f7ff ff3c 	bl	1a000a7c <send_cmd>
1a000c04:	2801      	cmp	r0, #1
1a000c06:	d13f      	bne.n	1a000c88 <disk_initialize+0xcc>
1a000c08:	e008      	b.n	1a000c1c <disk_initialize+0x60>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
1a000c0a:	f7ff fef9 	bl	1a000a00 <rcvr_spi>
1a000c0e:	ab02      	add	r3, sp, #8
1a000c10:	442b      	add	r3, r5
1a000c12:	f803 0c04 	strb.w	r0, [r3, #-4]
1a000c16:	3501      	adds	r5, #1
1a000c18:	b2ed      	uxtb	r5, r5
1a000c1a:	e000      	b.n	1a000c1e <disk_initialize+0x62>
1a000c1c:	4625      	mov	r5, r4
1a000c1e:	2d03      	cmp	r5, #3
1a000c20:	d9f3      	bls.n	1a000c0a <disk_initialize+0x4e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
1a000c22:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a000c26:	2b01      	cmp	r3, #1
1a000c28:	d152      	bne.n	1a000cd0 <disk_initialize+0x114>
1a000c2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000c2e:	2baa      	cmp	r3, #170	; 0xaa
1a000c30:	d150      	bne.n	1a000cd4 <disk_initialize+0x118>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a000c32:	4b36      	ldr	r3, [pc, #216]	; (1a000d0c <disk_initialize+0x150>)
1a000c34:	781b      	ldrb	r3, [r3, #0]
1a000c36:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000c3a:	d006      	beq.n	1a000c4a <disk_initialize+0x8e>
1a000c3c:	20e9      	movs	r0, #233	; 0xe9
1a000c3e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a000c42:	f7ff ff1b 	bl	1a000a7c <send_cmd>
1a000c46:	2800      	cmp	r0, #0
1a000c48:	d1f3      	bne.n	1a000c32 <disk_initialize+0x76>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
1a000c4a:	4b30      	ldr	r3, [pc, #192]	; (1a000d0c <disk_initialize+0x150>)
1a000c4c:	781b      	ldrb	r3, [r3, #0]
1a000c4e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000c52:	d041      	beq.n	1a000cd8 <disk_initialize+0x11c>
1a000c54:	207a      	movs	r0, #122	; 0x7a
1a000c56:	2100      	movs	r1, #0
1a000c58:	f7ff ff10 	bl	1a000a7c <send_cmd>
1a000c5c:	b148      	cbz	r0, 1a000c72 <disk_initialize+0xb6>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a000c5e:	2400      	movs	r4, #0
1a000c60:	e03f      	b.n	1a000ce2 <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
1a000c62:	f7ff fecd 	bl	1a000a00 <rcvr_spi>
1a000c66:	ab02      	add	r3, sp, #8
1a000c68:	4423      	add	r3, r4
1a000c6a:	f803 0c04 	strb.w	r0, [r3, #-4]
1a000c6e:	3401      	adds	r4, #1
1a000c70:	b2e4      	uxtb	r4, r4
1a000c72:	2c03      	cmp	r4, #3
1a000c74:	d9f5      	bls.n	1a000c62 <disk_initialize+0xa6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a000c76:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a000c7a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a000c7e:	d001      	beq.n	1a000c84 <disk_initialize+0xc8>
1a000c80:	240c      	movs	r4, #12
1a000c82:	e02e      	b.n	1a000ce2 <disk_initialize+0x126>
1a000c84:	2404      	movs	r4, #4
1a000c86:	e02c      	b.n	1a000ce2 <disk_initialize+0x126>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
1a000c88:	20e9      	movs	r0, #233	; 0xe9
1a000c8a:	2100      	movs	r1, #0
1a000c8c:	f7ff fef6 	bl	1a000a7c <send_cmd>
1a000c90:	2801      	cmp	r0, #1
1a000c92:	d802      	bhi.n	1a000c9a <disk_initialize+0xde>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
1a000c94:	2402      	movs	r4, #2
1a000c96:	25e9      	movs	r5, #233	; 0xe9
1a000c98:	e001      	b.n	1a000c9e <disk_initialize+0xe2>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
1a000c9a:	2401      	movs	r4, #1
1a000c9c:	2541      	movs	r5, #65	; 0x41
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a000c9e:	4b1b      	ldr	r3, [pc, #108]	; (1a000d0c <disk_initialize+0x150>)
1a000ca0:	781b      	ldrb	r3, [r3, #0]
1a000ca2:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000ca6:	d005      	beq.n	1a000cb4 <disk_initialize+0xf8>
1a000ca8:	4628      	mov	r0, r5
1a000caa:	2100      	movs	r1, #0
1a000cac:	f7ff fee6 	bl	1a000a7c <send_cmd>
1a000cb0:	2800      	cmp	r0, #0
1a000cb2:	d1f4      	bne.n	1a000c9e <disk_initialize+0xe2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a000cb4:	4b15      	ldr	r3, [pc, #84]	; (1a000d0c <disk_initialize+0x150>)
1a000cb6:	781b      	ldrb	r3, [r3, #0]
1a000cb8:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000cbc:	d00e      	beq.n	1a000cdc <disk_initialize+0x120>
1a000cbe:	2050      	movs	r0, #80	; 0x50
1a000cc0:	f44f 7100 	mov.w	r1, #512	; 0x200
1a000cc4:	f7ff feda 	bl	1a000a7c <send_cmd>
1a000cc8:	b950      	cbnz	r0, 1a000ce0 <disk_initialize+0x124>
1a000cca:	e00a      	b.n	1a000ce2 <disk_initialize+0x126>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a000ccc:	2400      	movs	r4, #0
1a000cce:	e008      	b.n	1a000ce2 <disk_initialize+0x126>
1a000cd0:	2400      	movs	r4, #0
1a000cd2:	e006      	b.n	1a000ce2 <disk_initialize+0x126>
1a000cd4:	2400      	movs	r4, #0
1a000cd6:	e004      	b.n	1a000ce2 <disk_initialize+0x126>
1a000cd8:	2400      	movs	r4, #0
1a000cda:	e002      	b.n	1a000ce2 <disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
1a000cdc:	2400      	movs	r4, #0
1a000cde:	e000      	b.n	1a000ce2 <disk_initialize+0x126>
1a000ce0:	2400      	movs	r4, #0
		}
	}
	CardType = ty;
1a000ce2:	4b0b      	ldr	r3, [pc, #44]	; (1a000d10 <disk_initialize+0x154>)
1a000ce4:	701c      	strb	r4, [r3, #0]
	deselect();
1a000ce6:	f7ff feab 	bl	1a000a40 <deselect>

	if (ty) {			/* Initialization succeded */
1a000cea:	b124      	cbz	r4, 1a000cf6 <disk_initialize+0x13a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
1a000cec:	4a06      	ldr	r2, [pc, #24]	; (1a000d08 <disk_initialize+0x14c>)
1a000cee:	7813      	ldrb	r3, [r2, #0]
1a000cf0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a000cf4:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
1a000cf6:	4b04      	ldr	r3, [pc, #16]	; (1a000d08 <disk_initialize+0x14c>)
1a000cf8:	7818      	ldrb	r0, [r3, #0]
1a000cfa:	b2c0      	uxtb	r0, r0
1a000cfc:	e001      	b.n	1a000d02 <disk_initialize+0x146>
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a000cfe:	2001      	movs	r0, #1
1a000d00:	4770      	bx	lr
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
1a000d02:	b003      	add	sp, #12
1a000d04:	bd30      	pop	{r4, r5, pc}
1a000d06:	bf00      	nop
1a000d08:	10000000 	.word	0x10000000
1a000d0c:	1000030d 	.word	0x1000030d
1a000d10:	1000030f 	.word	0x1000030f

1a000d14 <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a000d14:	b918      	cbnz	r0, 1a000d1e <disk_status+0xa>
	return Stat;
1a000d16:	4b03      	ldr	r3, [pc, #12]	; (1a000d24 <disk_status+0x10>)
1a000d18:	7818      	ldrb	r0, [r3, #0]
1a000d1a:	b2c0      	uxtb	r0, r0
1a000d1c:	4770      	bx	lr

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a000d1e:	2001      	movs	r0, #1
	return Stat;
}
1a000d20:	4770      	bx	lr
1a000d22:	bf00      	nop
1a000d24:	10000000 	.word	0x10000000

1a000d28 <disk_read>:
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a000d28:	bbb8      	cbnz	r0, 1a000d9a <disk_read+0x72>
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a000d2a:	b538      	push	{r3, r4, r5, lr}
1a000d2c:	460d      	mov	r5, r1
1a000d2e:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a000d30:	b3ab      	cbz	r3, 1a000d9e <disk_read+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a000d32:	4b1d      	ldr	r3, [pc, #116]	; (1a000da8 <disk_read+0x80>)
1a000d34:	781b      	ldrb	r3, [r3, #0]
1a000d36:	f013 0f01 	tst.w	r3, #1
1a000d3a:	d132      	bne.n	1a000da2 <disk_read+0x7a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a000d3c:	4b1b      	ldr	r3, [pc, #108]	; (1a000dac <disk_read+0x84>)
1a000d3e:	781b      	ldrb	r3, [r3, #0]
1a000d40:	f013 0f08 	tst.w	r3, #8
1a000d44:	d100      	bne.n	1a000d48 <disk_read+0x20>
1a000d46:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single block read */
1a000d48:	2c01      	cmp	r4, #1
1a000d4a:	d10b      	bne.n	1a000d64 <disk_read+0x3c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a000d4c:	2051      	movs	r0, #81	; 0x51
1a000d4e:	4611      	mov	r1, r2
1a000d50:	f7ff fe94 	bl	1a000a7c <send_cmd>
1a000d54:	b9d8      	cbnz	r0, 1a000d8e <disk_read+0x66>
			&& rcvr_datablock(buff, 512))
1a000d56:	4628      	mov	r0, r5
1a000d58:	f44f 7100 	mov.w	r1, #512	; 0x200
1a000d5c:	f7ff fefc 	bl	1a000b58 <rcvr_datablock>
1a000d60:	b9a0      	cbnz	r0, 1a000d8c <disk_read+0x64>
1a000d62:	e014      	b.n	1a000d8e <disk_read+0x66>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
1a000d64:	2052      	movs	r0, #82	; 0x52
1a000d66:	4611      	mov	r1, r2
1a000d68:	f7ff fe88 	bl	1a000a7c <send_cmd>
1a000d6c:	b978      	cbnz	r0, 1a000d8e <disk_read+0x66>
			do {
				if (!rcvr_datablock(buff, 512)) break;
1a000d6e:	4628      	mov	r0, r5
1a000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
1a000d74:	f7ff fef0 	bl	1a000b58 <rcvr_datablock>
1a000d78:	b118      	cbz	r0, 1a000d82 <disk_read+0x5a>
				buff += 512;
1a000d7a:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a000d7e:	3c01      	subs	r4, #1
1a000d80:	d1f5      	bne.n	1a000d6e <disk_read+0x46>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a000d82:	204c      	movs	r0, #76	; 0x4c
1a000d84:	2100      	movs	r1, #0
1a000d86:	f7ff fe79 	bl	1a000a7c <send_cmd>
1a000d8a:	e000      	b.n	1a000d8e <disk_read+0x66>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
1a000d8c:	2400      	movs	r4, #0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
1a000d8e:	f7ff fe57 	bl	1a000a40 <deselect>

	return count ? RES_ERROR : RES_OK;
1a000d92:	1c20      	adds	r0, r4, #0
1a000d94:	bf18      	it	ne
1a000d96:	2001      	movne	r0, #1
1a000d98:	bd38      	pop	{r3, r4, r5, pc}
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a000d9a:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a000d9c:	4770      	bx	lr
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a000d9e:	2004      	movs	r0, #4
1a000da0:	bd38      	pop	{r3, r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a000da2:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a000da4:	bd38      	pop	{r3, r4, r5, pc}
1a000da6:	bf00      	nop
1a000da8:	10000000 	.word	0x10000000
1a000dac:	1000030f 	.word	0x1000030f

1a000db0 <disk_write>:
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a000db0:	2800      	cmp	r0, #0
1a000db2:	d146      	bne.n	1a000e42 <disk_write+0x92>
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a000db4:	b570      	push	{r4, r5, r6, lr}
1a000db6:	460d      	mov	r5, r1
1a000db8:	4616      	mov	r6, r2
1a000dba:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a000dbc:	2b00      	cmp	r3, #0
1a000dbe:	d042      	beq.n	1a000e46 <disk_write+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a000dc0:	4b24      	ldr	r3, [pc, #144]	; (1a000e54 <disk_write+0xa4>)
1a000dc2:	781b      	ldrb	r3, [r3, #0]
1a000dc4:	f013 0f01 	tst.w	r3, #1
1a000dc8:	d13f      	bne.n	1a000e4a <disk_write+0x9a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a000dca:	4b22      	ldr	r3, [pc, #136]	; (1a000e54 <disk_write+0xa4>)
1a000dcc:	781b      	ldrb	r3, [r3, #0]
1a000dce:	f013 0f04 	tst.w	r3, #4
1a000dd2:	d13c      	bne.n	1a000e4e <disk_write+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a000dd4:	4b20      	ldr	r3, [pc, #128]	; (1a000e58 <disk_write+0xa8>)
1a000dd6:	781b      	ldrb	r3, [r3, #0]
1a000dd8:	f013 0f08 	tst.w	r3, #8
1a000ddc:	d100      	bne.n	1a000de0 <disk_write+0x30>
1a000dde:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single block write */
1a000de0:	2c01      	cmp	r4, #1
1a000de2:	d10a      	bne.n	1a000dfa <disk_write+0x4a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
1a000de4:	2058      	movs	r0, #88	; 0x58
1a000de6:	4631      	mov	r1, r6
1a000de8:	f7ff fe48 	bl	1a000a7c <send_cmd>
1a000dec:	bb18      	cbnz	r0, 1a000e36 <disk_write+0x86>
			&& xmit_datablock(buff, 0xFE))
1a000dee:	4628      	mov	r0, r5
1a000df0:	21fe      	movs	r1, #254	; 0xfe
1a000df2:	f7ff fe83 	bl	1a000afc <xmit_datablock>
1a000df6:	b9d8      	cbnz	r0, 1a000e30 <disk_write+0x80>
1a000df8:	e01d      	b.n	1a000e36 <disk_write+0x86>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a000dfa:	f013 0f06 	tst.w	r3, #6
1a000dfe:	d003      	beq.n	1a000e08 <disk_write+0x58>
1a000e00:	20d7      	movs	r0, #215	; 0xd7
1a000e02:	4621      	mov	r1, r4
1a000e04:	f7ff fe3a 	bl	1a000a7c <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
1a000e08:	2059      	movs	r0, #89	; 0x59
1a000e0a:	4631      	mov	r1, r6
1a000e0c:	f7ff fe36 	bl	1a000a7c <send_cmd>
1a000e10:	b988      	cbnz	r0, 1a000e36 <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
1a000e12:	4628      	mov	r0, r5
1a000e14:	21fc      	movs	r1, #252	; 0xfc
1a000e16:	f7ff fe71 	bl	1a000afc <xmit_datablock>
1a000e1a:	b118      	cbz	r0, 1a000e24 <disk_write+0x74>
				buff += 512;
1a000e1c:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a000e20:	3c01      	subs	r4, #1
1a000e22:	d1f6      	bne.n	1a000e12 <disk_write+0x62>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
1a000e24:	2000      	movs	r0, #0
1a000e26:	21fd      	movs	r1, #253	; 0xfd
1a000e28:	f7ff fe68 	bl	1a000afc <xmit_datablock>
1a000e2c:	b110      	cbz	r0, 1a000e34 <disk_write+0x84>
1a000e2e:	e002      	b.n	1a000e36 <disk_write+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
1a000e30:	2400      	movs	r4, #0
1a000e32:	e000      	b.n	1a000e36 <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
1a000e34:	2401      	movs	r4, #1
		}
	}
	deselect();
1a000e36:	f7ff fe03 	bl	1a000a40 <deselect>

	return count ? RES_ERROR : RES_OK;
1a000e3a:	1c20      	adds	r0, r4, #0
1a000e3c:	bf18      	it	ne
1a000e3e:	2001      	movne	r0, #1
1a000e40:	bd70      	pop	{r4, r5, r6, pc}
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a000e42:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a000e44:	4770      	bx	lr
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a000e46:	2004      	movs	r0, #4
1a000e48:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a000e4a:	2003      	movs	r0, #3
1a000e4c:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a000e4e:	2002      	movs	r0, #2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a000e50:	bd70      	pop	{r4, r5, r6, pc}
1a000e52:	bf00      	nop
1a000e54:	10000000 	.word	0x10000000
1a000e58:	1000030f 	.word	0x1000030f

1a000e5c <disk_ioctl>:
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a000e5c:	2800      	cmp	r0, #0
1a000e5e:	f040 8136 	bne.w	1a0010ce <disk_ioctl+0x272>
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
1a000e62:	b570      	push	{r4, r5, r6, lr}
1a000e64:	b084      	sub	sp, #16
1a000e66:	4614      	mov	r4, r2

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
1a000e68:	2905      	cmp	r1, #5
1a000e6a:	d10c      	bne.n	1a000e86 <disk_ioctl+0x2a>
		switch (*ptr) {
1a000e6c:	7813      	ldrb	r3, [r2, #0]
1a000e6e:	2b01      	cmp	r3, #1
1a000e70:	f240 812a 	bls.w	1a0010c8 <disk_ioctl+0x26c>
1a000e74:	2b02      	cmp	r3, #2
1a000e76:	d001      	beq.n	1a000e7c <disk_ioctl+0x20>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
1a000e78:	2404      	movs	r4, #4
1a000e7a:	e126      	b.n	1a0010ca <disk_ioctl+0x26e>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
1a000e7c:	f7ff fd8e 	bl	1a00099c <chk_power>
1a000e80:	7060      	strb	r0, [r4, #1]
			res = RES_OK;
1a000e82:	2400      	movs	r4, #0
			break;
1a000e84:	e121      	b.n	1a0010ca <disk_ioctl+0x26e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a000e86:	4b94      	ldr	r3, [pc, #592]	; (1a0010d8 <disk_ioctl+0x27c>)
1a000e88:	781b      	ldrb	r3, [r3, #0]
1a000e8a:	f013 0f01 	tst.w	r3, #1
1a000e8e:	f040 8120 	bne.w	1a0010d2 <disk_ioctl+0x276>

		switch (ctrl) {
1a000e92:	290e      	cmp	r1, #14
1a000e94:	f200 80fc 	bhi.w	1a001090 <disk_ioctl+0x234>
1a000e98:	e8df f011 	tbh	[pc, r1, lsl #1]
1a000e9c:	0018000f 	.word	0x0018000f
1a000ea0:	0060005b 	.word	0x0060005b
1a000ea4:	00fa00fa 	.word	0x00fa00fa
1a000ea8:	00fa00fa 	.word	0x00fa00fa
1a000eac:	00fa00fa 	.word	0x00fa00fa
1a000eb0:	00be00b9 	.word	0x00be00b9
1a000eb4:	00d800cc 	.word	0x00d800cc
1a000eb8:	00ec      	.short	0x00ec
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
1a000eba:	f7ff fdcd 	bl	1a000a58 <select_>
1a000ebe:	2800      	cmp	r0, #0
1a000ec0:	f000 80e8 	beq.w	1a001094 <disk_ioctl+0x238>
				res = RES_OK;
				deselect();
1a000ec4:	f7ff fdbc 	bl	1a000a40 <deselect>
		if (Stat & STA_NOINIT) return RES_NOTRDY;

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
				res = RES_OK;
1a000ec8:	2400      	movs	r4, #0
1a000eca:	e0fa      	b.n	1a0010c2 <disk_ioctl+0x266>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
1a000ecc:	2049      	movs	r0, #73	; 0x49
1a000ece:	2100      	movs	r1, #0
1a000ed0:	f7ff fdd4 	bl	1a000a7c <send_cmd>
1a000ed4:	2800      	cmp	r0, #0
1a000ed6:	f040 80df 	bne.w	1a001098 <disk_ioctl+0x23c>
1a000eda:	4668      	mov	r0, sp
1a000edc:	2110      	movs	r1, #16
1a000ede:	f7ff fe3b 	bl	1a000b58 <rcvr_datablock>
1a000ee2:	2800      	cmp	r0, #0
1a000ee4:	f000 80da 	beq.w	1a00109c <disk_ioctl+0x240>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
1a000ee8:	f89d 3000 	ldrb.w	r3, [sp]
1a000eec:	099b      	lsrs	r3, r3, #6
1a000eee:	2b01      	cmp	r3, #1
1a000ef0:	d10b      	bne.n	1a000f0a <disk_ioctl+0xae>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a000ef2:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a000ef6:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000efa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a000efe:	3301      	adds	r3, #1
1a000f00:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a000f02:	029b      	lsls	r3, r3, #10
1a000f04:	6023      	str	r3, [r4, #0]
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
1a000f06:	2400      	movs	r4, #0
1a000f08:	e0db      	b.n	1a0010c2 <disk_ioctl+0x266>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a000f0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a000f0e:	f89d 100a 	ldrb.w	r1, [sp, #10]
1a000f12:	f89d 2009 	ldrb.w	r2, [sp, #9]
1a000f16:	f003 030f 	and.w	r3, r3, #15
1a000f1a:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
1a000f1e:	f002 0203 	and.w	r2, r2, #3
1a000f22:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a000f26:	3202      	adds	r2, #2
1a000f28:	b2d2      	uxtb	r2, r2
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a000f2a:	f89d 0008 	ldrb.w	r0, [sp, #8]
1a000f2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000f32:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a000f36:	009b      	lsls	r3, r3, #2
1a000f38:	eb03 1390 	add.w	r3, r3, r0, lsr #6
1a000f3c:	f001 0103 	and.w	r1, r1, #3
1a000f40:	eb03 2381 	add.w	r3, r3, r1, lsl #10
1a000f44:	3301      	adds	r3, #1
1a000f46:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a000f48:	3a09      	subs	r2, #9
1a000f4a:	4093      	lsls	r3, r2
1a000f4c:	6023      	str	r3, [r4, #0]
				}
				res = RES_OK;
1a000f4e:	2400      	movs	r4, #0
1a000f50:	e0b7      	b.n	1a0010c2 <disk_ioctl+0x266>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
1a000f52:	f44f 7300 	mov.w	r3, #512	; 0x200
1a000f56:	8013      	strh	r3, [r2, #0]
			res = RES_OK;
1a000f58:	2400      	movs	r4, #0
			break;
1a000f5a:	e0b2      	b.n	1a0010c2 <disk_ioctl+0x266>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
1a000f5c:	4b5f      	ldr	r3, [pc, #380]	; (1a0010dc <disk_ioctl+0x280>)
1a000f5e:	781b      	ldrb	r3, [r3, #0]
1a000f60:	f013 0f04 	tst.w	r3, #4
1a000f64:	d01f      	beq.n	1a000fa6 <disk_ioctl+0x14a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
1a000f66:	20cd      	movs	r0, #205	; 0xcd
1a000f68:	2100      	movs	r1, #0
1a000f6a:	f7ff fd87 	bl	1a000a7c <send_cmd>
1a000f6e:	2800      	cmp	r0, #0
1a000f70:	f040 8096 	bne.w	1a0010a0 <disk_ioctl+0x244>
					rcvr_spi();
1a000f74:	f7ff fd44 	bl	1a000a00 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
1a000f78:	4668      	mov	r0, sp
1a000f7a:	2110      	movs	r1, #16
1a000f7c:	f7ff fdec 	bl	1a000b58 <rcvr_datablock>
1a000f80:	b930      	cbnz	r0, 1a000f90 <disk_ioctl+0x134>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a000f82:	2401      	movs	r4, #1
1a000f84:	e09d      	b.n	1a0010c2 <disk_ioctl+0x266>
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
1a000f86:	f7ff fd3b 	bl	1a000a00 <rcvr_spi>
1a000f8a:	3d01      	subs	r5, #1
1a000f8c:	b2ed      	uxtb	r5, r5
1a000f8e:	e000      	b.n	1a000f92 <disk_ioctl+0x136>
1a000f90:	2530      	movs	r5, #48	; 0x30
1a000f92:	2d00      	cmp	r5, #0
1a000f94:	d1f7      	bne.n	1a000f86 <disk_ioctl+0x12a>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a000f96:	f89d 200a 	ldrb.w	r2, [sp, #10]
1a000f9a:	0912      	lsrs	r2, r2, #4
1a000f9c:	2310      	movs	r3, #16
1a000f9e:	4093      	lsls	r3, r2
1a000fa0:	6023      	str	r3, [r4, #0]
						res = RES_OK;
1a000fa2:	2400      	movs	r4, #0
1a000fa4:	e08d      	b.n	1a0010c2 <disk_ioctl+0x266>
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
1a000fa6:	2049      	movs	r0, #73	; 0x49
1a000fa8:	2100      	movs	r1, #0
1a000faa:	f7ff fd67 	bl	1a000a7c <send_cmd>
1a000fae:	2800      	cmp	r0, #0
1a000fb0:	d178      	bne.n	1a0010a4 <disk_ioctl+0x248>
1a000fb2:	4668      	mov	r0, sp
1a000fb4:	2110      	movs	r1, #16
1a000fb6:	f7ff fdcf 	bl	1a000b58 <rcvr_datablock>
1a000fba:	2800      	cmp	r0, #0
1a000fbc:	d074      	beq.n	1a0010a8 <disk_ioctl+0x24c>
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
1a000fbe:	4b47      	ldr	r3, [pc, #284]	; (1a0010dc <disk_ioctl+0x280>)
1a000fc0:	781b      	ldrb	r3, [r3, #0]
1a000fc2:	f013 0f02 	tst.w	r3, #2
1a000fc6:	d011      	beq.n	1a000fec <disk_ioctl+0x190>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a000fc8:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a000fcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
1a000fd0:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000fd4:	09db      	lsrs	r3, r3, #7
1a000fd6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000fda:	3301      	adds	r3, #1
1a000fdc:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a000fe0:	0992      	lsrs	r2, r2, #6
1a000fe2:	3a01      	subs	r2, #1
1a000fe4:	4093      	lsls	r3, r2
1a000fe6:	6023      	str	r3, [r4, #0]
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
1a000fe8:	2400      	movs	r4, #0
1a000fea:	e06a      	b.n	1a0010c2 <disk_ioctl+0x266>
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a000fec:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a000ff0:	f3c3 0184 	ubfx	r1, r3, #2, #5
1a000ff4:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000ff8:	f003 0003 	and.w	r0, r3, #3
1a000ffc:	095a      	lsrs	r2, r3, #5
1a000ffe:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
1a001002:	1c53      	adds	r3, r2, #1
1a001004:	fb01 3303 	mla	r3, r1, r3, r3
1a001008:	6023      	str	r3, [r4, #0]
					}
					res = RES_OK;
1a00100a:	2400      	movs	r4, #0
1a00100c:	e059      	b.n	1a0010c2 <disk_ioctl+0x266>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
1a00100e:	4b33      	ldr	r3, [pc, #204]	; (1a0010dc <disk_ioctl+0x280>)
1a001010:	781b      	ldrb	r3, [r3, #0]
1a001012:	7013      	strb	r3, [r2, #0]
			res = RES_OK;
1a001014:	2400      	movs	r4, #0
			break;
1a001016:	e054      	b.n	1a0010c2 <disk_ioctl+0x266>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a001018:	2049      	movs	r0, #73	; 0x49
1a00101a:	2100      	movs	r1, #0
1a00101c:	f7ff fd2e 	bl	1a000a7c <send_cmd>
1a001020:	2800      	cmp	r0, #0
1a001022:	d143      	bne.n	1a0010ac <disk_ioctl+0x250>
				&& rcvr_datablock(ptr, 16))
1a001024:	4620      	mov	r0, r4
1a001026:	2110      	movs	r1, #16
1a001028:	f7ff fd96 	bl	1a000b58 <rcvr_datablock>
1a00102c:	2800      	cmp	r0, #0
1a00102e:	d13f      	bne.n	1a0010b0 <disk_ioctl+0x254>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001030:	2401      	movs	r4, #1
1a001032:	e046      	b.n	1a0010c2 <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a001034:	204a      	movs	r0, #74	; 0x4a
1a001036:	2100      	movs	r1, #0
1a001038:	f7ff fd20 	bl	1a000a7c <send_cmd>
1a00103c:	bbd0      	cbnz	r0, 1a0010b4 <disk_ioctl+0x258>
				&& rcvr_datablock(ptr, 16))
1a00103e:	4620      	mov	r0, r4
1a001040:	2110      	movs	r1, #16
1a001042:	f7ff fd89 	bl	1a000b58 <rcvr_datablock>
1a001046:	bbb8      	cbnz	r0, 1a0010b8 <disk_ioctl+0x25c>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001048:	2401      	movs	r4, #1
1a00104a:	e03a      	b.n	1a0010c2 <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
1a00104c:	207a      	movs	r0, #122	; 0x7a
1a00104e:	2100      	movs	r1, #0
1a001050:	f7ff fd14 	bl	1a000a7c <send_cmd>
1a001054:	b148      	cbz	r0, 1a00106a <disk_ioctl+0x20e>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001056:	2401      	movs	r4, #1
1a001058:	e033      	b.n	1a0010c2 <disk_ioctl+0x266>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
1a00105a:	1c66      	adds	r6, r4, #1
1a00105c:	f7ff fcd0 	bl	1a000a00 <rcvr_spi>
1a001060:	7020      	strb	r0, [r4, #0]
1a001062:	3d01      	subs	r5, #1
1a001064:	b2ed      	uxtb	r5, r5
1a001066:	4634      	mov	r4, r6
1a001068:	e000      	b.n	1a00106c <disk_ioctl+0x210>
1a00106a:	2504      	movs	r5, #4
1a00106c:	2d00      	cmp	r5, #0
1a00106e:	d1f4      	bne.n	1a00105a <disk_ioctl+0x1fe>
				res = RES_OK;
1a001070:	2400      	movs	r4, #0
1a001072:	e026      	b.n	1a0010c2 <disk_ioctl+0x266>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
1a001074:	20cd      	movs	r0, #205	; 0xcd
1a001076:	2100      	movs	r1, #0
1a001078:	f7ff fd00 	bl	1a000a7c <send_cmd>
1a00107c:	b9f0      	cbnz	r0, 1a0010bc <disk_ioctl+0x260>
				rcvr_spi();
1a00107e:	f7ff fcbf 	bl	1a000a00 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a001082:	4620      	mov	r0, r4
1a001084:	2140      	movs	r1, #64	; 0x40
1a001086:	f7ff fd67 	bl	1a000b58 <rcvr_datablock>
1a00108a:	b9c8      	cbnz	r0, 1a0010c0 <disk_ioctl+0x264>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a00108c:	2401      	movs	r4, #1
1a00108e:	e018      	b.n	1a0010c2 <disk_ioctl+0x266>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
1a001090:	2404      	movs	r4, #4
1a001092:	e016      	b.n	1a0010c2 <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001094:	2401      	movs	r4, #1
1a001096:	e014      	b.n	1a0010c2 <disk_ioctl+0x266>
1a001098:	2401      	movs	r4, #1
1a00109a:	e012      	b.n	1a0010c2 <disk_ioctl+0x266>
1a00109c:	2401      	movs	r4, #1
1a00109e:	e010      	b.n	1a0010c2 <disk_ioctl+0x266>
1a0010a0:	2401      	movs	r4, #1
1a0010a2:	e00e      	b.n	1a0010c2 <disk_ioctl+0x266>
1a0010a4:	2401      	movs	r4, #1
1a0010a6:	e00c      	b.n	1a0010c2 <disk_ioctl+0x266>
1a0010a8:	2401      	movs	r4, #1
1a0010aa:	e00a      	b.n	1a0010c2 <disk_ioctl+0x266>
1a0010ac:	2401      	movs	r4, #1
1a0010ae:	e008      	b.n	1a0010c2 <disk_ioctl+0x266>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a0010b0:	2400      	movs	r4, #0
1a0010b2:	e006      	b.n	1a0010c2 <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a0010b4:	2401      	movs	r4, #1
1a0010b6:	e004      	b.n	1a0010c2 <disk_ioctl+0x266>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a0010b8:	2400      	movs	r4, #0
1a0010ba:	e002      	b.n	1a0010c2 <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a0010bc:	2401      	movs	r4, #1
1a0010be:	e000      	b.n	1a0010c2 <disk_ioctl+0x266>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
1a0010c0:	2400      	movs	r4, #0

		default:
			res = RES_PARERR;
		}

		deselect();
1a0010c2:	f7ff fcbd 	bl	1a000a40 <deselect>
1a0010c6:	e000      	b.n	1a0010ca <disk_ioctl+0x26e>
	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
			res = RES_OK;
1a0010c8:	2400      	movs	r4, #0
		}

		deselect();
	}

	return res;
1a0010ca:	4620      	mov	r0, r4
1a0010cc:	e002      	b.n	1a0010d4 <disk_ioctl+0x278>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a0010ce:	2004      	movs	r0, #4

		deselect();
	}

	return res;
}
1a0010d0:	4770      	bx	lr
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a0010d2:	2003      	movs	r0, #3

		deselect();
	}

	return res;
}
1a0010d4:	b004      	add	sp, #16
1a0010d6:	bd70      	pop	{r4, r5, r6, pc}
1a0010d8:	10000000 	.word	0x10000000
1a0010dc:	1000030f 	.word	0x1000030f

1a0010e0 <disk_timerproc>:
{
	static BYTE pv;
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
1a0010e0:	4b15      	ldr	r3, [pc, #84]	; (1a001138 <disk_timerproc+0x58>)
1a0010e2:	781a      	ldrb	r2, [r3, #0]
	if (n) Timer1 = --n;
1a0010e4:	f002 03ff 	and.w	r3, r2, #255	; 0xff
1a0010e8:	b11a      	cbz	r2, 1a0010f2 <disk_timerproc+0x12>
1a0010ea:	3b01      	subs	r3, #1
1a0010ec:	b2db      	uxtb	r3, r3
1a0010ee:	4a12      	ldr	r2, [pc, #72]	; (1a001138 <disk_timerproc+0x58>)
1a0010f0:	7013      	strb	r3, [r2, #0]
	n = Timer2;
1a0010f2:	4b12      	ldr	r3, [pc, #72]	; (1a00113c <disk_timerproc+0x5c>)
1a0010f4:	781a      	ldrb	r2, [r3, #0]
	if (n) Timer2 = --n;
1a0010f6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
1a0010fa:	b11a      	cbz	r2, 1a001104 <disk_timerproc+0x24>
1a0010fc:	3b01      	subs	r3, #1
1a0010fe:	b2db      	uxtb	r3, r3
1a001100:	4a0e      	ldr	r2, [pc, #56]	; (1a00113c <disk_timerproc+0x5c>)
1a001102:	7013      	strb	r3, [r2, #0]

	n = pv;
1a001104:	4a0e      	ldr	r2, [pc, #56]	; (1a001140 <disk_timerproc+0x60>)
1a001106:	7811      	ldrb	r1, [r2, #0]
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a001108:	4b0e      	ldr	r3, [pc, #56]	; (1a001144 <disk_timerproc+0x64>)
1a00110a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
1a00110e:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001112:	bf14      	ite	ne
1a001114:	2301      	movne	r3, #1
1a001116:	2300      	moveq	r3, #0
	//pv = SOCKPORT & (SOCKWP | SOCKINS);	/* Sample socket switch */

	/* TODO: Actualizar!!! */
	//pv = ((GPIO_ReadValue(2) & (1<<11)) != 0);
	pv = (Chip_GPIO_GetPinState(LPC_GPIO_PORT, 2, 11) != 0);
1a001118:	7013      	strb	r3, [r2, #0]

	if (n == pv) {					/* Have contacts stabled? */
1a00111a:	4299      	cmp	r1, r3
1a00111c:	d10a      	bne.n	1a001134 <disk_timerproc+0x54>
		s = Stat;
1a00111e:	4a0a      	ldr	r2, [pc, #40]	; (1a001148 <disk_timerproc+0x68>)
1a001120:	7812      	ldrb	r2, [r2, #0]
1a001122:	b2d2      	uxtb	r2, r2

		/* write protect NOT supported */

		/* check card detect */
		if (pv)			       /* (Socket empty) */
1a001124:	b113      	cbz	r3, 1a00112c <disk_timerproc+0x4c>
			s |= (STA_NODISK | STA_NOINIT);
1a001126:	f042 0303 	orr.w	r3, r2, #3
1a00112a:	e001      	b.n	1a001130 <disk_timerproc+0x50>
		else				       /* (Card inserted) */
			s &= ~STA_NODISK;
1a00112c:	f002 03fd 	and.w	r3, r2, #253	; 0xfd

		Stat = s;
1a001130:	4a05      	ldr	r2, [pc, #20]	; (1a001148 <disk_timerproc+0x68>)
1a001132:	7013      	strb	r3, [r2, #0]
1a001134:	4770      	bx	lr
1a001136:	bf00      	nop
1a001138:	1000030d 	.word	0x1000030d
1a00113c:	1000030e 	.word	0x1000030e
1a001140:	1000030c 	.word	0x1000030c
1a001144:	400f4000 	.word	0x400f4000
1a001148:	10000000 	.word	0x10000000

1a00114c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00114c:	4b04      	ldr	r3, [pc, #16]	; (1a001160 <cyclesCounterInit+0x14>)
1a00114e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001150:	4b04      	ldr	r3, [pc, #16]	; (1a001164 <cyclesCounterInit+0x18>)
1a001152:	681a      	ldr	r2, [r3, #0]
1a001154:	6813      	ldr	r3, [r2, #0]
1a001156:	f043 0301 	orr.w	r3, r3, #1
1a00115a:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00115c:	2001      	movs	r0, #1
1a00115e:	4770      	bx	lr
1a001160:	10000008 	.word	0x10000008
1a001164:	10000004 	.word	0x10000004

1a001168 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001168:	2301      	movs	r3, #1
1a00116a:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00116c:	4a01      	ldr	r2, [pc, #4]	; (1a001174 <clearInterrupt+0xc>)
1a00116e:	6253      	str	r3, [r2, #36]	; 0x24
1a001170:	4770      	bx	lr
1a001172:	bf00      	nop
1a001174:	40087000 	.word	0x40087000

1a001178 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a001178:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00117a:	4b13      	ldr	r3, [pc, #76]	; (1a0011c8 <serveInterrupt+0x50>)
1a00117c:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a00117e:	4a13      	ldr	r2, [pc, #76]	; (1a0011cc <serveInterrupt+0x54>)
1a001180:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001182:	2401      	movs	r4, #1
1a001184:	4084      	lsls	r4, r0
1a001186:	4214      	tst	r4, r2
1a001188:	d00a      	beq.n	1a0011a0 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00118a:	4a11      	ldr	r2, [pc, #68]	; (1a0011d0 <serveInterrupt+0x58>)
1a00118c:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00118e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a001192:	00db      	lsls	r3, r3, #3
1a001194:	490f      	ldr	r1, [pc, #60]	; (1a0011d4 <serveInterrupt+0x5c>)
1a001196:	440b      	add	r3, r1
1a001198:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a00119a:	4b0c      	ldr	r3, [pc, #48]	; (1a0011cc <serveInterrupt+0x54>)
1a00119c:	61dc      	str	r4, [r3, #28]
1a00119e:	e00f      	b.n	1a0011c0 <serveInterrupt+0x48>
1a0011a0:	4a0b      	ldr	r2, [pc, #44]	; (1a0011d0 <serveInterrupt+0x58>)
1a0011a2:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0011a4:	4d0b      	ldr	r5, [pc, #44]	; (1a0011d4 <serveInterrupt+0x5c>)
1a0011a6:	005e      	lsls	r6, r3, #1
1a0011a8:	18f2      	adds	r2, r6, r3
1a0011aa:	00d2      	lsls	r2, r2, #3
1a0011ac:	442a      	add	r2, r5
1a0011ae:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0011b0:	6852      	ldr	r2, [r2, #4]
1a0011b2:	1a89      	subs	r1, r1, r2
1a0011b4:	4433      	add	r3, r6
1a0011b6:	00db      	lsls	r3, r3, #3
1a0011b8:	442b      	add	r3, r5
1a0011ba:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0011bc:	4b03      	ldr	r3, [pc, #12]	; (1a0011cc <serveInterrupt+0x54>)
1a0011be:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0011c0:	f7ff ffd2 	bl	1a001168 <clearInterrupt>
1a0011c4:	bd70      	pop	{r4, r5, r6, pc}
1a0011c6:	bf00      	nop
1a0011c8:	1a003120 	.word	0x1a003120
1a0011cc:	40087000 	.word	0x40087000
1a0011d0:	40084000 	.word	0x40084000
1a0011d4:	1000000c 	.word	0x1000000c

1a0011d8 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0011d8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0011da:	2000      	movs	r0, #0
1a0011dc:	f7ff ffcc 	bl	1a001178 <serveInterrupt>
1a0011e0:	bd08      	pop	{r3, pc}
1a0011e2:	bf00      	nop

1a0011e4 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0011e4:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0011e6:	2001      	movs	r0, #1
1a0011e8:	f7ff ffc6 	bl	1a001178 <serveInterrupt>
1a0011ec:	bd08      	pop	{r3, pc}
1a0011ee:	bf00      	nop

1a0011f0 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0011f0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0011f2:	2002      	movs	r0, #2
1a0011f4:	f7ff ffc0 	bl	1a001178 <serveInterrupt>
1a0011f8:	bd08      	pop	{r3, pc}
1a0011fa:	bf00      	nop

1a0011fc <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0011fc:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0011fe:	4d09      	ldr	r5, [pc, #36]	; (1a001224 <gpioObtainPinInit+0x28>)
1a001200:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001204:	182c      	adds	r4, r5, r0
1a001206:	5c28      	ldrb	r0, [r5, r0]
1a001208:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00120a:	7861      	ldrb	r1, [r4, #1]
1a00120c:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00120e:	78a2      	ldrb	r2, [r4, #2]
1a001210:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001212:	78e2      	ldrb	r2, [r4, #3]
1a001214:	9b02      	ldr	r3, [sp, #8]
1a001216:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001218:	7922      	ldrb	r2, [r4, #4]
1a00121a:	9b03      	ldr	r3, [sp, #12]
1a00121c:	701a      	strb	r2, [r3, #0]
}
1a00121e:	bc30      	pop	{r4, r5}
1a001220:	4770      	bx	lr
1a001222:	bf00      	nop
1a001224:	1a003124 	.word	0x1a003124

1a001228 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001228:	b570      	push	{r4, r5, r6, lr}
1a00122a:	b084      	sub	sp, #16
1a00122c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00122e:	2300      	movs	r3, #0
1a001230:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001234:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001238:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00123c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001240:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001244:	ab03      	add	r3, sp, #12
1a001246:	9300      	str	r3, [sp, #0]
1a001248:	f10d 030b 	add.w	r3, sp, #11
1a00124c:	9301      	str	r3, [sp, #4]
1a00124e:	f10d 010f 	add.w	r1, sp, #15
1a001252:	f10d 020e 	add.w	r2, sp, #14
1a001256:	f10d 030d 	add.w	r3, sp, #13
1a00125a:	f7ff ffcf 	bl	1a0011fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00125e:	2c05      	cmp	r4, #5
1a001260:	f200 80a8 	bhi.w	1a0013b4 <gpioInit+0x18c>
1a001264:	e8df f004 	tbb	[pc, r4]
1a001268:	46278408 	.word	0x46278408
1a00126c:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00126e:	4853      	ldr	r0, [pc, #332]	; (1a0013bc <gpioInit+0x194>)
1a001270:	f001 fa90 	bl	1a002794 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a001274:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a001276:	e09e      	b.n	1a0013b6 <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001278:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00127c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001280:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001284:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001288:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00128c:	494c      	ldr	r1, [pc, #304]	; (1a0013c0 <gpioInit+0x198>)
1a00128e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001292:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001296:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00129a:	2001      	movs	r0, #1
1a00129c:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0012a0:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0012a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0012a8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0012ac:	ea22 0204 	bic.w	r2, r2, r4
1a0012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0012b4:	e07f      	b.n	1a0013b6 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0012b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012ba:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012be:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0012c2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0012c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0012ca:	493d      	ldr	r1, [pc, #244]	; (1a0013c0 <gpioInit+0x198>)
1a0012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0012d0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0012d4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0012d8:	2001      	movs	r0, #1
1a0012da:	fa00 f402 	lsl.w	r4, r0, r2
1a0012de:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0012e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0012e6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0012ea:	ea22 0204 	bic.w	r2, r2, r4
1a0012ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0012f2:	e060      	b.n	1a0013b6 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a0012f4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0012f8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0012fc:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001300:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001304:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001308:	492d      	ldr	r1, [pc, #180]	; (1a0013c0 <gpioInit+0x198>)
1a00130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00130e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001312:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001316:	2001      	movs	r0, #1
1a001318:	fa00 f402 	lsl.w	r4, r0, r2
1a00131c:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001324:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001328:	ea22 0204 	bic.w	r2, r2, r4
1a00132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001330:	e041      	b.n	1a0013b6 <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a001332:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001336:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00133a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00133e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001342:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001346:	491e      	ldr	r1, [pc, #120]	; (1a0013c0 <gpioInit+0x198>)
1a001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00134c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001350:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001354:	2001      	movs	r0, #1
1a001356:	fa00 f402 	lsl.w	r4, r0, r2
1a00135a:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00135e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001362:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001366:	ea22 0204 	bic.w	r2, r2, r4
1a00136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00136e:	e022      	b.n	1a0013b6 <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a001370:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001374:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001378:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00137c:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001380:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001384:	490e      	ldr	r1, [pc, #56]	; (1a0013c0 <gpioInit+0x198>)
1a001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00138a:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00138e:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001392:	b25a      	sxtb	r2, r3
1a001394:	2001      	movs	r0, #1
1a001396:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a00139a:	4a08      	ldr	r2, [pc, #32]	; (1a0013bc <gpioInit+0x194>)
1a00139c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0013a0:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0013a4:	4331      	orrs	r1, r6
1a0013a6:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0013aa:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0013ae:	2100      	movs	r1, #0
1a0013b0:	54d1      	strb	r1, [r2, r3]
1a0013b2:	e000      	b.n	1a0013b6 <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0013b4:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0013b6:	b004      	add	sp, #16
1a0013b8:	bd70      	pop	{r4, r5, r6, pc}
1a0013ba:	bf00      	nop
1a0013bc:	400f4000 	.word	0x400f4000
1a0013c0:	40086000 	.word	0x40086000

1a0013c4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0013c4:	b510      	push	{r4, lr}
1a0013c6:	b084      	sub	sp, #16
1a0013c8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0013ca:	2300      	movs	r3, #0
1a0013cc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0013d0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0013d4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0013d8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0013dc:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0013e0:	ab03      	add	r3, sp, #12
1a0013e2:	9300      	str	r3, [sp, #0]
1a0013e4:	f10d 030b 	add.w	r3, sp, #11
1a0013e8:	9301      	str	r3, [sp, #4]
1a0013ea:	f10d 010f 	add.w	r1, sp, #15
1a0013ee:	f10d 020e 	add.w	r2, sp, #14
1a0013f2:	f10d 030d 	add.w	r3, sp, #13
1a0013f6:	f7ff ff01 	bl	1a0011fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0013fa:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a0013fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001402:	3400      	adds	r4, #0
1a001404:	bf18      	it	ne
1a001406:	2401      	movne	r4, #1
1a001408:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a00140c:	4a02      	ldr	r2, [pc, #8]	; (1a001418 <gpioWrite+0x54>)
1a00140e:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a001410:	2001      	movs	r0, #1
1a001412:	b004      	add	sp, #16
1a001414:	bd10      	pop	{r4, pc}
1a001416:	bf00      	nop
1a001418:	400f4000 	.word	0x400f4000

1a00141c <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00141c:	b500      	push	{lr}
1a00141e:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a001420:	2300      	movs	r3, #0
1a001422:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001426:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00142a:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00142e:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001432:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001436:	ab03      	add	r3, sp, #12
1a001438:	9300      	str	r3, [sp, #0]
1a00143a:	f10d 030b 	add.w	r3, sp, #11
1a00143e:	9301      	str	r3, [sp, #4]
1a001440:	f10d 010f 	add.w	r1, sp, #15
1a001444:	f10d 020e 	add.w	r2, sp, #14
1a001448:	f10d 030d 	add.w	r3, sp, #13
1a00144c:	f7ff fed6 	bl	1a0011fc <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a001450:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a001454:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a001458:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a00145c:	4a04      	ldr	r2, [pc, #16]	; (1a001470 <gpioRead+0x54>)
1a00145e:	5cd3      	ldrb	r3, [r2, r3]
1a001460:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a001464:	bf14      	ite	ne
1a001466:	2001      	movne	r0, #1
1a001468:	2000      	moveq	r0, #0
1a00146a:	b005      	add	sp, #20
1a00146c:	f85d fb04 	ldr.w	pc, [sp], #4
1a001470:	400f4000 	.word	0x400f4000

1a001474 <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a001474:	b510      	push	{r4, lr}
1a001476:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a001478:	f7ff ffd0 	bl	1a00141c <gpioRead>
1a00147c:	fab0 f180 	clz	r1, r0
1a001480:	0949      	lsrs	r1, r1, #5
1a001482:	4620      	mov	r0, r4
1a001484:	f7ff ff9e 	bl	1a0013c4 <gpioWrite>
}
1a001488:	bd10      	pop	{r4, pc}
1a00148a:	bf00      	nop

1a00148c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a00148c:	4b01      	ldr	r3, [pc, #4]	; (1a001494 <tickRead+0x8>)
1a00148e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001492:	4770      	bx	lr
1a001494:	10000380 	.word	0x10000380

1a001498 <tickCallbackSet>:

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
   if( tickCallback != NULL ) {
1a001498:	b118      	cbz	r0, 1a0014a2 <tickCallbackSet+0xa>
      tickHookFunction = tickCallback;
1a00149a:	4a05      	ldr	r2, [pc, #20]	; (1a0014b0 <tickCallbackSet+0x18>)
1a00149c:	6010      	str	r0, [r2, #0]
}

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
1a00149e:	2001      	movs	r0, #1
1a0014a0:	e000      	b.n	1a0014a4 <tickCallbackSet+0xc>
   if( tickCallback != NULL ) {
      tickHookFunction = tickCallback;
   } else {
      retVal = FALSE;
1a0014a2:	2000      	movs	r0, #0
   }
   if( tickCallbackParams != NULL ) {
1a0014a4:	b111      	cbz	r1, 1a0014ac <tickCallbackSet+0x14>
      callBackFuncParams = tickCallbackParams;
1a0014a6:	4b03      	ldr	r3, [pc, #12]	; (1a0014b4 <tickCallbackSet+0x1c>)
1a0014a8:	6019      	str	r1, [r3, #0]
1a0014aa:	4770      	bx	lr
   } else {
      retVal &= FALSE;
1a0014ac:	2000      	movs	r0, #0
   }
   return retVal;
}
1a0014ae:	4770      	bx	lr
1a0014b0:	10000310 	.word	0x10000310
1a0014b4:	10000314 	.word	0x10000314

1a0014b8 <tickPowerSet>:

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a0014b8:	b118      	cbz	r0, 1a0014c2 <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a0014ba:	2207      	movs	r2, #7
1a0014bc:	4b03      	ldr	r3, [pc, #12]	; (1a0014cc <tickPowerSet+0x14>)
1a0014be:	601a      	str	r2, [r3, #0]
1a0014c0:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a0014c2:	2200      	movs	r2, #0
1a0014c4:	4b01      	ldr	r3, [pc, #4]	; (1a0014cc <tickPowerSet+0x14>)
1a0014c6:	601a      	str	r2, [r3, #0]
1a0014c8:	4770      	bx	lr
1a0014ca:	bf00      	nop
1a0014cc:	e000e010 	.word	0xe000e010

1a0014d0 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0014d0:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0014d2:	ea50 0301 	orrs.w	r3, r0, r1
1a0014d6:	d104      	bne.n	1a0014e2 <tickInit+0x12>
         tickPowerSet( OFF );
1a0014d8:	2000      	movs	r0, #0
1a0014da:	f7ff ffed 	bl	1a0014b8 <tickPowerSet>
         ret_val = 0;
1a0014de:	2000      	movs	r0, #0
1a0014e0:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0014e2:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0014e6:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0014ea:	2b00      	cmp	r3, #0
1a0014ec:	bf08      	it	eq
1a0014ee:	2a32      	cmpeq	r2, #50	; 0x32
1a0014f0:	d222      	bcs.n	1a001538 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0014f2:	4b12      	ldr	r3, [pc, #72]	; (1a00153c <tickInit+0x6c>)
1a0014f4:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0014f8:	4b11      	ldr	r3, [pc, #68]	; (1a001540 <tickInit+0x70>)
1a0014fa:	681c      	ldr	r4, [r3, #0]
1a0014fc:	fba4 2300 	umull	r2, r3, r4, r0
1a001500:	fb04 3301 	mla	r3, r4, r1, r3
1a001504:	4610      	mov	r0, r2
1a001506:	4619      	mov	r1, r3
1a001508:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00150c:	2300      	movs	r3, #0
1a00150e:	f001 fa81 	bl	1a002a14 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001512:	3801      	subs	r0, #1
1a001514:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001518:	d209      	bcs.n	1a00152e <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00151a:	4b0a      	ldr	r3, [pc, #40]	; (1a001544 <tickInit+0x74>)
1a00151c:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00151e:	21e0      	movs	r1, #224	; 0xe0
1a001520:	4a09      	ldr	r2, [pc, #36]	; (1a001548 <tickInit+0x78>)
1a001522:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001526:	2200      	movs	r2, #0
1a001528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00152a:	2207      	movs	r2, #7
1a00152c:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a00152e:	2001      	movs	r0, #1
1a001530:	f7ff ffc2 	bl	1a0014b8 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a001534:	2001      	movs	r0, #1
1a001536:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a001538:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a00153a:	bd10      	pop	{r4, pc}
1a00153c:	10000388 	.word	0x10000388
1a001540:	10000390 	.word	0x10000390
1a001544:	e000e010 	.word	0xe000e010
1a001548:	e000ed00 	.word	0xe000ed00

1a00154c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00154c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00154e:	4908      	ldr	r1, [pc, #32]	; (1a001570 <SysTick_Handler+0x24>)
1a001550:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001554:	3201      	adds	r2, #1
1a001556:	f143 0300 	adc.w	r3, r3, #0
1a00155a:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00155e:	4b05      	ldr	r3, [pc, #20]	; (1a001574 <SysTick_Handler+0x28>)
1a001560:	681b      	ldr	r3, [r3, #0]
1a001562:	b123      	cbz	r3, 1a00156e <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001564:	4b03      	ldr	r3, [pc, #12]	; (1a001574 <SysTick_Handler+0x28>)
1a001566:	681b      	ldr	r3, [r3, #0]
1a001568:	4a03      	ldr	r2, [pc, #12]	; (1a001578 <SysTick_Handler+0x2c>)
1a00156a:	6810      	ldr	r0, [r2, #0]
1a00156c:	4798      	blx	r3
1a00156e:	bd08      	pop	{r3, pc}
1a001570:	10000380 	.word	0x10000380
1a001574:	10000310 	.word	0x10000310
1a001578:	10000314 	.word	0x10000314

1a00157c <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a00157c:	b570      	push	{r4, r5, r6, lr}
1a00157e:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a001580:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a001584:	009b      	lsls	r3, r3, #2
1a001586:	4a21      	ldr	r2, [pc, #132]	; (1a00160c <uartProcessIRQ+0x90>)
1a001588:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00158a:	6975      	ldr	r5, [r6, #20]
1a00158c:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a00158e:	f015 0f01 	tst.w	r5, #1
1a001592:	d019      	beq.n	1a0015c8 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a001594:	b930      	cbnz	r0, 1a0015a4 <uartProcessIRQ+0x28>
1a001596:	4b1e      	ldr	r3, [pc, #120]	; (1a001610 <uartProcessIRQ+0x94>)
1a001598:	681b      	ldr	r3, [r3, #0]
1a00159a:	b11b      	cbz	r3, 1a0015a4 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a00159c:	4b1c      	ldr	r3, [pc, #112]	; (1a001610 <uartProcessIRQ+0x94>)
1a00159e:	681b      	ldr	r3, [r3, #0]
1a0015a0:	2000      	movs	r0, #0
1a0015a2:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0015a4:	2c03      	cmp	r4, #3
1a0015a6:	d106      	bne.n	1a0015b6 <uartProcessIRQ+0x3a>
1a0015a8:	4b1a      	ldr	r3, [pc, #104]	; (1a001614 <uartProcessIRQ+0x98>)
1a0015aa:	681b      	ldr	r3, [r3, #0]
1a0015ac:	b11b      	cbz	r3, 1a0015b6 <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0015ae:	4b19      	ldr	r3, [pc, #100]	; (1a001614 <uartProcessIRQ+0x98>)
1a0015b0:	681b      	ldr	r3, [r3, #0]
1a0015b2:	2000      	movs	r0, #0
1a0015b4:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0015b6:	2c05      	cmp	r4, #5
1a0015b8:	d106      	bne.n	1a0015c8 <uartProcessIRQ+0x4c>
1a0015ba:	4b17      	ldr	r3, [pc, #92]	; (1a001618 <uartProcessIRQ+0x9c>)
1a0015bc:	681b      	ldr	r3, [r3, #0]
1a0015be:	b11b      	cbz	r3, 1a0015c8 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0015c0:	4b15      	ldr	r3, [pc, #84]	; (1a001618 <uartProcessIRQ+0x9c>)
1a0015c2:	681b      	ldr	r3, [r3, #0]
1a0015c4:	2000      	movs	r0, #0
1a0015c6:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0015c8:	f015 0f20 	tst.w	r5, #32
1a0015cc:	d01d      	beq.n	1a00160a <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0015ce:	6873      	ldr	r3, [r6, #4]
1a0015d0:	f013 0f02 	tst.w	r3, #2
1a0015d4:	d019      	beq.n	1a00160a <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0015d6:	b934      	cbnz	r4, 1a0015e6 <uartProcessIRQ+0x6a>
1a0015d8:	4b10      	ldr	r3, [pc, #64]	; (1a00161c <uartProcessIRQ+0xa0>)
1a0015da:	681b      	ldr	r3, [r3, #0]
1a0015dc:	b11b      	cbz	r3, 1a0015e6 <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a0015de:	4b0f      	ldr	r3, [pc, #60]	; (1a00161c <uartProcessIRQ+0xa0>)
1a0015e0:	681b      	ldr	r3, [r3, #0]
1a0015e2:	2000      	movs	r0, #0
1a0015e4:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0015e6:	2c03      	cmp	r4, #3
1a0015e8:	d106      	bne.n	1a0015f8 <uartProcessIRQ+0x7c>
1a0015ea:	4b0d      	ldr	r3, [pc, #52]	; (1a001620 <uartProcessIRQ+0xa4>)
1a0015ec:	681b      	ldr	r3, [r3, #0]
1a0015ee:	b11b      	cbz	r3, 1a0015f8 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a0015f0:	4b0b      	ldr	r3, [pc, #44]	; (1a001620 <uartProcessIRQ+0xa4>)
1a0015f2:	681b      	ldr	r3, [r3, #0]
1a0015f4:	2000      	movs	r0, #0
1a0015f6:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0015f8:	2c05      	cmp	r4, #5
1a0015fa:	d106      	bne.n	1a00160a <uartProcessIRQ+0x8e>
1a0015fc:	4b09      	ldr	r3, [pc, #36]	; (1a001624 <uartProcessIRQ+0xa8>)
1a0015fe:	681b      	ldr	r3, [r3, #0]
1a001600:	b11b      	cbz	r3, 1a00160a <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a001602:	4b08      	ldr	r3, [pc, #32]	; (1a001624 <uartProcessIRQ+0xa8>)
1a001604:	681b      	ldr	r3, [r3, #0]
1a001606:	2000      	movs	r0, #0
1a001608:	4798      	blx	r3
1a00160a:	bd70      	pop	{r4, r5, r6, pc}
1a00160c:	1a00325c 	.word	0x1a00325c
1a001610:	10000318 	.word	0x10000318
1a001614:	10000328 	.word	0x10000328
1a001618:	1000032c 	.word	0x1000032c
1a00161c:	1000031c 	.word	0x1000031c
1a001620:	10000320 	.word	0x10000320
1a001624:	10000324 	.word	0x10000324

1a001628 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001628:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00162c:	0080      	lsls	r0, r0, #2
1a00162e:	4b03      	ldr	r3, [pc, #12]	; (1a00163c <uartRxReady+0x14>)
1a001630:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001632:	6958      	ldr	r0, [r3, #20]
}
1a001634:	f000 0001 	and.w	r0, r0, #1
1a001638:	4770      	bx	lr
1a00163a:	bf00      	nop
1a00163c:	1a00325c 	.word	0x1a00325c

1a001640 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001640:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001644:	0080      	lsls	r0, r0, #2
1a001646:	4b03      	ldr	r3, [pc, #12]	; (1a001654 <uartTxReady+0x14>)
1a001648:	581b      	ldr	r3, [r3, r0]
1a00164a:	6958      	ldr	r0, [r3, #20]
}
1a00164c:	f000 0020 	and.w	r0, r0, #32
1a001650:	4770      	bx	lr
1a001652:	bf00      	nop
1a001654:	1a00325c 	.word	0x1a00325c

1a001658 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001658:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00165c:	0080      	lsls	r0, r0, #2
1a00165e:	4b02      	ldr	r3, [pc, #8]	; (1a001668 <uartRxRead+0x10>)
1a001660:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001662:	6818      	ldr	r0, [r3, #0]
}
1a001664:	b2c0      	uxtb	r0, r0
1a001666:	4770      	bx	lr
1a001668:	1a00325c 	.word	0x1a00325c

1a00166c <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a00166c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001670:	0080      	lsls	r0, r0, #2
1a001672:	4b02      	ldr	r3, [pc, #8]	; (1a00167c <uartTxWrite+0x10>)
1a001674:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a001676:	6019      	str	r1, [r3, #0]
1a001678:	4770      	bx	lr
1a00167a:	bf00      	nop
1a00167c:	1a00325c 	.word	0x1a00325c

1a001680 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001684:	4607      	mov	r7, r0
1a001686:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001688:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a0016f8 <uartInit+0x78>
1a00168c:	0044      	lsls	r4, r0, #1
1a00168e:	1823      	adds	r3, r4, r0
1a001690:	009b      	lsls	r3, r3, #2
1a001692:	eb08 0503 	add.w	r5, r8, r3
1a001696:	f858 6003 	ldr.w	r6, [r8, r3]
1a00169a:	4630      	mov	r0, r6
1a00169c:	f000 fbc8 	bl	1a001e30 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a0016a0:	4630      	mov	r0, r6
1a0016a2:	4649      	mov	r1, r9
1a0016a4:	f000 fbee 	bl	1a001e84 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a0016a8:	2307      	movs	r3, #7
1a0016aa:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a0016ac:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a0016ae:	2301      	movs	r3, #1
1a0016b0:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a0016b2:	7929      	ldrb	r1, [r5, #4]
1a0016b4:	796b      	ldrb	r3, [r5, #5]
1a0016b6:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0016b8:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0016bc:	480c      	ldr	r0, [pc, #48]	; (1a0016f0 <uartInit+0x70>)
1a0016be:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0016c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a0016c6:	79ee      	ldrb	r6, [r5, #7]
1a0016c8:	7a2a      	ldrb	r2, [r5, #8]
1a0016ca:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0016cc:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0016d0:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a0016d4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0016d8:	2f01      	cmp	r7, #1
1a0016da:	d107      	bne.n	1a0016ec <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0016dc:	4a05      	ldr	r2, [pc, #20]	; (1a0016f4 <uartInit+0x74>)
1a0016de:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0016e0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0016e4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0016e6:	221a      	movs	r2, #26
1a0016e8:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a0016ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0016f0:	40086000 	.word	0x40086000
1a0016f4:	40081000 	.word	0x40081000
1a0016f8:	1a00325c 	.word	0x1a00325c

1a0016fc <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a0016fc:	b538      	push	{r3, r4, r5, lr}
1a0016fe:	4605      	mov	r5, r0
1a001700:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a001702:	f7ff ff91 	bl	1a001628 <uartRxReady>
1a001706:	b128      	cbz	r0, 1a001714 <uartReadByte+0x18>
      *receivedByte = uartRxRead(uart);
1a001708:	4628      	mov	r0, r5
1a00170a:	f7ff ffa5 	bl	1a001658 <uartRxRead>
1a00170e:	7020      	strb	r0, [r4, #0]
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
   bool_t retVal = TRUE;
1a001710:	2001      	movs	r0, #1
1a001712:	bd38      	pop	{r3, r4, r5, pc}
   if ( uartRxReady(uart) ) {
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
1a001714:	2000      	movs	r0, #0
   }
   return retVal;
}
1a001716:	bd38      	pop	{r3, r4, r5, pc}

1a001718 <waitForReceiveStringOrTimeout>:

// Check for Receive a given pattern

waitForReceiveStringOrTimeoutState_t waitForReceiveStringOrTimeout(
   uartMap_t uart, waitForReceiveStringOrTimeout_t* instance )
{
1a001718:	b510      	push	{r4, lr}
1a00171a:	b082      	sub	sp, #8
1a00171c:	460c      	mov	r4, r1

   uint8_t receiveByte;
   //char receiveBuffer[100];

   switch( instance->state ) {
1a00171e:	780b      	ldrb	r3, [r1, #0]
1a001720:	2b04      	cmp	r3, #4
1a001722:	d832      	bhi.n	1a00178a <waitForReceiveStringOrTimeout+0x72>
1a001724:	e8df f003 	tbb	[pc, r3]
1a001728:	312b0e03 	.word	0x312b0e03
1a00172c:	2e          	.byte	0x2e
1a00172d:	00          	.byte	0x00

   case UART_RECEIVE_STRING_CONFIG:

      delayInit( &(instance->delay), instance->timeout );
1a00172e:	f101 0018 	add.w	r0, r1, #24
1a001732:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a001736:	f000 f8b5 	bl	1a0018a4 <delayInit>

      instance->stringIndex = 0;
1a00173a:	2300      	movs	r3, #0
1a00173c:	8163      	strh	r3, [r4, #10]

      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a00173e:	2301      	movs	r3, #1
1a001740:	7023      	strb	r3, [r4, #0]

      break;
1a001742:	e024      	b.n	1a00178e <waitForReceiveStringOrTimeout+0x76>

   case UART_RECEIVE_STRING_RECEIVING:

      if( uartReadByte( uart, &receiveByte ) ) {
1a001744:	f10d 0107 	add.w	r1, sp, #7
1a001748:	f7ff ffd8 	bl	1a0016fc <uartReadByte>
1a00174c:	b178      	cbz	r0, 1a00176e <waitForReceiveStringOrTimeout+0x56>
         //uartWriteByte( UART_DEBUG, receiveByte ); // TODO: DEBUG
         /*            if( (instance->stringIndex) <= 100 ){
                        receiveBuffer[instance->stringIndex] = receiveByte;
                     }
         */
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a00174e:	6862      	ldr	r2, [r4, #4]
1a001750:	8963      	ldrh	r3, [r4, #10]
1a001752:	5cd1      	ldrb	r1, [r2, r3]
1a001754:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a001758:	4291      	cmp	r1, r2
1a00175a:	d108      	bne.n	1a00176e <waitForReceiveStringOrTimeout+0x56>

            (instance->stringIndex)++;
1a00175c:	3301      	adds	r3, #1
1a00175e:	b29b      	uxth	r3, r3
1a001760:	8163      	strh	r3, [r4, #10]

            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a001762:	8922      	ldrh	r2, [r4, #8]
1a001764:	3a01      	subs	r2, #1
1a001766:	4293      	cmp	r3, r2
1a001768:	d101      	bne.n	1a00176e <waitForReceiveStringOrTimeout+0x56>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a00176a:	2302      	movs	r3, #2
1a00176c:	7023      	strb	r3, [r4, #0]

         }

      }

      if( delayRead( &(instance->delay) ) ) {
1a00176e:	f104 0018 	add.w	r0, r4, #24
1a001772:	f000 f8a7 	bl	1a0018c4 <delayRead>
1a001776:	b150      	cbz	r0, 1a00178e <waitForReceiveStringOrTimeout+0x76>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a001778:	2304      	movs	r3, #4
1a00177a:	7023      	strb	r3, [r4, #0]
1a00177c:	e007      	b.n	1a00178e <waitForReceiveStringOrTimeout+0x76>
      }

      break;

   case UART_RECEIVE_STRING_RECEIVED_OK:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a00177e:	2300      	movs	r3, #0
1a001780:	700b      	strb	r3, [r1, #0]
      break;
1a001782:	e004      	b.n	1a00178e <waitForReceiveStringOrTimeout+0x76>

   case UART_RECEIVE_STRING_TIMEOUT:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a001784:	2300      	movs	r3, #0
1a001786:	700b      	strb	r3, [r1, #0]
      break;
1a001788:	e001      	b.n	1a00178e <waitForReceiveStringOrTimeout+0x76>

   default:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a00178a:	2300      	movs	r3, #0
1a00178c:	700b      	strb	r3, [r1, #0]
      break;
   }

   return instance->state;
}
1a00178e:	7820      	ldrb	r0, [r4, #0]
1a001790:	b002      	add	sp, #8
1a001792:	bd10      	pop	{r4, pc}

1a001794 <waitForReceiveStringOrTimeoutBlocking>:
// Devuelve TRUE cuando recibio la cadena patron, si paso el tiempo timeout
// en milisegundos antes de recibir el patron devuelve FALSE.
// No almacena los datos recibidos!! Simplemente espera a recibir cierto patron.
bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout )
{
1a001794:	b510      	push	{r4, lr}
1a001796:	b08c      	sub	sp, #48	; 0x30
1a001798:	4604      	mov	r4, r0
   waitForReceiveStringOrTimeout_t waitText;
   waitForReceiveStringOrTimeoutState_t waitTextState;

   waitTextState = UART_RECEIVE_STRING_CONFIG;

   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a00179a:	2000      	movs	r0, #0
1a00179c:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a0017a0:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a0017a2:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a0017a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a0017aa:	e9cd 2304 	strd	r2, r3, [sp, #16]

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0017ae:	e003      	b.n	1a0017b8 <waitForReceiveStringOrTimeoutBlocking+0x24>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a0017b0:	4620      	mov	r0, r4
1a0017b2:	4669      	mov	r1, sp
1a0017b4:	f7ff ffb0 	bl	1a001718 <waitForReceiveStringOrTimeout>
   waitText.state = UART_RECEIVE_STRING_CONFIG;
   waitText.string =  string;
   waitText.stringSize = stringSize;
   waitText.timeout = timeout;

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a0017b8:	2802      	cmp	r0, #2
1a0017ba:	d001      	beq.n	1a0017c0 <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a0017bc:	2804      	cmp	r0, #4
1a0017be:	d1f7      	bne.n	1a0017b0 <waitForReceiveStringOrTimeoutBlocking+0x1c>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a0017c0:	2804      	cmp	r0, #4
1a0017c2:	d001      	beq.n	1a0017c8 <waitForReceiveStringOrTimeoutBlocking+0x34>
// No almacena los datos recibidos!! Simplemente espera a recibir cierto patron.
bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout )
{

   bool_t retVal = TRUE; // True if OK
1a0017c4:	2001      	movs	r0, #1
1a0017c6:	e000      	b.n	1a0017ca <waitForReceiveStringOrTimeoutBlocking+0x36>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
      retVal = FALSE;
1a0017c8:	2000      	movs	r0, #0
   }

   return retVal;
}
1a0017ca:	b00c      	add	sp, #48	; 0x30
1a0017cc:	bd10      	pop	{r4, pc}
1a0017ce:	bf00      	nop

1a0017d0 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a0017d0:	b538      	push	{r3, r4, r5, lr}
1a0017d2:	4604      	mov	r4, r0
1a0017d4:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a0017d6:	4620      	mov	r0, r4
1a0017d8:	f7ff ff32 	bl	1a001640 <uartTxReady>
1a0017dc:	2800      	cmp	r0, #0
1a0017de:	d0fa      	beq.n	1a0017d6 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a0017e0:	4620      	mov	r0, r4
1a0017e2:	4629      	mov	r1, r5
1a0017e4:	f7ff ff42 	bl	1a00166c <uartTxWrite>
1a0017e8:	bd38      	pop	{r3, r4, r5, pc}
1a0017ea:	bf00      	nop

1a0017ec <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0017ec:	b538      	push	{r3, r4, r5, lr}
1a0017ee:	4605      	mov	r5, r0
1a0017f0:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0017f2:	e003      	b.n	1a0017fc <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0017f4:	4628      	mov	r0, r5
1a0017f6:	f7ff ffeb 	bl	1a0017d0 <uartWriteByte>
      str++;
1a0017fa:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a0017fc:	7821      	ldrb	r1, [r4, #0]
1a0017fe:	2900      	cmp	r1, #0
1a001800:	d1f8      	bne.n	1a0017f4 <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a001802:	bd38      	pop	{r3, r4, r5, pc}

1a001804 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001804:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001806:	2003      	movs	r0, #3
1a001808:	f7ff feb8 	bl	1a00157c <uartProcessIRQ>
1a00180c:	bd08      	pop	{r3, pc}
1a00180e:	bf00      	nop

1a001810 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001810:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001812:	2005      	movs	r0, #5
1a001814:	f7ff feb2 	bl	1a00157c <uartProcessIRQ>
1a001818:	bd08      	pop	{r3, pc}
1a00181a:	bf00      	nop

1a00181c <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a00181c:	b9e8      	cbnz	r0, 1a00185a <spiInit+0x3e>
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{
1a00181e:	b510      	push	{r4, lr}
1a001820:	4b0f      	ldr	r3, [pc, #60]	; (1a001860 <spiInit+0x44>)
1a001822:	2200      	movs	r2, #0
1a001824:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a001828:	21c5      	movs	r1, #197	; 0xc5
1a00182a:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a00182e:	2105      	movs	r1, #5
1a001830:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a001834:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a001838:	490a      	ldr	r1, [pc, #40]	; (1a001864 <spiInit+0x48>)
1a00183a:	f242 020c 	movw	r2, #8204	; 0x200c
1a00183e:	588b      	ldr	r3, [r1, r2]
1a001840:	f043 0301 	orr.w	r3, r3, #1
1a001844:	508b      	str	r3, [r1, r2]

      Chip_SCU_PinMuxSet(0x6, 1, (SCU_MODE_PULLUP | SCU_MODE_FUNC0)); // CS1 configured as GPIO
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 3, 0);

      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
1a001846:	4c08      	ldr	r4, [pc, #32]	; (1a001868 <spiInit+0x4c>)
1a001848:	4620      	mov	r0, r4
1a00184a:	f001 f883 	bl	1a002954 <Chip_SSP_Init>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00184e:	6863      	ldr	r3, [r4, #4]
1a001850:	f043 0302 	orr.w	r3, r3, #2
1a001854:	6063      	str	r3, [r4, #4]
/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;
1a001856:	2001      	movs	r0, #1
1a001858:	bd10      	pop	{r4, pc}
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a00185a:	2000      	movs	r0, #0
1a00185c:	4770      	bx	lr
1a00185e:	bf00      	nop
1a001860:	40086000 	.word	0x40086000
1a001864:	400f4000 	.word	0x400f4000
1a001868:	400c5000 	.word	0x400c5000

1a00186c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a00186c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001870:	4680      	mov	r8, r0
1a001872:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a001874:	f7ff fe0a 	bl	1a00148c <tickRead>
1a001878:	4606      	mov	r6, r0
1a00187a:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a00187c:	f7ff fe06 	bl	1a00148c <tickRead>
1a001880:	1b84      	subs	r4, r0, r6
1a001882:	eb61 0507 	sbc.w	r5, r1, r7
1a001886:	4640      	mov	r0, r8
1a001888:	4649      	mov	r1, r9
1a00188a:	4b05      	ldr	r3, [pc, #20]	; (1a0018a0 <delay+0x34>)
1a00188c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001890:	f001 f8c0 	bl	1a002a14 <__aeabi_uldivmod>
1a001894:	428d      	cmp	r5, r1
1a001896:	bf08      	it	eq
1a001898:	4284      	cmpeq	r4, r0
1a00189a:	d3ef      	bcc.n	1a00187c <delay+0x10>
}
1a00189c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0018a0:	10000388 	.word	0x10000388

1a0018a4 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0018a4:	b510      	push	{r4, lr}
1a0018a6:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a0018a8:	4610      	mov	r0, r2
1a0018aa:	4619      	mov	r1, r3
1a0018ac:	4b04      	ldr	r3, [pc, #16]	; (1a0018c0 <delayInit+0x1c>)
1a0018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0018b2:	f001 f8af 	bl	1a002a14 <__aeabi_uldivmod>
1a0018b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0018ba:	2300      	movs	r3, #0
1a0018bc:	7423      	strb	r3, [r4, #16]
1a0018be:	bd10      	pop	{r4, pc}
1a0018c0:	10000388 	.word	0x10000388

1a0018c4 <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a0018c4:	b510      	push	{r4, lr}
1a0018c6:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0018c8:	7c03      	ldrb	r3, [r0, #16]
1a0018ca:	b93b      	cbnz	r3, 1a0018dc <delayRead+0x18>
      delay->startTime = tickRead();
1a0018cc:	f7ff fdde 	bl	1a00148c <tickRead>
1a0018d0:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a0018d4:	2301      	movs	r3, #1
1a0018d6:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a0018d8:	2000      	movs	r0, #0
1a0018da:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a0018dc:	f7ff fdd6 	bl	1a00148c <tickRead>
1a0018e0:	e9d4 2300 	ldrd	r2, r3, [r4]
1a0018e4:	1a80      	subs	r0, r0, r2
1a0018e6:	eb61 0103 	sbc.w	r1, r1, r3
1a0018ea:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a0018ee:	4299      	cmp	r1, r3
1a0018f0:	bf08      	it	eq
1a0018f2:	4290      	cmpeq	r0, r2
1a0018f4:	d303      	bcc.n	1a0018fe <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a0018f6:	2300      	movs	r3, #0
1a0018f8:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a0018fa:	2001      	movs	r0, #1
1a0018fc:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a0018fe:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001900:	bd10      	pop	{r4, pc}
1a001902:	bf00      	nop

1a001904 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001904:	e7fe      	b.n	1a001904 <errorOcurred>
1a001906:	bf00      	nop

1a001908 <doNothing>:
}

static void doNothing( void* ptr )
{
1a001908:	4770      	bx	lr
1a00190a:	bf00      	nop

1a00190c <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a00190c:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00190e:	2400      	movs	r4, #0
1a001910:	e013      	b.n	1a00193a <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001912:	4b0b      	ldr	r3, [pc, #44]	; (1a001940 <TIMER0_IRQHandler+0x34>)
1a001914:	681a      	ldr	r2, [r3, #0]
1a001916:	f004 010f 	and.w	r1, r4, #15
1a00191a:	2301      	movs	r3, #1
1a00191c:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a00191e:	421a      	tst	r2, r3
1a001920:	d009      	beq.n	1a001936 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001922:	4b08      	ldr	r3, [pc, #32]	; (1a001944 <TIMER0_IRQHandler+0x38>)
1a001924:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001928:	2000      	movs	r0, #0
1a00192a:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00192c:	b262      	sxtb	r2, r4
1a00192e:	2301      	movs	r3, #1
1a001930:	4093      	lsls	r3, r2
1a001932:	4a03      	ldr	r2, [pc, #12]	; (1a001940 <TIMER0_IRQHandler+0x34>)
1a001934:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001936:	3401      	adds	r4, #1
1a001938:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00193a:	2c03      	cmp	r4, #3
1a00193c:	d9e9      	bls.n	1a001912 <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a00193e:	bd10      	pop	{r4, pc}
1a001940:	40084000 	.word	0x40084000
1a001944:	10000054 	.word	0x10000054

1a001948 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001948:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00194a:	2400      	movs	r4, #0
1a00194c:	e014      	b.n	1a001978 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00194e:	4b0c      	ldr	r3, [pc, #48]	; (1a001980 <TIMER1_IRQHandler+0x38>)
1a001950:	681a      	ldr	r2, [r3, #0]
1a001952:	f004 010f 	and.w	r1, r4, #15
1a001956:	2301      	movs	r3, #1
1a001958:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a00195a:	421a      	tst	r2, r3
1a00195c:	d00a      	beq.n	1a001974 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00195e:	1d23      	adds	r3, r4, #4
1a001960:	4a08      	ldr	r2, [pc, #32]	; (1a001984 <TIMER1_IRQHandler+0x3c>)
1a001962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001966:	2000      	movs	r0, #0
1a001968:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a00196a:	b262      	sxtb	r2, r4
1a00196c:	2301      	movs	r3, #1
1a00196e:	4093      	lsls	r3, r2
1a001970:	4a03      	ldr	r2, [pc, #12]	; (1a001980 <TIMER1_IRQHandler+0x38>)
1a001972:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001974:	3401      	adds	r4, #1
1a001976:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001978:	2c03      	cmp	r4, #3
1a00197a:	d9e8      	bls.n	1a00194e <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00197c:	bd10      	pop	{r4, pc}
1a00197e:	bf00      	nop
1a001980:	40085000 	.word	0x40085000
1a001984:	10000054 	.word	0x10000054

1a001988 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001988:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00198a:	2400      	movs	r4, #0
1a00198c:	e015      	b.n	1a0019ba <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00198e:	4b0c      	ldr	r3, [pc, #48]	; (1a0019c0 <TIMER2_IRQHandler+0x38>)
1a001990:	681a      	ldr	r2, [r3, #0]
1a001992:	f004 010f 	and.w	r1, r4, #15
1a001996:	2301      	movs	r3, #1
1a001998:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a00199a:	421a      	tst	r2, r3
1a00199c:	d00b      	beq.n	1a0019b6 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00199e:	f104 0308 	add.w	r3, r4, #8
1a0019a2:	4a08      	ldr	r2, [pc, #32]	; (1a0019c4 <TIMER2_IRQHandler+0x3c>)
1a0019a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0019a8:	2000      	movs	r0, #0
1a0019aa:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0019ac:	b262      	sxtb	r2, r4
1a0019ae:	2301      	movs	r3, #1
1a0019b0:	4093      	lsls	r3, r2
1a0019b2:	4a03      	ldr	r2, [pc, #12]	; (1a0019c0 <TIMER2_IRQHandler+0x38>)
1a0019b4:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0019b6:	3401      	adds	r4, #1
1a0019b8:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019ba:	2c03      	cmp	r4, #3
1a0019bc:	d9e7      	bls.n	1a00198e <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a0019be:	bd10      	pop	{r4, pc}
1a0019c0:	400c3000 	.word	0x400c3000
1a0019c4:	10000054 	.word	0x10000054

1a0019c8 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a0019c8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019ca:	2400      	movs	r4, #0
1a0019cc:	e015      	b.n	1a0019fa <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0019ce:	4b0c      	ldr	r3, [pc, #48]	; (1a001a00 <TIMER3_IRQHandler+0x38>)
1a0019d0:	681a      	ldr	r2, [r3, #0]
1a0019d2:	f004 010f 	and.w	r1, r4, #15
1a0019d6:	2301      	movs	r3, #1
1a0019d8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0019da:	421a      	tst	r2, r3
1a0019dc:	d00b      	beq.n	1a0019f6 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0019de:	f104 030c 	add.w	r3, r4, #12
1a0019e2:	4a08      	ldr	r2, [pc, #32]	; (1a001a04 <TIMER3_IRQHandler+0x3c>)
1a0019e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0019e8:	2000      	movs	r0, #0
1a0019ea:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0019ec:	b262      	sxtb	r2, r4
1a0019ee:	2301      	movs	r3, #1
1a0019f0:	4093      	lsls	r3, r2
1a0019f2:	4a03      	ldr	r2, [pc, #12]	; (1a001a00 <TIMER3_IRQHandler+0x38>)
1a0019f4:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0019f6:	3401      	adds	r4, #1
1a0019f8:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0019fa:	2c03      	cmp	r4, #3
1a0019fc:	d9e7      	bls.n	1a0019ce <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0019fe:	bd10      	pop	{r4, pc}
1a001a00:	400c4000 	.word	0x400c4000
1a001a04:	10000054 	.word	0x10000054

1a001a08 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a001a08:	b508      	push	{r3, lr}
   *printer = uart;
1a001a0a:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a001a0c:	4608      	mov	r0, r1
1a001a0e:	4611      	mov	r1, r2
1a001a10:	f7ff fe36 	bl	1a001680 <uartInit>
1a001a14:	bd08      	pop	{r3, pc}
1a001a16:	bf00      	nop

1a001a18 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a001a18:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a001a1a:	f7ff fee7 	bl	1a0017ec <uartWriteString>
1a001a1e:	bd08      	pop	{r3, pc}

1a001a20 <printEnter>:
}

void printEnter( print_t printer )
{
1a001a20:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a001a22:	4902      	ldr	r1, [pc, #8]	; (1a001a2c <printEnter+0xc>)
1a001a24:	f7ff fee2 	bl	1a0017ec <uartWriteString>
1a001a28:	bd08      	pop	{r3, pc}
1a001a2a:	bf00      	nop
1a001a2c:	1a0030c8 	.word	0x1a0030c8

1a001a30 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001a30:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001a32:	f000 fb1b 	bl	1a00206c <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001a36:	4b3a      	ldr	r3, [pc, #232]	; (1a001b20 <boardInit+0xf0>)
1a001a38:	6818      	ldr	r0, [r3, #0]
1a001a3a:	f7ff fb87 	bl	1a00114c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a001a3e:	2001      	movs	r0, #1
1a001a40:	2100      	movs	r1, #0
1a001a42:	f7ff fd45 	bl	1a0014d0 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a001a46:	2000      	movs	r0, #0
1a001a48:	2105      	movs	r1, #5
1a001a4a:	f7ff fbed 	bl	1a001228 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a001a4e:	2024      	movs	r0, #36	; 0x24
1a001a50:	2100      	movs	r1, #0
1a001a52:	f7ff fbe9 	bl	1a001228 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a001a56:	2025      	movs	r0, #37	; 0x25
1a001a58:	2100      	movs	r1, #0
1a001a5a:	f7ff fbe5 	bl	1a001228 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a001a5e:	2026      	movs	r0, #38	; 0x26
1a001a60:	2100      	movs	r1, #0
1a001a62:	f7ff fbe1 	bl	1a001228 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a001a66:	2027      	movs	r0, #39	; 0x27
1a001a68:	2100      	movs	r1, #0
1a001a6a:	f7ff fbdd 	bl	1a001228 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a001a6e:	2028      	movs	r0, #40	; 0x28
1a001a70:	2101      	movs	r1, #1
1a001a72:	f7ff fbd9 	bl	1a001228 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a001a76:	2029      	movs	r0, #41	; 0x29
1a001a78:	2101      	movs	r1, #1
1a001a7a:	f7ff fbd5 	bl	1a001228 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a001a7e:	202a      	movs	r0, #42	; 0x2a
1a001a80:	2101      	movs	r1, #1
1a001a82:	f7ff fbd1 	bl	1a001228 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a001a86:	202b      	movs	r0, #43	; 0x2b
1a001a88:	2101      	movs	r1, #1
1a001a8a:	f7ff fbcd 	bl	1a001228 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a001a8e:	202c      	movs	r0, #44	; 0x2c
1a001a90:	2101      	movs	r1, #1
1a001a92:	f7ff fbc9 	bl	1a001228 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a001a96:	202d      	movs	r0, #45	; 0x2d
1a001a98:	2101      	movs	r1, #1
1a001a9a:	f7ff fbc5 	bl	1a001228 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a001a9e:	202e      	movs	r0, #46	; 0x2e
1a001aa0:	2100      	movs	r1, #0
1a001aa2:	f7ff fbc1 	bl	1a001228 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a001aa6:	202f      	movs	r0, #47	; 0x2f
1a001aa8:	2100      	movs	r1, #0
1a001aaa:	f7ff fbbd 	bl	1a001228 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a001aae:	2030      	movs	r0, #48	; 0x30
1a001ab0:	2100      	movs	r1, #0
1a001ab2:	f7ff fbb9 	bl	1a001228 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a001ab6:	2031      	movs	r0, #49	; 0x31
1a001ab8:	2100      	movs	r1, #0
1a001aba:	f7ff fbb5 	bl	1a001228 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a001abe:	2032      	movs	r0, #50	; 0x32
1a001ac0:	2100      	movs	r1, #0
1a001ac2:	f7ff fbb1 	bl	1a001228 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a001ac6:	2033      	movs	r0, #51	; 0x33
1a001ac8:	2100      	movs	r1, #0
1a001aca:	f7ff fbad 	bl	1a001228 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a001ace:	2034      	movs	r0, #52	; 0x34
1a001ad0:	2100      	movs	r1, #0
1a001ad2:	f7ff fba9 	bl	1a001228 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a001ad6:	2035      	movs	r0, #53	; 0x35
1a001ad8:	2100      	movs	r1, #0
1a001ada:	f7ff fba5 	bl	1a001228 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a001ade:	2036      	movs	r0, #54	; 0x36
1a001ae0:	2101      	movs	r1, #1
1a001ae2:	f7ff fba1 	bl	1a001228 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a001ae6:	2037      	movs	r0, #55	; 0x37
1a001ae8:	2101      	movs	r1, #1
1a001aea:	f7ff fb9d 	bl	1a001228 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a001aee:	2038      	movs	r0, #56	; 0x38
1a001af0:	2101      	movs	r1, #1
1a001af2:	f7ff fb99 	bl	1a001228 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a001af6:	2039      	movs	r0, #57	; 0x39
1a001af8:	2101      	movs	r1, #1
1a001afa:	f7ff fb95 	bl	1a001228 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a001afe:	203a      	movs	r0, #58	; 0x3a
1a001b00:	2101      	movs	r1, #1
1a001b02:	f7ff fb91 	bl	1a001228 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a001b06:	203b      	movs	r0, #59	; 0x3b
1a001b08:	2101      	movs	r1, #1
1a001b0a:	f7ff fb8d 	bl	1a001228 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a001b0e:	203c      	movs	r0, #60	; 0x3c
1a001b10:	2101      	movs	r1, #1
1a001b12:	f7ff fb89 	bl	1a001228 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a001b16:	203d      	movs	r0, #61	; 0x3d
1a001b18:	2101      	movs	r1, #1
1a001b1a:	f7ff fb85 	bl	1a001228 <gpioInit>
1a001b1e:	bd08      	pop	{r3, pc}
1a001b20:	10000390 	.word	0x10000390

1a001b24 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a001b24:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001b26:	2200      	movs	r2, #0
1a001b28:	e014      	b.n	1a001b54 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a001b2a:	4b0c      	ldr	r3, [pc, #48]	; (1a001b5c <Board_LED_Init+0x38>)
1a001b2c:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a001b30:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a001b34:	7859      	ldrb	r1, [r3, #1]
1a001b36:	480a      	ldr	r0, [pc, #40]	; (1a001b60 <Board_LED_Init+0x3c>)
1a001b38:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001b3c:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a001b40:	2301      	movs	r3, #1
1a001b42:	408b      	lsls	r3, r1
1a001b44:	4333      	orrs	r3, r6
1a001b46:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a001b4a:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a001b4e:	2300      	movs	r3, #0
1a001b50:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a001b52:	3201      	adds	r2, #1
1a001b54:	2a05      	cmp	r2, #5
1a001b56:	d9e8      	bls.n	1a001b2a <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a001b58:	bc70      	pop	{r4, r5, r6}
1a001b5a:	4770      	bx	lr
1a001b5c:	1a0032c8 	.word	0x1a0032c8
1a001b60:	400f4000 	.word	0x400f4000

1a001b64 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a001b64:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001b66:	2300      	movs	r3, #0
1a001b68:	e011      	b.n	1a001b8e <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001b6a:	490b      	ldr	r1, [pc, #44]	; (1a001b98 <Board_TEC_Init+0x34>)
1a001b6c:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001b70:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001b74:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a001b76:	4c09      	ldr	r4, [pc, #36]	; (1a001b9c <Board_TEC_Init+0x38>)
1a001b78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001b7c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a001b80:	2101      	movs	r1, #1
1a001b82:	40a9      	lsls	r1, r5
1a001b84:	ea20 0101 	bic.w	r1, r0, r1
1a001b88:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a001b8c:	3301      	adds	r3, #1
1a001b8e:	2b03      	cmp	r3, #3
1a001b90:	d9eb      	bls.n	1a001b6a <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a001b92:	bc30      	pop	{r4, r5}
1a001b94:	4770      	bx	lr
1a001b96:	bf00      	nop
1a001b98:	1a0032c0 	.word	0x1a0032c0
1a001b9c:	400f4000 	.word	0x400f4000

1a001ba0 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a001ba0:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001ba2:	2300      	movs	r3, #0
1a001ba4:	e011      	b.n	1a001bca <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a001ba6:	490b      	ldr	r1, [pc, #44]	; (1a001bd4 <Board_GPIO_Init+0x34>)
1a001ba8:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a001bac:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a001bb0:	784d      	ldrb	r5, [r1, #1]
1a001bb2:	4c09      	ldr	r4, [pc, #36]	; (1a001bd8 <Board_GPIO_Init+0x38>)
1a001bb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a001bb8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a001bbc:	2101      	movs	r1, #1
1a001bbe:	40a9      	lsls	r1, r5
1a001bc0:	ea20 0101 	bic.w	r1, r0, r1
1a001bc4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a001bc8:	3301      	adds	r3, #1
1a001bca:	2b08      	cmp	r3, #8
1a001bcc:	d9eb      	bls.n	1a001ba6 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a001bce:	bc30      	pop	{r4, r5}
1a001bd0:	4770      	bx	lr
1a001bd2:	bf00      	nop
1a001bd4:	1a0032a4 	.word	0x1a0032a4
1a001bd8:	400f4000 	.word	0x400f4000

1a001bdc <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a001bdc:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a001bde:	4c0b      	ldr	r4, [pc, #44]	; (1a001c0c <Board_SPI_Init+0x30>)
1a001be0:	4620      	mov	r0, r4
1a001be2:	f000 feb7 	bl	1a002954 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001be6:	6863      	ldr	r3, [r4, #4]
1a001be8:	f023 0304 	bic.w	r3, r3, #4
1a001bec:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001bee:	6823      	ldr	r3, [r4, #0]
1a001bf0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001bf4:	f043 0307 	orr.w	r3, r3, #7
1a001bf8:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a001bfa:	4620      	mov	r0, r4
1a001bfc:	4904      	ldr	r1, [pc, #16]	; (1a001c10 <Board_SPI_Init+0x34>)
1a001bfe:	f000 fe89 	bl	1a002914 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a001c02:	6863      	ldr	r3, [r4, #4]
1a001c04:	f043 0302 	orr.w	r3, r3, #2
1a001c08:	6063      	str	r3, [r4, #4]
1a001c0a:	bd10      	pop	{r4, pc}
1a001c0c:	400c5000 	.word	0x400c5000
1a001c10:	000186a0 	.word	0x000186a0

1a001c14 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a001c14:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a001c16:	2000      	movs	r0, #0
1a001c18:	f000 f8ca 	bl	1a001db0 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001c1c:	f640 0208 	movw	r2, #2056	; 0x808
1a001c20:	4b03      	ldr	r3, [pc, #12]	; (1a001c30 <Board_I2C_Init+0x1c>)
1a001c22:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a001c26:	2000      	movs	r0, #0
1a001c28:	4902      	ldr	r1, [pc, #8]	; (1a001c34 <Board_I2C_Init+0x20>)
1a001c2a:	f000 f8d3 	bl	1a001dd4 <Chip_I2C_SetClockRate>
1a001c2e:	bd08      	pop	{r3, pc}
1a001c30:	40086000 	.word	0x40086000
1a001c34:	000f4240 	.word	0x000f4240

1a001c38 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a001c38:	b510      	push	{r4, lr}
1a001c3a:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a001c3c:	4c08      	ldr	r4, [pc, #32]	; (1a001c60 <Board_ADC_Init+0x28>)
1a001c3e:	4620      	mov	r0, r4
1a001c40:	4669      	mov	r1, sp
1a001c42:	f000 f9d3 	bl	1a001fec <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a001c46:	4620      	mov	r0, r4
1a001c48:	4669      	mov	r1, sp
1a001c4a:	4a06      	ldr	r2, [pc, #24]	; (1a001c64 <Board_ADC_Init+0x2c>)
1a001c4c:	f000 f9ee 	bl	1a00202c <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a001c50:	4620      	mov	r0, r4
1a001c52:	4669      	mov	r1, sp
1a001c54:	2200      	movs	r2, #0
1a001c56:	f000 fa03 	bl	1a002060 <Chip_ADC_SetResolution>
}
1a001c5a:	b002      	add	sp, #8
1a001c5c:	bd10      	pop	{r4, pc}
1a001c5e:	bf00      	nop
1a001c60:	400e3000 	.word	0x400e3000
1a001c64:	00061a80 	.word	0x00061a80

1a001c68 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a001c68:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a001c6a:	4c07      	ldr	r4, [pc, #28]	; (1a001c88 <Board_Debug_Init+0x20>)
1a001c6c:	4620      	mov	r0, r4
1a001c6e:	f000 f8df 	bl	1a001e30 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a001c72:	4620      	mov	r0, r4
1a001c74:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001c78:	f000 f924 	bl	1a001ec4 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001c7c:	2303      	movs	r3, #3
1a001c7e:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a001c80:	2301      	movs	r3, #1
1a001c82:	65e3      	str	r3, [r4, #92]	; 0x5c
1a001c84:	bd10      	pop	{r4, pc}
1a001c86:	bf00      	nop
1a001c88:	400c1000 	.word	0x400c1000

1a001c8c <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a001c8c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a001c8e:	f7ff ffeb 	bl	1a001c68 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a001c92:	480b      	ldr	r0, [pc, #44]	; (1a001cc0 <Board_Init+0x34>)
1a001c94:	f000 fd7e 	bl	1a002794 <Chip_GPIO_Init>

   Board_LED_Init();
1a001c98:	f7ff ff44 	bl	1a001b24 <Board_LED_Init>
   Board_TEC_Init();
1a001c9c:	f7ff ff62 	bl	1a001b64 <Board_TEC_Init>
   Board_SPI_Init();
1a001ca0:	f7ff ff9c 	bl	1a001bdc <Board_SPI_Init>
   Board_GPIO_Init();
1a001ca4:	f7ff ff7c 	bl	1a001ba0 <Board_GPIO_Init>
   Board_I2C_Init();
1a001ca8:	f7ff ffb4 	bl	1a001c14 <Board_I2C_Init>
   Board_ADC_Init();
1a001cac:	f7ff ffc4 	bl	1a001c38 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a001cb0:	4a04      	ldr	r2, [pc, #16]	; (1a001cc4 <Board_Init+0x38>)
1a001cb2:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001cb6:	f043 0304 	orr.w	r3, r3, #4
1a001cba:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a001cbe:	bd08      	pop	{r3, pc}
1a001cc0:	400f4000 	.word	0x400f4000
1a001cc4:	40043000 	.word	0x40043000

1a001cc8 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001cc8:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a001cca:	4b04      	ldr	r3, [pc, #16]	; (1a001cdc <SystemInit+0x14>)
1a001ccc:	4a04      	ldr	r2, [pc, #16]	; (1a001ce0 <SystemInit+0x18>)
1a001cce:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a001cd0:	f000 fd34 	bl	1a00273c <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a001cd4:	f000 f856 	bl	1a001d84 <Board_SystemInit>
1a001cd8:	bd08      	pop	{r3, pc}
1a001cda:	bf00      	nop
1a001cdc:	e000ed08 	.word	0xe000ed08
1a001ce0:	1a000000 	.word	0x1a000000

1a001ce4 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a001ce4:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001ce6:	2300      	movs	r3, #0
1a001ce8:	e00c      	b.n	1a001d04 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a001cea:	4a09      	ldr	r2, [pc, #36]	; (1a001d10 <Board_SetupMuxing+0x2c>)
1a001cec:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001cf0:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001cf4:	784a      	ldrb	r2, [r1, #1]
1a001cf6:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001cf8:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001cfc:	4905      	ldr	r1, [pc, #20]	; (1a001d14 <Board_SetupMuxing+0x30>)
1a001cfe:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a001d02:	3301      	adds	r3, #1
1a001d04:	2b25      	cmp	r3, #37	; 0x25
1a001d06:	d9f0      	bls.n	1a001cea <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a001d08:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001d0c:	4770      	bx	lr
1a001d0e:	bf00      	nop
1a001d10:	1a0032e0 	.word	0x1a0032e0
1a001d14:	40086000 	.word	0x40086000

1a001d18 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a001d18:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a001d1a:	4a17      	ldr	r2, [pc, #92]	; (1a001d78 <Board_SetupClocking+0x60>)
1a001d1c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a001d20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001d24:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001d28:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a001d2c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a001d30:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a001d34:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a001d38:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a001d3c:	2006      	movs	r0, #6
1a001d3e:	490f      	ldr	r1, [pc, #60]	; (1a001d7c <Board_SetupClocking+0x64>)
1a001d40:	2201      	movs	r2, #1
1a001d42:	f000 fc53 	bl	1a0025ec <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001d46:	2400      	movs	r4, #0
1a001d48:	e00a      	b.n	1a001d60 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a001d4a:	4a0d      	ldr	r2, [pc, #52]	; (1a001d80 <Board_SetupClocking+0x68>)
1a001d4c:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a001d50:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a001d54:	7859      	ldrb	r1, [r3, #1]
1a001d56:	789a      	ldrb	r2, [r3, #2]
1a001d58:	78db      	ldrb	r3, [r3, #3]
1a001d5a:	f000 fbaf 	bl	1a0024bc <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a001d5e:	3401      	adds	r4, #1
1a001d60:	2c02      	cmp	r4, #2
1a001d62:	d9f2      	bls.n	1a001d4a <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001d64:	4b04      	ldr	r3, [pc, #16]	; (1a001d78 <Board_SetupClocking+0x60>)
1a001d66:	685a      	ldr	r2, [r3, #4]
1a001d68:	f022 020c 	bic.w	r2, r2, #12
1a001d6c:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a001d6e:	685a      	ldr	r2, [r3, #4]
1a001d70:	f042 0203 	orr.w	r2, r2, #3
1a001d74:	605a      	str	r2, [r3, #4]
1a001d76:	bd10      	pop	{r4, pc}
1a001d78:	40043000 	.word	0x40043000
1a001d7c:	0c28cb00 	.word	0x0c28cb00
1a001d80:	1a0032d4 	.word	0x1a0032d4

1a001d84 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001d84:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a001d86:	f7ff ffad 	bl	1a001ce4 <Board_SetupMuxing>
    Board_SetupClocking();
1a001d8a:	f7ff ffc5 	bl	1a001d18 <Board_SetupClocking>
1a001d8e:	bd08      	pop	{r3, pc}

1a001d90 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001d90:	2901      	cmp	r1, #1
1a001d92:	d109      	bne.n	1a001da8 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001d94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001d98:	0080      	lsls	r0, r0, #2
1a001d9a:	4b04      	ldr	r3, [pc, #16]	; (1a001dac <Chip_I2C_EventHandler+0x1c>)
1a001d9c:	4418      	add	r0, r3
1a001d9e:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001da0:	7d13      	ldrb	r3, [r2, #20]
1a001da2:	b2db      	uxtb	r3, r3
1a001da4:	2b04      	cmp	r3, #4
1a001da6:	d0fb      	beq.n	1a001da0 <Chip_I2C_EventHandler+0x10>
1a001da8:	4770      	bx	lr
1a001daa:	bf00      	nop
1a001dac:	10000094 	.word	0x10000094

1a001db0 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001db0:	b570      	push	{r4, r5, r6, lr}
1a001db2:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a001db4:	4e06      	ldr	r6, [pc, #24]	; (1a001dd0 <Chip_I2C_Init+0x20>)
1a001db6:	00c4      	lsls	r4, r0, #3
1a001db8:	1a23      	subs	r3, r4, r0
1a001dba:	009b      	lsls	r3, r3, #2
1a001dbc:	4433      	add	r3, r6
1a001dbe:	8898      	ldrh	r0, [r3, #4]
1a001dc0:	f000 fbd4 	bl	1a00256c <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001dc4:	1b60      	subs	r0, r4, r5
1a001dc6:	0080      	lsls	r0, r0, #2
1a001dc8:	5833      	ldr	r3, [r6, r0]
1a001dca:	226c      	movs	r2, #108	; 0x6c
1a001dcc:	619a      	str	r2, [r3, #24]
1a001dce:	bd70      	pop	{r4, r5, r6, pc}
1a001dd0:	10000094 	.word	0x10000094

1a001dd4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001dd8:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a001dda:	4f09      	ldr	r7, [pc, #36]	; (1a001e00 <Chip_I2C_SetClockRate+0x2c>)
1a001ddc:	00c5      	lsls	r5, r0, #3
1a001dde:	1a2e      	subs	r6, r5, r0
1a001de0:	00b6      	lsls	r6, r6, #2
1a001de2:	19bb      	adds	r3, r7, r6
1a001de4:	8898      	ldrh	r0, [r3, #4]
1a001de6:	f000 fbdb 	bl	1a0025a0 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001dea:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001dee:	59bb      	ldr	r3, [r7, r6]
1a001df0:	0842      	lsrs	r2, r0, #1
1a001df2:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001df4:	59bb      	ldr	r3, [r7, r6]
1a001df6:	691a      	ldr	r2, [r3, #16]
1a001df8:	1a80      	subs	r0, r0, r2
1a001dfa:	6158      	str	r0, [r3, #20]
1a001dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001e00:	10000094 	.word	0x10000094

1a001e04 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001e04:	4b09      	ldr	r3, [pc, #36]	; (1a001e2c <Chip_UART_GetIndex+0x28>)
1a001e06:	4298      	cmp	r0, r3
1a001e08:	d009      	beq.n	1a001e1e <Chip_UART_GetIndex+0x1a>
1a001e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001e0e:	4298      	cmp	r0, r3
1a001e10:	d007      	beq.n	1a001e22 <Chip_UART_GetIndex+0x1e>
1a001e12:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001e16:	4298      	cmp	r0, r3
1a001e18:	d005      	beq.n	1a001e26 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a001e1a:	2000      	movs	r0, #0
1a001e1c:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001e1e:	2002      	movs	r0, #2
1a001e20:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001e22:	2003      	movs	r0, #3
1a001e24:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a001e26:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a001e28:	4770      	bx	lr
1a001e2a:	bf00      	nop
1a001e2c:	400c1000 	.word	0x400c1000

1a001e30 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001e30:	b510      	push	{r4, lr}
1a001e32:	b082      	sub	sp, #8
1a001e34:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a001e36:	f7ff ffe5 	bl	1a001e04 <Chip_UART_GetIndex>
1a001e3a:	4b10      	ldr	r3, [pc, #64]	; (1a001e7c <Chip_UART_Init+0x4c>)
1a001e3c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001e40:	2101      	movs	r1, #1
1a001e42:	460a      	mov	r2, r1
1a001e44:	460b      	mov	r3, r1
1a001e46:	f000 fb73 	bl	1a002530 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a001e4a:	2307      	movs	r3, #7
1a001e4c:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a001e4e:	2300      	movs	r3, #0
1a001e50:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001e52:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001e54:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001e56:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001e58:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001e5a:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001e5c:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001e5e:	4b08      	ldr	r3, [pc, #32]	; (1a001e80 <Chip_UART_Init+0x50>)
1a001e60:	429c      	cmp	r4, r3
1a001e62:	d103      	bne.n	1a001e6c <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a001e64:	2300      	movs	r3, #0
1a001e66:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a001e68:	69a3      	ldr	r3, [r4, #24]
1a001e6a:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001e6c:	2303      	movs	r3, #3
1a001e6e:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001e70:	2310      	movs	r3, #16
1a001e72:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001e74:	9b01      	ldr	r3, [sp, #4]
}
1a001e76:	b002      	add	sp, #8
1a001e78:	bd10      	pop	{r4, pc}
1a001e7a:	bf00      	nop
1a001e7c:	1a003380 	.word	0x1a003380
1a001e80:	40082000 	.word	0x40082000

1a001e84 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001e84:	b538      	push	{r3, r4, r5, lr}
1a001e86:	4605      	mov	r5, r0
1a001e88:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001e8a:	f7ff ffbb 	bl	1a001e04 <Chip_UART_GetIndex>
1a001e8e:	4b0c      	ldr	r3, [pc, #48]	; (1a001ec0 <Chip_UART_SetBaud+0x3c>)
1a001e90:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001e94:	f000 fb84 	bl	1a0025a0 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001e98:	0124      	lsls	r4, r4, #4
1a001e9a:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001e9e:	68ea      	ldr	r2, [r5, #12]
1a001ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a001ea4:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001ea6:	b2da      	uxtb	r2, r3
1a001ea8:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001eaa:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a001eae:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001eb0:	68ea      	ldr	r2, [r5, #12]
1a001eb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a001eb6:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001eb8:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a001ebc:	0900      	lsrs	r0, r0, #4
1a001ebe:	bd38      	pop	{r3, r4, r5, pc}
1a001ec0:	1a003378 	.word	0x1a003378

1a001ec4 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001ec8:	b083      	sub	sp, #12
1a001eca:	4683      	mov	fp, r0
1a001ecc:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001ece:	f7ff ff99 	bl	1a001e04 <Chip_UART_GetIndex>
1a001ed2:	4b34      	ldr	r3, [pc, #208]	; (1a001fa4 <Chip_UART_SetBaudFDR+0xe0>)
1a001ed4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001ed8:	f000 fb62 	bl	1a0025a0 <Chip_Clock_GetRate>
1a001edc:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a001ede:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001ee2:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001ee4:	2300      	movs	r3, #0
1a001ee6:	9301      	str	r3, [sp, #4]
1a001ee8:	46a2      	mov	sl, r4
1a001eea:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001eec:	e029      	b.n	1a001f42 <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001eee:	2300      	movs	r3, #0
1a001ef0:	0932      	lsrs	r2, r6, #4
1a001ef2:	0730      	lsls	r0, r6, #28
1a001ef4:	fba0 0104 	umull	r0, r1, r0, r4
1a001ef8:	fb04 1102 	mla	r1, r4, r2, r1
1a001efc:	1962      	adds	r2, r4, r5
1a001efe:	fb08 f202 	mul.w	r2, r8, r2
1a001f02:	f000 fd87 	bl	1a002a14 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a001f06:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a001f08:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a001f0a:	2800      	cmp	r0, #0
1a001f0c:	da01      	bge.n	1a001f12 <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a001f0e:	4243      	negs	r3, r0
				div ++;
1a001f10:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001f12:	429f      	cmp	r7, r3
1a001f14:	d30a      	bcc.n	1a001f2c <Chip_UART_SetBaudFDR+0x68>
1a001f16:	b14a      	cbz	r2, 1a001f2c <Chip_UART_SetBaudFDR+0x68>
1a001f18:	0c11      	lsrs	r1, r2, #16
1a001f1a:	d107      	bne.n	1a001f2c <Chip_UART_SetBaudFDR+0x68>
1a001f1c:	2a02      	cmp	r2, #2
1a001f1e:	d800      	bhi.n	1a001f22 <Chip_UART_SetBaudFDR+0x5e>
1a001f20:	b925      	cbnz	r5, 1a001f2c <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001f22:	b14b      	cbz	r3, 1a001f38 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001f24:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001f26:	9501      	str	r5, [sp, #4]
			sm = m;
1a001f28:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001f2a:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001f2c:	3501      	adds	r5, #1
1a001f2e:	e000      	b.n	1a001f32 <Chip_UART_SetBaudFDR+0x6e>
1a001f30:	2500      	movs	r5, #0
1a001f32:	42a5      	cmp	r5, r4
1a001f34:	d3db      	bcc.n	1a001eee <Chip_UART_SetBaudFDR+0x2a>
1a001f36:	e003      	b.n	1a001f40 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001f38:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a001f3a:	9501      	str	r5, [sp, #4]
			sm = m;
1a001f3c:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001f3e:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001f40:	3401      	adds	r4, #1
1a001f42:	b10f      	cbz	r7, 1a001f48 <Chip_UART_SetBaudFDR+0x84>
1a001f44:	2c0f      	cmp	r4, #15
1a001f46:	d9f3      	bls.n	1a001f30 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a001f48:	f1b9 0f00 	cmp.w	r9, #0
1a001f4c:	d026      	beq.n	1a001f9c <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001f4e:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001f56:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001f5a:	fa5f f389 	uxtb.w	r3, r9
1a001f5e:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a001f62:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001f66:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001f6a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001f6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001f72:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a001f76:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001f7a:	b2da      	uxtb	r2, r3
1a001f7c:	9901      	ldr	r1, [sp, #4]
1a001f7e:	f001 030f 	and.w	r3, r1, #15
1a001f82:	4313      	orrs	r3, r2
1a001f84:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a001f88:	0933      	lsrs	r3, r6, #4
1a001f8a:	fb0a f303 	mul.w	r3, sl, r3
1a001f8e:	eb0a 0001 	add.w	r0, sl, r1
1a001f92:	fb09 f000 	mul.w	r0, r9, r0
1a001f96:	fbb3 f0f0 	udiv	r0, r3, r0
1a001f9a:	e000      	b.n	1a001f9e <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a001f9c:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a001f9e:	b003      	add	sp, #12
1a001fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001fa4:	1a003378 	.word	0x1a003378

1a001fa8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a001fa8:	4b03      	ldr	r3, [pc, #12]	; (1a001fb8 <Chip_ADC_GetClockIndex+0x10>)
1a001faa:	4298      	cmp	r0, r3
1a001fac:	d101      	bne.n	1a001fb2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a001fae:	2004      	movs	r0, #4
1a001fb0:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a001fb2:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001fb4:	4770      	bx	lr
1a001fb6:	bf00      	nop
1a001fb8:	400e4000 	.word	0x400e4000

1a001fbc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001fbc:	b570      	push	{r4, r5, r6, lr}
1a001fbe:	460d      	mov	r5, r1
1a001fc0:	4614      	mov	r4, r2
1a001fc2:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001fc4:	f7ff fff0 	bl	1a001fa8 <Chip_ADC_GetClockIndex>
1a001fc8:	f000 faea 	bl	1a0025a0 <Chip_Clock_GetRate>
	if (burstMode) {
1a001fcc:	b115      	cbz	r5, 1a001fd4 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a001fce:	fb04 f406 	mul.w	r4, r4, r6
1a001fd2:	e003      	b.n	1a001fdc <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001fd4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001fd8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001fdc:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a001fe0:	0064      	lsls	r4, r4, #1
1a001fe2:	fbb0 f4f4 	udiv	r4, r0, r4
1a001fe6:	1e60      	subs	r0, r4, #1
	return div;
}
1a001fe8:	b2c0      	uxtb	r0, r0
1a001fea:	bd70      	pop	{r4, r5, r6, pc}

1a001fec <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001fec:	b538      	push	{r3, r4, r5, lr}
1a001fee:	4605      	mov	r5, r0
1a001ff0:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001ff2:	f7ff ffd9 	bl	1a001fa8 <Chip_ADC_GetClockIndex>
1a001ff6:	2101      	movs	r1, #1
1a001ff8:	460a      	mov	r2, r1
1a001ffa:	460b      	mov	r3, r1
1a001ffc:	f000 fa98 	bl	1a002530 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a002000:	2100      	movs	r1, #0
1a002002:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a002004:	4a08      	ldr	r2, [pc, #32]	; (1a002028 <Chip_ADC_Init+0x3c>)
1a002006:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a002008:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00200a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00200c:	4628      	mov	r0, r5
1a00200e:	230b      	movs	r3, #11
1a002010:	f7ff ffd4 	bl	1a001fbc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002014:	0200      	lsls	r0, r0, #8
1a002016:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00201a:	7920      	ldrb	r0, [r4, #4]
1a00201c:	f000 0007 	and.w	r0, r0, #7
1a002020:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a002024:	6028      	str	r0, [r5, #0]
1a002026:	bd38      	pop	{r3, r4, r5, pc}
1a002028:	00061a80 	.word	0x00061a80

1a00202c <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00202c:	b570      	push	{r4, r5, r6, lr}
1a00202e:	4606      	mov	r6, r0
1a002030:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002032:	6804      	ldr	r4, [r0, #0]
1a002034:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a002038:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00203c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00203e:	790b      	ldrb	r3, [r1, #4]
1a002040:	f1c3 030b 	rsb	r3, r3, #11
1a002044:	7949      	ldrb	r1, [r1, #5]
1a002046:	b2db      	uxtb	r3, r3
1a002048:	f7ff ffb8 	bl	1a001fbc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00204c:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002050:	792c      	ldrb	r4, [r5, #4]
1a002052:	f004 0407 	and.w	r4, r4, #7
1a002056:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a00205a:	6030      	str	r0, [r6, #0]
1a00205c:	bd70      	pop	{r4, r5, r6, pc}
1a00205e:	bf00      	nop

1a002060 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002060:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002062:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002064:	680a      	ldr	r2, [r1, #0]
1a002066:	f7ff ffe1 	bl	1a00202c <Chip_ADC_SetSampleRate>
1a00206a:	bd08      	pop	{r3, pc}

1a00206c <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a00206c:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00206e:	2069      	movs	r0, #105	; 0x69
1a002070:	f000 fa96 	bl	1a0025a0 <Chip_Clock_GetRate>
1a002074:	4b01      	ldr	r3, [pc, #4]	; (1a00207c <SystemCoreClockUpdate+0x10>)
1a002076:	6018      	str	r0, [r3, #0]
1a002078:	bd08      	pop	{r3, pc}
1a00207a:	bf00      	nop
1a00207c:	10000390 	.word	0x10000390

1a002080 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002080:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002082:	680b      	ldr	r3, [r1, #0]
1a002084:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002088:	d002      	beq.n	1a002090 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00208a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00208e:	600b      	str	r3, [r1, #0]
1a002090:	4686      	mov	lr, r0
1a002092:	2601      	movs	r6, #1
1a002094:	e041      	b.n	1a00211a <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a002096:	680d      	ldr	r5, [r1, #0]
1a002098:	f015 0f40 	tst.w	r5, #64	; 0x40
1a00209c:	d008      	beq.n	1a0020b0 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a00209e:	1c7b      	adds	r3, r7, #1
1a0020a0:	fa04 f203 	lsl.w	r2, r4, r3
1a0020a4:	694b      	ldr	r3, [r1, #20]
1a0020a6:	fb03 f302 	mul.w	r3, r3, r2
1a0020aa:	fbb3 f3f6 	udiv	r3, r3, r6
1a0020ae:	e004      	b.n	1a0020ba <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0020b0:	694b      	ldr	r3, [r1, #20]
1a0020b2:	fb04 f303 	mul.w	r3, r4, r3
1a0020b6:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0020ba:	4a19      	ldr	r2, [pc, #100]	; (1a002120 <pll_calc_divs+0xa0>)
1a0020bc:	4293      	cmp	r3, r2
1a0020be:	d920      	bls.n	1a002102 <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0020c0:	4a18      	ldr	r2, [pc, #96]	; (1a002124 <pll_calc_divs+0xa4>)
1a0020c2:	4293      	cmp	r3, r2
1a0020c4:	d823      	bhi.n	1a00210e <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0020c6:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0020ca:	d103      	bne.n	1a0020d4 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0020cc:	1c7a      	adds	r2, r7, #1
1a0020ce:	fa23 f202 	lsr.w	r2, r3, r2
1a0020d2:	e000      	b.n	1a0020d6 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0020d4:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0020d6:	1a85      	subs	r5, r0, r2
1a0020d8:	d502      	bpl.n	1a0020e0 <pll_calc_divs+0x60>
		return -val;
1a0020da:	f1c5 0c00 	rsb	ip, r5, #0
1a0020de:	e000      	b.n	1a0020e2 <pll_calc_divs+0x62>
	return val;
1a0020e0:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0020e2:	45e6      	cmp	lr, ip
1a0020e4:	d90d      	bls.n	1a002102 <pll_calc_divs+0x82>
					ppll->nsel = n;
1a0020e6:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a0020e8:	f107 0e01 	add.w	lr, r7, #1
1a0020ec:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a0020f0:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a0020f2:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a0020f4:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0020f6:	2d00      	cmp	r5, #0
1a0020f8:	da02      	bge.n	1a002100 <pll_calc_divs+0x80>
		return -val;
1a0020fa:	f1c5 0e00 	rsb	lr, r5, #0
1a0020fe:	e000      	b.n	1a002102 <pll_calc_divs+0x82>
	return val;
1a002100:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a002102:	3401      	adds	r4, #1
1a002104:	e000      	b.n	1a002108 <pll_calc_divs+0x88>
1a002106:	2401      	movs	r4, #1
1a002108:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a00210c:	ddc3      	ble.n	1a002096 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00210e:	3701      	adds	r7, #1
1a002110:	e000      	b.n	1a002114 <pll_calc_divs+0x94>
1a002112:	2700      	movs	r7, #0
1a002114:	2f03      	cmp	r7, #3
1a002116:	ddf6      	ble.n	1a002106 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a002118:	3601      	adds	r6, #1
1a00211a:	2e04      	cmp	r6, #4
1a00211c:	ddf9      	ble.n	1a002112 <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a00211e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002120:	094c5eff 	.word	0x094c5eff
1a002124:	1312d000 	.word	0x1312d000

1a002128 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002128:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00212a:	b099      	sub	sp, #100	; 0x64
1a00212c:	4605      	mov	r5, r0
1a00212e:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002130:	4668      	mov	r0, sp
1a002132:	2100      	movs	r1, #0
1a002134:	2260      	movs	r2, #96	; 0x60
1a002136:	f000 ff61 	bl	1a002ffc <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00213a:	2380      	movs	r3, #128	; 0x80
1a00213c:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00213e:	6963      	ldr	r3, [r4, #20]
1a002140:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002142:	7923      	ldrb	r3, [r4, #4]
1a002144:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a002148:	4628      	mov	r0, r5
1a00214a:	4669      	mov	r1, sp
1a00214c:	f7ff ff98 	bl	1a002080 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002150:	9b06      	ldr	r3, [sp, #24]
1a002152:	42ab      	cmp	r3, r5
1a002154:	d107      	bne.n	1a002166 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a002156:	466d      	mov	r5, sp
1a002158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00215a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00215c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002164:	e05e      	b.n	1a002224 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002166:	1aeb      	subs	r3, r5, r3
1a002168:	d500      	bpl.n	1a00216c <pll_get_frac+0x44>
		return -val;
1a00216a:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a00216c:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00216e:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002174:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a002176:	6963      	ldr	r3, [r4, #20]
1a002178:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00217a:	7923      	ldrb	r3, [r4, #4]
1a00217c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002180:	4628      	mov	r0, r5
1a002182:	a910      	add	r1, sp, #64	; 0x40
1a002184:	f7ff ff7c 	bl	1a002080 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a002188:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00218a:	42ab      	cmp	r3, r5
1a00218c:	d107      	bne.n	1a00219e <pll_get_frac+0x76>
		*ppll = pll[2];
1a00218e:	ad10      	add	r5, sp, #64	; 0x40
1a002190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002194:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002198:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00219c:	e042      	b.n	1a002224 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00219e:	1aeb      	subs	r3, r5, r3
1a0021a0:	d500      	bpl.n	1a0021a4 <pll_get_frac+0x7c>
		return -val;
1a0021a2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0021a4:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0021a6:	4b20      	ldr	r3, [pc, #128]	; (1a002228 <pll_get_frac+0x100>)
1a0021a8:	429d      	cmp	r5, r3
1a0021aa:	d812      	bhi.n	1a0021d2 <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0021ac:	2340      	movs	r3, #64	; 0x40
1a0021ae:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0021b0:	6963      	ldr	r3, [r4, #20]
1a0021b2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0021b4:	4628      	mov	r0, r5
1a0021b6:	a908      	add	r1, sp, #32
1a0021b8:	f7ff ff62 	bl	1a002080 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0021bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0021be:	42ab      	cmp	r3, r5
1a0021c0:	d107      	bne.n	1a0021d2 <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0021c2:	ad08      	add	r5, sp, #32
1a0021c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0021c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0021c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0021cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0021d0:	e028      	b.n	1a002224 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0021d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0021d4:	1aed      	subs	r5, r5, r3
1a0021d6:	d500      	bpl.n	1a0021da <pll_get_frac+0xb2>
		return -val;
1a0021d8:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0021da:	42ae      	cmp	r6, r5
1a0021dc:	dc11      	bgt.n	1a002202 <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a0021de:	42be      	cmp	r6, r7
1a0021e0:	dc07      	bgt.n	1a0021f2 <pll_get_frac+0xca>
			*ppll = pll[0];
1a0021e2:	466d      	mov	r5, sp
1a0021e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0021e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0021e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0021ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0021f0:	e018      	b.n	1a002224 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a0021f2:	ad10      	add	r5, sp, #64	; 0x40
1a0021f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0021f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0021f8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0021fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002200:	e010      	b.n	1a002224 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a002202:	42af      	cmp	r7, r5
1a002204:	db07      	blt.n	1a002216 <pll_get_frac+0xee>
			*ppll = pll[1];
1a002206:	ad08      	add	r5, sp, #32
1a002208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00220a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00220c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a002214:	e006      	b.n	1a002224 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a002216:	ad10      	add	r5, sp, #64	; 0x40
1a002218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00221a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00221c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a002224:	b019      	add	sp, #100	; 0x64
1a002226:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002228:	068e7780 	.word	0x068e7780

1a00222c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00222c:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00222e:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002230:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002232:	e010      	b.n	1a002256 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002234:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002238:	0052      	lsls	r2, r2, #1
1a00223a:	4d0d      	ldr	r5, [pc, #52]	; (1a002270 <Chip_Clock_FindBaseClock+0x44>)
1a00223c:	5aaa      	ldrh	r2, [r5, r2]
1a00223e:	4282      	cmp	r2, r0
1a002240:	d806      	bhi.n	1a002250 <Chip_Clock_FindBaseClock+0x24>
1a002242:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002246:	0052      	lsls	r2, r2, #1
1a002248:	442a      	add	r2, r5
1a00224a:	8852      	ldrh	r2, [r2, #2]
1a00224c:	4282      	cmp	r2, r0
1a00224e:	d201      	bcs.n	1a002254 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002250:	3301      	adds	r3, #1
1a002252:	e000      	b.n	1a002256 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a002254:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002256:	291c      	cmp	r1, #28
1a002258:	d107      	bne.n	1a00226a <Chip_Clock_FindBaseClock+0x3e>
1a00225a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00225e:	0052      	lsls	r2, r2, #1
1a002260:	4c03      	ldr	r4, [pc, #12]	; (1a002270 <Chip_Clock_FindBaseClock+0x44>)
1a002262:	4422      	add	r2, r4
1a002264:	7914      	ldrb	r4, [r2, #4]
1a002266:	428c      	cmp	r4, r1
1a002268:	d1e4      	bne.n	1a002234 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a00226a:	4608      	mov	r0, r1
1a00226c:	bc30      	pop	{r4, r5}
1a00226e:	4770      	bx	lr
1a002270:	1a003394 	.word	0x1a003394

1a002274 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002274:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00227a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a00227c:	4a0d      	ldr	r2, [pc, #52]	; (1a0022b4 <Chip_Clock_EnableCrystal+0x40>)
1a00227e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002280:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002284:	6992      	ldr	r2, [r2, #24]
1a002286:	428a      	cmp	r2, r1
1a002288:	d001      	beq.n	1a00228e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00228a:	4a0a      	ldr	r2, [pc, #40]	; (1a0022b4 <Chip_Clock_EnableCrystal+0x40>)
1a00228c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a00228e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002292:	4a09      	ldr	r2, [pc, #36]	; (1a0022b8 <Chip_Clock_EnableCrystal+0x44>)
1a002294:	6811      	ldr	r1, [r2, #0]
1a002296:	4a09      	ldr	r2, [pc, #36]	; (1a0022bc <Chip_Clock_EnableCrystal+0x48>)
1a002298:	4291      	cmp	r1, r2
1a00229a:	d901      	bls.n	1a0022a0 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a00229c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0022a0:	4a04      	ldr	r2, [pc, #16]	; (1a0022b4 <Chip_Clock_EnableCrystal+0x40>)
1a0022a2:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0022a4:	9b01      	ldr	r3, [sp, #4]
1a0022a6:	1e5a      	subs	r2, r3, #1
1a0022a8:	9201      	str	r2, [sp, #4]
1a0022aa:	2b00      	cmp	r3, #0
1a0022ac:	d1fa      	bne.n	1a0022a4 <Chip_Clock_EnableCrystal+0x30>
}
1a0022ae:	b002      	add	sp, #8
1a0022b0:	4770      	bx	lr
1a0022b2:	bf00      	nop
1a0022b4:	40050000 	.word	0x40050000
1a0022b8:	1a0032b8 	.word	0x1a0032b8
1a0022bc:	01312cff 	.word	0x01312cff

1a0022c0 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0022c0:	3012      	adds	r0, #18
1a0022c2:	4b05      	ldr	r3, [pc, #20]	; (1a0022d8 <Chip_Clock_GetDividerSource+0x18>)
1a0022c4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0022c8:	f010 0f01 	tst.w	r0, #1
1a0022cc:	d102      	bne.n	1a0022d4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0022ce:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0022d2:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a0022d4:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0022d6:	4770      	bx	lr
1a0022d8:	40050000 	.word	0x40050000

1a0022dc <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0022dc:	f100 0212 	add.w	r2, r0, #18
1a0022e0:	4b03      	ldr	r3, [pc, #12]	; (1a0022f0 <Chip_Clock_GetDividerDivisor+0x14>)
1a0022e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0022e6:	4b03      	ldr	r3, [pc, #12]	; (1a0022f4 <Chip_Clock_GetDividerDivisor+0x18>)
1a0022e8:	5c18      	ldrb	r0, [r3, r0]
}
1a0022ea:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0022ee:	4770      	bx	lr
1a0022f0:	40050000 	.word	0x40050000
1a0022f4:	1a00338c 	.word	0x1a00338c

1a0022f8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a0022f8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a0022fa:	2810      	cmp	r0, #16
1a0022fc:	d80a      	bhi.n	1a002314 <Chip_Clock_GetClockInputHz+0x1c>
1a0022fe:	e8df f000 	tbb	[pc, r0]
1a002302:	0b42      	.short	0x0b42
1a002304:	091f160d 	.word	0x091f160d
1a002308:	2b282522 	.word	0x2b282522
1a00230c:	322e0909 	.word	0x322e0909
1a002310:	3a36      	.short	0x3a36
1a002312:	3e          	.byte	0x3e
1a002313:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002314:	2000      	movs	r0, #0
1a002316:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002318:	481e      	ldr	r0, [pc, #120]	; (1a002394 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00231a:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00231c:	4b1e      	ldr	r3, [pc, #120]	; (1a002398 <Chip_Clock_GetClockInputHz+0xa0>)
1a00231e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002322:	f003 0307 	and.w	r3, r3, #7
1a002326:	2b04      	cmp	r3, #4
1a002328:	d130      	bne.n	1a00238c <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00232a:	2000      	movs	r0, #0
1a00232c:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00232e:	4b1a      	ldr	r3, [pc, #104]	; (1a002398 <Chip_Clock_GetClockInputHz+0xa0>)
1a002330:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002334:	f003 0307 	and.w	r3, r3, #7
1a002338:	2b04      	cmp	r3, #4
1a00233a:	d029      	beq.n	1a002390 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a00233c:	4817      	ldr	r0, [pc, #92]	; (1a00239c <Chip_Clock_GetClockInputHz+0xa4>)
1a00233e:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002340:	4b17      	ldr	r3, [pc, #92]	; (1a0023a0 <Chip_Clock_GetClockInputHz+0xa8>)
1a002342:	6818      	ldr	r0, [r3, #0]
		break;
1a002344:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002346:	4b17      	ldr	r3, [pc, #92]	; (1a0023a4 <Chip_Clock_GetClockInputHz+0xac>)
1a002348:	6818      	ldr	r0, [r3, #0]
		break;
1a00234a:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00234c:	4b16      	ldr	r3, [pc, #88]	; (1a0023a8 <Chip_Clock_GetClockInputHz+0xb0>)
1a00234e:	6818      	ldr	r0, [r3, #0]
		break;
1a002350:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002352:	4b15      	ldr	r3, [pc, #84]	; (1a0023a8 <Chip_Clock_GetClockInputHz+0xb0>)
1a002354:	6858      	ldr	r0, [r3, #4]
		break;
1a002356:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002358:	f000 f86a 	bl	1a002430 <Chip_Clock_GetMainPLLHz>
		break;
1a00235c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00235e:	2100      	movs	r1, #0
1a002360:	f000 f89a 	bl	1a002498 <Chip_Clock_GetDivRate>
		break;
1a002364:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002366:	2101      	movs	r1, #1
1a002368:	f000 f896 	bl	1a002498 <Chip_Clock_GetDivRate>
		break;
1a00236c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00236e:	2102      	movs	r1, #2
1a002370:	f000 f892 	bl	1a002498 <Chip_Clock_GetDivRate>
		break;
1a002374:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002376:	2103      	movs	r1, #3
1a002378:	f000 f88e 	bl	1a002498 <Chip_Clock_GetDivRate>
		break;
1a00237c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a00237e:	2104      	movs	r1, #4
1a002380:	f000 f88a 	bl	1a002498 <Chip_Clock_GetDivRate>
		break;
1a002384:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a002386:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a00238a:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a00238c:	4803      	ldr	r0, [pc, #12]	; (1a00239c <Chip_Clock_GetClockInputHz+0xa4>)
1a00238e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a002390:	4806      	ldr	r0, [pc, #24]	; (1a0023ac <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002392:	bd08      	pop	{r3, pc}
1a002394:	00b71b00 	.word	0x00b71b00
1a002398:	40043000 	.word	0x40043000
1a00239c:	017d7840 	.word	0x017d7840
1a0023a0:	1a0032bc 	.word	0x1a0032bc
1a0023a4:	1a0032b8 	.word	0x1a0032b8
1a0023a8:	10000330 	.word	0x10000330
1a0023ac:	02faf080 	.word	0x02faf080

1a0023b0 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0023b0:	b538      	push	{r3, r4, r5, lr}
1a0023b2:	4605      	mov	r5, r0
1a0023b4:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0023b6:	7908      	ldrb	r0, [r1, #4]
1a0023b8:	f7ff ff9e 	bl	1a0022f8 <Chip_Clock_GetClockInputHz>
1a0023bc:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0023be:	4b19      	ldr	r3, [pc, #100]	; (1a002424 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0023c0:	442b      	add	r3, r5
1a0023c2:	4a19      	ldr	r2, [pc, #100]	; (1a002428 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0023c4:	4293      	cmp	r3, r2
1a0023c6:	d821      	bhi.n	1a00240c <Chip_Clock_CalcMainPLLValue+0x5c>
1a0023c8:	b318      	cbz	r0, 1a002412 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0023ca:	2380      	movs	r3, #128	; 0x80
1a0023cc:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0023ce:	2300      	movs	r3, #0
1a0023d0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0023d2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0023d4:	fbb5 f3f0 	udiv	r3, r5, r0
1a0023d8:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0023da:	4a14      	ldr	r2, [pc, #80]	; (1a00242c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0023dc:	4295      	cmp	r5, r2
1a0023de:	d903      	bls.n	1a0023e8 <Chip_Clock_CalcMainPLLValue+0x38>
1a0023e0:	fb03 f000 	mul.w	r0, r3, r0
1a0023e4:	42a8      	cmp	r0, r5
1a0023e6:	d007      	beq.n	1a0023f8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0023e8:	4628      	mov	r0, r5
1a0023ea:	4621      	mov	r1, r4
1a0023ec:	f7ff fe9c 	bl	1a002128 <pll_get_frac>
		if (!ppll->nsel) {
1a0023f0:	68a3      	ldr	r3, [r4, #8]
1a0023f2:	b18b      	cbz	r3, 1a002418 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a0023f4:	3b01      	subs	r3, #1
1a0023f6:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a0023f8:	6923      	ldr	r3, [r4, #16]
1a0023fa:	b183      	cbz	r3, 1a00241e <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a0023fc:	68e2      	ldr	r2, [r4, #12]
1a0023fe:	b10a      	cbz	r2, 1a002404 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002400:	3a01      	subs	r2, #1
1a002402:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a002404:	3b01      	subs	r3, #1
1a002406:	6123      	str	r3, [r4, #16]

	return 0;
1a002408:	2000      	movs	r0, #0
1a00240a:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a00240c:	f04f 30ff 	mov.w	r0, #4294967295
1a002410:	bd38      	pop	{r3, r4, r5, pc}
1a002412:	f04f 30ff 	mov.w	r0, #4294967295
1a002416:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a002418:	f04f 30ff 	mov.w	r0, #4294967295
1a00241c:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a00241e:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a002422:	bd38      	pop	{r3, r4, r5, pc}
1a002424:	ff6b3a10 	.word	0xff6b3a10
1a002428:	0b940510 	.word	0x0b940510
1a00242c:	094c5eff 	.word	0x094c5eff

1a002430 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a002430:	b570      	push	{r4, r5, r6, lr}
1a002432:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002434:	4d16      	ldr	r5, [pc, #88]	; (1a002490 <Chip_Clock_GetMainPLLHz+0x60>)
1a002436:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002438:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a00243c:	f7ff ff5c 	bl	1a0022f8 <Chip_Clock_GetClockInputHz>
1a002440:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002442:	4b14      	ldr	r3, [pc, #80]	; (1a002494 <Chip_Clock_GetMainPLLHz+0x64>)
1a002444:	6818      	ldr	r0, [r3, #0]
1a002446:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002448:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a00244a:	f010 0001 	ands.w	r0, r0, #1
1a00244e:	d01d      	beq.n	1a00248c <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a002450:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002454:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002458:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a00245c:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a002460:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a002462:	3201      	adds	r2, #1
	p = ptab[psel];
1a002464:	a802      	add	r0, sp, #8
1a002466:	4401      	add	r1, r0
1a002468:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a00246c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002470:	d100      	bne.n	1a002474 <Chip_Clock_GetMainPLLHz+0x44>
1a002472:	b125      	cbz	r5, 1a00247e <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a002474:	fbb6 f0f2 	udiv	r0, r6, r2
1a002478:	fb03 f000 	mul.w	r0, r3, r0
1a00247c:	e006      	b.n	1a00248c <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a00247e:	0040      	lsls	r0, r0, #1
1a002480:	fbb3 f3f0 	udiv	r3, r3, r0
1a002484:	fbb6 f0f2 	udiv	r0, r6, r2
1a002488:	fb00 f003 	mul.w	r0, r0, r3
}
1a00248c:	b002      	add	sp, #8
1a00248e:	bd70      	pop	{r4, r5, r6, pc}
1a002490:	40050000 	.word	0x40050000
1a002494:	1a003388 	.word	0x1a003388

1a002498 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002498:	b538      	push	{r3, r4, r5, lr}
1a00249a:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a00249c:	4608      	mov	r0, r1
1a00249e:	f7ff ff0f 	bl	1a0022c0 <Chip_Clock_GetDividerSource>
1a0024a2:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0024a4:	4620      	mov	r0, r4
1a0024a6:	f7ff ff19 	bl	1a0022dc <Chip_Clock_GetDividerDivisor>
1a0024aa:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0024ac:	4628      	mov	r0, r5
1a0024ae:	f7ff ff23 	bl	1a0022f8 <Chip_Clock_GetClockInputHz>
1a0024b2:	3401      	adds	r4, #1
}
1a0024b4:	fbb0 f0f4 	udiv	r0, r0, r4
1a0024b8:	bd38      	pop	{r3, r4, r5, pc}
1a0024ba:	bf00      	nop

1a0024bc <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0024bc:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0024be:	0085      	lsls	r5, r0, #2
1a0024c0:	4c0d      	ldr	r4, [pc, #52]	; (1a0024f8 <Chip_Clock_SetBaseClock+0x3c>)
1a0024c2:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0024c4:	281b      	cmp	r0, #27
1a0024c6:	d80f      	bhi.n	1a0024e8 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a0024c8:	2911      	cmp	r1, #17
1a0024ca:	d012      	beq.n	1a0024f2 <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0024cc:	4c0b      	ldr	r4, [pc, #44]	; (1a0024fc <Chip_Clock_SetBaseClock+0x40>)
1a0024ce:	402c      	ands	r4, r5

			if (autoblocken) {
1a0024d0:	b10a      	cbz	r2, 1a0024d6 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a0024d2:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a0024d6:	b10b      	cbz	r3, 1a0024dc <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a0024d8:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0024dc:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0024e0:	0080      	lsls	r0, r0, #2
1a0024e2:	4b05      	ldr	r3, [pc, #20]	; (1a0024f8 <Chip_Clock_SetBaseClock+0x3c>)
1a0024e4:	501c      	str	r4, [r3, r0]
1a0024e6:	e004      	b.n	1a0024f2 <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0024e8:	f045 0501 	orr.w	r5, r5, #1
1a0024ec:	0080      	lsls	r0, r0, #2
1a0024ee:	4b02      	ldr	r3, [pc, #8]	; (1a0024f8 <Chip_Clock_SetBaseClock+0x3c>)
1a0024f0:	501d      	str	r5, [r3, r0]
	}
}
1a0024f2:	bc30      	pop	{r4, r5}
1a0024f4:	4770      	bx	lr
1a0024f6:	bf00      	nop
1a0024f8:	4005005c 	.word	0x4005005c
1a0024fc:	e0fff7fe 	.word	0xe0fff7fe

1a002500 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002500:	281b      	cmp	r0, #27
1a002502:	d808      	bhi.n	1a002516 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002504:	0080      	lsls	r0, r0, #2
1a002506:	4b06      	ldr	r3, [pc, #24]	; (1a002520 <Chip_Clock_GetBaseClock+0x20>)
1a002508:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a00250a:	f010 0f01 	tst.w	r0, #1
1a00250e:	d104      	bne.n	1a00251a <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002510:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002514:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a002516:	2011      	movs	r0, #17
1a002518:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a00251a:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00251c:	4770      	bx	lr
1a00251e:	bf00      	nop
1a002520:	4005005c 	.word	0x4005005c

1a002524 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a002524:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002526:	f7ff ffeb 	bl	1a002500 <Chip_Clock_GetBaseClock>
1a00252a:	f7ff fee5 	bl	1a0022f8 <Chip_Clock_GetClockInputHz>
}
1a00252e:	bd08      	pop	{r3, pc}

1a002530 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002530:	b909      	cbnz	r1, 1a002536 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a002532:	2101      	movs	r1, #1
1a002534:	e000      	b.n	1a002538 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a002536:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a002538:	b10a      	cbz	r2, 1a00253e <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a00253a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00253e:	2b02      	cmp	r3, #2
1a002540:	d101      	bne.n	1a002546 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a002542:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002546:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00254a:	d305      	bcc.n	1a002558 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00254c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002550:	4b04      	ldr	r3, [pc, #16]	; (1a002564 <Chip_Clock_EnableOpts+0x34>)
1a002552:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002556:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002558:	3020      	adds	r0, #32
1a00255a:	4b03      	ldr	r3, [pc, #12]	; (1a002568 <Chip_Clock_EnableOpts+0x38>)
1a00255c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002560:	4770      	bx	lr
1a002562:	bf00      	nop
1a002564:	40052000 	.word	0x40052000
1a002568:	40051000 	.word	0x40051000

1a00256c <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a00256c:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002570:	d309      	bcc.n	1a002586 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002572:	4a09      	ldr	r2, [pc, #36]	; (1a002598 <Chip_Clock_Enable+0x2c>)
1a002574:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002578:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00257c:	f043 0301 	orr.w	r3, r3, #1
1a002580:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002584:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002586:	4a05      	ldr	r2, [pc, #20]	; (1a00259c <Chip_Clock_Enable+0x30>)
1a002588:	3020      	adds	r0, #32
1a00258a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00258e:	f043 0301 	orr.w	r3, r3, #1
1a002592:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002596:	4770      	bx	lr
1a002598:	40052000 	.word	0x40052000
1a00259c:	40051000 	.word	0x40051000

1a0025a0 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0025a0:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0025a2:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0025a6:	d305      	bcc.n	1a0025b4 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0025a8:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0025ac:	4a0d      	ldr	r2, [pc, #52]	; (1a0025e4 <Chip_Clock_GetRate+0x44>)
1a0025ae:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0025b2:	e004      	b.n	1a0025be <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0025b4:	f100 0320 	add.w	r3, r0, #32
1a0025b8:	4a0b      	ldr	r2, [pc, #44]	; (1a0025e8 <Chip_Clock_GetRate+0x48>)
1a0025ba:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0025be:	f014 0f01 	tst.w	r4, #1
1a0025c2:	d00c      	beq.n	1a0025de <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0025c4:	f7ff fe32 	bl	1a00222c <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0025c8:	f7ff ffac 	bl	1a002524 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a0025cc:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0025d0:	d101      	bne.n	1a0025d6 <Chip_Clock_GetRate+0x36>
			div = 1;
1a0025d2:	2301      	movs	r3, #1
1a0025d4:	e000      	b.n	1a0025d8 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a0025d6:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a0025d8:	fbb0 f0f3 	udiv	r0, r0, r3
1a0025dc:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a0025de:	2000      	movs	r0, #0
	}

	return rate;
}
1a0025e0:	bd10      	pop	{r4, pc}
1a0025e2:	bf00      	nop
1a0025e4:	40052000 	.word	0x40052000
1a0025e8:	40051000 	.word	0x40051000

1a0025ec <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0025ec:	b570      	push	{r4, r5, r6, lr}
1a0025ee:	b08a      	sub	sp, #40	; 0x28
1a0025f0:	4605      	mov	r5, r0
1a0025f2:	460e      	mov	r6, r1
1a0025f4:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0025f6:	f242 7310 	movw	r3, #10000	; 0x2710
1a0025fa:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0025fc:	2806      	cmp	r0, #6
1a0025fe:	d101      	bne.n	1a002604 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a002600:	f7ff fe38 	bl	1a002274 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002604:	2004      	movs	r0, #4
1a002606:	4629      	mov	r1, r5
1a002608:	2201      	movs	r2, #1
1a00260a:	2300      	movs	r3, #0
1a00260c:	f7ff ff56 	bl	1a0024bc <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002610:	4a47      	ldr	r2, [pc, #284]	; (1a002730 <Chip_SetupCoreClock+0x144>)
1a002612:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002614:	f043 0301 	orr.w	r3, r3, #1
1a002618:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00261a:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00261e:	4630      	mov	r0, r6
1a002620:	a901      	add	r1, sp, #4
1a002622:	f7ff fec5 	bl	1a0023b0 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002626:	4b43      	ldr	r3, [pc, #268]	; (1a002734 <Chip_SetupCoreClock+0x148>)
1a002628:	429e      	cmp	r6, r3
1a00262a:	d913      	bls.n	1a002654 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a00262c:	9b01      	ldr	r3, [sp, #4]
1a00262e:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002632:	d000      	beq.n	1a002636 <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002634:	e7fe      	b.n	1a002634 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a002636:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00263a:	d005      	beq.n	1a002648 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00263c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002640:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a002642:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a002644:	2601      	movs	r6, #1
1a002646:	e007      	b.n	1a002658 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a002648:	9b04      	ldr	r3, [sp, #16]
1a00264a:	3301      	adds	r3, #1
1a00264c:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a00264e:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a002650:	2600      	movs	r6, #0
1a002652:	e001      	b.n	1a002658 <Chip_SetupCoreClock+0x6c>
1a002654:	2500      	movs	r5, #0
1a002656:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002658:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00265c:	9b01      	ldr	r3, [sp, #4]
1a00265e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002662:	9a05      	ldr	r2, [sp, #20]
1a002664:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002668:	9a03      	ldr	r2, [sp, #12]
1a00266a:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00266e:	9a04      	ldr	r2, [sp, #16]
1a002670:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002674:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002678:	4a2d      	ldr	r2, [pc, #180]	; (1a002730 <Chip_SetupCoreClock+0x144>)
1a00267a:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a00267c:	4b2c      	ldr	r3, [pc, #176]	; (1a002730 <Chip_SetupCoreClock+0x144>)
1a00267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002680:	f013 0f01 	tst.w	r3, #1
1a002684:	d0fa      	beq.n	1a00267c <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002686:	2004      	movs	r0, #4
1a002688:	2109      	movs	r1, #9
1a00268a:	2201      	movs	r2, #1
1a00268c:	2300      	movs	r3, #0
1a00268e:	f7ff ff15 	bl	1a0024bc <Chip_Clock_SetBaseClock>

	if (direct) {
1a002692:	b1ee      	cbz	r6, 1a0026d0 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002694:	f242 7310 	movw	r3, #10000	; 0x2710
1a002698:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a00269a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00269c:	1e5a      	subs	r2, r3, #1
1a00269e:	9209      	str	r2, [sp, #36]	; 0x24
1a0026a0:	2b00      	cmp	r3, #0
1a0026a2:	d1fa      	bne.n	1a00269a <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a0026a4:	9b01      	ldr	r3, [sp, #4]
1a0026a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0026aa:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0026ac:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0026b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0026b4:	9a05      	ldr	r2, [sp, #20]
1a0026b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0026ba:	9a03      	ldr	r2, [sp, #12]
1a0026bc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0026c0:	9a04      	ldr	r2, [sp, #16]
1a0026c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0026c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0026ca:	4a19      	ldr	r2, [pc, #100]	; (1a002730 <Chip_SetupCoreClock+0x144>)
1a0026cc:	6453      	str	r3, [r2, #68]	; 0x44
1a0026ce:	e01c      	b.n	1a00270a <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0026d0:	b1dd      	cbz	r5, 1a00270a <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0026d2:	f242 7310 	movw	r3, #10000	; 0x2710
1a0026d6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0026d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0026da:	1e5a      	subs	r2, r3, #1
1a0026dc:	9209      	str	r2, [sp, #36]	; 0x24
1a0026de:	2b00      	cmp	r3, #0
1a0026e0:	d1fa      	bne.n	1a0026d8 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0026e2:	9b04      	ldr	r3, [sp, #16]
1a0026e4:	1e59      	subs	r1, r3, #1
1a0026e6:	9104      	str	r1, [sp, #16]
1a0026e8:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0026ec:	9b01      	ldr	r3, [sp, #4]
1a0026ee:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0026f2:	9b05      	ldr	r3, [sp, #20]
1a0026f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0026f8:	9b03      	ldr	r3, [sp, #12]
1a0026fa:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0026fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a002702:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002706:	4a0a      	ldr	r2, [pc, #40]	; (1a002730 <Chip_SetupCoreClock+0x144>)
1a002708:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00270a:	b964      	cbnz	r4, 1a002726 <Chip_SetupCoreClock+0x13a>
1a00270c:	e00e      	b.n	1a00272c <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00270e:	4a0a      	ldr	r2, [pc, #40]	; (1a002738 <Chip_SetupCoreClock+0x14c>)
1a002710:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002714:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002718:	7859      	ldrb	r1, [r3, #1]
1a00271a:	789a      	ldrb	r2, [r3, #2]
1a00271c:	78db      	ldrb	r3, [r3, #3]
1a00271e:	f7ff fecd 	bl	1a0024bc <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002722:	3401      	adds	r4, #1
1a002724:	e000      	b.n	1a002728 <Chip_SetupCoreClock+0x13c>
1a002726:	2400      	movs	r4, #0
1a002728:	2c11      	cmp	r4, #17
1a00272a:	d9f0      	bls.n	1a00270e <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00272c:	b00a      	add	sp, #40	; 0x28
1a00272e:	bd70      	pop	{r4, r5, r6, pc}
1a002730:	40050000 	.word	0x40050000
1a002734:	068e7780 	.word	0x068e7780
1a002738:	1a003400 	.word	0x1a003400

1a00273c <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a00273c:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a00273e:	4b10      	ldr	r3, [pc, #64]	; (1a002780 <fpuInit+0x44>)
1a002740:	681b      	ldr	r3, [r3, #0]
1a002742:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a002744:	4b0f      	ldr	r3, [pc, #60]	; (1a002784 <fpuInit+0x48>)
1a002746:	681b      	ldr	r3, [r3, #0]
1a002748:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00274a:	9a02      	ldr	r2, [sp, #8]
1a00274c:	4b0e      	ldr	r3, [pc, #56]	; (1a002788 <fpuInit+0x4c>)
1a00274e:	429a      	cmp	r2, r3
1a002750:	d105      	bne.n	1a00275e <fpuInit+0x22>
1a002752:	9a01      	ldr	r2, [sp, #4]
1a002754:	4b0d      	ldr	r3, [pc, #52]	; (1a00278c <fpuInit+0x50>)
1a002756:	429a      	cmp	r2, r3
1a002758:	d003      	beq.n	1a002762 <fpuInit+0x26>
1a00275a:	2300      	movs	r3, #0
1a00275c:	e002      	b.n	1a002764 <fpuInit+0x28>
1a00275e:	2300      	movs	r3, #0
1a002760:	e000      	b.n	1a002764 <fpuInit+0x28>
1a002762:	2301      	movs	r3, #1

	if (vfpPresent) {
1a002764:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002768:	d008      	beq.n	1a00277c <fpuInit+0x40>
		Cpacr = *regCpacr;
1a00276a:	4a09      	ldr	r2, [pc, #36]	; (1a002790 <fpuInit+0x54>)
1a00276c:	6813      	ldr	r3, [r2, #0]
1a00276e:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002770:	9b03      	ldr	r3, [sp, #12]
1a002772:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002776:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a002778:	9b03      	ldr	r3, [sp, #12]
1a00277a:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a00277c:	b004      	add	sp, #16
1a00277e:	4770      	bx	lr
1a002780:	e000ef40 	.word	0xe000ef40
1a002784:	e000ef44 	.word	0xe000ef44
1a002788:	10110021 	.word	0x10110021
1a00278c:	11000011 	.word	0x11000011
1a002790:	e000ed88 	.word	0xe000ed88

1a002794 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a002794:	4770      	bx	lr
1a002796:	bf00      	nop

1a002798 <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a002798:	680b      	ldr	r3, [r1, #0]
1a00279a:	b11b      	cbz	r3, 1a0027a4 <SSP_Write2BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a00279c:	684a      	ldr	r2, [r1, #4]
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a00279e:	5a9b      	ldrh	r3, [r3, r2]
 * @param	tx_data	: SSP 16-bit data to be transmited
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_SendFrame(LPC_SSP_T *pSSP, uint16_t tx_data)
{
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a0027a0:	6083      	str	r3, [r0, #8]
1a0027a2:	e002      	b.n	1a0027aa <SSP_Write2BFifo+0x12>
1a0027a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0027a8:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a0027aa:	684b      	ldr	r3, [r1, #4]
1a0027ac:	3302      	adds	r3, #2
1a0027ae:	604b      	str	r3, [r1, #4]
1a0027b0:	4770      	bx	lr
1a0027b2:	bf00      	nop

1a0027b4 <SSP_Write1BFifo>:
}

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a0027b4:	680b      	ldr	r3, [r1, #0]
1a0027b6:	b11b      	cbz	r3, 1a0027c0 <SSP_Write1BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a0027b8:	684a      	ldr	r2, [r1, #4]
1a0027ba:	5c9b      	ldrb	r3, [r3, r2]
1a0027bc:	6083      	str	r3, [r0, #8]
1a0027be:	e001      	b.n	1a0027c4 <SSP_Write1BFifo+0x10>
1a0027c0:	23ff      	movs	r3, #255	; 0xff
1a0027c2:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a0027c4:	684b      	ldr	r3, [r1, #4]
1a0027c6:	3301      	adds	r3, #1
1a0027c8:	604b      	str	r3, [r1, #4]
1a0027ca:	4770      	bx	lr

1a0027cc <SSP_Read2BFifo>:
}

/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0027cc:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0027ce:	e007      	b.n	1a0027e0 <SSP_Read2BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0027d0:	6883      	ldr	r3, [r0, #8]
1a0027d2:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a0027d4:	688c      	ldr	r4, [r1, #8]
1a0027d6:	b104      	cbz	r4, 1a0027da <SSP_Read2BFifo+0xe>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a0027d8:	5313      	strh	r3, [r2, r4]
		}

		xf_setup->rx_cnt += 2;
1a0027da:	68cb      	ldr	r3, [r1, #12]
1a0027dc:	3302      	adds	r3, #2
1a0027de:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a0027e0:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0027e2:	f013 0f04 	tst.w	r3, #4
1a0027e6:	d003      	beq.n	1a0027f0 <SSP_Read2BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a0027e8:	68ca      	ldr	r2, [r1, #12]
1a0027ea:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0027ec:	429a      	cmp	r2, r3
1a0027ee:	d3ef      	bcc.n	1a0027d0 <SSP_Read2BFifo+0x4>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
	}
}
1a0027f0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0027f4:	4770      	bx	lr
1a0027f6:	bf00      	nop

1a0027f8 <SSP_Read1BFifo>:

/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a0027f8:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a0027fa:	e007      	b.n	1a00280c <SSP_Read1BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a0027fc:	6883      	ldr	r3, [r0, #8]
1a0027fe:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a002800:	688c      	ldr	r4, [r1, #8]
1a002802:	b104      	cbz	r4, 1a002806 <SSP_Read1BFifo+0xe>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a002804:	5513      	strb	r3, [r2, r4]
		}

		xf_setup->rx_cnt++;
1a002806:	68cb      	ldr	r3, [r1, #12]
1a002808:	3301      	adds	r3, #1
1a00280a:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a00280c:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a00280e:	f013 0f04 	tst.w	r3, #4
1a002812:	d003      	beq.n	1a00281c <SSP_Read1BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002814:	68ca      	ldr	r2, [r1, #12]
1a002816:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002818:	429a      	cmp	r2, r3
1a00281a:	d3ef      	bcc.n	1a0027fc <SSP_Read1BFifo+0x4>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
	}
}
1a00281c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002820:	4770      	bx	lr
1a002822:	bf00      	nop

1a002824 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002824:	4b03      	ldr	r3, [pc, #12]	; (1a002834 <Chip_SSP_GetClockIndex+0x10>)
1a002826:	4298      	cmp	r0, r3
1a002828:	d101      	bne.n	1a00282e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00282a:	20a5      	movs	r0, #165	; 0xa5
1a00282c:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00282e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a002830:	4770      	bx	lr
1a002832:	bf00      	nop
1a002834:	400c5000 	.word	0x400c5000

1a002838 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a002838:	4b04      	ldr	r3, [pc, #16]	; (1a00284c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00283a:	4298      	cmp	r0, r3
1a00283c:	d102      	bne.n	1a002844 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a00283e:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a002842:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a002844:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a002848:	4770      	bx	lr
1a00284a:	bf00      	nop
1a00284c:	400c5000 	.word	0x400c5000

1a002850 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a002850:	6803      	ldr	r3, [r0, #0]
1a002852:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a002856:	0209      	lsls	r1, r1, #8
1a002858:	b289      	uxth	r1, r1
1a00285a:	430b      	orrs	r3, r1
1a00285c:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a00285e:	6102      	str	r2, [r0, #16]
1a002860:	4770      	bx	lr
1a002862:	bf00      	nop

1a002864 <Chip_SSP_RWFrames_Blocking>:
}

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a002864:	b538      	push	{r3, r4, r5, lr}
1a002866:	4604      	mov	r4, r0
1a002868:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a00286a:	e000      	b.n	1a00286e <Chip_SSP_RWFrames_Blocking+0xa>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a00286c:	68a3      	ldr	r3, [r4, #8]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a00286e:	68e3      	ldr	r3, [r4, #12]
1a002870:	f013 0f04 	tst.w	r3, #4
1a002874:	d1fa      	bne.n	1a00286c <Chip_SSP_RWFrames_Blocking+0x8>
 * @return	 Nothing
 * @note	Software can clear one or more interrupt condition(s) in the SSP controller
 */
STATIC INLINE void Chip_SSP_ClearIntPending(LPC_SSP_T *pSSP, SSP_INTCLEAR_T IntClear)
{
	pSSP->ICR = IntClear;
1a002876:	2303      	movs	r3, #3
1a002878:	6223      	str	r3, [r4, #32]
 * @return	 the number of bits transferred in each frame minus one
 * @note	The return value is 0x03 -> 0xF corresponding to 4bit -> 16bit transfer
 */
STATIC INLINE uint8_t Chip_SSP_GetDataSize(LPC_SSP_T *pSSP)
{
	return SSP_CR0_DSS(pSSP->CR0);
1a00287a:	6823      	ldr	r3, [r4, #0]
1a00287c:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a002880:	2b07      	cmp	r3, #7
1a002882:	d815      	bhi.n	1a0028b0 <Chip_SSP_RWFrames_Blocking+0x4c>
1a002884:	e031      	b.n	1a0028ea <Chip_SSP_RWFrames_Blocking+0x86>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a002886:	68e2      	ldr	r2, [r4, #12]
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a002888:	f012 0f02 	tst.w	r2, #2
1a00288c:	d006      	beq.n	1a00289c <Chip_SSP_RWFrames_Blocking+0x38>
1a00288e:	686a      	ldr	r2, [r5, #4]
1a002890:	4293      	cmp	r3, r2
1a002892:	d903      	bls.n	1a00289c <Chip_SSP_RWFrames_Blocking+0x38>
				SSP_Write2BFifo(pSSP, xf_setup);
1a002894:	4620      	mov	r0, r4
1a002896:	4629      	mov	r1, r5
1a002898:	f7ff ff7e 	bl	1a002798 <SSP_Write2BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a00289c:	69a3      	ldr	r3, [r4, #24]
1a00289e:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0028a2:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0028a6:	d12f      	bne.n	1a002908 <Chip_SSP_RWFrames_Blocking+0xa4>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a0028a8:	4620      	mov	r0, r4
1a0028aa:	4629      	mov	r1, r5
1a0028ac:	f7ff ff8e 	bl	1a0027cc <SSP_Read2BFifo>

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0028b0:	68ea      	ldr	r2, [r5, #12]
1a0028b2:	692b      	ldr	r3, [r5, #16]
1a0028b4:	429a      	cmp	r2, r3
1a0028b6:	d3e6      	bcc.n	1a002886 <Chip_SSP_RWFrames_Blocking+0x22>
1a0028b8:	686a      	ldr	r2, [r5, #4]
1a0028ba:	4293      	cmp	r3, r2
1a0028bc:	d8e3      	bhi.n	1a002886 <Chip_SSP_RWFrames_Blocking+0x22>
1a0028be:	e01b      	b.n	1a0028f8 <Chip_SSP_RWFrames_Blocking+0x94>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a0028c0:	68e2      	ldr	r2, [r4, #12]
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0028c2:	f012 0f02 	tst.w	r2, #2
1a0028c6:	d006      	beq.n	1a0028d6 <Chip_SSP_RWFrames_Blocking+0x72>
1a0028c8:	686a      	ldr	r2, [r5, #4]
1a0028ca:	4293      	cmp	r3, r2
1a0028cc:	d903      	bls.n	1a0028d6 <Chip_SSP_RWFrames_Blocking+0x72>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0028ce:	4620      	mov	r0, r4
1a0028d0:	4629      	mov	r1, r5
1a0028d2:	f7ff ff6f 	bl	1a0027b4 <SSP_Write1BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0028d6:	69a3      	ldr	r3, [r4, #24]
1a0028d8:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0028dc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0028e0:	d114      	bne.n	1a00290c <Chip_SSP_RWFrames_Blocking+0xa8>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a0028e2:	4620      	mov	r0, r4
1a0028e4:	4629      	mov	r1, r5
1a0028e6:	f7ff ff87 	bl	1a0027f8 <SSP_Read1BFifo>
			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0028ea:	68ea      	ldr	r2, [r5, #12]
1a0028ec:	692b      	ldr	r3, [r5, #16]
1a0028ee:	429a      	cmp	r2, r3
1a0028f0:	d3e6      	bcc.n	1a0028c0 <Chip_SSP_RWFrames_Blocking+0x5c>
1a0028f2:	686a      	ldr	r2, [r5, #4]
1a0028f4:	4293      	cmp	r3, r2
1a0028f6:	d8e3      	bhi.n	1a0028c0 <Chip_SSP_RWFrames_Blocking+0x5c>

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
		}
	}
	if (xf_setup->tx_data) {
1a0028f8:	682b      	ldr	r3, [r5, #0]
1a0028fa:	b10b      	cbz	r3, 1a002900 <Chip_SSP_RWFrames_Blocking+0x9c>
		return xf_setup->tx_cnt;
1a0028fc:	6868      	ldr	r0, [r5, #4]
1a0028fe:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
1a002900:	68ab      	ldr	r3, [r5, #8]
1a002902:	b12b      	cbz	r3, 1a002910 <Chip_SSP_RWFrames_Blocking+0xac>
		return xf_setup->rx_cnt;
1a002904:	68e8      	ldr	r0, [r5, #12]
1a002906:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a002908:	2000      	movs	r0, #0
1a00290a:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a00290c:	2000      	movs	r0, #0
1a00290e:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
		return xf_setup->rx_cnt;
	}

	return 0;
1a002910:	2000      	movs	r0, #0
}
1a002912:	bd38      	pop	{r3, r4, r5, pc}

1a002914 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a002914:	b570      	push	{r4, r5, r6, lr}
1a002916:	4606      	mov	r6, r0
1a002918:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00291a:	f7ff ff8d 	bl	1a002838 <Chip_SSP_GetPeriphClockIndex>
1a00291e:	f7ff fe3f 	bl	1a0025a0 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a002922:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a002924:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a002928:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00292a:	e00c      	b.n	1a002946 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00292c:	1c4c      	adds	r4, r1, #1
1a00292e:	fb02 f304 	mul.w	r3, r2, r4
1a002932:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a002936:	42ab      	cmp	r3, r5
1a002938:	d905      	bls.n	1a002946 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00293a:	2cff      	cmp	r4, #255	; 0xff
1a00293c:	d902      	bls.n	1a002944 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a00293e:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a002940:	2100      	movs	r1, #0
1a002942:	e000      	b.n	1a002946 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a002944:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a002946:	42ab      	cmp	r3, r5
1a002948:	d8f0      	bhi.n	1a00292c <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00294a:	4630      	mov	r0, r6
1a00294c:	f7ff ff80 	bl	1a002850 <Chip_SSP_SetClockRate>
1a002950:	bd70      	pop	{r4, r5, r6, pc}
1a002952:	bf00      	nop

1a002954 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a002954:	b510      	push	{r4, lr}
1a002956:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a002958:	f7ff ff64 	bl	1a002824 <Chip_SSP_GetClockIndex>
1a00295c:	f7ff fe06 	bl	1a00256c <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a002960:	4620      	mov	r0, r4
1a002962:	f7ff ff69 	bl	1a002838 <Chip_SSP_GetPeriphClockIndex>
1a002966:	f7ff fe01 	bl	1a00256c <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00296a:	6863      	ldr	r3, [r4, #4]
1a00296c:	f023 0304 	bic.w	r3, r3, #4
1a002970:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002972:	6823      	ldr	r3, [r4, #0]
1a002974:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002978:	f043 0307 	orr.w	r3, r3, #7
1a00297c:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00297e:	4620      	mov	r0, r4
1a002980:	4901      	ldr	r1, [pc, #4]	; (1a002988 <Chip_SSP_Init+0x34>)
1a002982:	f7ff ffc7 	bl	1a002914 <Chip_SSP_SetBitRate>
1a002986:	bd10      	pop	{r4, pc}
1a002988:	000186a0 	.word	0x000186a0

1a00298c <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a00298c:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00298e:	4a19      	ldr	r2, [pc, #100]	; (1a0029f4 <ResetISR+0x68>)
1a002990:	4b19      	ldr	r3, [pc, #100]	; (1a0029f8 <ResetISR+0x6c>)
1a002992:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a002994:	4a19      	ldr	r2, [pc, #100]	; (1a0029fc <ResetISR+0x70>)
1a002996:	3304      	adds	r3, #4
1a002998:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00299a:	2300      	movs	r3, #0
1a00299c:	e005      	b.n	1a0029aa <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00299e:	f04f 31ff 	mov.w	r1, #4294967295
1a0029a2:	4a17      	ldr	r2, [pc, #92]	; (1a002a00 <ResetISR+0x74>)
1a0029a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0029a8:	3301      	adds	r3, #1
1a0029aa:	2b07      	cmp	r3, #7
1a0029ac:	d9f7      	bls.n	1a00299e <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0029ae:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0029b0:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0029b2:	f7ff f989 	bl	1a001cc8 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0029b6:	4b13      	ldr	r3, [pc, #76]	; (1a002a04 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0029b8:	e007      	b.n	1a0029ca <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0029ba:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0029be:	6818      	ldr	r0, [r3, #0]
1a0029c0:	6859      	ldr	r1, [r3, #4]
1a0029c2:	689a      	ldr	r2, [r3, #8]
1a0029c4:	f7fd fbf2 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0029c8:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0029ca:	4a0f      	ldr	r2, [pc, #60]	; (1a002a08 <ResetISR+0x7c>)
1a0029cc:	4293      	cmp	r3, r2
1a0029ce:	d3f4      	bcc.n	1a0029ba <ResetISR+0x2e>
1a0029d0:	e006      	b.n	1a0029e0 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a0029d2:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0029d4:	f854 0b08 	ldr.w	r0, [r4], #8
1a0029d8:	6859      	ldr	r1, [r3, #4]
1a0029da:	f7fd fbf5 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0029de:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0029e0:	4a0a      	ldr	r2, [pc, #40]	; (1a002a0c <ResetISR+0x80>)
1a0029e2:	4293      	cmp	r3, r2
1a0029e4:	d3f5      	bcc.n	1a0029d2 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a0029e6:	f000 fae3 	bl	1a002fb0 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0029ea:	f7ff f94f 	bl	1a001c8c <Board_Init>
    main();
1a0029ee:	f7fd fd69 	bl	1a0004c4 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a0029f2:	e7fe      	b.n	1a0029f2 <ResetISR+0x66>
1a0029f4:	10df1000 	.word	0x10df1000
1a0029f8:	40053100 	.word	0x40053100
1a0029fc:	01dff7ff 	.word	0x01dff7ff
1a002a00:	e000e280 	.word	0xe000e280
1a002a04:	1a000114 	.word	0x1a000114
1a002a08:	1a000150 	.word	0x1a000150
1a002a0c:	1a000178 	.word	0x1a000178

1a002a10 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a002a10:	4770      	bx	lr
1a002a12:	bf00      	nop

1a002a14 <__aeabi_uldivmod>:
1a002a14:	b953      	cbnz	r3, 1a002a2c <__aeabi_uldivmod+0x18>
1a002a16:	b94a      	cbnz	r2, 1a002a2c <__aeabi_uldivmod+0x18>
1a002a18:	2900      	cmp	r1, #0
1a002a1a:	bf08      	it	eq
1a002a1c:	2800      	cmpeq	r0, #0
1a002a1e:	bf1c      	itt	ne
1a002a20:	f04f 31ff 	movne.w	r1, #4294967295
1a002a24:	f04f 30ff 	movne.w	r0, #4294967295
1a002a28:	f000 b83c 	b.w	1a002aa4 <__aeabi_idiv0>
1a002a2c:	b082      	sub	sp, #8
1a002a2e:	46ec      	mov	ip, sp
1a002a30:	e92d 5000 	stmdb	sp!, {ip, lr}
1a002a34:	f000 f81e 	bl	1a002a74 <__gnu_uldivmod_helper>
1a002a38:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002a3c:	b002      	add	sp, #8
1a002a3e:	bc0c      	pop	{r2, r3}
1a002a40:	4770      	bx	lr
1a002a42:	bf00      	nop

1a002a44 <__gnu_ldivmod_helper>:
1a002a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002a48:	9c06      	ldr	r4, [sp, #24]
1a002a4a:	4615      	mov	r5, r2
1a002a4c:	4606      	mov	r6, r0
1a002a4e:	460f      	mov	r7, r1
1a002a50:	4698      	mov	r8, r3
1a002a52:	f000 f829 	bl	1a002aa8 <__divdi3>
1a002a56:	fb05 f301 	mul.w	r3, r5, r1
1a002a5a:	fb00 3808 	mla	r8, r0, r8, r3
1a002a5e:	fba5 2300 	umull	r2, r3, r5, r0
1a002a62:	1ab2      	subs	r2, r6, r2
1a002a64:	4443      	add	r3, r8
1a002a66:	eb67 0303 	sbc.w	r3, r7, r3
1a002a6a:	e9c4 2300 	strd	r2, r3, [r4]
1a002a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002a72:	bf00      	nop

1a002a74 <__gnu_uldivmod_helper>:
1a002a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002a78:	9c06      	ldr	r4, [sp, #24]
1a002a7a:	4690      	mov	r8, r2
1a002a7c:	4606      	mov	r6, r0
1a002a7e:	460f      	mov	r7, r1
1a002a80:	461d      	mov	r5, r3
1a002a82:	f000 f95f 	bl	1a002d44 <__udivdi3>
1a002a86:	fb00 f505 	mul.w	r5, r0, r5
1a002a8a:	fba0 2308 	umull	r2, r3, r0, r8
1a002a8e:	fb08 5501 	mla	r5, r8, r1, r5
1a002a92:	1ab2      	subs	r2, r6, r2
1a002a94:	442b      	add	r3, r5
1a002a96:	eb67 0303 	sbc.w	r3, r7, r3
1a002a9a:	e9c4 2300 	strd	r2, r3, [r4]
1a002a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002aa2:	bf00      	nop

1a002aa4 <__aeabi_idiv0>:
1a002aa4:	4770      	bx	lr
1a002aa6:	bf00      	nop

1a002aa8 <__divdi3>:
1a002aa8:	2900      	cmp	r1, #0
1a002aaa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002aae:	f2c0 80a6 	blt.w	1a002bfe <__divdi3+0x156>
1a002ab2:	2600      	movs	r6, #0
1a002ab4:	2b00      	cmp	r3, #0
1a002ab6:	f2c0 809c 	blt.w	1a002bf2 <__divdi3+0x14a>
1a002aba:	4688      	mov	r8, r1
1a002abc:	4694      	mov	ip, r2
1a002abe:	469e      	mov	lr, r3
1a002ac0:	4615      	mov	r5, r2
1a002ac2:	4604      	mov	r4, r0
1a002ac4:	460f      	mov	r7, r1
1a002ac6:	2b00      	cmp	r3, #0
1a002ac8:	d13d      	bne.n	1a002b46 <__divdi3+0x9e>
1a002aca:	428a      	cmp	r2, r1
1a002acc:	d959      	bls.n	1a002b82 <__divdi3+0xda>
1a002ace:	fab2 f382 	clz	r3, r2
1a002ad2:	b13b      	cbz	r3, 1a002ae4 <__divdi3+0x3c>
1a002ad4:	f1c3 0220 	rsb	r2, r3, #32
1a002ad8:	409f      	lsls	r7, r3
1a002ada:	fa20 f202 	lsr.w	r2, r0, r2
1a002ade:	409d      	lsls	r5, r3
1a002ae0:	4317      	orrs	r7, r2
1a002ae2:	409c      	lsls	r4, r3
1a002ae4:	0c29      	lsrs	r1, r5, #16
1a002ae6:	0c22      	lsrs	r2, r4, #16
1a002ae8:	fbb7 fef1 	udiv	lr, r7, r1
1a002aec:	b2a8      	uxth	r0, r5
1a002aee:	fb01 771e 	mls	r7, r1, lr, r7
1a002af2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a002af6:	fb00 f30e 	mul.w	r3, r0, lr
1a002afa:	42bb      	cmp	r3, r7
1a002afc:	d90a      	bls.n	1a002b14 <__divdi3+0x6c>
1a002afe:	197f      	adds	r7, r7, r5
1a002b00:	f10e 32ff 	add.w	r2, lr, #4294967295
1a002b04:	f080 8105 	bcs.w	1a002d12 <__divdi3+0x26a>
1a002b08:	42bb      	cmp	r3, r7
1a002b0a:	f240 8102 	bls.w	1a002d12 <__divdi3+0x26a>
1a002b0e:	f1ae 0e02 	sub.w	lr, lr, #2
1a002b12:	442f      	add	r7, r5
1a002b14:	1aff      	subs	r7, r7, r3
1a002b16:	b2a4      	uxth	r4, r4
1a002b18:	fbb7 f3f1 	udiv	r3, r7, r1
1a002b1c:	fb01 7713 	mls	r7, r1, r3, r7
1a002b20:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002b24:	fb00 f003 	mul.w	r0, r0, r3
1a002b28:	42b8      	cmp	r0, r7
1a002b2a:	d908      	bls.n	1a002b3e <__divdi3+0x96>
1a002b2c:	197f      	adds	r7, r7, r5
1a002b2e:	f103 32ff 	add.w	r2, r3, #4294967295
1a002b32:	f080 80f0 	bcs.w	1a002d16 <__divdi3+0x26e>
1a002b36:	42b8      	cmp	r0, r7
1a002b38:	f240 80ed 	bls.w	1a002d16 <__divdi3+0x26e>
1a002b3c:	3b02      	subs	r3, #2
1a002b3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a002b42:	2200      	movs	r2, #0
1a002b44:	e003      	b.n	1a002b4e <__divdi3+0xa6>
1a002b46:	428b      	cmp	r3, r1
1a002b48:	d90f      	bls.n	1a002b6a <__divdi3+0xc2>
1a002b4a:	2200      	movs	r2, #0
1a002b4c:	4613      	mov	r3, r2
1a002b4e:	1c34      	adds	r4, r6, #0
1a002b50:	bf18      	it	ne
1a002b52:	2401      	movne	r4, #1
1a002b54:	4260      	negs	r0, r4
1a002b56:	f04f 0500 	mov.w	r5, #0
1a002b5a:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a002b5e:	4058      	eors	r0, r3
1a002b60:	4051      	eors	r1, r2
1a002b62:	1900      	adds	r0, r0, r4
1a002b64:	4169      	adcs	r1, r5
1a002b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002b6a:	fab3 f283 	clz	r2, r3
1a002b6e:	2a00      	cmp	r2, #0
1a002b70:	f040 8086 	bne.w	1a002c80 <__divdi3+0x1d8>
1a002b74:	428b      	cmp	r3, r1
1a002b76:	d302      	bcc.n	1a002b7e <__divdi3+0xd6>
1a002b78:	4584      	cmp	ip, r0
1a002b7a:	f200 80db 	bhi.w	1a002d34 <__divdi3+0x28c>
1a002b7e:	2301      	movs	r3, #1
1a002b80:	e7e5      	b.n	1a002b4e <__divdi3+0xa6>
1a002b82:	b912      	cbnz	r2, 1a002b8a <__divdi3+0xe2>
1a002b84:	2301      	movs	r3, #1
1a002b86:	fbb3 f5f2 	udiv	r5, r3, r2
1a002b8a:	fab5 f085 	clz	r0, r5
1a002b8e:	2800      	cmp	r0, #0
1a002b90:	d13b      	bne.n	1a002c0a <__divdi3+0x162>
1a002b92:	1b78      	subs	r0, r7, r5
1a002b94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002b98:	fa1f fc85 	uxth.w	ip, r5
1a002b9c:	2201      	movs	r2, #1
1a002b9e:	fbb0 f8fe 	udiv	r8, r0, lr
1a002ba2:	0c21      	lsrs	r1, r4, #16
1a002ba4:	fb0e 0718 	mls	r7, lr, r8, r0
1a002ba8:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a002bac:	fb0c f308 	mul.w	r3, ip, r8
1a002bb0:	42bb      	cmp	r3, r7
1a002bb2:	d907      	bls.n	1a002bc4 <__divdi3+0x11c>
1a002bb4:	197f      	adds	r7, r7, r5
1a002bb6:	f108 31ff 	add.w	r1, r8, #4294967295
1a002bba:	d202      	bcs.n	1a002bc2 <__divdi3+0x11a>
1a002bbc:	42bb      	cmp	r3, r7
1a002bbe:	f200 80bd 	bhi.w	1a002d3c <__divdi3+0x294>
1a002bc2:	4688      	mov	r8, r1
1a002bc4:	1aff      	subs	r7, r7, r3
1a002bc6:	b2a4      	uxth	r4, r4
1a002bc8:	fbb7 f3fe 	udiv	r3, r7, lr
1a002bcc:	fb0e 7713 	mls	r7, lr, r3, r7
1a002bd0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002bd4:	fb0c fc03 	mul.w	ip, ip, r3
1a002bd8:	45bc      	cmp	ip, r7
1a002bda:	d907      	bls.n	1a002bec <__divdi3+0x144>
1a002bdc:	197f      	adds	r7, r7, r5
1a002bde:	f103 31ff 	add.w	r1, r3, #4294967295
1a002be2:	d202      	bcs.n	1a002bea <__divdi3+0x142>
1a002be4:	45bc      	cmp	ip, r7
1a002be6:	f200 80a7 	bhi.w	1a002d38 <__divdi3+0x290>
1a002bea:	460b      	mov	r3, r1
1a002bec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002bf0:	e7ad      	b.n	1a002b4e <__divdi3+0xa6>
1a002bf2:	4252      	negs	r2, r2
1a002bf4:	ea6f 0606 	mvn.w	r6, r6
1a002bf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a002bfc:	e75d      	b.n	1a002aba <__divdi3+0x12>
1a002bfe:	4240      	negs	r0, r0
1a002c00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002c04:	f04f 36ff 	mov.w	r6, #4294967295
1a002c08:	e754      	b.n	1a002ab4 <__divdi3+0xc>
1a002c0a:	f1c0 0220 	rsb	r2, r0, #32
1a002c0e:	fa24 f102 	lsr.w	r1, r4, r2
1a002c12:	fa07 f300 	lsl.w	r3, r7, r0
1a002c16:	4085      	lsls	r5, r0
1a002c18:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002c1c:	40d7      	lsrs	r7, r2
1a002c1e:	4319      	orrs	r1, r3
1a002c20:	fbb7 f2fe 	udiv	r2, r7, lr
1a002c24:	0c0b      	lsrs	r3, r1, #16
1a002c26:	fb0e 7712 	mls	r7, lr, r2, r7
1a002c2a:	fa1f fc85 	uxth.w	ip, r5
1a002c2e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a002c32:	fb0c f702 	mul.w	r7, ip, r2
1a002c36:	429f      	cmp	r7, r3
1a002c38:	fa04 f400 	lsl.w	r4, r4, r0
1a002c3c:	d907      	bls.n	1a002c4e <__divdi3+0x1a6>
1a002c3e:	195b      	adds	r3, r3, r5
1a002c40:	f102 30ff 	add.w	r0, r2, #4294967295
1a002c44:	d274      	bcs.n	1a002d30 <__divdi3+0x288>
1a002c46:	429f      	cmp	r7, r3
1a002c48:	d972      	bls.n	1a002d30 <__divdi3+0x288>
1a002c4a:	3a02      	subs	r2, #2
1a002c4c:	442b      	add	r3, r5
1a002c4e:	1bdf      	subs	r7, r3, r7
1a002c50:	b289      	uxth	r1, r1
1a002c52:	fbb7 f8fe 	udiv	r8, r7, lr
1a002c56:	fb0e 7318 	mls	r3, lr, r8, r7
1a002c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002c5e:	fb0c f708 	mul.w	r7, ip, r8
1a002c62:	429f      	cmp	r7, r3
1a002c64:	d908      	bls.n	1a002c78 <__divdi3+0x1d0>
1a002c66:	195b      	adds	r3, r3, r5
1a002c68:	f108 31ff 	add.w	r1, r8, #4294967295
1a002c6c:	d25c      	bcs.n	1a002d28 <__divdi3+0x280>
1a002c6e:	429f      	cmp	r7, r3
1a002c70:	d95a      	bls.n	1a002d28 <__divdi3+0x280>
1a002c72:	f1a8 0802 	sub.w	r8, r8, #2
1a002c76:	442b      	add	r3, r5
1a002c78:	1bd8      	subs	r0, r3, r7
1a002c7a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a002c7e:	e78e      	b.n	1a002b9e <__divdi3+0xf6>
1a002c80:	f1c2 0320 	rsb	r3, r2, #32
1a002c84:	fa2c f103 	lsr.w	r1, ip, r3
1a002c88:	fa0e fe02 	lsl.w	lr, lr, r2
1a002c8c:	fa20 f703 	lsr.w	r7, r0, r3
1a002c90:	ea41 0e0e 	orr.w	lr, r1, lr
1a002c94:	fa08 f002 	lsl.w	r0, r8, r2
1a002c98:	fa28 f103 	lsr.w	r1, r8, r3
1a002c9c:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a002ca0:	4338      	orrs	r0, r7
1a002ca2:	fbb1 f8f5 	udiv	r8, r1, r5
1a002ca6:	0c03      	lsrs	r3, r0, #16
1a002ca8:	fb05 1118 	mls	r1, r5, r8, r1
1a002cac:	fa1f f78e 	uxth.w	r7, lr
1a002cb0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002cb4:	fb07 f308 	mul.w	r3, r7, r8
1a002cb8:	428b      	cmp	r3, r1
1a002cba:	fa0c fc02 	lsl.w	ip, ip, r2
1a002cbe:	d909      	bls.n	1a002cd4 <__divdi3+0x22c>
1a002cc0:	eb11 010e 	adds.w	r1, r1, lr
1a002cc4:	f108 39ff 	add.w	r9, r8, #4294967295
1a002cc8:	d230      	bcs.n	1a002d2c <__divdi3+0x284>
1a002cca:	428b      	cmp	r3, r1
1a002ccc:	d92e      	bls.n	1a002d2c <__divdi3+0x284>
1a002cce:	f1a8 0802 	sub.w	r8, r8, #2
1a002cd2:	4471      	add	r1, lr
1a002cd4:	1ac9      	subs	r1, r1, r3
1a002cd6:	b280      	uxth	r0, r0
1a002cd8:	fbb1 f3f5 	udiv	r3, r1, r5
1a002cdc:	fb05 1113 	mls	r1, r5, r3, r1
1a002ce0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002ce4:	fb07 f703 	mul.w	r7, r7, r3
1a002ce8:	428f      	cmp	r7, r1
1a002cea:	d908      	bls.n	1a002cfe <__divdi3+0x256>
1a002cec:	eb11 010e 	adds.w	r1, r1, lr
1a002cf0:	f103 30ff 	add.w	r0, r3, #4294967295
1a002cf4:	d216      	bcs.n	1a002d24 <__divdi3+0x27c>
1a002cf6:	428f      	cmp	r7, r1
1a002cf8:	d914      	bls.n	1a002d24 <__divdi3+0x27c>
1a002cfa:	3b02      	subs	r3, #2
1a002cfc:	4471      	add	r1, lr
1a002cfe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002d02:	1bc9      	subs	r1, r1, r7
1a002d04:	fba3 890c 	umull	r8, r9, r3, ip
1a002d08:	4549      	cmp	r1, r9
1a002d0a:	d309      	bcc.n	1a002d20 <__divdi3+0x278>
1a002d0c:	d005      	beq.n	1a002d1a <__divdi3+0x272>
1a002d0e:	2200      	movs	r2, #0
1a002d10:	e71d      	b.n	1a002b4e <__divdi3+0xa6>
1a002d12:	4696      	mov	lr, r2
1a002d14:	e6fe      	b.n	1a002b14 <__divdi3+0x6c>
1a002d16:	4613      	mov	r3, r2
1a002d18:	e711      	b.n	1a002b3e <__divdi3+0x96>
1a002d1a:	4094      	lsls	r4, r2
1a002d1c:	4544      	cmp	r4, r8
1a002d1e:	d2f6      	bcs.n	1a002d0e <__divdi3+0x266>
1a002d20:	3b01      	subs	r3, #1
1a002d22:	e7f4      	b.n	1a002d0e <__divdi3+0x266>
1a002d24:	4603      	mov	r3, r0
1a002d26:	e7ea      	b.n	1a002cfe <__divdi3+0x256>
1a002d28:	4688      	mov	r8, r1
1a002d2a:	e7a5      	b.n	1a002c78 <__divdi3+0x1d0>
1a002d2c:	46c8      	mov	r8, r9
1a002d2e:	e7d1      	b.n	1a002cd4 <__divdi3+0x22c>
1a002d30:	4602      	mov	r2, r0
1a002d32:	e78c      	b.n	1a002c4e <__divdi3+0x1a6>
1a002d34:	4613      	mov	r3, r2
1a002d36:	e70a      	b.n	1a002b4e <__divdi3+0xa6>
1a002d38:	3b02      	subs	r3, #2
1a002d3a:	e757      	b.n	1a002bec <__divdi3+0x144>
1a002d3c:	f1a8 0802 	sub.w	r8, r8, #2
1a002d40:	442f      	add	r7, r5
1a002d42:	e73f      	b.n	1a002bc4 <__divdi3+0x11c>

1a002d44 <__udivdi3>:
1a002d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002d48:	2b00      	cmp	r3, #0
1a002d4a:	d144      	bne.n	1a002dd6 <__udivdi3+0x92>
1a002d4c:	428a      	cmp	r2, r1
1a002d4e:	4615      	mov	r5, r2
1a002d50:	4604      	mov	r4, r0
1a002d52:	d94f      	bls.n	1a002df4 <__udivdi3+0xb0>
1a002d54:	fab2 f782 	clz	r7, r2
1a002d58:	460e      	mov	r6, r1
1a002d5a:	b14f      	cbz	r7, 1a002d70 <__udivdi3+0x2c>
1a002d5c:	f1c7 0320 	rsb	r3, r7, #32
1a002d60:	40b9      	lsls	r1, r7
1a002d62:	fa20 f603 	lsr.w	r6, r0, r3
1a002d66:	fa02 f507 	lsl.w	r5, r2, r7
1a002d6a:	430e      	orrs	r6, r1
1a002d6c:	fa00 f407 	lsl.w	r4, r0, r7
1a002d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002d74:	0c23      	lsrs	r3, r4, #16
1a002d76:	fbb6 f0fe 	udiv	r0, r6, lr
1a002d7a:	b2af      	uxth	r7, r5
1a002d7c:	fb0e 6110 	mls	r1, lr, r0, r6
1a002d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002d84:	fb07 f100 	mul.w	r1, r7, r0
1a002d88:	4299      	cmp	r1, r3
1a002d8a:	d909      	bls.n	1a002da0 <__udivdi3+0x5c>
1a002d8c:	195b      	adds	r3, r3, r5
1a002d8e:	f100 32ff 	add.w	r2, r0, #4294967295
1a002d92:	f080 80ec 	bcs.w	1a002f6e <__udivdi3+0x22a>
1a002d96:	4299      	cmp	r1, r3
1a002d98:	f240 80e9 	bls.w	1a002f6e <__udivdi3+0x22a>
1a002d9c:	3802      	subs	r0, #2
1a002d9e:	442b      	add	r3, r5
1a002da0:	1a5a      	subs	r2, r3, r1
1a002da2:	b2a4      	uxth	r4, r4
1a002da4:	fbb2 f3fe 	udiv	r3, r2, lr
1a002da8:	fb0e 2213 	mls	r2, lr, r3, r2
1a002dac:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a002db0:	fb07 f703 	mul.w	r7, r7, r3
1a002db4:	4297      	cmp	r7, r2
1a002db6:	d908      	bls.n	1a002dca <__udivdi3+0x86>
1a002db8:	1952      	adds	r2, r2, r5
1a002dba:	f103 31ff 	add.w	r1, r3, #4294967295
1a002dbe:	f080 80d8 	bcs.w	1a002f72 <__udivdi3+0x22e>
1a002dc2:	4297      	cmp	r7, r2
1a002dc4:	f240 80d5 	bls.w	1a002f72 <__udivdi3+0x22e>
1a002dc8:	3b02      	subs	r3, #2
1a002dca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002dce:	2600      	movs	r6, #0
1a002dd0:	4631      	mov	r1, r6
1a002dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002dd6:	428b      	cmp	r3, r1
1a002dd8:	d847      	bhi.n	1a002e6a <__udivdi3+0x126>
1a002dda:	fab3 f683 	clz	r6, r3
1a002dde:	2e00      	cmp	r6, #0
1a002de0:	d148      	bne.n	1a002e74 <__udivdi3+0x130>
1a002de2:	428b      	cmp	r3, r1
1a002de4:	d302      	bcc.n	1a002dec <__udivdi3+0xa8>
1a002de6:	4282      	cmp	r2, r0
1a002de8:	f200 80cd 	bhi.w	1a002f86 <__udivdi3+0x242>
1a002dec:	2001      	movs	r0, #1
1a002dee:	4631      	mov	r1, r6
1a002df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002df4:	b912      	cbnz	r2, 1a002dfc <__udivdi3+0xb8>
1a002df6:	2501      	movs	r5, #1
1a002df8:	fbb5 f5f2 	udiv	r5, r5, r2
1a002dfc:	fab5 f885 	clz	r8, r5
1a002e00:	f1b8 0f00 	cmp.w	r8, #0
1a002e04:	d177      	bne.n	1a002ef6 <__udivdi3+0x1b2>
1a002e06:	1b4a      	subs	r2, r1, r5
1a002e08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002e0c:	b2af      	uxth	r7, r5
1a002e0e:	2601      	movs	r6, #1
1a002e10:	fbb2 f0fe 	udiv	r0, r2, lr
1a002e14:	0c23      	lsrs	r3, r4, #16
1a002e16:	fb0e 2110 	mls	r1, lr, r0, r2
1a002e1a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002e1e:	fb07 f300 	mul.w	r3, r7, r0
1a002e22:	428b      	cmp	r3, r1
1a002e24:	d907      	bls.n	1a002e36 <__udivdi3+0xf2>
1a002e26:	1949      	adds	r1, r1, r5
1a002e28:	f100 32ff 	add.w	r2, r0, #4294967295
1a002e2c:	d202      	bcs.n	1a002e34 <__udivdi3+0xf0>
1a002e2e:	428b      	cmp	r3, r1
1a002e30:	f200 80ba 	bhi.w	1a002fa8 <__udivdi3+0x264>
1a002e34:	4610      	mov	r0, r2
1a002e36:	1ac9      	subs	r1, r1, r3
1a002e38:	b2a4      	uxth	r4, r4
1a002e3a:	fbb1 f3fe 	udiv	r3, r1, lr
1a002e3e:	fb0e 1113 	mls	r1, lr, r3, r1
1a002e42:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a002e46:	fb07 f703 	mul.w	r7, r7, r3
1a002e4a:	42a7      	cmp	r7, r4
1a002e4c:	d908      	bls.n	1a002e60 <__udivdi3+0x11c>
1a002e4e:	1964      	adds	r4, r4, r5
1a002e50:	f103 32ff 	add.w	r2, r3, #4294967295
1a002e54:	f080 808f 	bcs.w	1a002f76 <__udivdi3+0x232>
1a002e58:	42a7      	cmp	r7, r4
1a002e5a:	f240 808c 	bls.w	1a002f76 <__udivdi3+0x232>
1a002e5e:	3b02      	subs	r3, #2
1a002e60:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002e64:	4631      	mov	r1, r6
1a002e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e6a:	2600      	movs	r6, #0
1a002e6c:	4630      	mov	r0, r6
1a002e6e:	4631      	mov	r1, r6
1a002e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002e74:	f1c6 0420 	rsb	r4, r6, #32
1a002e78:	fa22 f504 	lsr.w	r5, r2, r4
1a002e7c:	40b3      	lsls	r3, r6
1a002e7e:	432b      	orrs	r3, r5
1a002e80:	fa20 fc04 	lsr.w	ip, r0, r4
1a002e84:	fa01 f706 	lsl.w	r7, r1, r6
1a002e88:	fa21 f504 	lsr.w	r5, r1, r4
1a002e8c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a002e90:	ea4c 0707 	orr.w	r7, ip, r7
1a002e94:	fbb5 f8fe 	udiv	r8, r5, lr
1a002e98:	0c39      	lsrs	r1, r7, #16
1a002e9a:	fb0e 5518 	mls	r5, lr, r8, r5
1a002e9e:	fa1f fc83 	uxth.w	ip, r3
1a002ea2:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a002ea6:	fb0c f108 	mul.w	r1, ip, r8
1a002eaa:	42a9      	cmp	r1, r5
1a002eac:	fa02 f206 	lsl.w	r2, r2, r6
1a002eb0:	d904      	bls.n	1a002ebc <__udivdi3+0x178>
1a002eb2:	18ed      	adds	r5, r5, r3
1a002eb4:	f108 34ff 	add.w	r4, r8, #4294967295
1a002eb8:	d367      	bcc.n	1a002f8a <__udivdi3+0x246>
1a002eba:	46a0      	mov	r8, r4
1a002ebc:	1a6d      	subs	r5, r5, r1
1a002ebe:	b2bf      	uxth	r7, r7
1a002ec0:	fbb5 f4fe 	udiv	r4, r5, lr
1a002ec4:	fb0e 5514 	mls	r5, lr, r4, r5
1a002ec8:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a002ecc:	fb0c fc04 	mul.w	ip, ip, r4
1a002ed0:	458c      	cmp	ip, r1
1a002ed2:	d904      	bls.n	1a002ede <__udivdi3+0x19a>
1a002ed4:	18c9      	adds	r1, r1, r3
1a002ed6:	f104 35ff 	add.w	r5, r4, #4294967295
1a002eda:	d35c      	bcc.n	1a002f96 <__udivdi3+0x252>
1a002edc:	462c      	mov	r4, r5
1a002ede:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a002ee2:	ebcc 0101 	rsb	r1, ip, r1
1a002ee6:	fba4 2302 	umull	r2, r3, r4, r2
1a002eea:	4299      	cmp	r1, r3
1a002eec:	d348      	bcc.n	1a002f80 <__udivdi3+0x23c>
1a002eee:	d044      	beq.n	1a002f7a <__udivdi3+0x236>
1a002ef0:	4620      	mov	r0, r4
1a002ef2:	2600      	movs	r6, #0
1a002ef4:	e76c      	b.n	1a002dd0 <__udivdi3+0x8c>
1a002ef6:	f1c8 0420 	rsb	r4, r8, #32
1a002efa:	fa01 f308 	lsl.w	r3, r1, r8
1a002efe:	fa05 f508 	lsl.w	r5, r5, r8
1a002f02:	fa20 f704 	lsr.w	r7, r0, r4
1a002f06:	40e1      	lsrs	r1, r4
1a002f08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002f0c:	431f      	orrs	r7, r3
1a002f0e:	fbb1 f6fe 	udiv	r6, r1, lr
1a002f12:	0c3a      	lsrs	r2, r7, #16
1a002f14:	fb0e 1116 	mls	r1, lr, r6, r1
1a002f18:	fa1f fc85 	uxth.w	ip, r5
1a002f1c:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a002f20:	fb0c f206 	mul.w	r2, ip, r6
1a002f24:	429a      	cmp	r2, r3
1a002f26:	fa00 f408 	lsl.w	r4, r0, r8
1a002f2a:	d907      	bls.n	1a002f3c <__udivdi3+0x1f8>
1a002f2c:	195b      	adds	r3, r3, r5
1a002f2e:	f106 31ff 	add.w	r1, r6, #4294967295
1a002f32:	d237      	bcs.n	1a002fa4 <__udivdi3+0x260>
1a002f34:	429a      	cmp	r2, r3
1a002f36:	d935      	bls.n	1a002fa4 <__udivdi3+0x260>
1a002f38:	3e02      	subs	r6, #2
1a002f3a:	442b      	add	r3, r5
1a002f3c:	1a9b      	subs	r3, r3, r2
1a002f3e:	b2bf      	uxth	r7, r7
1a002f40:	fbb3 f0fe 	udiv	r0, r3, lr
1a002f44:	fb0e 3310 	mls	r3, lr, r0, r3
1a002f48:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a002f4c:	fb0c f100 	mul.w	r1, ip, r0
1a002f50:	4299      	cmp	r1, r3
1a002f52:	d907      	bls.n	1a002f64 <__udivdi3+0x220>
1a002f54:	195b      	adds	r3, r3, r5
1a002f56:	f100 32ff 	add.w	r2, r0, #4294967295
1a002f5a:	d221      	bcs.n	1a002fa0 <__udivdi3+0x25c>
1a002f5c:	4299      	cmp	r1, r3
1a002f5e:	d91f      	bls.n	1a002fa0 <__udivdi3+0x25c>
1a002f60:	3802      	subs	r0, #2
1a002f62:	442b      	add	r3, r5
1a002f64:	1a5a      	subs	r2, r3, r1
1a002f66:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a002f6a:	4667      	mov	r7, ip
1a002f6c:	e750      	b.n	1a002e10 <__udivdi3+0xcc>
1a002f6e:	4610      	mov	r0, r2
1a002f70:	e716      	b.n	1a002da0 <__udivdi3+0x5c>
1a002f72:	460b      	mov	r3, r1
1a002f74:	e729      	b.n	1a002dca <__udivdi3+0x86>
1a002f76:	4613      	mov	r3, r2
1a002f78:	e772      	b.n	1a002e60 <__udivdi3+0x11c>
1a002f7a:	40b0      	lsls	r0, r6
1a002f7c:	4290      	cmp	r0, r2
1a002f7e:	d2b7      	bcs.n	1a002ef0 <__udivdi3+0x1ac>
1a002f80:	1e60      	subs	r0, r4, #1
1a002f82:	2600      	movs	r6, #0
1a002f84:	e724      	b.n	1a002dd0 <__udivdi3+0x8c>
1a002f86:	4630      	mov	r0, r6
1a002f88:	e722      	b.n	1a002dd0 <__udivdi3+0x8c>
1a002f8a:	42a9      	cmp	r1, r5
1a002f8c:	d995      	bls.n	1a002eba <__udivdi3+0x176>
1a002f8e:	f1a8 0802 	sub.w	r8, r8, #2
1a002f92:	441d      	add	r5, r3
1a002f94:	e792      	b.n	1a002ebc <__udivdi3+0x178>
1a002f96:	458c      	cmp	ip, r1
1a002f98:	d9a0      	bls.n	1a002edc <__udivdi3+0x198>
1a002f9a:	3c02      	subs	r4, #2
1a002f9c:	4419      	add	r1, r3
1a002f9e:	e79e      	b.n	1a002ede <__udivdi3+0x19a>
1a002fa0:	4610      	mov	r0, r2
1a002fa2:	e7df      	b.n	1a002f64 <__udivdi3+0x220>
1a002fa4:	460e      	mov	r6, r1
1a002fa6:	e7c9      	b.n	1a002f3c <__udivdi3+0x1f8>
1a002fa8:	3802      	subs	r0, #2
1a002faa:	4429      	add	r1, r5
1a002fac:	e743      	b.n	1a002e36 <__udivdi3+0xf2>
1a002fae:	bf00      	nop

1a002fb0 <__libc_init_array>:
1a002fb0:	b570      	push	{r4, r5, r6, lr}
1a002fb2:	4b0e      	ldr	r3, [pc, #56]	; (1a002fec <__libc_init_array+0x3c>)
1a002fb4:	4c0e      	ldr	r4, [pc, #56]	; (1a002ff0 <__libc_init_array+0x40>)
1a002fb6:	1ae4      	subs	r4, r4, r3
1a002fb8:	10a4      	asrs	r4, r4, #2
1a002fba:	2500      	movs	r5, #0
1a002fbc:	461e      	mov	r6, r3
1a002fbe:	42a5      	cmp	r5, r4
1a002fc0:	d004      	beq.n	1a002fcc <__libc_init_array+0x1c>
1a002fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002fc6:	4798      	blx	r3
1a002fc8:	3501      	adds	r5, #1
1a002fca:	e7f8      	b.n	1a002fbe <__libc_init_array+0xe>
1a002fcc:	f7ff fd20 	bl	1a002a10 <_init>
1a002fd0:	4c08      	ldr	r4, [pc, #32]	; (1a002ff4 <__libc_init_array+0x44>)
1a002fd2:	4b09      	ldr	r3, [pc, #36]	; (1a002ff8 <__libc_init_array+0x48>)
1a002fd4:	1ae4      	subs	r4, r4, r3
1a002fd6:	10a4      	asrs	r4, r4, #2
1a002fd8:	2500      	movs	r5, #0
1a002fda:	461e      	mov	r6, r3
1a002fdc:	42a5      	cmp	r5, r4
1a002fde:	d004      	beq.n	1a002fea <__libc_init_array+0x3a>
1a002fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002fe4:	4798      	blx	r3
1a002fe6:	3501      	adds	r5, #1
1a002fe8:	e7f8      	b.n	1a002fdc <__libc_init_array+0x2c>
1a002fea:	bd70      	pop	{r4, r5, r6, pc}
1a002fec:	1a003448 	.word	0x1a003448
1a002ff0:	1a003448 	.word	0x1a003448
1a002ff4:	1a003448 	.word	0x1a003448
1a002ff8:	1a003448 	.word	0x1a003448

1a002ffc <memset>:
1a002ffc:	4402      	add	r2, r0
1a002ffe:	4603      	mov	r3, r0
1a003000:	4293      	cmp	r3, r2
1a003002:	d002      	beq.n	1a00300a <memset+0xe>
1a003004:	f803 1b01 	strb.w	r1, [r3], #1
1a003008:	e7fa      	b.n	1a003000 <memset+0x4>
1a00300a:	4770      	bx	lr

1a00300c <strcmp>:
1a00300c:	f810 2b01 	ldrb.w	r2, [r0], #1
1a003010:	f811 3b01 	ldrb.w	r3, [r1], #1
1a003014:	2a01      	cmp	r2, #1
1a003016:	bf28      	it	cs
1a003018:	429a      	cmpcs	r2, r3
1a00301a:	d0f7      	beq.n	1a00300c <strcmp>
1a00301c:	1ad0      	subs	r0, r2, r3
1a00301e:	4770      	bx	lr

1a003020 <CODEMAC>:
1a003020:	303a 3a31 3944 343a 3a31 3042 393a 0042     :01:D9:41:B0:9B.
1a003030:	5441 0a0d 0000 0000 4b4f 0a0d 0000 0000     AT......OK......
1a003040:	5441 482b 4c45 0d50 000a 0000 4155 5452     AT+HELP.....UART
1a003050:	505f 2043 6f63 666e 6769 7275 6461 2e61     _PC configurada.
1a003060:	0000 0000 4155 5452 425f 554c 5445 4f4f     ....UART_BLUETOO
1a003070:	4854 7020 7261 2061 6f6d 7564 6f6c 4220     TH para modulo B
1a003080:	756c 7465 6f6f 6874 6320 6e6f 6966 7567     luetooth configu
1a003090:	6172 6164 002e 0000 6554 7473 7465 206f     rada....Testeto 
1a0030a0:	6973 6520 206c 6f6d 7564 6f6c 6520 7473     si el modulo est
1a0030b0:	2061 6f63 656e 7463 6461 206f 6e65 6976     a conectado envi
1a0030c0:	6e61 6f64 203a 5441 0a0d 0000 6f4d 7564     ando: AT....Modu
1a0030d0:	6f6c 6320 6e6f 6365 6174 6f64 6320 726f     lo conectado cor
1a0030e0:	6572 7463 6d61 6e65 6574 002e 6449 6e65     rectamente..Iden
1a0030f0:	6974 6966 6163 6f64 0a0d 0000 6f4e 4920     tificado....No I
1a003100:	6564 746e 6669 6369 6461 0d6f 000a 0000     dentificado.....

1a003110 <CODESD>:
1a003110:	5303 5344 3055 4732 7280 0211 00f6 3701     .SDSU02G.r.....7

1a003120 <ultrasonicSensorsIrqMap>:
1a003120:	0100 0002                                   ....

1a003124 <gpioPinsInit>:
1a003124:	0104 0200 0701 0005 0d03 0501 0100 0408     ................
1a003134:	0002 0202 0304 0200 0403 0000 0002 0407     ................
1a003144:	0300 030c 0402 0905 0103 0504 0208 0403     ................
1a003154:	0305 0402 0504 0604 000c 0802 0b06 0300     ................
1a003164:	0607 0009 0503 0706 0504 060f 0004 0303     ................
1a003174:	0404 0200 0404 0005 0502 0604 0200 0406     ................
1a003184:	0408 0c05 0a04 0504 010e 0003 0a00 1401     ................
1a003194:	0000 010f 0012 0d00 1101 0000 010c 0010     ................
1a0031a4:	0300 0707 0300 000f 0001 0100 0000 0000     ................
1a0031b4:	0600 000a 0603 0806 0504 0610 0005 0403     ................
1a0031c4:	0106 0300 0400 0409 0d05 0401 0000 010b     ................
1a0031d4:	000f 0200 0001 0000 0104 0001 0800 0201     ................
1a0031e4:	0000 0109 0006 0901 0002 0504 0200 0401     ................
1a0031f4:	0105 0202 0504 0202 000a 0e00 0b02 0100     ................
1a003204:	020b 000c 0c01 0004 0200 0400 0001 0102     ................
1a003214:	0204 0200 0402 0003 0302 0307 0300 070b     ................
1a003224:	0004 0c03 0507 0300 070d 0006 0e03 0102     ................
1a003234:	0504 0401 0006 0602 0504 0200 0405 0004     ................
1a003244:	0402 0804 0504 040c 0409 0d05 0a04 0504     ................
1a003254:	010e 0005 0801 0000                         ........

1a00325c <lpcUarts>:
1a00325c:	1000 4008 0406 0602 0205 0018 1000 4008     ...@...........@
1a00326c:	0509 0907 0706 0018 2000 4008 0000 0000     ......... .@....
1a00327c:	0000 0019 1000 400c 0107 0706 0602 001a     .......@........
1a00328c:	1000 400c 0f01 0101 0110 001a 2000 400c     ...@......... .@
1a00329c:	0302 0202 0204 001b                         ........

1a0032a4 <GpioPorts>:
1a0032a4:	0003 0303 0403 0f05 1005 0503 0603 0703     ................
1a0032b4:	0802 0000                                   ....

1a0032b8 <OscRateIn>:
1a0032b8:	1b00 00b7                                   ....

1a0032bc <ExtRateIn>:
1a0032bc:	0000 0000                                   ....

1a0032c0 <GpioButtons>:
1a0032c0:	0400 0800 0900 0901                         ........

1a0032c8 <GpioLeds>:
1a0032c8:	0005 0105 0205 0e00 0b01 0c01               ............

1a0032d4 <InitClkStates>:
1a0032d4:	0308 0001 0307 0001 0f01 0101               ............

1a0032e0 <pinmuxing>:
1a0032e0:	0002 0044 0102 0044 0202 0044 0a02 0040     ..D...D...D...@.
1a0032f0:	0b02 0040 0c02 0040 0001 0050 0101 0050     ..@...@...P...P.
1a003300:	0201 0050 0601 0050 0106 0050 0406 0050     ..P...P...P...P.
1a003310:	0506 0050 0706 0054 0806 0054 0906 0050     ..P...T...T...P.
1a003320:	0a06 0050 0b06 0050 0c06 0050 040f 00f0     ..P...P...P.....
1a003330:	0301 00d5 0401 00d5 0107 0016 0207 0056     ..............V.
1a003340:	0302 0052 0402 0052 0509 0052 0609 0057     ..R...R...R...W.
1a003350:	0206 0057 0f01 00f3 1001 00f7 1101 00f3     ..W.............
1a003360:	1201 00b3 1301 00f0 1401 00b3 0707 00b6     ................
1a003370:	0000 00f2 0100 00b6                         ........

1a003378 <UART_BClock>:
1a003378:	01c2 01a2 0182 0162                         ......b.

1a003380 <UART_PClock>:
1a003380:	0081 0082 00a1 00a2 0201 0804 0f03 0f0f     ................
1a003390:	00ff 0000                                   ....

1a003394 <periph_to_base>:
1a003394:	0000 0005 000a 0020 0024 0009 0040 0040     ...... .$...@.@.
1a0033a4:	0005 0060 00a6 0004 00c0 00c3 0002 00e0     ..`.............
1a0033b4:	00e0 0001 0100 0100 0003 0120 0120 0006     .......... . ...
1a0033c4:	0140 0140 000c 0142 0142 0019 0162 0162     @.@...B.B...b.b.
1a0033d4:	0013 0182 0182 0012 01a2 01a2 0011 01c2     ................
1a0033e4:	01c2 0010 01e2 01e2 000f 0202 0202 000e     ................
1a0033f4:	0222 0222 000d 0223 0223 001c               "."...#.#...

1a003400 <InitClkStates>:
1a003400:	0100 0001 0909 0001 090a 0001 0701 0101     ................
1a003410:	0902 0001 0906 0001 090c 0101 090d 0001     ................
1a003420:	090e 0001 090f 0001 0910 0001 0911 0001     ................
1a003430:	0912 0001 0913 0001 1114 0001 1119 0001     ................
1a003440:	111a 0001 111b 0001                         ........
