
PCSE/Sha256_test/out/Sha256_test.elf:     file format elf32-littlearm
PCSE/Sha256_test/out/Sha256_test.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001789

Program Header:
0x70000001 off    0x0000f208 vaddr 0x1a007208 paddr 0x1a007208 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x000009d0 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00007210 memsz 0x00007210 flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a007210 align 2**15
         filesz 0x0000095c memsz 0x0000095c flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007208  1a000000  1a000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000095c  10000000  1a007210  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0001095c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0001095c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0001095c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0001095c  2**2
                  CONTENTS
  6 .bss          00000070  10000960  10000960  00000960  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0001095c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0001095c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0001095c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0001095c  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a007208  1a007208  0000f208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  0001095c  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  0001095c  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  0001095c  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  0001095c  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  0001095c  2**2
                  CONTENTS
 17 .noinit       00000000  100009d0  100009d0  0001095c  2**2
                  CONTENTS
 18 .debug_info   00010f2c  00000000  00000000  0001095c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00002d91  00000000  00000000  00021888  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00006bde  00000000  00000000  00024619  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000908  00000000  00000000  0002b1f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000848  00000000  00000000  0002baff  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  00009c3d  00000000  00000000  0002c347  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000a61a  00000000  00000000  00035f84  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001ef3c  00000000  00000000  0004059e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0005f4da  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000037  00000000  00000000  0005f54a  2**0
                  CONTENTS, READONLY
 28 .debug_frame  000023ec  00000000  00000000  0005f584  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000960 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a007208 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100009d0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0007e8 l     F .text	000000ac uartProcessIRQ
10000968 l     O .bss	00000004 rxIsrCallbackUART0
1000096c l     O .bss	00000004 txIsrCallbackUART0
10000970 l     O .bss	00000004 txIsrCallbackUART2
10000974 l     O .bss	00000004 txIsrCallbackUART3
1a006e98 l     O .text	00000048 lpcUarts
10000978 l     O .bss	00000004 rxIsrCallbackUART2
1000097c l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Ejer3.c
00000000 l    df *ABS*	00000000 sha256.c
1a006d94 l     O .text	00000100 k
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000724 l     F .text	00000010 clearInterrupt
1a000734 l     F .text	00000060 serveInterrupt
10000000 l     O .data	00000048 ultrasonicSensors
1a006e94 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0008ac l     F .text	00000002 errorOcurred
1a0008b0 l     F .text	00000002 doNothing
10000048 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 board.c
1a0009b0 l     F .text	00000040 Board_LED_Init
1a0009f0 l     F .text	0000003c Board_TEC_Init
1a000a2c l     F .text	0000003c Board_GPIO_Init
1a000a68 l     F .text	00000038 Board_SPI_Init
1a000aa0 l     F .text	00000024 Board_I2C_Init
1a000ac4 l     F .text	00000030 Board_ADC_Init
1a006ee0 l     O .text	00000012 GpioPorts
1a006efc l     O .text	00000008 GpioButtons
1a006f04 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 system.c
10000980 l     O .bss	00000004 heap_end.10252
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a006f10 l     O .text	0000000c InitClkStates
1a006f1c l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000088 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000d90 l     F .text	0000002c Chip_UART_GetIndex
1a006fb4 l     O .text	00000008 UART_BClock
1a006fbc l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000ef4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000f08 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000fb8 l     F .text	000000a8 pll_calc_divs
1a001060 l     F .text	00000104 pll_get_frac
1a001164 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0013d0 l     F .text	00000022 Chip_Clock_GetDivRate
10000984 l     O .bss	00000008 audio_usb_pll_freq
1a006fd0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00703c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0016d0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a0016e4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a003c70 l     F .text	00000076 __sbprintf
1a007084 l     O .text	00000010 zeroes.6931
1a0070d8 l     O .text	00000010 blanks.6930
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
1a003dac l     F .text	0000012c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a004f0c l     F .text	000000f0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
100004ec l     O .data	00000038 lconv
10000524 l     O .data	00000020 lc_ctype_charset
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 mprec.c
1a007108 l     O .text	0000000c p05.5296
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
1a006804 l     F .text	00000078 __sprint_r.part.0
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 impure.c
100000c0 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a007210 l       .ARM.exidx	00000000 __exidx_end
1a007210 l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a007208 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a007208 l       .bss_RAM5	00000000 __init_array_end
1a007208 l       .bss_RAM5	00000000 __preinit_array_end
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a007208 l       .bss_RAM5	00000000 __init_array_start
1a007208 l       .bss_RAM5	00000000 __preinit_array_start
1a000460 g     F .text	00000148 sha256_transform
1a0011f8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000b9c g     F .text	00000012 _isatty_r
1a006c38 g     F .text	00000012 .hidden __aeabi_dcmple
1a001be0 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a000930 g     F .text	00000040 TIMER2_IRQHandler
1a006b74 g     F .text	0000007a .hidden __cmpdf2
1a00019c  w    F .text	00000002 DebugMon_Handler
1a000bb0 g     F .text	0000000a _lseek_r
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a006b74 g     F .text	0000007a .hidden __eqdf2
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a002038 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a001b24 g     F .text	0000005a .hidden __floatdidf
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a0027c4 g     F .text	00000028 printf
1a006af4 g     F .text	00000054 _wcrtomb_r
1a0067dc g     F .text	00000020 __sseek
1a004ffc g     F .text	0000000a __sinit
10000964 g     O .bss	00000004 callBackFuncParams
1a006894 g     F .text	000000a8 __swbuf_r
1a000188  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a000fac g     F .text	0000000c Chip_ADC_SetResolution
1a005d48 g     F .text	00000002 __malloc_unlock
1a0007b8 g     F .text	00000030 SysTick_Handler
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a000b2c g     F .text	0000001c Board_UARTGetChar
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a005c7c g     F .text	000000c6 memmove
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a005d4c g     F .text	0000004c _Balloc
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a006b64 g     F .text	0000008a .hidden __gtdf2
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
1a000b90 g     F .text	0000000a _fstat_r
53ff60b6 g       *ABS*	00000000 __valid_user_code_checksum
1a0005a8 g     F .text	00000054 sha256_init
1a006c00 g     F .text	00000010 .hidden __aeabi_cdcmple
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a000300 g     F .text	0000013c sha256_test
1a000970 g     F .text	00000040 TIMER3_IRQHandler
1a00145c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a0025f4 g     F .text	00000134 memcpy
1a006bf0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a004f00 g     F .text	0000000c _cleanup_r
1a001ab4 g     F .text	00000022 .hidden __floatsidf
1a006b6c g     F .text	00000082 .hidden __ltdf2
1a001b80 g     F .text	00000000 .hidden __aeabi_uldivmod
100009d0 g       .noinit	00000000 _noinit
1a006724 g     F .text	0000005c __fpclassifyd
1a000dbc g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a007118 g     O .text	000000c8 __mprec_tens
1a000194  w    F .text	00000002 UsageFault_Handler
1a0055c8 g     F .text	00000008 __locale_charset
1a0014d8 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
10000994 g     O .bss	00000004 __malloc_top_pad
100009c0 g     O .bss	00000008 tickCounter
1a000ca4 g     F .text	0000006c Board_SetupClocking
10000544 g     O .data	00000004 __mb_cur_max
1a001a94 g     F .text	0000001e .hidden __aeabi_ui2d
1a0055dc g     F .text	00000008 _localeconv_r
1a005ecc g     F .text	00000012 __i2b
1a00525c g     F .text	00000318 __sfvwrite_r
1a001810 g     F .text	00000000 .hidden __aeabi_drsub
1a000c08 g     F .text	00000020 _sbrk_r
1a006ef8 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000bbc g     F .text	0000004c _read_r
1a006c24 g     F .text	00000012 .hidden __aeabi_dcmplt
1a00699c g     F .text	00000084 _fclose_r
1a0007a0 g     F .text	0000000a GPIO1_IRQHandler
10000990 g     O .bss	00000004 __malloc_max_sbrked_mem
1a001ad8 g     F .text	0000003a .hidden __extendsfdf2
1a001e68 g     F .text	000001d0 .hidden __aeabi_ddiv
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a00181c g     F .text	00000276 .hidden __adddf3
1a001c14 g     F .text	00000254 .hidden __aeabi_dmul
1a0002fc g     O .text	00000004 CRP_WORD
1a006338 g     F .text	000003ec _realloc_r
1a002540 g     F .text	00000050 __libc_init_array
1a0022d4 g     F .text	0000026a .hidden __udivdi3
1a006ad0 g     F .text	00000024 _fputwc_r
1a0071e0 g     O .text	00000028 __mprec_bigtens
1a001a94 g     F .text	0000001e .hidden __floatunsidf
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a006160 g     F .text	00000046 __mcmp
1a000b48 g     F .text	0000003c Board_Init
1a00180c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001a8  w    F .text	00000002 RTC_IRQHandler
100009d0 g       .bss	00000000 _ebss
1a0008b4 g     F .text	0000003c TIMER0_IRQHandler
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a005e30 g     F .text	00000040 __hi0bits
1a000d60 g     F .text	00000030 Chip_I2C_SetClockRate
1a006c74 g     F .text	0000004e .hidden __fixdfsi
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a0011ac g     F .text	0000004c Chip_Clock_EnableCrystal
1a00181c g     F .text	00000276 .hidden __aeabi_dadd
1a0001ac g     F .text	0000001a data_init
1a006b6c g     F .text	00000082 .hidden __ledf2
1a006014 g     F .text	000000a0 __pow5mult
1a001b14 g     F .text	0000006a .hidden __aeabi_ul2d
1a0008f0 g     F .text	00000040 TIMER1_IRQHandler
1a000d3c g     F .text	00000024 Chip_I2C_Init
1a000894 g     F .text	0000000a UART2_IRQHandler
1a001368 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0016fc g     F .text	00000012 Chip_SSP_SetClockRate
1a006c60 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a0007ac g     F .text	0000000a GPIO2_IRQHandler
1a005008 g     F .text	00000002 __sfp_lock_acquire
1a005be8 g     F .text	00000092 memchr
1a0050ac g     F .text	000001b0 _free_r
1a001438 g     F .text	00000024 Chip_Clock_GetBaseClock
1a0055d0 g     F .text	0000000c __locale_mb_cur_max
1a006c4c g     F .text	00000012 .hidden __aeabi_dcmpge
10000960 g       .bss	00000000 _bss
1a000f78 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001818 g     F .text	0000027a .hidden __aeabi_dsub
10000954 g     O .data	00000004 __malloc_sbrk_base
1a001b14 g     F .text	0000006a .hidden __floatundidf
1a0060b4 g     F .text	000000aa __lshift
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a001710 g     F .text	0000003e Chip_SSP_SetBitRate
1a0016cc g     F .text	00000002 Chip_GPIO_Init
1a006ef4 g     O .text	00000004 OscRateIn
1a005ee0 g     F .text	00000134 __multiply
100009d0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
10000998 g     O .bss	00000028 __malloc_current_mallinfo
1a00627c g     F .text	000000ba __d2b
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000b84 g     F .text	0000000a _close_r
1a001ab4 g     F .text	00000022 .hidden __aeabi_i2d
1a002590 g     F .text	00000062 memcmp
1a003ce8 g     F .text	000000c4 __swsetup_r
1a001c10  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001e68 g     F .text	000001d0 .hidden __divdf3
10000548 g     O .data	00000408 __malloc_av_
1a001c14 g     F .text	00000254 .hidden __muldf3
1a006780 g     F .text	00000022 __sread
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a005d44 g     F .text	00000002 __malloc_lock
1a000b18 g     F .text	00000014 Board_UARTPutChar
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a004ed4 g     F .text	0000002c _fflush_r
1a00693c g     F .text	0000005e _calloc_r
1a001214 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002728 g     F .text	0000009a memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a00043c g     F .text	00000024 main
1000098c g     O .bss	00000004 __malloc_max_total_mem
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000198  w    F .text	00000002 SVC_Handler
1a0067fc g     F .text	00000008 __sclose
1a003ed8 g     F .text	00000ea2 _dtoa_r
1a0056c4 g     F .text	00000524 _malloc_r
1a006b48 g     F .text	0000001a __ascii_wctomb
1a001b24 g     F .text	0000005a .hidden __aeabi_l2d
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a001468 g     F .text	0000003c Chip_Clock_EnableOpts
1a005010 g     F .text	0000009c _malloc_trim_r
1a001230 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001674 g     F .text	00000058 fpuInit
1a0012e8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000c54 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a006b74 g     F .text	0000007a .hidden __nedf2
1a000f38 g     F .text	00000040 Chip_ADC_Init
1a000c70 g     F .text	00000034 Board_SetupMuxing
1a000e10 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a000c28 g     F .text	0000002a _write_r
100009c8 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000960 g     O .bss	00000004 tickHookFunction
1a0005fc g     F .text	0000003e sha256_update
100004e8 g     O .data	00000004 _impure_ptr
1a004d80 g     F .text	00000154 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
100009d0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001750 g     F .text	00000038 Chip_SSP_Init
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a000af4 g     F .text	00000024 Board_Debug_Init
1a006c10 g     F .text	00000012 .hidden __aeabi_dcmpeq
1000095c g       .data	00000000 _edata
1a000d1c g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a006a20 g     F .text	000000b0 __fputwc
1a001524 g     F .text	00000150 Chip_SetupCoreClock
1a0067a4 g     F .text	00000038 __swrite
1a000794 g     F .text	0000000a GPIO0_IRQHandler
10000950 g     O .data	00000004 __malloc_trim_threshold
1a000000 g     O .text	00000114 g_pfnVectors
1a001788 g     F .text	00000084 ResetISR
1a005574 g     F .text	00000052 _fwalk_reent
1a0061a8 g     F .text	000000d2 __mdiff
1a006c74 g     F .text	0000004e .hidden __aeabi_d2iz
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a00500c g     F .text	00000002 __sfp_lock_release
1a00063c g     F .text	000000e6 sha256_final
1a001c10  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a0055e4 g     F .text	000000e0 __smakebuf_r
1a0027ec g     F .text	0000005c strlen
1a0014a4 g     F .text	00000034 Chip_Clock_Enable
1a006c00 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a006b64 g     F .text	0000008a .hidden __gedf2
1a0008a0 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
10000958 g     O .data	00000004 __wctomb
1a001bb0 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a00687c g     F .text	00000018 __sprint_r
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a001ad8 g     F .text	0000003a .hidden __aeabi_f2d
1a001818 g     F .text	0000027a .hidden __subdf3
1a002848 g     F .text	00001424 _vfprintf_r
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a005e70 g     F .text	0000005a __lo0bits
1a0013f4 g     F .text	00000044 Chip_Clock_SetBaseClock
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a000d10 g     F .text	0000000c Board_SystemInit
1a005dac g     F .text	00000082 __multadd
1a005d98 g     F .text	00000012 _Bfree



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 89 17 00 1a 85 01 00 1a 89 01 00 1a     ................
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a b6 60 ff 53     .............`.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	b9 07 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a b5 08 00 1a f1 08 00 1a 31 09 00 1a     ............1...
1a00007c:	71 09 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     q...............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 95 08 00 1a     ....y...........
1a0000ac:	a1 08 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000bc:	a9 01 00 1a 95 07 00 1a a1 07 00 1a ad 07 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a007210 	.word	0x1a007210
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000095c 	.word	0x0000095c
1a000120:	1a007210 	.word	0x1a007210
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a007210 	.word	0x1a007210
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a007210 	.word	0x1a007210
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a007210 	.word	0x1a007210
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000960 	.word	0x10000960
1a000154:	00000070 	.word	0x00000070
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fb34 	bl	1a0007e8 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <sha256_test>:
/*==================[declaraciones de funciones externas]====================*/

/*==================[funcion principal]======================================*/

int sha256_test()
{
1a000300:	b570      	push	{r4, r5, r6, lr}
1a000302:	b0d0      	sub	sp, #320	; 0x140
	BYTE text1[] = {"abc"};
1a000304:	4b48      	ldr	r3, [pc, #288]	; (1a000428 <sha256_test+0x128>)
1a000306:	934f      	str	r3, [sp, #316]	; 0x13c
	BYTE text2[] = {"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq"};
1a000308:	ac40      	add	r4, sp, #256	; 0x100
1a00030a:	4d48      	ldr	r5, [pc, #288]	; (1a00042c <sha256_test+0x12c>)
1a00030c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00030e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000318:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
1a00031c:	c403      	stmia	r4!, {r0, r1}
1a00031e:	7022      	strb	r2, [r4, #0]
	BYTE text3[] = {"aaaaaaaaaa"};
1a000320:	4a43      	ldr	r2, [pc, #268]	; (1a000430 <sha256_test+0x130>)
1a000322:	ab3d      	add	r3, sp, #244	; 0xf4
1a000324:	ca07      	ldmia	r2, {r0, r1, r2}
1a000326:	c303      	stmia	r3!, {r0, r1}
1a000328:	f823 2b02 	strh.w	r2, [r3], #2
1a00032c:	0c12      	lsrs	r2, r2, #16
1a00032e:	701a      	strb	r2, [r3, #0]
	BYTE hash1[SHA256_BLOCK_SIZE] = {0xba,0x78,0x16,0xbf,0x8f,0x01,0xcf,0xea,0x41,0x41,0x40,0xde,0x5d,0xae,0x22,0x23,
1a000330:	4c40      	ldr	r4, [pc, #256]	; (1a000434 <sha256_test+0x134>)
1a000332:	ad35      	add	r5, sp, #212	; 0xd4
1a000334:	6820      	ldr	r0, [r4, #0]
1a000336:	6861      	ldr	r1, [r4, #4]
1a000338:	68a2      	ldr	r2, [r4, #8]
1a00033a:	68e3      	ldr	r3, [r4, #12]
1a00033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a00033e:	6920      	ldr	r0, [r4, #16]
1a000340:	6961      	ldr	r1, [r4, #20]
1a000342:	69a2      	ldr	r2, [r4, #24]
1a000344:	69e3      	ldr	r3, [r4, #28]
1a000346:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	                                 0xb0,0x03,0x61,0xa3,0x96,0x17,0x7a,0x9c,0xb4,0x10,0xff,0x61,0xf2,0x00,0x15,0xad};
	BYTE hash2[SHA256_BLOCK_SIZE] = {0x24,0x8d,0x6a,0x61,0xd2,0x06,0x38,0xb8,0xe5,0xc0,0x26,0x93,0x0c,0x3e,0x60,0x39,
1a000348:	ad2d      	add	r5, sp, #180	; 0xb4
1a00034a:	4626      	mov	r6, r4
1a00034c:	f856 0f20 	ldr.w	r0, [r6, #32]!
1a000350:	6871      	ldr	r1, [r6, #4]
1a000352:	68b2      	ldr	r2, [r6, #8]
1a000354:	68f3      	ldr	r3, [r6, #12]
1a000356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000358:	6930      	ldr	r0, [r6, #16]
1a00035a:	6971      	ldr	r1, [r6, #20]
1a00035c:	69b2      	ldr	r2, [r6, #24]
1a00035e:	69f3      	ldr	r3, [r6, #28]
1a000360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	                                 0xa3,0x3c,0xe4,0x59,0x64,0xff,0x21,0x67,0xf6,0xec,0xed,0xd4,0x19,0xdb,0x06,0xc1};
	BYTE hash3[SHA256_BLOCK_SIZE] = {0xcd,0xc7,0x6e,0x5c,0x99,0x14,0xfb,0x92,0x81,0xa1,0xc7,0xe2,0x84,0xd7,0x3e,0x67,
1a000362:	ad25      	add	r5, sp, #148	; 0x94
1a000364:	f854 0f40 	ldr.w	r0, [r4, #64]!
1a000368:	6861      	ldr	r1, [r4, #4]
1a00036a:	68a2      	ldr	r2, [r4, #8]
1a00036c:	68e3      	ldr	r3, [r4, #12]
1a00036e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
1a000370:	6920      	ldr	r0, [r4, #16]
1a000372:	6961      	ldr	r1, [r4, #20]
1a000374:	69a2      	ldr	r2, [r4, #24]
1a000376:	69e3      	ldr	r3, [r4, #28]
1a000378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	BYTE buf[SHA256_BLOCK_SIZE];
	SHA256_CTX ctx;
	int idx;
	int pass = 1;

	sha256_init(&ctx);
1a00037a:	4668      	mov	r0, sp
1a00037c:	f000 f914 	bl	1a0005a8 <sha256_init>
	sha256_update(&ctx, text1, strlen(text1));
1a000380:	a84f      	add	r0, sp, #316	; 0x13c
1a000382:	f002 fa33 	bl	1a0027ec <strlen>
1a000386:	4602      	mov	r2, r0
1a000388:	4668      	mov	r0, sp
1a00038a:	a94f      	add	r1, sp, #316	; 0x13c
1a00038c:	f000 f936 	bl	1a0005fc <sha256_update>
	sha256_final(&ctx, buf);
1a000390:	4668      	mov	r0, sp
1a000392:	a91d      	add	r1, sp, #116	; 0x74
1a000394:	f000 f952 	bl	1a00063c <sha256_final>
	pass = pass && !memcmp(hash1, buf, SHA256_BLOCK_SIZE);
1a000398:	a835      	add	r0, sp, #212	; 0xd4
1a00039a:	a91d      	add	r1, sp, #116	; 0x74
1a00039c:	2220      	movs	r2, #32
1a00039e:	f002 f8f7 	bl	1a002590 <memcmp>
1a0003a2:	b908      	cbnz	r0, 1a0003a8 <sha256_test+0xa8>
1a0003a4:	2401      	movs	r4, #1
1a0003a6:	e000      	b.n	1a0003aa <sha256_test+0xaa>
1a0003a8:	2400      	movs	r4, #0

	sha256_init(&ctx);
1a0003aa:	4668      	mov	r0, sp
1a0003ac:	f000 f8fc 	bl	1a0005a8 <sha256_init>
	sha256_update(&ctx, text2, strlen(text2));
1a0003b0:	a840      	add	r0, sp, #256	; 0x100
1a0003b2:	f002 fa1b 	bl	1a0027ec <strlen>
1a0003b6:	4602      	mov	r2, r0
1a0003b8:	4668      	mov	r0, sp
1a0003ba:	a940      	add	r1, sp, #256	; 0x100
1a0003bc:	f000 f91e 	bl	1a0005fc <sha256_update>
	sha256_final(&ctx, buf);
1a0003c0:	4668      	mov	r0, sp
1a0003c2:	a91d      	add	r1, sp, #116	; 0x74
1a0003c4:	f000 f93a 	bl	1a00063c <sha256_final>
	pass = pass && !memcmp(hash2, buf, SHA256_BLOCK_SIZE);
1a0003c8:	b13c      	cbz	r4, 1a0003da <sha256_test+0xda>
1a0003ca:	a82d      	add	r0, sp, #180	; 0xb4
1a0003cc:	a91d      	add	r1, sp, #116	; 0x74
1a0003ce:	2220      	movs	r2, #32
1a0003d0:	f002 f8de 	bl	1a002590 <memcmp>
1a0003d4:	b118      	cbz	r0, 1a0003de <sha256_test+0xde>
1a0003d6:	2500      	movs	r5, #0
1a0003d8:	e002      	b.n	1a0003e0 <sha256_test+0xe0>
1a0003da:	2500      	movs	r5, #0
1a0003dc:	e000      	b.n	1a0003e0 <sha256_test+0xe0>
1a0003de:	2501      	movs	r5, #1

	sha256_init(&ctx);
1a0003e0:	4668      	mov	r0, sp
1a0003e2:	f000 f8e1 	bl	1a0005a8 <sha256_init>
	for (idx = 0; idx < 100000; ++idx)
1a0003e6:	2400      	movs	r4, #0
1a0003e8:	e008      	b.n	1a0003fc <sha256_test+0xfc>
	   sha256_update(&ctx, text3, strlen(text3));
1a0003ea:	a83d      	add	r0, sp, #244	; 0xf4
1a0003ec:	f002 f9fe 	bl	1a0027ec <strlen>
1a0003f0:	4602      	mov	r2, r0
1a0003f2:	4668      	mov	r0, sp
1a0003f4:	a93d      	add	r1, sp, #244	; 0xf4
1a0003f6:	f000 f901 	bl	1a0005fc <sha256_update>
	sha256_update(&ctx, text2, strlen(text2));
	sha256_final(&ctx, buf);
	pass = pass && !memcmp(hash2, buf, SHA256_BLOCK_SIZE);

	sha256_init(&ctx);
	for (idx = 0; idx < 100000; ++idx)
1a0003fa:	3401      	adds	r4, #1
1a0003fc:	4b0e      	ldr	r3, [pc, #56]	; (1a000438 <sha256_test+0x138>)
1a0003fe:	429c      	cmp	r4, r3
1a000400:	ddf3      	ble.n	1a0003ea <sha256_test+0xea>
	   sha256_update(&ctx, text3, strlen(text3));
	sha256_final(&ctx, buf);
1a000402:	4668      	mov	r0, sp
1a000404:	a91d      	add	r1, sp, #116	; 0x74
1a000406:	f000 f919 	bl	1a00063c <sha256_final>
	pass = pass && !memcmp(hash3, buf, SHA256_BLOCK_SIZE);
1a00040a:	b13d      	cbz	r5, 1a00041c <sha256_test+0x11c>
1a00040c:	a825      	add	r0, sp, #148	; 0x94
1a00040e:	a91d      	add	r1, sp, #116	; 0x74
1a000410:	2220      	movs	r2, #32
1a000412:	f002 f8bd 	bl	1a002590 <memcmp>
1a000416:	b118      	cbz	r0, 1a000420 <sha256_test+0x120>
1a000418:	2000      	movs	r0, #0
1a00041a:	e002      	b.n	1a000422 <sha256_test+0x122>
1a00041c:	2000      	movs	r0, #0
1a00041e:	e000      	b.n	1a000422 <sha256_test+0x122>
1a000420:	2001      	movs	r0, #1

	return(pass);
}
1a000422:	b050      	add	sp, #320	; 0x140
1a000424:	bd70      	pop	{r4, r5, r6, pc}
1a000426:	bf00      	nop
1a000428:	00636261 	.word	0x00636261
1a00042c:	1a006d24 	.word	0x1a006d24
1a000430:	1a006d60 	.word	0x1a006d60
1a000434:	1a006cc4 	.word	0x1a006cc4
1a000438:	0001869f 	.word	0x0001869f

1a00043c <main>:

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a00043c:	b508      	push	{r3, lr}
	printf("SHA-256 tests: %s\n", sha256_test() ? "SUCCEEDED" : "FAILED");
1a00043e:	f7ff ff5f 	bl	1a000300 <sha256_test>
1a000442:	b108      	cbz	r0, 1a000448 <main+0xc>
1a000444:	4903      	ldr	r1, [pc, #12]	; (1a000454 <main+0x18>)
1a000446:	e000      	b.n	1a00044a <main+0xe>
1a000448:	4903      	ldr	r1, [pc, #12]	; (1a000458 <main+0x1c>)
1a00044a:	4804      	ldr	r0, [pc, #16]	; (1a00045c <main+0x20>)
1a00044c:	f002 f9ba 	bl	1a0027c4 <printf>
    while(1){}
1a000450:	e7fe      	b.n	1a000450 <main+0x14>
1a000452:	bf00      	nop
1a000454:	1a006d6c 	.word	0x1a006d6c
1a000458:	1a006d78 	.word	0x1a006d78
1a00045c:	1a006d80 	.word	0x1a006d80

1a000460 <sha256_transform>:
	0x748f82ee,0x78a5636f,0x84c87814,0x8cc70208,0x90befffa,0xa4506ceb,0xbef9a3f7,0xc67178f2
};

/*********************** FUNCTION DEFINITIONS ***********************/
void sha256_transform(SHA256_CTX *ctx, const BYTE data[])
{
1a000460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000464:	b0c9      	sub	sp, #292	; 0x124
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
1a000466:	2500      	movs	r5, #0
1a000468:	462c      	mov	r4, r5
1a00046a:	e00f      	b.n	1a00048c <sha256_transform+0x2c>
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
1a00046c:	5d4e      	ldrb	r6, [r1, r5]
1a00046e:	194a      	adds	r2, r1, r5
1a000470:	7853      	ldrb	r3, [r2, #1]
1a000472:	041b      	lsls	r3, r3, #16
1a000474:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
1a000478:	7896      	ldrb	r6, [r2, #2]
1a00047a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
1a00047e:	78d2      	ldrb	r2, [r2, #3]
1a000480:	4313      	orrs	r3, r2
1a000482:	aa08      	add	r2, sp, #32
1a000484:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
/*********************** FUNCTION DEFINITIONS ***********************/
void sha256_transform(SHA256_CTX *ctx, const BYTE data[])
{
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
1a000488:	3401      	adds	r4, #1
1a00048a:	3504      	adds	r5, #4
1a00048c:	2c0f      	cmp	r4, #15
1a00048e:	d9ed      	bls.n	1a00046c <sha256_transform+0xc>
1a000490:	e023      	b.n	1a0004da <sha256_transform+0x7a>
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];
1a000492:	1ea3      	subs	r3, r4, #2
1a000494:	aa08      	add	r2, sp, #32
1a000496:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a00049a:	ea4f 43f2 	mov.w	r3, r2, ror #19
1a00049e:	ea83 4372 	eor.w	r3, r3, r2, ror #17
1a0004a2:	ea83 2392 	eor.w	r3, r3, r2, lsr #10
1a0004a6:	1fe2      	subs	r2, r4, #7
1a0004a8:	a908      	add	r1, sp, #32
1a0004aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a0004ae:	4419      	add	r1, r3
1a0004b0:	f1a4 030f 	sub.w	r3, r4, #15
1a0004b4:	aa08      	add	r2, sp, #32
1a0004b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0004ba:	ea4f 42b3 	mov.w	r2, r3, ror #18
1a0004be:	ea82 12f3 	eor.w	r2, r2, r3, ror #7
1a0004c2:	ea82 03d3 	eor.w	r3, r2, r3, lsr #3
1a0004c6:	440b      	add	r3, r1
1a0004c8:	f1a4 0210 	sub.w	r2, r4, #16
1a0004cc:	a908      	add	r1, sp, #32
1a0004ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
1a0004d2:	4413      	add	r3, r2
1a0004d4:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
{
	WORD a, b, c, d, e, f, g, h, i, j, t1, t2, m[64];

	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
1a0004d8:	3401      	adds	r4, #1
1a0004da:	2c3f      	cmp	r4, #63	; 0x3f
1a0004dc:	d9d9      	bls.n	1a000492 <sha256_transform+0x32>
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
1a0004de:	f8d0 b050 	ldr.w	fp, [r0, #80]	; 0x50
	b = ctx->state[1];
1a0004e2:	6d43      	ldr	r3, [r0, #84]	; 0x54
1a0004e4:	9301      	str	r3, [sp, #4]
	c = ctx->state[2];
1a0004e6:	6d82      	ldr	r2, [r0, #88]	; 0x58
1a0004e8:	9202      	str	r2, [sp, #8]
	d = ctx->state[3];
1a0004ea:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
1a0004ec:	9103      	str	r1, [sp, #12]
	e = ctx->state[4];
1a0004ee:	6e04      	ldr	r4, [r0, #96]	; 0x60
1a0004f0:	4625      	mov	r5, r4
1a0004f2:	9404      	str	r4, [sp, #16]
	f = ctx->state[5];
1a0004f4:	6e44      	ldr	r4, [r0, #100]	; 0x64
1a0004f6:	4626      	mov	r6, r4
1a0004f8:	9405      	str	r4, [sp, #20]
	g = ctx->state[6];
1a0004fa:	6e84      	ldr	r4, [r0, #104]	; 0x68
1a0004fc:	4627      	mov	r7, r4
1a0004fe:	9406      	str	r4, [sp, #24]
	h = ctx->state[7];
1a000500:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
1a000502:	9407      	str	r4, [sp, #28]
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
1a000504:	46b8      	mov	r8, r7
	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
	e = ctx->state[4];
	f = ctx->state[5];
1a000506:	46b1      	mov	r9, r6
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
	d = ctx->state[3];
1a000508:	468a      	mov	sl, r1
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
	b = ctx->state[1];
	c = ctx->state[2];
1a00050a:	4696      	mov	lr, r2
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
	b = ctx->state[1];
1a00050c:	469c      	mov	ip, r3
	for (i = 0, j = 0; i < 16; ++i, j += 4)
		m[i] = (data[j] << 24) | (data[j + 1] << 16) | (data[j + 2] << 8) | (data[j + 3]);
	for ( ; i < 64; ++i)
		m[i] = SIG1(m[i - 2]) + m[i - 7] + SIG0(m[i - 15]) + m[i - 16];

	a = ctx->state[0];
1a00050e:	465e      	mov	r6, fp
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
1a000510:	2700      	movs	r7, #0
1a000512:	e02b      	b.n	1a00056c <sha256_transform+0x10c>
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
1a000514:	ea4f 23f5 	mov.w	r3, r5, ror #11
1a000518:	ea83 13b5 	eor.w	r3, r3, r5, ror #6
1a00051c:	ea83 6375 	eor.w	r3, r3, r5, ror #25
1a000520:	4423      	add	r3, r4
1a000522:	ea05 0109 	and.w	r1, r5, r9
1a000526:	ea28 0205 	bic.w	r2, r8, r5
1a00052a:	404a      	eors	r2, r1
1a00052c:	4413      	add	r3, r2
1a00052e:	4a1d      	ldr	r2, [pc, #116]	; (1a0005a4 <sha256_transform+0x144>)
1a000530:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
1a000534:	4413      	add	r3, r2
1a000536:	aa08      	add	r2, sp, #32
1a000538:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
1a00053c:	4413      	add	r3, r2
		t2 = EP0(a) + MAJ(a,b,c);
1a00053e:	ea4f 3276 	mov.w	r2, r6, ror #13
1a000542:	ea82 02b6 	eor.w	r2, r2, r6, ror #2
1a000546:	ea82 54b6 	eor.w	r4, r2, r6, ror #22
1a00054a:	ea8e 020c 	eor.w	r2, lr, ip
1a00054e:	4032      	ands	r2, r6
1a000550:	ea0c 010e 	and.w	r1, ip, lr
1a000554:	404a      	eors	r2, r1
1a000556:	4422      	add	r2, r4
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
1a000558:	3701      	adds	r7, #1
		t1 = h + EP1(e) + CH(e,f,g) + k[i] + m[i];
		t2 = EP0(a) + MAJ(a,b,c);
		h = g;
1a00055a:	4644      	mov	r4, r8
		g = f;
1a00055c:	46c8      	mov	r8, r9
		f = e;
1a00055e:	46a9      	mov	r9, r5
		e = d + t1;
1a000560:	eb0a 0503 	add.w	r5, sl, r3
		d = c;
1a000564:	46f2      	mov	sl, lr
		c = b;
1a000566:	46e6      	mov	lr, ip
		b = a;
1a000568:	46b4      	mov	ip, r6
		a = t1 + t2;
1a00056a:	189e      	adds	r6, r3, r2
	e = ctx->state[4];
	f = ctx->state[5];
	g = ctx->state[6];
	h = ctx->state[7];

	for (i = 0; i < 64; ++i) {
1a00056c:	2f3f      	cmp	r7, #63	; 0x3f
1a00056e:	d9d1      	bls.n	1a000514 <sha256_transform+0xb4>
		c = b;
		b = a;
		a = t1 + t2;
	}

	ctx->state[0] += a;
1a000570:	445e      	add	r6, fp
1a000572:	6506      	str	r6, [r0, #80]	; 0x50
	ctx->state[1] += b;
1a000574:	9b01      	ldr	r3, [sp, #4]
1a000576:	4463      	add	r3, ip
1a000578:	6543      	str	r3, [r0, #84]	; 0x54
	ctx->state[2] += c;
1a00057a:	9b02      	ldr	r3, [sp, #8]
1a00057c:	4473      	add	r3, lr
1a00057e:	6583      	str	r3, [r0, #88]	; 0x58
	ctx->state[3] += d;
1a000580:	9b03      	ldr	r3, [sp, #12]
1a000582:	4453      	add	r3, sl
1a000584:	65c3      	str	r3, [r0, #92]	; 0x5c
	ctx->state[4] += e;
1a000586:	9b04      	ldr	r3, [sp, #16]
1a000588:	441d      	add	r5, r3
1a00058a:	6605      	str	r5, [r0, #96]	; 0x60
	ctx->state[5] += f;
1a00058c:	9b05      	ldr	r3, [sp, #20]
1a00058e:	444b      	add	r3, r9
1a000590:	6643      	str	r3, [r0, #100]	; 0x64
	ctx->state[6] += g;
1a000592:	9b06      	ldr	r3, [sp, #24]
1a000594:	4443      	add	r3, r8
1a000596:	6683      	str	r3, [r0, #104]	; 0x68
	ctx->state[7] += h;
1a000598:	9b07      	ldr	r3, [sp, #28]
1a00059a:	441c      	add	r4, r3
1a00059c:	66c4      	str	r4, [r0, #108]	; 0x6c
}
1a00059e:	b049      	add	sp, #292	; 0x124
1a0005a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0005a4:	1a006d94 	.word	0x1a006d94

1a0005a8 <sha256_init>:

void sha256_init(SHA256_CTX *ctx)
{
	ctx->datalen = 0;
1a0005a8:	2300      	movs	r3, #0
1a0005aa:	6403      	str	r3, [r0, #64]	; 0x40
	ctx->bitlen = 0;
1a0005ac:	2200      	movs	r2, #0
1a0005ae:	2300      	movs	r3, #0
1a0005b0:	e9c0 2312 	strd	r2, r3, [r0, #72]	; 0x48
	ctx->state[0] = 0x6a09e667;
1a0005b4:	4b0a      	ldr	r3, [pc, #40]	; (1a0005e0 <sha256_init+0x38>)
1a0005b6:	6503      	str	r3, [r0, #80]	; 0x50
	ctx->state[1] = 0xbb67ae85;
1a0005b8:	4b0a      	ldr	r3, [pc, #40]	; (1a0005e4 <sha256_init+0x3c>)
1a0005ba:	6543      	str	r3, [r0, #84]	; 0x54
	ctx->state[2] = 0x3c6ef372;
1a0005bc:	4b0a      	ldr	r3, [pc, #40]	; (1a0005e8 <sha256_init+0x40>)
1a0005be:	6583      	str	r3, [r0, #88]	; 0x58
	ctx->state[3] = 0xa54ff53a;
1a0005c0:	4b0a      	ldr	r3, [pc, #40]	; (1a0005ec <sha256_init+0x44>)
1a0005c2:	65c3      	str	r3, [r0, #92]	; 0x5c
	ctx->state[4] = 0x510e527f;
1a0005c4:	4b0a      	ldr	r3, [pc, #40]	; (1a0005f0 <sha256_init+0x48>)
1a0005c6:	6603      	str	r3, [r0, #96]	; 0x60
	ctx->state[5] = 0x9b05688c;
1a0005c8:	4b0a      	ldr	r3, [pc, #40]	; (1a0005f4 <sha256_init+0x4c>)
1a0005ca:	6643      	str	r3, [r0, #100]	; 0x64
	ctx->state[6] = 0x1f83d9ab;
1a0005cc:	4b0a      	ldr	r3, [pc, #40]	; (1a0005f8 <sha256_init+0x50>)
1a0005ce:	6683      	str	r3, [r0, #104]	; 0x68
	ctx->state[7] = 0x5be0cd19;
1a0005d0:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
1a0005d4:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
1a0005d8:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
1a0005dc:	66c3      	str	r3, [r0, #108]	; 0x6c
1a0005de:	4770      	bx	lr
1a0005e0:	6a09e667 	.word	0x6a09e667
1a0005e4:	bb67ae85 	.word	0xbb67ae85
1a0005e8:	3c6ef372 	.word	0x3c6ef372
1a0005ec:	a54ff53a 	.word	0xa54ff53a
1a0005f0:	510e527f 	.word	0x510e527f
1a0005f4:	9b05688c 	.word	0x9b05688c
1a0005f8:	1f83d9ab 	.word	0x1f83d9ab

1a0005fc <sha256_update>:
}

void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)
{
1a0005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0005fe:	4605      	mov	r5, r0
1a000600:	460f      	mov	r7, r1
1a000602:	4616      	mov	r6, r2
	WORD i;

	for (i = 0; i < len; ++i) {
1a000604:	2400      	movs	r4, #0
1a000606:	e015      	b.n	1a000634 <sha256_update+0x38>
		ctx->data[ctx->datalen] = data[i];
1a000608:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a00060a:	5d3a      	ldrb	r2, [r7, r4]
1a00060c:	54ea      	strb	r2, [r5, r3]
		ctx->datalen++;
1a00060e:	3301      	adds	r3, #1
1a000610:	642b      	str	r3, [r5, #64]	; 0x40
		if (ctx->datalen == 64) {
1a000612:	2b40      	cmp	r3, #64	; 0x40
1a000614:	d10d      	bne.n	1a000632 <sha256_update+0x36>
			sha256_transform(ctx, ctx->data);
1a000616:	4628      	mov	r0, r5
1a000618:	4629      	mov	r1, r5
1a00061a:	f7ff ff21 	bl	1a000460 <sha256_transform>
			ctx->bitlen += 512;
1a00061e:	e9d5 2312 	ldrd	r2, r3, [r5, #72]	; 0x48
1a000622:	f512 7200 	adds.w	r2, r2, #512	; 0x200
1a000626:	f143 0300 	adc.w	r3, r3, #0
1a00062a:	e9c5 2312 	strd	r2, r3, [r5, #72]	; 0x48
			ctx->datalen = 0;
1a00062e:	2300      	movs	r3, #0
1a000630:	642b      	str	r3, [r5, #64]	; 0x40

void sha256_update(SHA256_CTX *ctx, const BYTE data[], size_t len)
{
	WORD i;

	for (i = 0; i < len; ++i) {
1a000632:	3401      	adds	r4, #1
1a000634:	42b4      	cmp	r4, r6
1a000636:	d3e7      	bcc.n	1a000608 <sha256_update+0xc>
			sha256_transform(ctx, ctx->data);
			ctx->bitlen += 512;
			ctx->datalen = 0;
		}
	}
}
1a000638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00063a:	bf00      	nop

1a00063c <sha256_final>:

void sha256_final(SHA256_CTX *ctx, BYTE hash[])
{
1a00063c:	b538      	push	{r3, r4, r5, lr}
1a00063e:	4604      	mov	r4, r0
1a000640:	460d      	mov	r5, r1
	WORD i;

	i = ctx->datalen;
1a000642:	6c02      	ldr	r2, [r0, #64]	; 0x40

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
1a000644:	2a37      	cmp	r2, #55	; 0x37
1a000646:	d809      	bhi.n	1a00065c <sha256_final+0x20>
		ctx->data[i++] = 0x80;
1a000648:	1c53      	adds	r3, r2, #1
1a00064a:	2180      	movs	r1, #128	; 0x80
1a00064c:	5481      	strb	r1, [r0, r2]
		while (i < 56)
1a00064e:	e002      	b.n	1a000656 <sha256_final+0x1a>
			ctx->data[i++] = 0x00;
1a000650:	2200      	movs	r2, #0
1a000652:	54e2      	strb	r2, [r4, r3]
1a000654:	3301      	adds	r3, #1
	i = ctx->datalen;

	// Pad whatever data is left in the buffer.
	if (ctx->datalen < 56) {
		ctx->data[i++] = 0x80;
		while (i < 56)
1a000656:	2b37      	cmp	r3, #55	; 0x37
1a000658:	d9fa      	bls.n	1a000650 <sha256_final+0x14>
1a00065a:	e011      	b.n	1a000680 <sha256_final+0x44>
			ctx->data[i++] = 0x00;
	}
	else {
		ctx->data[i++] = 0x80;
1a00065c:	1c53      	adds	r3, r2, #1
1a00065e:	2180      	movs	r1, #128	; 0x80
1a000660:	5481      	strb	r1, [r0, r2]
		while (i < 64)
1a000662:	e002      	b.n	1a00066a <sha256_final+0x2e>
			ctx->data[i++] = 0x00;
1a000664:	2200      	movs	r2, #0
1a000666:	54e2      	strb	r2, [r4, r3]
1a000668:	3301      	adds	r3, #1
		while (i < 56)
			ctx->data[i++] = 0x00;
	}
	else {
		ctx->data[i++] = 0x80;
		while (i < 64)
1a00066a:	2b3f      	cmp	r3, #63	; 0x3f
1a00066c:	d9fa      	bls.n	1a000664 <sha256_final+0x28>
			ctx->data[i++] = 0x00;
		sha256_transform(ctx, ctx->data);
1a00066e:	4620      	mov	r0, r4
1a000670:	4621      	mov	r1, r4
1a000672:	f7ff fef5 	bl	1a000460 <sha256_transform>
		memset(ctx->data, 0, 56);
1a000676:	4620      	mov	r0, r4
1a000678:	2100      	movs	r1, #0
1a00067a:	2238      	movs	r2, #56	; 0x38
1a00067c:	f002 f854 	bl	1a002728 <memset>
	}

	// Append to the padding the total message's length in bits and transform.
	ctx->bitlen += ctx->datalen * 8;
1a000680:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a000682:	00d9      	lsls	r1, r3, #3
1a000684:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
1a000688:	1852      	adds	r2, r2, r1
1a00068a:	f143 0300 	adc.w	r3, r3, #0
1a00068e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
	ctx->data[63] = ctx->bitlen;
1a000692:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
	ctx->data[62] = ctx->bitlen >> 8;
1a000696:	0a11      	lsrs	r1, r2, #8
1a000698:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
	ctx->data[61] = ctx->bitlen >> 16;
1a00069c:	0c11      	lsrs	r1, r2, #16
1a00069e:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
	ctx->data[60] = ctx->bitlen >> 24;
1a0006a2:	0e12      	lsrs	r2, r2, #24
1a0006a4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
	ctx->data[59] = ctx->bitlen >> 32;
1a0006a8:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	ctx->data[58] = ctx->bitlen >> 40;
1a0006ac:	0a1a      	lsrs	r2, r3, #8
1a0006ae:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
	ctx->data[57] = ctx->bitlen >> 48;
1a0006b2:	0c1a      	lsrs	r2, r3, #16
1a0006b4:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
	ctx->data[56] = ctx->bitlen >> 56;
1a0006b8:	0e1b      	lsrs	r3, r3, #24
1a0006ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	sha256_transform(ctx, ctx->data);
1a0006be:	4620      	mov	r0, r4
1a0006c0:	4621      	mov	r1, r4
1a0006c2:	f7ff fecd 	bl	1a000460 <sha256_transform>

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
1a0006c6:	2200      	movs	r2, #0
1a0006c8:	e028      	b.n	1a00071c <sha256_final+0xe0>
		hash[i]      = (ctx->state[0] >> (24 - i * 8)) & 0x000000ff;
1a0006ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0006cc:	4253      	negs	r3, r2
1a0006ce:	00db      	lsls	r3, r3, #3
1a0006d0:	3318      	adds	r3, #24
1a0006d2:	40d9      	lsrs	r1, r3
1a0006d4:	54a9      	strb	r1, [r5, r2]
		hash[i + 4]  = (ctx->state[1] >> (24 - i * 8)) & 0x000000ff;
1a0006d6:	1d10      	adds	r0, r2, #4
1a0006d8:	6d61      	ldr	r1, [r4, #84]	; 0x54
1a0006da:	40d9      	lsrs	r1, r3
1a0006dc:	5429      	strb	r1, [r5, r0]
		hash[i + 8]  = (ctx->state[2] >> (24 - i * 8)) & 0x000000ff;
1a0006de:	f102 0008 	add.w	r0, r2, #8
1a0006e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
1a0006e4:	40d9      	lsrs	r1, r3
1a0006e6:	5429      	strb	r1, [r5, r0]
		hash[i + 12] = (ctx->state[3] >> (24 - i * 8)) & 0x000000ff;
1a0006e8:	f102 000c 	add.w	r0, r2, #12
1a0006ec:	6de1      	ldr	r1, [r4, #92]	; 0x5c
1a0006ee:	40d9      	lsrs	r1, r3
1a0006f0:	5429      	strb	r1, [r5, r0]
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
1a0006f2:	f102 0010 	add.w	r0, r2, #16
1a0006f6:	6e21      	ldr	r1, [r4, #96]	; 0x60
1a0006f8:	40d9      	lsrs	r1, r3
1a0006fa:	5429      	strb	r1, [r5, r0]
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
1a0006fc:	f102 0014 	add.w	r0, r2, #20
1a000700:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a000702:	40d9      	lsrs	r1, r3
1a000704:	5429      	strb	r1, [r5, r0]
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
1a000706:	f102 0018 	add.w	r0, r2, #24
1a00070a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
1a00070c:	40d9      	lsrs	r1, r3
1a00070e:	5429      	strb	r1, [r5, r0]
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
1a000710:	f102 001c 	add.w	r0, r2, #28
1a000714:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
1a000716:	40d9      	lsrs	r1, r3
1a000718:	5429      	strb	r1, [r5, r0]
	ctx->data[56] = ctx->bitlen >> 56;
	sha256_transform(ctx, ctx->data);

	// Since this implementation uses little endian byte ordering and SHA uses big endian,
	// reverse all the bytes when copying the final state to the output hash.
	for (i = 0; i < 4; ++i) {
1a00071a:	3201      	adds	r2, #1
1a00071c:	2a03      	cmp	r2, #3
1a00071e:	d9d4      	bls.n	1a0006ca <sha256_final+0x8e>
		hash[i + 16] = (ctx->state[4] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 20] = (ctx->state[5] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 24] = (ctx->state[6] >> (24 - i * 8)) & 0x000000ff;
		hash[i + 28] = (ctx->state[7] >> (24 - i * 8)) & 0x000000ff;
	}
}
1a000720:	bd38      	pop	{r3, r4, r5, pc}
1a000722:	bf00      	nop

1a000724 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000724:	2301      	movs	r3, #1
1a000726:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a000728:	4a01      	ldr	r2, [pc, #4]	; (1a000730 <clearInterrupt+0xc>)
1a00072a:	6253      	str	r3, [r2, #36]	; 0x24
1a00072c:	4770      	bx	lr
1a00072e:	bf00      	nop
1a000730:	40087000 	.word	0x40087000

1a000734 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a000734:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a000736:	4b13      	ldr	r3, [pc, #76]	; (1a000784 <serveInterrupt+0x50>)
1a000738:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a00073a:	4a13      	ldr	r2, [pc, #76]	; (1a000788 <serveInterrupt+0x54>)
1a00073c:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a00073e:	2401      	movs	r4, #1
1a000740:	4084      	lsls	r4, r0
1a000742:	4214      	tst	r4, r2
1a000744:	d00a      	beq.n	1a00075c <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a000746:	4a11      	ldr	r2, [pc, #68]	; (1a00078c <serveInterrupt+0x58>)
1a000748:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00074a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a00074e:	00db      	lsls	r3, r3, #3
1a000750:	490f      	ldr	r1, [pc, #60]	; (1a000790 <serveInterrupt+0x5c>)
1a000752:	440b      	add	r3, r1
1a000754:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a000756:	4b0c      	ldr	r3, [pc, #48]	; (1a000788 <serveInterrupt+0x54>)
1a000758:	61dc      	str	r4, [r3, #28]
1a00075a:	e00f      	b.n	1a00077c <serveInterrupt+0x48>
1a00075c:	4a0b      	ldr	r2, [pc, #44]	; (1a00078c <serveInterrupt+0x58>)
1a00075e:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a000760:	4d0b      	ldr	r5, [pc, #44]	; (1a000790 <serveInterrupt+0x5c>)
1a000762:	005e      	lsls	r6, r3, #1
1a000764:	18f2      	adds	r2, r6, r3
1a000766:	00d2      	lsls	r2, r2, #3
1a000768:	442a      	add	r2, r5
1a00076a:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a00076c:	6852      	ldr	r2, [r2, #4]
1a00076e:	1a89      	subs	r1, r1, r2
1a000770:	4433      	add	r3, r6
1a000772:	00db      	lsls	r3, r3, #3
1a000774:	442b      	add	r3, r5
1a000776:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a000778:	4b03      	ldr	r3, [pc, #12]	; (1a000788 <serveInterrupt+0x54>)
1a00077a:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a00077c:	f7ff ffd2 	bl	1a000724 <clearInterrupt>
1a000780:	bd70      	pop	{r4, r5, r6, pc}
1a000782:	bf00      	nop
1a000784:	1a006e94 	.word	0x1a006e94
1a000788:	40087000 	.word	0x40087000
1a00078c:	40084000 	.word	0x40084000
1a000790:	10000000 	.word	0x10000000

1a000794 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a000794:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a000796:	2000      	movs	r0, #0
1a000798:	f7ff ffcc 	bl	1a000734 <serveInterrupt>
1a00079c:	bd08      	pop	{r3, pc}
1a00079e:	bf00      	nop

1a0007a0 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0007a0:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0007a2:	2001      	movs	r0, #1
1a0007a4:	f7ff ffc6 	bl	1a000734 <serveInterrupt>
1a0007a8:	bd08      	pop	{r3, pc}
1a0007aa:	bf00      	nop

1a0007ac <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0007ac:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0007ae:	2002      	movs	r0, #2
1a0007b0:	f7ff ffc0 	bl	1a000734 <serveInterrupt>
1a0007b4:	bd08      	pop	{r3, pc}
1a0007b6:	bf00      	nop

1a0007b8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0007b8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0007ba:	4908      	ldr	r1, [pc, #32]	; (1a0007dc <SysTick_Handler+0x24>)
1a0007bc:	e9d1 2300 	ldrd	r2, r3, [r1]
1a0007c0:	3201      	adds	r2, #1
1a0007c2:	f143 0300 	adc.w	r3, r3, #0
1a0007c6:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0007ca:	4b05      	ldr	r3, [pc, #20]	; (1a0007e0 <SysTick_Handler+0x28>)
1a0007cc:	681b      	ldr	r3, [r3, #0]
1a0007ce:	b123      	cbz	r3, 1a0007da <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a0007d0:	4b03      	ldr	r3, [pc, #12]	; (1a0007e0 <SysTick_Handler+0x28>)
1a0007d2:	681b      	ldr	r3, [r3, #0]
1a0007d4:	4a03      	ldr	r2, [pc, #12]	; (1a0007e4 <SysTick_Handler+0x2c>)
1a0007d6:	6810      	ldr	r0, [r2, #0]
1a0007d8:	4798      	blx	r3
1a0007da:	bd08      	pop	{r3, pc}
1a0007dc:	100009c0 	.word	0x100009c0
1a0007e0:	10000960 	.word	0x10000960
1a0007e4:	10000964 	.word	0x10000964

1a0007e8 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a0007e8:	b570      	push	{r4, r5, r6, lr}
1a0007ea:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0007ec:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0007f0:	009b      	lsls	r3, r3, #2
1a0007f2:	4a21      	ldr	r2, [pc, #132]	; (1a000878 <uartProcessIRQ+0x90>)
1a0007f4:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0007f6:	6975      	ldr	r5, [r6, #20]
1a0007f8:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a0007fa:	f015 0f01 	tst.w	r5, #1
1a0007fe:	d019      	beq.n	1a000834 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a000800:	b930      	cbnz	r0, 1a000810 <uartProcessIRQ+0x28>
1a000802:	4b1e      	ldr	r3, [pc, #120]	; (1a00087c <uartProcessIRQ+0x94>)
1a000804:	681b      	ldr	r3, [r3, #0]
1a000806:	b11b      	cbz	r3, 1a000810 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a000808:	4b1c      	ldr	r3, [pc, #112]	; (1a00087c <uartProcessIRQ+0x94>)
1a00080a:	681b      	ldr	r3, [r3, #0]
1a00080c:	2000      	movs	r0, #0
1a00080e:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a000810:	2c03      	cmp	r4, #3
1a000812:	d106      	bne.n	1a000822 <uartProcessIRQ+0x3a>
1a000814:	4b1a      	ldr	r3, [pc, #104]	; (1a000880 <uartProcessIRQ+0x98>)
1a000816:	681b      	ldr	r3, [r3, #0]
1a000818:	b11b      	cbz	r3, 1a000822 <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a00081a:	4b19      	ldr	r3, [pc, #100]	; (1a000880 <uartProcessIRQ+0x98>)
1a00081c:	681b      	ldr	r3, [r3, #0]
1a00081e:	2000      	movs	r0, #0
1a000820:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a000822:	2c05      	cmp	r4, #5
1a000824:	d106      	bne.n	1a000834 <uartProcessIRQ+0x4c>
1a000826:	4b17      	ldr	r3, [pc, #92]	; (1a000884 <uartProcessIRQ+0x9c>)
1a000828:	681b      	ldr	r3, [r3, #0]
1a00082a:	b11b      	cbz	r3, 1a000834 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a00082c:	4b15      	ldr	r3, [pc, #84]	; (1a000884 <uartProcessIRQ+0x9c>)
1a00082e:	681b      	ldr	r3, [r3, #0]
1a000830:	2000      	movs	r0, #0
1a000832:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a000834:	f015 0f20 	tst.w	r5, #32
1a000838:	d01d      	beq.n	1a000876 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a00083a:	6873      	ldr	r3, [r6, #4]
1a00083c:	f013 0f02 	tst.w	r3, #2
1a000840:	d019      	beq.n	1a000876 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a000842:	b934      	cbnz	r4, 1a000852 <uartProcessIRQ+0x6a>
1a000844:	4b10      	ldr	r3, [pc, #64]	; (1a000888 <uartProcessIRQ+0xa0>)
1a000846:	681b      	ldr	r3, [r3, #0]
1a000848:	b11b      	cbz	r3, 1a000852 <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a00084a:	4b0f      	ldr	r3, [pc, #60]	; (1a000888 <uartProcessIRQ+0xa0>)
1a00084c:	681b      	ldr	r3, [r3, #0]
1a00084e:	2000      	movs	r0, #0
1a000850:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a000852:	2c03      	cmp	r4, #3
1a000854:	d106      	bne.n	1a000864 <uartProcessIRQ+0x7c>
1a000856:	4b0d      	ldr	r3, [pc, #52]	; (1a00088c <uartProcessIRQ+0xa4>)
1a000858:	681b      	ldr	r3, [r3, #0]
1a00085a:	b11b      	cbz	r3, 1a000864 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a00085c:	4b0b      	ldr	r3, [pc, #44]	; (1a00088c <uartProcessIRQ+0xa4>)
1a00085e:	681b      	ldr	r3, [r3, #0]
1a000860:	2000      	movs	r0, #0
1a000862:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a000864:	2c05      	cmp	r4, #5
1a000866:	d106      	bne.n	1a000876 <uartProcessIRQ+0x8e>
1a000868:	4b09      	ldr	r3, [pc, #36]	; (1a000890 <uartProcessIRQ+0xa8>)
1a00086a:	681b      	ldr	r3, [r3, #0]
1a00086c:	b11b      	cbz	r3, 1a000876 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a00086e:	4b08      	ldr	r3, [pc, #32]	; (1a000890 <uartProcessIRQ+0xa8>)
1a000870:	681b      	ldr	r3, [r3, #0]
1a000872:	2000      	movs	r0, #0
1a000874:	4798      	blx	r3
1a000876:	bd70      	pop	{r4, r5, r6, pc}
1a000878:	1a006e98 	.word	0x1a006e98
1a00087c:	10000968 	.word	0x10000968
1a000880:	10000978 	.word	0x10000978
1a000884:	1000097c 	.word	0x1000097c
1a000888:	1000096c 	.word	0x1000096c
1a00088c:	10000970 	.word	0x10000970
1a000890:	10000974 	.word	0x10000974

1a000894 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a000894:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a000896:	2003      	movs	r0, #3
1a000898:	f7ff ffa6 	bl	1a0007e8 <uartProcessIRQ>
1a00089c:	bd08      	pop	{r3, pc}
1a00089e:	bf00      	nop

1a0008a0 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a0008a0:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a0008a2:	2005      	movs	r0, #5
1a0008a4:	f7ff ffa0 	bl	1a0007e8 <uartProcessIRQ>
1a0008a8:	bd08      	pop	{r3, pc}
1a0008aa:	bf00      	nop

1a0008ac <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0008ac:	e7fe      	b.n	1a0008ac <errorOcurred>
1a0008ae:	bf00      	nop

1a0008b0 <doNothing>:
}

static void doNothing( void* ptr )
{
1a0008b0:	4770      	bx	lr
1a0008b2:	bf00      	nop

1a0008b4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0008b4:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008b6:	2400      	movs	r4, #0
1a0008b8:	e013      	b.n	1a0008e2 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0008ba:	4b0b      	ldr	r3, [pc, #44]	; (1a0008e8 <TIMER0_IRQHandler+0x34>)
1a0008bc:	681a      	ldr	r2, [r3, #0]
1a0008be:	f004 010f 	and.w	r1, r4, #15
1a0008c2:	2301      	movs	r3, #1
1a0008c4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0008c6:	421a      	tst	r2, r3
1a0008c8:	d009      	beq.n	1a0008de <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0008ca:	4b08      	ldr	r3, [pc, #32]	; (1a0008ec <TIMER0_IRQHandler+0x38>)
1a0008cc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0008d0:	2000      	movs	r0, #0
1a0008d2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0008d4:	b262      	sxtb	r2, r4
1a0008d6:	2301      	movs	r3, #1
1a0008d8:	4093      	lsls	r3, r2
1a0008da:	4a03      	ldr	r2, [pc, #12]	; (1a0008e8 <TIMER0_IRQHandler+0x34>)
1a0008dc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0008de:	3401      	adds	r4, #1
1a0008e0:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008e2:	2c03      	cmp	r4, #3
1a0008e4:	d9e9      	bls.n	1a0008ba <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0008e6:	bd10      	pop	{r4, pc}
1a0008e8:	40084000 	.word	0x40084000
1a0008ec:	10000048 	.word	0x10000048

1a0008f0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a0008f0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0008f2:	2400      	movs	r4, #0
1a0008f4:	e014      	b.n	1a000920 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0008f6:	4b0c      	ldr	r3, [pc, #48]	; (1a000928 <TIMER1_IRQHandler+0x38>)
1a0008f8:	681a      	ldr	r2, [r3, #0]
1a0008fa:	f004 010f 	and.w	r1, r4, #15
1a0008fe:	2301      	movs	r3, #1
1a000900:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a000902:	421a      	tst	r2, r3
1a000904:	d00a      	beq.n	1a00091c <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000906:	1d23      	adds	r3, r4, #4
1a000908:	4a08      	ldr	r2, [pc, #32]	; (1a00092c <TIMER1_IRQHandler+0x3c>)
1a00090a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00090e:	2000      	movs	r0, #0
1a000910:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000912:	b262      	sxtb	r2, r4
1a000914:	2301      	movs	r3, #1
1a000916:	4093      	lsls	r3, r2
1a000918:	4a03      	ldr	r2, [pc, #12]	; (1a000928 <TIMER1_IRQHandler+0x38>)
1a00091a:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00091c:	3401      	adds	r4, #1
1a00091e:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000920:	2c03      	cmp	r4, #3
1a000922:	d9e8      	bls.n	1a0008f6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000924:	bd10      	pop	{r4, pc}
1a000926:	bf00      	nop
1a000928:	40085000 	.word	0x40085000
1a00092c:	10000048 	.word	0x10000048

1a000930 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a000930:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000932:	2400      	movs	r4, #0
1a000934:	e015      	b.n	1a000962 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000936:	4b0c      	ldr	r3, [pc, #48]	; (1a000968 <TIMER2_IRQHandler+0x38>)
1a000938:	681a      	ldr	r2, [r3, #0]
1a00093a:	f004 010f 	and.w	r1, r4, #15
1a00093e:	2301      	movs	r3, #1
1a000940:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a000942:	421a      	tst	r2, r3
1a000944:	d00b      	beq.n	1a00095e <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000946:	f104 0308 	add.w	r3, r4, #8
1a00094a:	4a08      	ldr	r2, [pc, #32]	; (1a00096c <TIMER2_IRQHandler+0x3c>)
1a00094c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000950:	2000      	movs	r0, #0
1a000952:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000954:	b262      	sxtb	r2, r4
1a000956:	2301      	movs	r3, #1
1a000958:	4093      	lsls	r3, r2
1a00095a:	4a03      	ldr	r2, [pc, #12]	; (1a000968 <TIMER2_IRQHandler+0x38>)
1a00095c:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00095e:	3401      	adds	r4, #1
1a000960:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000962:	2c03      	cmp	r4, #3
1a000964:	d9e7      	bls.n	1a000936 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000966:	bd10      	pop	{r4, pc}
1a000968:	400c3000 	.word	0x400c3000
1a00096c:	10000048 	.word	0x10000048

1a000970 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000970:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000972:	2400      	movs	r4, #0
1a000974:	e015      	b.n	1a0009a2 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000976:	4b0c      	ldr	r3, [pc, #48]	; (1a0009a8 <TIMER3_IRQHandler+0x38>)
1a000978:	681a      	ldr	r2, [r3, #0]
1a00097a:	f004 010f 	and.w	r1, r4, #15
1a00097e:	2301      	movs	r3, #1
1a000980:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000982:	421a      	tst	r2, r3
1a000984:	d00b      	beq.n	1a00099e <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000986:	f104 030c 	add.w	r3, r4, #12
1a00098a:	4a08      	ldr	r2, [pc, #32]	; (1a0009ac <TIMER3_IRQHandler+0x3c>)
1a00098c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000990:	2000      	movs	r0, #0
1a000992:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000994:	b262      	sxtb	r2, r4
1a000996:	2301      	movs	r3, #1
1a000998:	4093      	lsls	r3, r2
1a00099a:	4a03      	ldr	r2, [pc, #12]	; (1a0009a8 <TIMER3_IRQHandler+0x38>)
1a00099c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00099e:	3401      	adds	r4, #1
1a0009a0:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0009a2:	2c03      	cmp	r4, #3
1a0009a4:	d9e7      	bls.n	1a000976 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0009a6:	bd10      	pop	{r4, pc}
1a0009a8:	400c4000 	.word	0x400c4000
1a0009ac:	10000048 	.word	0x10000048

1a0009b0 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0009b0:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0009b2:	2200      	movs	r2, #0
1a0009b4:	e014      	b.n	1a0009e0 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0009b6:	4b0c      	ldr	r3, [pc, #48]	; (1a0009e8 <Board_LED_Init+0x38>)
1a0009b8:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0009bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0009c0:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0009c2:	480a      	ldr	r0, [pc, #40]	; (1a0009ec <Board_LED_Init+0x3c>)
1a0009c4:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0009c8:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0009cc:	2301      	movs	r3, #1
1a0009ce:	408b      	lsls	r3, r1
1a0009d0:	4333      	orrs	r3, r6
1a0009d2:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0009d6:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0009da:	2300      	movs	r3, #0
1a0009dc:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0009de:	3201      	adds	r2, #1
1a0009e0:	2a05      	cmp	r2, #5
1a0009e2:	d9e8      	bls.n	1a0009b6 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0009e4:	bc70      	pop	{r4, r5, r6}
1a0009e6:	4770      	bx	lr
1a0009e8:	1a006f04 	.word	0x1a006f04
1a0009ec:	400f4000 	.word	0x400f4000

1a0009f0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a0009f0:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0009f2:	2300      	movs	r3, #0
1a0009f4:	e011      	b.n	1a000a1a <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0009f6:	490b      	ldr	r1, [pc, #44]	; (1a000a24 <Board_TEC_Init+0x34>)
1a0009f8:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0009fc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a00:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000a02:	4c09      	ldr	r4, [pc, #36]	; (1a000a28 <Board_TEC_Init+0x38>)
1a000a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a08:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000a0c:	2101      	movs	r1, #1
1a000a0e:	40a9      	lsls	r1, r5
1a000a10:	ea20 0101 	bic.w	r1, r0, r1
1a000a14:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000a18:	3301      	adds	r3, #1
1a000a1a:	2b03      	cmp	r3, #3
1a000a1c:	d9eb      	bls.n	1a0009f6 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000a1e:	bc30      	pop	{r4, r5}
1a000a20:	4770      	bx	lr
1a000a22:	bf00      	nop
1a000a24:	1a006efc 	.word	0x1a006efc
1a000a28:	400f4000 	.word	0x400f4000

1a000a2c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a000a2c:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a2e:	2300      	movs	r3, #0
1a000a30:	e011      	b.n	1a000a56 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000a32:	490b      	ldr	r1, [pc, #44]	; (1a000a60 <Board_GPIO_Init+0x34>)
1a000a34:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000a38:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000a3c:	784d      	ldrb	r5, [r1, #1]
1a000a3e:	4c09      	ldr	r4, [pc, #36]	; (1a000a64 <Board_GPIO_Init+0x38>)
1a000a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000a44:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000a48:	2101      	movs	r1, #1
1a000a4a:	40a9      	lsls	r1, r5
1a000a4c:	ea20 0101 	bic.w	r1, r0, r1
1a000a50:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000a54:	3301      	adds	r3, #1
1a000a56:	2b08      	cmp	r3, #8
1a000a58:	d9eb      	bls.n	1a000a32 <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000a5a:	bc30      	pop	{r4, r5}
1a000a5c:	4770      	bx	lr
1a000a5e:	bf00      	nop
1a000a60:	1a006ee0 	.word	0x1a006ee0
1a000a64:	400f4000 	.word	0x400f4000

1a000a68 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000a68:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000a6a:	4c0b      	ldr	r4, [pc, #44]	; (1a000a98 <Board_SPI_Init+0x30>)
1a000a6c:	4620      	mov	r0, r4
1a000a6e:	f000 fe6f 	bl	1a001750 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000a72:	6863      	ldr	r3, [r4, #4]
1a000a74:	f023 0304 	bic.w	r3, r3, #4
1a000a78:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000a7a:	6823      	ldr	r3, [r4, #0]
1a000a7c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000a80:	f043 0307 	orr.w	r3, r3, #7
1a000a84:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000a86:	4620      	mov	r0, r4
1a000a88:	4904      	ldr	r1, [pc, #16]	; (1a000a9c <Board_SPI_Init+0x34>)
1a000a8a:	f000 fe41 	bl	1a001710 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000a8e:	6863      	ldr	r3, [r4, #4]
1a000a90:	f043 0302 	orr.w	r3, r3, #2
1a000a94:	6063      	str	r3, [r4, #4]
1a000a96:	bd10      	pop	{r4, pc}
1a000a98:	400c5000 	.word	0x400c5000
1a000a9c:	000186a0 	.word	0x000186a0

1a000aa0 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a000aa0:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000aa2:	2000      	movs	r0, #0
1a000aa4:	f000 f94a 	bl	1a000d3c <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000aa8:	f640 0208 	movw	r2, #2056	; 0x808
1a000aac:	4b03      	ldr	r3, [pc, #12]	; (1a000abc <Board_I2C_Init+0x1c>)
1a000aae:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000ab2:	2000      	movs	r0, #0
1a000ab4:	4902      	ldr	r1, [pc, #8]	; (1a000ac0 <Board_I2C_Init+0x20>)
1a000ab6:	f000 f953 	bl	1a000d60 <Chip_I2C_SetClockRate>
1a000aba:	bd08      	pop	{r3, pc}
1a000abc:	40086000 	.word	0x40086000
1a000ac0:	000f4240 	.word	0x000f4240

1a000ac4 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000ac4:	b510      	push	{r4, lr}
1a000ac6:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000ac8:	4c08      	ldr	r4, [pc, #32]	; (1a000aec <Board_ADC_Init+0x28>)
1a000aca:	4620      	mov	r0, r4
1a000acc:	4669      	mov	r1, sp
1a000ace:	f000 fa33 	bl	1a000f38 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000ad2:	4620      	mov	r0, r4
1a000ad4:	4669      	mov	r1, sp
1a000ad6:	4a06      	ldr	r2, [pc, #24]	; (1a000af0 <Board_ADC_Init+0x2c>)
1a000ad8:	f000 fa4e 	bl	1a000f78 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000adc:	4620      	mov	r0, r4
1a000ade:	4669      	mov	r1, sp
1a000ae0:	2200      	movs	r2, #0
1a000ae2:	f000 fa63 	bl	1a000fac <Chip_ADC_SetResolution>
}
1a000ae6:	b002      	add	sp, #8
1a000ae8:	bd10      	pop	{r4, pc}
1a000aea:	bf00      	nop
1a000aec:	400e3000 	.word	0x400e3000
1a000af0:	00061a80 	.word	0x00061a80

1a000af4 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000af4:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000af6:	4c07      	ldr	r4, [pc, #28]	; (1a000b14 <Board_Debug_Init+0x20>)
1a000af8:	4620      	mov	r0, r4
1a000afa:	f000 f95f 	bl	1a000dbc <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000afe:	4620      	mov	r0, r4
1a000b00:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000b04:	f000 f984 	bl	1a000e10 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000b08:	2303      	movs	r3, #3
1a000b0a:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000b0c:	2301      	movs	r3, #1
1a000b0e:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000b10:	bd10      	pop	{r4, pc}
1a000b12:	bf00      	nop
1a000b14:	400c1000 	.word	0x400c1000

1a000b18 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000b18:	4b03      	ldr	r3, [pc, #12]	; (1a000b28 <Board_UARTPutChar+0x10>)
1a000b1a:	695b      	ldr	r3, [r3, #20]
}


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000b1c:	f013 0f20 	tst.w	r3, #32
1a000b20:	d0fa      	beq.n	1a000b18 <Board_UARTPutChar>
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a000b22:	4b01      	ldr	r3, [pc, #4]	; (1a000b28 <Board_UARTPutChar+0x10>)
1a000b24:	6018      	str	r0, [r3, #0]
1a000b26:	4770      	bx	lr
1a000b28:	400c1000 	.word	0x400c1000

1a000b2c <Board_UARTGetChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000b2c:	4b05      	ldr	r3, [pc, #20]	; (1a000b44 <Board_UARTGetChar+0x18>)
1a000b2e:	695b      	ldr	r3, [r3, #20]
}


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000b30:	f013 0f01 	tst.w	r3, #1
1a000b34:	d003      	beq.n	1a000b3e <Board_UARTGetChar+0x12>
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000b36:	4b03      	ldr	r3, [pc, #12]	; (1a000b44 <Board_UARTGetChar+0x18>)
1a000b38:	6818      	ldr	r0, [r3, #0]
1a000b3a:	b2c0      	uxtb	r0, r0
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000b3c:	4770      	bx	lr
    }
    return EOF;
1a000b3e:	f04f 30ff 	mov.w	r0, #4294967295
}
1a000b42:	4770      	bx	lr
1a000b44:	400c1000 	.word	0x400c1000

1a000b48 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000b48:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000b4a:	f7ff ffd3 	bl	1a000af4 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000b4e:	480b      	ldr	r0, [pc, #44]	; (1a000b7c <Board_Init+0x34>)
1a000b50:	f000 fdbc 	bl	1a0016cc <Chip_GPIO_Init>

   Board_LED_Init();
1a000b54:	f7ff ff2c 	bl	1a0009b0 <Board_LED_Init>
   Board_TEC_Init();
1a000b58:	f7ff ff4a 	bl	1a0009f0 <Board_TEC_Init>
   Board_SPI_Init();
1a000b5c:	f7ff ff84 	bl	1a000a68 <Board_SPI_Init>
   Board_GPIO_Init();
1a000b60:	f7ff ff64 	bl	1a000a2c <Board_GPIO_Init>
   Board_I2C_Init();
1a000b64:	f7ff ff9c 	bl	1a000aa0 <Board_I2C_Init>
   Board_ADC_Init();
1a000b68:	f7ff ffac 	bl	1a000ac4 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a000b6c:	4a04      	ldr	r2, [pc, #16]	; (1a000b80 <Board_Init+0x38>)
1a000b6e:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000b72:	f043 0304 	orr.w	r3, r3, #4
1a000b76:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a000b7a:	bd08      	pop	{r3, pc}
1a000b7c:	400f4000 	.word	0x400f4000
1a000b80:	40043000 	.word	0x40043000

1a000b84 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000b84:	2309      	movs	r3, #9
1a000b86:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000b88:	f04f 30ff 	mov.w	r0, #4294967295
1a000b8c:	4770      	bx	lr
1a000b8e:	bf00      	nop

1a000b90 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000b90:	2358      	movs	r3, #88	; 0x58
1a000b92:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000b94:	f04f 30ff 	mov.w	r0, #4294967295
1a000b98:	4770      	bx	lr
1a000b9a:	bf00      	nop

1a000b9c <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000b9c:	2902      	cmp	r1, #2
1a000b9e:	d904      	bls.n	1a000baa <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000ba0:	2309      	movs	r3, #9
1a000ba2:	6003      	str	r3, [r0, #0]
       return -1;
1a000ba4:	f04f 30ff 	mov.w	r0, #4294967295
1a000ba8:	4770      	bx	lr
int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
   case 0:
   case 1:
   case 2:
       return 1;
1a000baa:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000bac:	4770      	bx	lr
1a000bae:	bf00      	nop

1a000bb0 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000bb0:	2358      	movs	r3, #88	; 0x58
1a000bb2:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000bb4:	f04f 30ff 	mov.w	r0, #4294967295
1a000bb8:	4770      	bx	lr
1a000bba:	bf00      	nop

1a000bbc <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a000bbe:	2902      	cmp	r1, #2
1a000bc0:	d912      	bls.n	1a000be8 <_read_r+0x2c>
1a000bc2:	e01c      	b.n	1a000bfe <_read_r+0x42>
  case 0:
  case 1:
  case 2:
      while( i < n ){
         c = (char)Board_UARTGetChar();
1a000bc4:	f7ff ffb2 	bl	1a000b2c <Board_UARTGetChar>
1a000bc8:	b2c0      	uxtb	r0, r0
         if( c != 255 ){
1a000bca:	28ff      	cmp	r0, #255	; 0xff
1a000bcc:	d010      	beq.n	1a000bf0 <_read_r+0x34>
            if( c != '\r' && c != '\n' ){
1a000bce:	280d      	cmp	r0, #13
1a000bd0:	d004      	beq.n	1a000bdc <_read_r+0x20>
1a000bd2:	280a      	cmp	r0, #10
1a000bd4:	d002      	beq.n	1a000bdc <_read_r+0x20>
               ((char*) b)[i] = c;
1a000bd6:	5538      	strb	r0, [r7, r4]
               i++;
1a000bd8:	3401      	adds	r4, #1
1a000bda:	e009      	b.n	1a000bf0 <_read_r+0x34>
            }else{
               ((char*) b)[i] = c;
1a000bdc:	5538      	strb	r0, [r7, r4]
               i++;
1a000bde:	3401      	adds	r4, #1
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
1a000be0:	f7ff ffa4 	bl	1a000b2c <Board_UARTGetChar>
               return i;
1a000be4:	4620      	mov	r0, r4
1a000be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000be8:	461d      	mov	r5, r3
1a000bea:	4617      	mov	r7, r2
1a000bec:	4606      	mov	r6, r0
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  char c = 0;
  switch (fd) {
1a000bee:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000bf0:	42ac      	cmp	r4, r5
1a000bf2:	d3e7      	bcc.n	1a000bc4 <_read_r+0x8>
               c = (char)Board_UARTGetChar(); // read anotherone to prevent \r\n
               return i;
            }
         }
      }
      SET_ERR(ENODEV);
1a000bf4:	2313      	movs	r3, #19
1a000bf6:	6033      	str	r3, [r6, #0]
      return -1;
1a000bf8:	f04f 30ff 	mov.w	r0, #4294967295
1a000bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  default:
      SET_ERR(ENODEV);
1a000bfe:	2313      	movs	r3, #19
1a000c00:	6003      	str	r3, [r0, #0]
      return -1;
1a000c02:	f04f 30ff 	mov.w	r0, #4294967295
  }
}
1a000c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000c08 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000c08:	4b05      	ldr	r3, [pc, #20]	; (1a000c20 <_sbrk_r+0x18>)
1a000c0a:	681b      	ldr	r3, [r3, #0]
1a000c0c:	b913      	cbnz	r3, 1a000c14 <_sbrk_r+0xc>
       heap_end = &_pvHeapStart;
1a000c0e:	4a05      	ldr	r2, [pc, #20]	; (1a000c24 <_sbrk_r+0x1c>)
1a000c10:	4b03      	ldr	r3, [pc, #12]	; (1a000c20 <_sbrk_r+0x18>)
1a000c12:	601a      	str	r2, [r3, #0]
   }
   prev_heap_end = heap_end;
1a000c14:	4b02      	ldr	r3, [pc, #8]	; (1a000c20 <_sbrk_r+0x18>)
1a000c16:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000c18:	4401      	add	r1, r0
1a000c1a:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000c1c:	4770      	bx	lr
1a000c1e:	bf00      	nop
1a000c20:	10000980 	.word	0x10000980
1a000c24:	100009d0 	.word	0x100009d0

1a000c28 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000c28:	2902      	cmp	r1, #2
1a000c2a:	d905      	bls.n	1a000c38 <_write_r+0x10>
1a000c2c:	e00c      	b.n	1a000c48 <_write_r+0x20>
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
           Board_UARTPutChar(((char*) b)[i]);
1a000c2e:	5d30      	ldrb	r0, [r6, r4]
1a000c30:	f7ff ff72 	bl	1a000b18 <Board_UARTPutChar>
   size_t i;
   switch (fd) {
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000c34:	3401      	adds	r4, #1
1a000c36:	e003      	b.n	1a000c40 <_write_r+0x18>
   UNUSED(st);
   SET_ERR(ENOSYS);
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000c38:	b570      	push	{r4, r5, r6, lr}
1a000c3a:	461d      	mov	r5, r3
1a000c3c:	4616      	mov	r6, r2
   size_t i;
   switch (fd) {
1a000c3e:	2400      	movs	r4, #0
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000c40:	42ac      	cmp	r4, r5
1a000c42:	d3f4      	bcc.n	1a000c2e <_write_r+0x6>
           Board_UARTPutChar(((char*) b)[i]);
       return n;
1a000c44:	4628      	mov	r0, r5
1a000c46:	bd70      	pop	{r4, r5, r6, pc}
   default:
       SET_ERR(ENODEV);
1a000c48:	2313      	movs	r3, #19
1a000c4a:	6003      	str	r3, [r0, #0]
       return -1;
1a000c4c:	f04f 30ff 	mov.w	r0, #4294967295
1a000c50:	4770      	bx	lr
1a000c52:	bf00      	nop

1a000c54 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000c54:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a000c56:	4b04      	ldr	r3, [pc, #16]	; (1a000c68 <SystemInit+0x14>)
1a000c58:	4a04      	ldr	r2, [pc, #16]	; (1a000c6c <SystemInit+0x18>)
1a000c5a:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000c5c:	f000 fd0a 	bl	1a001674 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a000c60:	f000 f856 	bl	1a000d10 <Board_SystemInit>
1a000c64:	bd08      	pop	{r3, pc}
1a000c66:	bf00      	nop
1a000c68:	e000ed08 	.word	0xe000ed08
1a000c6c:	1a000000 	.word	0x1a000000

1a000c70 <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a000c70:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000c72:	2300      	movs	r3, #0
1a000c74:	e00c      	b.n	1a000c90 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000c76:	4a09      	ldr	r2, [pc, #36]	; (1a000c9c <Board_SetupMuxing+0x2c>)
1a000c78:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000c7c:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000c80:	784a      	ldrb	r2, [r1, #1]
1a000c82:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000c84:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000c88:	4905      	ldr	r1, [pc, #20]	; (1a000ca0 <Board_SetupMuxing+0x30>)
1a000c8a:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000c8e:	3301      	adds	r3, #1
1a000c90:	2b25      	cmp	r3, #37	; 0x25
1a000c92:	d9f0      	bls.n	1a000c76 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000c94:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000c98:	4770      	bx	lr
1a000c9a:	bf00      	nop
1a000c9c:	1a006f1c 	.word	0x1a006f1c
1a000ca0:	40086000 	.word	0x40086000

1a000ca4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000ca4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000ca6:	4a17      	ldr	r2, [pc, #92]	; (1a000d04 <Board_SetupClocking+0x60>)
1a000ca8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000cac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cb0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cb4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000cb8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000cc0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000cc4:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000cc8:	2006      	movs	r0, #6
1a000cca:	490f      	ldr	r1, [pc, #60]	; (1a000d08 <Board_SetupClocking+0x64>)
1a000ccc:	2201      	movs	r2, #1
1a000cce:	f000 fc29 	bl	1a001524 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000cd2:	2400      	movs	r4, #0
1a000cd4:	e00a      	b.n	1a000cec <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000cd6:	4a0d      	ldr	r2, [pc, #52]	; (1a000d0c <Board_SetupClocking+0x68>)
1a000cd8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000cdc:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000ce0:	7859      	ldrb	r1, [r3, #1]
1a000ce2:	789a      	ldrb	r2, [r3, #2]
1a000ce4:	78db      	ldrb	r3, [r3, #3]
1a000ce6:	f000 fb85 	bl	1a0013f4 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000cea:	3401      	adds	r4, #1
1a000cec:	2c02      	cmp	r4, #2
1a000cee:	d9f2      	bls.n	1a000cd6 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000cf0:	4b04      	ldr	r3, [pc, #16]	; (1a000d04 <Board_SetupClocking+0x60>)
1a000cf2:	685a      	ldr	r2, [r3, #4]
1a000cf4:	f022 020c 	bic.w	r2, r2, #12
1a000cf8:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000cfa:	685a      	ldr	r2, [r3, #4]
1a000cfc:	f042 0203 	orr.w	r2, r2, #3
1a000d00:	605a      	str	r2, [r3, #4]
1a000d02:	bd10      	pop	{r4, pc}
1a000d04:	40043000 	.word	0x40043000
1a000d08:	0c28cb00 	.word	0x0c28cb00
1a000d0c:	1a006f10 	.word	0x1a006f10

1a000d10 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000d10:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000d12:	f7ff ffad 	bl	1a000c70 <Board_SetupMuxing>
    Board_SetupClocking();
1a000d16:	f7ff ffc5 	bl	1a000ca4 <Board_SetupClocking>
1a000d1a:	bd08      	pop	{r3, pc}

1a000d1c <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000d1c:	2901      	cmp	r1, #1
1a000d1e:	d109      	bne.n	1a000d34 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000d20:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000d24:	0080      	lsls	r0, r0, #2
1a000d26:	4b04      	ldr	r3, [pc, #16]	; (1a000d38 <Chip_I2C_EventHandler+0x1c>)
1a000d28:	4418      	add	r0, r3
1a000d2a:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000d2c:	7d13      	ldrb	r3, [r2, #20]
1a000d2e:	b2db      	uxtb	r3, r3
1a000d30:	2b04      	cmp	r3, #4
1a000d32:	d0fb      	beq.n	1a000d2c <Chip_I2C_EventHandler+0x10>
1a000d34:	4770      	bx	lr
1a000d36:	bf00      	nop
1a000d38:	10000088 	.word	0x10000088

1a000d3c <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000d3c:	b570      	push	{r4, r5, r6, lr}
1a000d3e:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a000d40:	4e06      	ldr	r6, [pc, #24]	; (1a000d5c <Chip_I2C_Init+0x20>)
1a000d42:	00c4      	lsls	r4, r0, #3
1a000d44:	1a23      	subs	r3, r4, r0
1a000d46:	009b      	lsls	r3, r3, #2
1a000d48:	4433      	add	r3, r6
1a000d4a:	8898      	ldrh	r0, [r3, #4]
1a000d4c:	f000 fbaa 	bl	1a0014a4 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000d50:	1b60      	subs	r0, r4, r5
1a000d52:	0080      	lsls	r0, r0, #2
1a000d54:	5833      	ldr	r3, [r6, r0]
1a000d56:	226c      	movs	r2, #108	; 0x6c
1a000d58:	619a      	str	r2, [r3, #24]
1a000d5a:	bd70      	pop	{r4, r5, r6, pc}
1a000d5c:	10000088 	.word	0x10000088

1a000d60 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000d64:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a000d66:	4f09      	ldr	r7, [pc, #36]	; (1a000d8c <Chip_I2C_SetClockRate+0x2c>)
1a000d68:	00c5      	lsls	r5, r0, #3
1a000d6a:	1a2e      	subs	r6, r5, r0
1a000d6c:	00b6      	lsls	r6, r6, #2
1a000d6e:	19bb      	adds	r3, r7, r6
1a000d70:	8898      	ldrh	r0, [r3, #4]
1a000d72:	f000 fbb1 	bl	1a0014d8 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000d76:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000d7a:	59bb      	ldr	r3, [r7, r6]
1a000d7c:	0842      	lsrs	r2, r0, #1
1a000d7e:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000d80:	59bb      	ldr	r3, [r7, r6]
1a000d82:	691a      	ldr	r2, [r3, #16]
1a000d84:	1a80      	subs	r0, r0, r2
1a000d86:	6158      	str	r0, [r3, #20]
1a000d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d8c:	10000088 	.word	0x10000088

1a000d90 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000d90:	4b09      	ldr	r3, [pc, #36]	; (1a000db8 <Chip_UART_GetIndex+0x28>)
1a000d92:	4298      	cmp	r0, r3
1a000d94:	d009      	beq.n	1a000daa <Chip_UART_GetIndex+0x1a>
1a000d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000d9a:	4298      	cmp	r0, r3
1a000d9c:	d007      	beq.n	1a000dae <Chip_UART_GetIndex+0x1e>
1a000d9e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000da2:	4298      	cmp	r0, r3
1a000da4:	d005      	beq.n	1a000db2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000da6:	2000      	movs	r0, #0
1a000da8:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000daa:	2002      	movs	r0, #2
1a000dac:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000dae:	2003      	movs	r0, #3
1a000db0:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a000db2:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a000db4:	4770      	bx	lr
1a000db6:	bf00      	nop
1a000db8:	400c1000 	.word	0x400c1000

1a000dbc <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000dbc:	b510      	push	{r4, lr}
1a000dbe:	b082      	sub	sp, #8
1a000dc0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000dc2:	f7ff ffe5 	bl	1a000d90 <Chip_UART_GetIndex>
1a000dc6:	4b10      	ldr	r3, [pc, #64]	; (1a000e08 <Chip_UART_Init+0x4c>)
1a000dc8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000dcc:	2101      	movs	r1, #1
1a000dce:	460a      	mov	r2, r1
1a000dd0:	460b      	mov	r3, r1
1a000dd2:	f000 fb49 	bl	1a001468 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a000dd6:	2307      	movs	r3, #7
1a000dd8:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a000dda:	2300      	movs	r3, #0
1a000ddc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000dde:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000de0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000de2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000de4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000de6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000de8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000dea:	4b08      	ldr	r3, [pc, #32]	; (1a000e0c <Chip_UART_Init+0x50>)
1a000dec:	429c      	cmp	r4, r3
1a000dee:	d103      	bne.n	1a000df8 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a000df0:	2300      	movs	r3, #0
1a000df2:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a000df4:	69a3      	ldr	r3, [r4, #24]
1a000df6:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000df8:	2303      	movs	r3, #3
1a000dfa:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000dfc:	2310      	movs	r3, #16
1a000dfe:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000e00:	9b01      	ldr	r3, [sp, #4]
}
1a000e02:	b002      	add	sp, #8
1a000e04:	bd10      	pop	{r4, pc}
1a000e06:	bf00      	nop
1a000e08:	1a006fbc 	.word	0x1a006fbc
1a000e0c:	40082000 	.word	0x40082000

1a000e10 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000e14:	b083      	sub	sp, #12
1a000e16:	4683      	mov	fp, r0
1a000e18:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000e1a:	f7ff ffb9 	bl	1a000d90 <Chip_UART_GetIndex>
1a000e1e:	4b34      	ldr	r3, [pc, #208]	; (1a000ef0 <Chip_UART_SetBaudFDR+0xe0>)
1a000e20:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000e24:	f000 fb58 	bl	1a0014d8 <Chip_Clock_GetRate>
1a000e28:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a000e2a:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000e2e:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000e30:	2300      	movs	r3, #0
1a000e32:	9301      	str	r3, [sp, #4]
1a000e34:	46a2      	mov	sl, r4
1a000e36:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000e38:	e029      	b.n	1a000e8e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000e3a:	2300      	movs	r3, #0
1a000e3c:	0932      	lsrs	r2, r6, #4
1a000e3e:	0730      	lsls	r0, r6, #28
1a000e40:	fba0 0104 	umull	r0, r1, r0, r4
1a000e44:	fb04 1102 	mla	r1, r4, r2, r1
1a000e48:	1962      	adds	r2, r4, r5
1a000e4a:	fb08 f202 	mul.w	r2, r8, r2
1a000e4e:	f000 fe97 	bl	1a001b80 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a000e52:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a000e54:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a000e56:	2800      	cmp	r0, #0
1a000e58:	da01      	bge.n	1a000e5e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a000e5a:	4243      	negs	r3, r0
				div ++;
1a000e5c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000e5e:	429f      	cmp	r7, r3
1a000e60:	d30a      	bcc.n	1a000e78 <Chip_UART_SetBaudFDR+0x68>
1a000e62:	b14a      	cbz	r2, 1a000e78 <Chip_UART_SetBaudFDR+0x68>
1a000e64:	0c11      	lsrs	r1, r2, #16
1a000e66:	d107      	bne.n	1a000e78 <Chip_UART_SetBaudFDR+0x68>
1a000e68:	2a02      	cmp	r2, #2
1a000e6a:	d800      	bhi.n	1a000e6e <Chip_UART_SetBaudFDR+0x5e>
1a000e6c:	b925      	cbnz	r5, 1a000e78 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000e6e:	b14b      	cbz	r3, 1a000e84 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a000e70:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000e72:	9501      	str	r5, [sp, #4]
			sm = m;
1a000e74:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000e76:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a000e78:	3501      	adds	r5, #1
1a000e7a:	e000      	b.n	1a000e7e <Chip_UART_SetBaudFDR+0x6e>
1a000e7c:	2500      	movs	r5, #0
1a000e7e:	42a5      	cmp	r5, r4
1a000e80:	d3db      	bcc.n	1a000e3a <Chip_UART_SetBaudFDR+0x2a>
1a000e82:	e003      	b.n	1a000e8c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a000e84:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000e86:	9501      	str	r5, [sp, #4]
			sm = m;
1a000e88:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000e8a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000e8c:	3401      	adds	r4, #1
1a000e8e:	b10f      	cbz	r7, 1a000e94 <Chip_UART_SetBaudFDR+0x84>
1a000e90:	2c0f      	cmp	r4, #15
1a000e92:	d9f3      	bls.n	1a000e7c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000e94:	f1b9 0f00 	cmp.w	r9, #0
1a000e98:	d026      	beq.n	1a000ee8 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000e9a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000e9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000ea2:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000ea6:	fa5f f389 	uxtb.w	r3, r9
1a000eaa:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a000eae:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000eb2:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000eb6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ebe:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000ec2:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000ec6:	b2da      	uxtb	r2, r3
1a000ec8:	9901      	ldr	r1, [sp, #4]
1a000eca:	f001 030f 	and.w	r3, r1, #15
1a000ece:	4313      	orrs	r3, r2
1a000ed0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000ed4:	0933      	lsrs	r3, r6, #4
1a000ed6:	fb0a f303 	mul.w	r3, sl, r3
1a000eda:	eb0a 0001 	add.w	r0, sl, r1
1a000ede:	fb09 f000 	mul.w	r0, r9, r0
1a000ee2:	fbb3 f0f0 	udiv	r0, r3, r0
1a000ee6:	e000      	b.n	1a000eea <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a000ee8:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a000eea:	b003      	add	sp, #12
1a000eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000ef0:	1a006fb4 	.word	0x1a006fb4

1a000ef4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000ef4:	4b03      	ldr	r3, [pc, #12]	; (1a000f04 <Chip_ADC_GetClockIndex+0x10>)
1a000ef6:	4298      	cmp	r0, r3
1a000ef8:	d101      	bne.n	1a000efe <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a000efa:	2004      	movs	r0, #4
1a000efc:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000efe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000f00:	4770      	bx	lr
1a000f02:	bf00      	nop
1a000f04:	400e4000 	.word	0x400e4000

1a000f08 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000f08:	b570      	push	{r4, r5, r6, lr}
1a000f0a:	460d      	mov	r5, r1
1a000f0c:	4614      	mov	r4, r2
1a000f0e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000f10:	f7ff fff0 	bl	1a000ef4 <Chip_ADC_GetClockIndex>
1a000f14:	f000 fae0 	bl	1a0014d8 <Chip_Clock_GetRate>
	if (burstMode) {
1a000f18:	b115      	cbz	r5, 1a000f20 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a000f1a:	fb04 f406 	mul.w	r4, r4, r6
1a000f1e:	e003      	b.n	1a000f28 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a000f20:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000f24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000f28:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000f2c:	0064      	lsls	r4, r4, #1
1a000f2e:	fbb0 f4f4 	udiv	r4, r0, r4
1a000f32:	1e60      	subs	r0, r4, #1
	return div;
}
1a000f34:	b2c0      	uxtb	r0, r0
1a000f36:	bd70      	pop	{r4, r5, r6, pc}

1a000f38 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000f38:	b538      	push	{r3, r4, r5, lr}
1a000f3a:	4605      	mov	r5, r0
1a000f3c:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000f3e:	f7ff ffd9 	bl	1a000ef4 <Chip_ADC_GetClockIndex>
1a000f42:	2101      	movs	r1, #1
1a000f44:	460a      	mov	r2, r1
1a000f46:	460b      	mov	r3, r1
1a000f48:	f000 fa8e 	bl	1a001468 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000f4c:	2100      	movs	r1, #0
1a000f4e:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000f50:	4a08      	ldr	r2, [pc, #32]	; (1a000f74 <Chip_ADC_Init+0x3c>)
1a000f52:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a000f54:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a000f56:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000f58:	4628      	mov	r0, r5
1a000f5a:	230b      	movs	r3, #11
1a000f5c:	f7ff ffd4 	bl	1a000f08 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000f60:	0200      	lsls	r0, r0, #8
1a000f62:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000f66:	7920      	ldrb	r0, [r4, #4]
1a000f68:	f000 0007 	and.w	r0, r0, #7
1a000f6c:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a000f70:	6028      	str	r0, [r5, #0]
1a000f72:	bd38      	pop	{r3, r4, r5, pc}
1a000f74:	00061a80 	.word	0x00061a80

1a000f78 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a000f78:	b570      	push	{r4, r5, r6, lr}
1a000f7a:	4606      	mov	r6, r0
1a000f7c:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000f7e:	6804      	ldr	r4, [r0, #0]
1a000f80:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000f84:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a000f88:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a000f8a:	790b      	ldrb	r3, [r1, #4]
1a000f8c:	f1c3 030b 	rsb	r3, r3, #11
1a000f90:	7949      	ldrb	r1, [r1, #5]
1a000f92:	b2db      	uxtb	r3, r3
1a000f94:	f7ff ffb8 	bl	1a000f08 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000f98:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000f9c:	792c      	ldrb	r4, [r5, #4]
1a000f9e:	f004 0407 	and.w	r4, r4, #7
1a000fa2:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a000fa6:	6030      	str	r0, [r6, #0]
1a000fa8:	bd70      	pop	{r4, r5, r6, pc}
1a000faa:	bf00      	nop

1a000fac <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000fac:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000fae:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000fb0:	680a      	ldr	r2, [r1, #0]
1a000fb2:	f7ff ffe1 	bl	1a000f78 <Chip_ADC_SetSampleRate>
1a000fb6:	bd08      	pop	{r3, pc}

1a000fb8 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000fb8:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000fba:	680b      	ldr	r3, [r1, #0]
1a000fbc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000fc0:	d002      	beq.n	1a000fc8 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a000fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000fc6:	600b      	str	r3, [r1, #0]
1a000fc8:	4686      	mov	lr, r0
1a000fca:	2601      	movs	r6, #1
1a000fcc:	e041      	b.n	1a001052 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a000fce:	680d      	ldr	r5, [r1, #0]
1a000fd0:	f015 0f40 	tst.w	r5, #64	; 0x40
1a000fd4:	d008      	beq.n	1a000fe8 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000fd6:	1c7b      	adds	r3, r7, #1
1a000fd8:	fa04 f203 	lsl.w	r2, r4, r3
1a000fdc:	694b      	ldr	r3, [r1, #20]
1a000fde:	fb03 f302 	mul.w	r3, r3, r2
1a000fe2:	fbb3 f3f6 	udiv	r3, r3, r6
1a000fe6:	e004      	b.n	1a000ff2 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a000fe8:	694b      	ldr	r3, [r1, #20]
1a000fea:	fb04 f303 	mul.w	r3, r4, r3
1a000fee:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000ff2:	4a19      	ldr	r2, [pc, #100]	; (1a001058 <pll_calc_divs+0xa0>)
1a000ff4:	4293      	cmp	r3, r2
1a000ff6:	d920      	bls.n	1a00103a <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000ff8:	4a18      	ldr	r2, [pc, #96]	; (1a00105c <pll_calc_divs+0xa4>)
1a000ffa:	4293      	cmp	r3, r2
1a000ffc:	d823      	bhi.n	1a001046 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a000ffe:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001002:	d103      	bne.n	1a00100c <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a001004:	1c7a      	adds	r2, r7, #1
1a001006:	fa23 f202 	lsr.w	r2, r3, r2
1a00100a:	e000      	b.n	1a00100e <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a00100c:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00100e:	1a85      	subs	r5, r0, r2
1a001010:	d502      	bpl.n	1a001018 <pll_calc_divs+0x60>
		return -val;
1a001012:	f1c5 0c00 	rsb	ip, r5, #0
1a001016:	e000      	b.n	1a00101a <pll_calc_divs+0x62>
	return val;
1a001018:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00101a:	45e6      	cmp	lr, ip
1a00101c:	d90d      	bls.n	1a00103a <pll_calc_divs+0x82>
					ppll->nsel = n;
1a00101e:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001020:	f107 0e01 	add.w	lr, r7, #1
1a001024:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001028:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a00102a:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a00102c:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00102e:	2d00      	cmp	r5, #0
1a001030:	da02      	bge.n	1a001038 <pll_calc_divs+0x80>
		return -val;
1a001032:	f1c5 0e00 	rsb	lr, r5, #0
1a001036:	e000      	b.n	1a00103a <pll_calc_divs+0x82>
	return val;
1a001038:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00103a:	3401      	adds	r4, #1
1a00103c:	e000      	b.n	1a001040 <pll_calc_divs+0x88>
1a00103e:	2401      	movs	r4, #1
1a001040:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001044:	ddc3      	ble.n	1a000fce <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001046:	3701      	adds	r7, #1
1a001048:	e000      	b.n	1a00104c <pll_calc_divs+0x94>
1a00104a:	2700      	movs	r7, #0
1a00104c:	2f03      	cmp	r7, #3
1a00104e:	ddf6      	ble.n	1a00103e <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001050:	3601      	adds	r6, #1
1a001052:	2e04      	cmp	r6, #4
1a001054:	ddf9      	ble.n	1a00104a <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001056:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001058:	094c5eff 	.word	0x094c5eff
1a00105c:	1312d000 	.word	0x1312d000

1a001060 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001060:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001062:	b099      	sub	sp, #100	; 0x64
1a001064:	4605      	mov	r5, r0
1a001066:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001068:	4668      	mov	r0, sp
1a00106a:	2100      	movs	r1, #0
1a00106c:	2260      	movs	r2, #96	; 0x60
1a00106e:	f001 fb5b 	bl	1a002728 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001072:	2380      	movs	r3, #128	; 0x80
1a001074:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001076:	6963      	ldr	r3, [r4, #20]
1a001078:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00107a:	7923      	ldrb	r3, [r4, #4]
1a00107c:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001080:	4628      	mov	r0, r5
1a001082:	4669      	mov	r1, sp
1a001084:	f7ff ff98 	bl	1a000fb8 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001088:	9b06      	ldr	r3, [sp, #24]
1a00108a:	42ab      	cmp	r3, r5
1a00108c:	d107      	bne.n	1a00109e <pll_get_frac+0x3e>
		*ppll = pll[0];
1a00108e:	466d      	mov	r5, sp
1a001090:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001094:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001098:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a00109c:	e05e      	b.n	1a00115c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00109e:	1aeb      	subs	r3, r5, r3
1a0010a0:	d500      	bpl.n	1a0010a4 <pll_get_frac+0x44>
		return -val;
1a0010a2:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0010a4:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0010a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a0010a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0010ac:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0010ae:	6963      	ldr	r3, [r4, #20]
1a0010b0:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0010b2:	7923      	ldrb	r3, [r4, #4]
1a0010b4:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0010b8:	4628      	mov	r0, r5
1a0010ba:	a910      	add	r1, sp, #64	; 0x40
1a0010bc:	f7ff ff7c 	bl	1a000fb8 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0010c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0010c2:	42ab      	cmp	r3, r5
1a0010c4:	d107      	bne.n	1a0010d6 <pll_get_frac+0x76>
		*ppll = pll[2];
1a0010c6:	ad10      	add	r5, sp, #64	; 0x40
1a0010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0010cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0010d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0010d4:	e042      	b.n	1a00115c <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0010d6:	1aeb      	subs	r3, r5, r3
1a0010d8:	d500      	bpl.n	1a0010dc <pll_get_frac+0x7c>
		return -val;
1a0010da:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0010dc:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0010de:	4b20      	ldr	r3, [pc, #128]	; (1a001160 <pll_get_frac+0x100>)
1a0010e0:	429d      	cmp	r5, r3
1a0010e2:	d812      	bhi.n	1a00110a <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0010e4:	2340      	movs	r3, #64	; 0x40
1a0010e6:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0010e8:	6963      	ldr	r3, [r4, #20]
1a0010ea:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0010ec:	4628      	mov	r0, r5
1a0010ee:	a908      	add	r1, sp, #32
1a0010f0:	f7ff ff62 	bl	1a000fb8 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0010f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0010f6:	42ab      	cmp	r3, r5
1a0010f8:	d107      	bne.n	1a00110a <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0010fa:	ad08      	add	r5, sp, #32
1a0010fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0010fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001100:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001108:	e028      	b.n	1a00115c <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a00110a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00110c:	1aed      	subs	r5, r5, r3
1a00110e:	d500      	bpl.n	1a001112 <pll_get_frac+0xb2>
		return -val;
1a001110:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001112:	42ae      	cmp	r6, r5
1a001114:	dc11      	bgt.n	1a00113a <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a001116:	42be      	cmp	r6, r7
1a001118:	dc07      	bgt.n	1a00112a <pll_get_frac+0xca>
			*ppll = pll[0];
1a00111a:	466d      	mov	r5, sp
1a00111c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00111e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001120:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001124:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001128:	e018      	b.n	1a00115c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00112a:	ad10      	add	r5, sp, #64	; 0x40
1a00112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001130:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001138:	e010      	b.n	1a00115c <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00113a:	42af      	cmp	r7, r5
1a00113c:	db07      	blt.n	1a00114e <pll_get_frac+0xee>
			*ppll = pll[1];
1a00113e:	ad08      	add	r5, sp, #32
1a001140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001144:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001148:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00114c:	e006      	b.n	1a00115c <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00114e:	ad10      	add	r5, sp, #64	; 0x40
1a001150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001152:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001154:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001158:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a00115c:	b019      	add	sp, #100	; 0x64
1a00115e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001160:	068e7780 	.word	0x068e7780

1a001164 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001164:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001166:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001168:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00116a:	e010      	b.n	1a00118e <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a00116c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001170:	0052      	lsls	r2, r2, #1
1a001172:	4d0d      	ldr	r5, [pc, #52]	; (1a0011a8 <Chip_Clock_FindBaseClock+0x44>)
1a001174:	5aaa      	ldrh	r2, [r5, r2]
1a001176:	4282      	cmp	r2, r0
1a001178:	d806      	bhi.n	1a001188 <Chip_Clock_FindBaseClock+0x24>
1a00117a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00117e:	0052      	lsls	r2, r2, #1
1a001180:	442a      	add	r2, r5
1a001182:	8852      	ldrh	r2, [r2, #2]
1a001184:	4282      	cmp	r2, r0
1a001186:	d201      	bcs.n	1a00118c <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001188:	3301      	adds	r3, #1
1a00118a:	e000      	b.n	1a00118e <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a00118c:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00118e:	291c      	cmp	r1, #28
1a001190:	d107      	bne.n	1a0011a2 <Chip_Clock_FindBaseClock+0x3e>
1a001192:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001196:	0052      	lsls	r2, r2, #1
1a001198:	4c03      	ldr	r4, [pc, #12]	; (1a0011a8 <Chip_Clock_FindBaseClock+0x44>)
1a00119a:	4422      	add	r2, r4
1a00119c:	7914      	ldrb	r4, [r2, #4]
1a00119e:	428c      	cmp	r4, r1
1a0011a0:	d1e4      	bne.n	1a00116c <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a0011a2:	4608      	mov	r0, r1
1a0011a4:	bc30      	pop	{r4, r5}
1a0011a6:	4770      	bx	lr
1a0011a8:	1a006fd0 	.word	0x1a006fd0

1a0011ac <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0011ac:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0011b2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0011b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0011ec <Chip_Clock_EnableCrystal+0x40>)
1a0011b6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0011b8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0011bc:	6992      	ldr	r2, [r2, #24]
1a0011be:	428a      	cmp	r2, r1
1a0011c0:	d001      	beq.n	1a0011c6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0011c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0011ec <Chip_Clock_EnableCrystal+0x40>)
1a0011c4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0011c6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0011ca:	4a09      	ldr	r2, [pc, #36]	; (1a0011f0 <Chip_Clock_EnableCrystal+0x44>)
1a0011cc:	6811      	ldr	r1, [r2, #0]
1a0011ce:	4a09      	ldr	r2, [pc, #36]	; (1a0011f4 <Chip_Clock_EnableCrystal+0x48>)
1a0011d0:	4291      	cmp	r1, r2
1a0011d2:	d901      	bls.n	1a0011d8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0011d4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0011d8:	4a04      	ldr	r2, [pc, #16]	; (1a0011ec <Chip_Clock_EnableCrystal+0x40>)
1a0011da:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0011dc:	9b01      	ldr	r3, [sp, #4]
1a0011de:	1e5a      	subs	r2, r3, #1
1a0011e0:	9201      	str	r2, [sp, #4]
1a0011e2:	2b00      	cmp	r3, #0
1a0011e4:	d1fa      	bne.n	1a0011dc <Chip_Clock_EnableCrystal+0x30>
}
1a0011e6:	b002      	add	sp, #8
1a0011e8:	4770      	bx	lr
1a0011ea:	bf00      	nop
1a0011ec:	40050000 	.word	0x40050000
1a0011f0:	1a006ef4 	.word	0x1a006ef4
1a0011f4:	01312cff 	.word	0x01312cff

1a0011f8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0011f8:	3012      	adds	r0, #18
1a0011fa:	4b05      	ldr	r3, [pc, #20]	; (1a001210 <Chip_Clock_GetDividerSource+0x18>)
1a0011fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001200:	f010 0f01 	tst.w	r0, #1
1a001204:	d102      	bne.n	1a00120c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001206:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00120a:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a00120c:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a00120e:	4770      	bx	lr
1a001210:	40050000 	.word	0x40050000

1a001214 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001214:	f100 0212 	add.w	r2, r0, #18
1a001218:	4b03      	ldr	r3, [pc, #12]	; (1a001228 <Chip_Clock_GetDividerDivisor+0x14>)
1a00121a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00121e:	4b03      	ldr	r3, [pc, #12]	; (1a00122c <Chip_Clock_GetDividerDivisor+0x18>)
1a001220:	5c18      	ldrb	r0, [r3, r0]
}
1a001222:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001226:	4770      	bx	lr
1a001228:	40050000 	.word	0x40050000
1a00122c:	1a006fc8 	.word	0x1a006fc8

1a001230 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001230:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001232:	2810      	cmp	r0, #16
1a001234:	d80a      	bhi.n	1a00124c <Chip_Clock_GetClockInputHz+0x1c>
1a001236:	e8df f000 	tbb	[pc, r0]
1a00123a:	0b42      	.short	0x0b42
1a00123c:	091f160d 	.word	0x091f160d
1a001240:	2b282522 	.word	0x2b282522
1a001244:	322e0909 	.word	0x322e0909
1a001248:	3a36      	.short	0x3a36
1a00124a:	3e          	.byte	0x3e
1a00124b:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00124c:	2000      	movs	r0, #0
1a00124e:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001250:	481e      	ldr	r0, [pc, #120]	; (1a0012cc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001252:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001254:	4b1e      	ldr	r3, [pc, #120]	; (1a0012d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001256:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00125a:	f003 0307 	and.w	r3, r3, #7
1a00125e:	2b04      	cmp	r3, #4
1a001260:	d130      	bne.n	1a0012c4 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001262:	2000      	movs	r0, #0
1a001264:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001266:	4b1a      	ldr	r3, [pc, #104]	; (1a0012d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001268:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00126c:	f003 0307 	and.w	r3, r3, #7
1a001270:	2b04      	cmp	r3, #4
1a001272:	d029      	beq.n	1a0012c8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001274:	4817      	ldr	r0, [pc, #92]	; (1a0012d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001276:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001278:	4b17      	ldr	r3, [pc, #92]	; (1a0012d8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00127a:	6818      	ldr	r0, [r3, #0]
		break;
1a00127c:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00127e:	4b17      	ldr	r3, [pc, #92]	; (1a0012dc <Chip_Clock_GetClockInputHz+0xac>)
1a001280:	6818      	ldr	r0, [r3, #0]
		break;
1a001282:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001284:	4b16      	ldr	r3, [pc, #88]	; (1a0012e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a001286:	6818      	ldr	r0, [r3, #0]
		break;
1a001288:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00128a:	4b15      	ldr	r3, [pc, #84]	; (1a0012e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00128c:	6858      	ldr	r0, [r3, #4]
		break;
1a00128e:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001290:	f000 f86a 	bl	1a001368 <Chip_Clock_GetMainPLLHz>
		break;
1a001294:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001296:	2100      	movs	r1, #0
1a001298:	f000 f89a 	bl	1a0013d0 <Chip_Clock_GetDivRate>
		break;
1a00129c:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00129e:	2101      	movs	r1, #1
1a0012a0:	f000 f896 	bl	1a0013d0 <Chip_Clock_GetDivRate>
		break;
1a0012a4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0012a6:	2102      	movs	r1, #2
1a0012a8:	f000 f892 	bl	1a0013d0 <Chip_Clock_GetDivRate>
		break;
1a0012ac:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0012ae:	2103      	movs	r1, #3
1a0012b0:	f000 f88e 	bl	1a0013d0 <Chip_Clock_GetDivRate>
		break;
1a0012b4:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0012b6:	2104      	movs	r1, #4
1a0012b8:	f000 f88a 	bl	1a0013d0 <Chip_Clock_GetDivRate>
		break;
1a0012bc:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0012be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0012c2:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0012c4:	4803      	ldr	r0, [pc, #12]	; (1a0012d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0012c6:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0012c8:	4806      	ldr	r0, [pc, #24]	; (1a0012e4 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0012ca:	bd08      	pop	{r3, pc}
1a0012cc:	00b71b00 	.word	0x00b71b00
1a0012d0:	40043000 	.word	0x40043000
1a0012d4:	017d7840 	.word	0x017d7840
1a0012d8:	1a006ef8 	.word	0x1a006ef8
1a0012dc:	1a006ef4 	.word	0x1a006ef4
1a0012e0:	10000984 	.word	0x10000984
1a0012e4:	02faf080 	.word	0x02faf080

1a0012e8 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0012e8:	b538      	push	{r3, r4, r5, lr}
1a0012ea:	4605      	mov	r5, r0
1a0012ec:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0012ee:	7908      	ldrb	r0, [r1, #4]
1a0012f0:	f7ff ff9e 	bl	1a001230 <Chip_Clock_GetClockInputHz>
1a0012f4:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0012f6:	4b19      	ldr	r3, [pc, #100]	; (1a00135c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0012f8:	442b      	add	r3, r5
1a0012fa:	4a19      	ldr	r2, [pc, #100]	; (1a001360 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0012fc:	4293      	cmp	r3, r2
1a0012fe:	d821      	bhi.n	1a001344 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001300:	b318      	cbz	r0, 1a00134a <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001302:	2380      	movs	r3, #128	; 0x80
1a001304:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001306:	2300      	movs	r3, #0
1a001308:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00130a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00130c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001310:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001312:	4a14      	ldr	r2, [pc, #80]	; (1a001364 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001314:	4295      	cmp	r5, r2
1a001316:	d903      	bls.n	1a001320 <Chip_Clock_CalcMainPLLValue+0x38>
1a001318:	fb03 f000 	mul.w	r0, r3, r0
1a00131c:	42a8      	cmp	r0, r5
1a00131e:	d007      	beq.n	1a001330 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001320:	4628      	mov	r0, r5
1a001322:	4621      	mov	r1, r4
1a001324:	f7ff fe9c 	bl	1a001060 <pll_get_frac>
		if (!ppll->nsel) {
1a001328:	68a3      	ldr	r3, [r4, #8]
1a00132a:	b18b      	cbz	r3, 1a001350 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a00132c:	3b01      	subs	r3, #1
1a00132e:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a001330:	6923      	ldr	r3, [r4, #16]
1a001332:	b183      	cbz	r3, 1a001356 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001334:	68e2      	ldr	r2, [r4, #12]
1a001336:	b10a      	cbz	r2, 1a00133c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001338:	3a01      	subs	r2, #1
1a00133a:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a00133c:	3b01      	subs	r3, #1
1a00133e:	6123      	str	r3, [r4, #16]

	return 0;
1a001340:	2000      	movs	r0, #0
1a001342:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a001344:	f04f 30ff 	mov.w	r0, #4294967295
1a001348:	bd38      	pop	{r3, r4, r5, pc}
1a00134a:	f04f 30ff 	mov.w	r0, #4294967295
1a00134e:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a001350:	f04f 30ff 	mov.w	r0, #4294967295
1a001354:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a001356:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a00135a:	bd38      	pop	{r3, r4, r5, pc}
1a00135c:	ff6b3a10 	.word	0xff6b3a10
1a001360:	0b940510 	.word	0x0b940510
1a001364:	094c5eff 	.word	0x094c5eff

1a001368 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a001368:	b570      	push	{r4, r5, r6, lr}
1a00136a:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00136c:	4d16      	ldr	r5, [pc, #88]	; (1a0013c8 <Chip_Clock_GetMainPLLHz+0x60>)
1a00136e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001370:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001374:	f7ff ff5c 	bl	1a001230 <Chip_Clock_GetClockInputHz>
1a001378:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00137a:	4b14      	ldr	r3, [pc, #80]	; (1a0013cc <Chip_Clock_GetMainPLLHz+0x64>)
1a00137c:	6818      	ldr	r0, [r3, #0]
1a00137e:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001380:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a001382:	f010 0001 	ands.w	r0, r0, #1
1a001386:	d01d      	beq.n	1a0013c4 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a001388:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00138c:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001390:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a001394:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a001398:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a00139a:	3201      	adds	r2, #1
	p = ptab[psel];
1a00139c:	a802      	add	r0, sp, #8
1a00139e:	4401      	add	r1, r0
1a0013a0:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a0013a4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0013a8:	d100      	bne.n	1a0013ac <Chip_Clock_GetMainPLLHz+0x44>
1a0013aa:	b125      	cbz	r5, 1a0013b6 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a0013ac:	fbb6 f0f2 	udiv	r0, r6, r2
1a0013b0:	fb03 f000 	mul.w	r0, r3, r0
1a0013b4:	e006      	b.n	1a0013c4 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a0013b6:	0040      	lsls	r0, r0, #1
1a0013b8:	fbb3 f3f0 	udiv	r3, r3, r0
1a0013bc:	fbb6 f0f2 	udiv	r0, r6, r2
1a0013c0:	fb00 f003 	mul.w	r0, r0, r3
}
1a0013c4:	b002      	add	sp, #8
1a0013c6:	bd70      	pop	{r4, r5, r6, pc}
1a0013c8:	40050000 	.word	0x40050000
1a0013cc:	1a006fc4 	.word	0x1a006fc4

1a0013d0 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0013d0:	b538      	push	{r3, r4, r5, lr}
1a0013d2:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0013d4:	4608      	mov	r0, r1
1a0013d6:	f7ff ff0f 	bl	1a0011f8 <Chip_Clock_GetDividerSource>
1a0013da:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0013dc:	4620      	mov	r0, r4
1a0013de:	f7ff ff19 	bl	1a001214 <Chip_Clock_GetDividerDivisor>
1a0013e2:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0013e4:	4628      	mov	r0, r5
1a0013e6:	f7ff ff23 	bl	1a001230 <Chip_Clock_GetClockInputHz>
1a0013ea:	3401      	adds	r4, #1
}
1a0013ec:	fbb0 f0f4 	udiv	r0, r0, r4
1a0013f0:	bd38      	pop	{r3, r4, r5, pc}
1a0013f2:	bf00      	nop

1a0013f4 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0013f4:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0013f6:	0085      	lsls	r5, r0, #2
1a0013f8:	4c0d      	ldr	r4, [pc, #52]	; (1a001430 <Chip_Clock_SetBaseClock+0x3c>)
1a0013fa:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0013fc:	281b      	cmp	r0, #27
1a0013fe:	d80f      	bhi.n	1a001420 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a001400:	2911      	cmp	r1, #17
1a001402:	d012      	beq.n	1a00142a <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001404:	4c0b      	ldr	r4, [pc, #44]	; (1a001434 <Chip_Clock_SetBaseClock+0x40>)
1a001406:	402c      	ands	r4, r5

			if (autoblocken) {
1a001408:	b10a      	cbz	r2, 1a00140e <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a00140a:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a00140e:	b10b      	cbz	r3, 1a001414 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a001410:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001414:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001418:	0080      	lsls	r0, r0, #2
1a00141a:	4b05      	ldr	r3, [pc, #20]	; (1a001430 <Chip_Clock_SetBaseClock+0x3c>)
1a00141c:	501c      	str	r4, [r3, r0]
1a00141e:	e004      	b.n	1a00142a <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001420:	f045 0501 	orr.w	r5, r5, #1
1a001424:	0080      	lsls	r0, r0, #2
1a001426:	4b02      	ldr	r3, [pc, #8]	; (1a001430 <Chip_Clock_SetBaseClock+0x3c>)
1a001428:	501d      	str	r5, [r3, r0]
	}
}
1a00142a:	bc30      	pop	{r4, r5}
1a00142c:	4770      	bx	lr
1a00142e:	bf00      	nop
1a001430:	4005005c 	.word	0x4005005c
1a001434:	e0fff7fe 	.word	0xe0fff7fe

1a001438 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001438:	281b      	cmp	r0, #27
1a00143a:	d808      	bhi.n	1a00144e <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a00143c:	0080      	lsls	r0, r0, #2
1a00143e:	4b06      	ldr	r3, [pc, #24]	; (1a001458 <Chip_Clock_GetBaseClock+0x20>)
1a001440:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a001442:	f010 0f01 	tst.w	r0, #1
1a001446:	d104      	bne.n	1a001452 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001448:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00144c:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a00144e:	2011      	movs	r0, #17
1a001450:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a001452:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001454:	4770      	bx	lr
1a001456:	bf00      	nop
1a001458:	4005005c 	.word	0x4005005c

1a00145c <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a00145c:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00145e:	f7ff ffeb 	bl	1a001438 <Chip_Clock_GetBaseClock>
1a001462:	f7ff fee5 	bl	1a001230 <Chip_Clock_GetClockInputHz>
}
1a001466:	bd08      	pop	{r3, pc}

1a001468 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001468:	b909      	cbnz	r1, 1a00146e <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a00146a:	2101      	movs	r1, #1
1a00146c:	e000      	b.n	1a001470 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a00146e:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a001470:	b10a      	cbz	r2, 1a001476 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a001472:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001476:	2b02      	cmp	r3, #2
1a001478:	d101      	bne.n	1a00147e <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a00147a:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00147e:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001482:	d305      	bcc.n	1a001490 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001484:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001488:	4b04      	ldr	r3, [pc, #16]	; (1a00149c <Chip_Clock_EnableOpts+0x34>)
1a00148a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00148e:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001490:	3020      	adds	r0, #32
1a001492:	4b03      	ldr	r3, [pc, #12]	; (1a0014a0 <Chip_Clock_EnableOpts+0x38>)
1a001494:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001498:	4770      	bx	lr
1a00149a:	bf00      	nop
1a00149c:	40052000 	.word	0x40052000
1a0014a0:	40051000 	.word	0x40051000

1a0014a4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0014a4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0014a8:	d309      	bcc.n	1a0014be <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0014aa:	4a09      	ldr	r2, [pc, #36]	; (1a0014d0 <Chip_Clock_Enable+0x2c>)
1a0014ac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0014b0:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0014b4:	f043 0301 	orr.w	r3, r3, #1
1a0014b8:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0014bc:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0014be:	4a05      	ldr	r2, [pc, #20]	; (1a0014d4 <Chip_Clock_Enable+0x30>)
1a0014c0:	3020      	adds	r0, #32
1a0014c2:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0014c6:	f043 0301 	orr.w	r3, r3, #1
1a0014ca:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0014ce:	4770      	bx	lr
1a0014d0:	40052000 	.word	0x40052000
1a0014d4:	40051000 	.word	0x40051000

1a0014d8 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0014d8:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0014da:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0014de:	d305      	bcc.n	1a0014ec <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0014e0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0014e4:	4a0d      	ldr	r2, [pc, #52]	; (1a00151c <Chip_Clock_GetRate+0x44>)
1a0014e6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0014ea:	e004      	b.n	1a0014f6 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0014ec:	f100 0320 	add.w	r3, r0, #32
1a0014f0:	4a0b      	ldr	r2, [pc, #44]	; (1a001520 <Chip_Clock_GetRate+0x48>)
1a0014f2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0014f6:	f014 0f01 	tst.w	r4, #1
1a0014fa:	d00c      	beq.n	1a001516 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0014fc:	f7ff fe32 	bl	1a001164 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001500:	f7ff ffac 	bl	1a00145c <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a001504:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001508:	d101      	bne.n	1a00150e <Chip_Clock_GetRate+0x36>
			div = 1;
1a00150a:	2301      	movs	r3, #1
1a00150c:	e000      	b.n	1a001510 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a00150e:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a001510:	fbb0 f0f3 	udiv	r0, r0, r3
1a001514:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a001516:	2000      	movs	r0, #0
	}

	return rate;
}
1a001518:	bd10      	pop	{r4, pc}
1a00151a:	bf00      	nop
1a00151c:	40052000 	.word	0x40052000
1a001520:	40051000 	.word	0x40051000

1a001524 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001524:	b570      	push	{r4, r5, r6, lr}
1a001526:	b08a      	sub	sp, #40	; 0x28
1a001528:	4605      	mov	r5, r0
1a00152a:	460e      	mov	r6, r1
1a00152c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00152e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001532:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001534:	2806      	cmp	r0, #6
1a001536:	d101      	bne.n	1a00153c <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a001538:	f7ff fe38 	bl	1a0011ac <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00153c:	2004      	movs	r0, #4
1a00153e:	4629      	mov	r1, r5
1a001540:	2201      	movs	r2, #1
1a001542:	2300      	movs	r3, #0
1a001544:	f7ff ff56 	bl	1a0013f4 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001548:	4a47      	ldr	r2, [pc, #284]	; (1a001668 <Chip_SetupCoreClock+0x144>)
1a00154a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00154c:	f043 0301 	orr.w	r3, r3, #1
1a001550:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001552:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001556:	4630      	mov	r0, r6
1a001558:	a901      	add	r1, sp, #4
1a00155a:	f7ff fec5 	bl	1a0012e8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00155e:	4b43      	ldr	r3, [pc, #268]	; (1a00166c <Chip_SetupCoreClock+0x148>)
1a001560:	429e      	cmp	r6, r3
1a001562:	d913      	bls.n	1a00158c <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a001564:	9b01      	ldr	r3, [sp, #4]
1a001566:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00156a:	d000      	beq.n	1a00156e <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00156c:	e7fe      	b.n	1a00156c <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00156e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001572:	d005      	beq.n	1a001580 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001574:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001578:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00157a:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a00157c:	2601      	movs	r6, #1
1a00157e:	e007      	b.n	1a001590 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a001580:	9b04      	ldr	r3, [sp, #16]
1a001582:	3301      	adds	r3, #1
1a001584:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a001586:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a001588:	2600      	movs	r6, #0
1a00158a:	e001      	b.n	1a001590 <Chip_SetupCoreClock+0x6c>
1a00158c:	2500      	movs	r5, #0
1a00158e:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001590:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001594:	9b01      	ldr	r3, [sp, #4]
1a001596:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00159a:	9a05      	ldr	r2, [sp, #20]
1a00159c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0015a0:	9a03      	ldr	r2, [sp, #12]
1a0015a2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0015a6:	9a04      	ldr	r2, [sp, #16]
1a0015a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0015b0:	4a2d      	ldr	r2, [pc, #180]	; (1a001668 <Chip_SetupCoreClock+0x144>)
1a0015b2:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0015b4:	4b2c      	ldr	r3, [pc, #176]	; (1a001668 <Chip_SetupCoreClock+0x144>)
1a0015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0015b8:	f013 0f01 	tst.w	r3, #1
1a0015bc:	d0fa      	beq.n	1a0015b4 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0015be:	2004      	movs	r0, #4
1a0015c0:	2109      	movs	r1, #9
1a0015c2:	2201      	movs	r2, #1
1a0015c4:	2300      	movs	r3, #0
1a0015c6:	f7ff ff15 	bl	1a0013f4 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0015ca:	b1ee      	cbz	r6, 1a001608 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0015cc:	f242 7310 	movw	r3, #10000	; 0x2710
1a0015d0:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0015d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0015d4:	1e5a      	subs	r2, r3, #1
1a0015d6:	9209      	str	r2, [sp, #36]	; 0x24
1a0015d8:	2b00      	cmp	r3, #0
1a0015da:	d1fa      	bne.n	1a0015d2 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a0015dc:	9b01      	ldr	r3, [sp, #4]
1a0015de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0015e2:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0015e4:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0015e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0015ec:	9a05      	ldr	r2, [sp, #20]
1a0015ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0015f2:	9a03      	ldr	r2, [sp, #12]
1a0015f4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0015f8:	9a04      	ldr	r2, [sp, #16]
1a0015fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0015fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001602:	4a19      	ldr	r2, [pc, #100]	; (1a001668 <Chip_SetupCoreClock+0x144>)
1a001604:	6453      	str	r3, [r2, #68]	; 0x44
1a001606:	e01c      	b.n	1a001642 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a001608:	b1dd      	cbz	r5, 1a001642 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00160a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00160e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001610:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001612:	1e5a      	subs	r2, r3, #1
1a001614:	9209      	str	r2, [sp, #36]	; 0x24
1a001616:	2b00      	cmp	r3, #0
1a001618:	d1fa      	bne.n	1a001610 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a00161a:	9b04      	ldr	r3, [sp, #16]
1a00161c:	1e59      	subs	r1, r3, #1
1a00161e:	9104      	str	r1, [sp, #16]
1a001620:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001624:	9b01      	ldr	r3, [sp, #4]
1a001626:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a00162a:	9b05      	ldr	r3, [sp, #20]
1a00162c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a001630:	9b03      	ldr	r3, [sp, #12]
1a001632:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a001636:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a00163a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00163e:	4a0a      	ldr	r2, [pc, #40]	; (1a001668 <Chip_SetupCoreClock+0x144>)
1a001640:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001642:	b964      	cbnz	r4, 1a00165e <Chip_SetupCoreClock+0x13a>
1a001644:	e00e      	b.n	1a001664 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001646:	4a0a      	ldr	r2, [pc, #40]	; (1a001670 <Chip_SetupCoreClock+0x14c>)
1a001648:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a00164c:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a001650:	7859      	ldrb	r1, [r3, #1]
1a001652:	789a      	ldrb	r2, [r3, #2]
1a001654:	78db      	ldrb	r3, [r3, #3]
1a001656:	f7ff fecd 	bl	1a0013f4 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00165a:	3401      	adds	r4, #1
1a00165c:	e000      	b.n	1a001660 <Chip_SetupCoreClock+0x13c>
1a00165e:	2400      	movs	r4, #0
1a001660:	2c11      	cmp	r4, #17
1a001662:	d9f0      	bls.n	1a001646 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001664:	b00a      	add	sp, #40	; 0x28
1a001666:	bd70      	pop	{r4, r5, r6, pc}
1a001668:	40050000 	.word	0x40050000
1a00166c:	068e7780 	.word	0x068e7780
1a001670:	1a00703c 	.word	0x1a00703c

1a001674 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001674:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a001676:	4b10      	ldr	r3, [pc, #64]	; (1a0016b8 <fpuInit+0x44>)
1a001678:	681b      	ldr	r3, [r3, #0]
1a00167a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a00167c:	4b0f      	ldr	r3, [pc, #60]	; (1a0016bc <fpuInit+0x48>)
1a00167e:	681b      	ldr	r3, [r3, #0]
1a001680:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a001682:	9a02      	ldr	r2, [sp, #8]
1a001684:	4b0e      	ldr	r3, [pc, #56]	; (1a0016c0 <fpuInit+0x4c>)
1a001686:	429a      	cmp	r2, r3
1a001688:	d105      	bne.n	1a001696 <fpuInit+0x22>
1a00168a:	9a01      	ldr	r2, [sp, #4]
1a00168c:	4b0d      	ldr	r3, [pc, #52]	; (1a0016c4 <fpuInit+0x50>)
1a00168e:	429a      	cmp	r2, r3
1a001690:	d003      	beq.n	1a00169a <fpuInit+0x26>
1a001692:	2300      	movs	r3, #0
1a001694:	e002      	b.n	1a00169c <fpuInit+0x28>
1a001696:	2300      	movs	r3, #0
1a001698:	e000      	b.n	1a00169c <fpuInit+0x28>
1a00169a:	2301      	movs	r3, #1

	if (vfpPresent) {
1a00169c:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0016a0:	d008      	beq.n	1a0016b4 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a0016a2:	4a09      	ldr	r2, [pc, #36]	; (1a0016c8 <fpuInit+0x54>)
1a0016a4:	6813      	ldr	r3, [r2, #0]
1a0016a6:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a0016a8:	9b03      	ldr	r3, [sp, #12]
1a0016aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a0016ae:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a0016b0:	9b03      	ldr	r3, [sp, #12]
1a0016b2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a0016b4:	b004      	add	sp, #16
1a0016b6:	4770      	bx	lr
1a0016b8:	e000ef40 	.word	0xe000ef40
1a0016bc:	e000ef44 	.word	0xe000ef44
1a0016c0:	10110021 	.word	0x10110021
1a0016c4:	11000011 	.word	0x11000011
1a0016c8:	e000ed88 	.word	0xe000ed88

1a0016cc <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0016cc:	4770      	bx	lr
1a0016ce:	bf00      	nop

1a0016d0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0016d0:	4b03      	ldr	r3, [pc, #12]	; (1a0016e0 <Chip_SSP_GetClockIndex+0x10>)
1a0016d2:	4298      	cmp	r0, r3
1a0016d4:	d101      	bne.n	1a0016da <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a0016d6:	20a5      	movs	r0, #165	; 0xa5
1a0016d8:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0016da:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0016dc:	4770      	bx	lr
1a0016de:	bf00      	nop
1a0016e0:	400c5000 	.word	0x400c5000

1a0016e4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0016e4:	4b04      	ldr	r3, [pc, #16]	; (1a0016f8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0016e6:	4298      	cmp	r0, r3
1a0016e8:	d102      	bne.n	1a0016f0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0016ea:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0016ee:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0016f0:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0016f4:	4770      	bx	lr
1a0016f6:	bf00      	nop
1a0016f8:	400c5000 	.word	0x400c5000

1a0016fc <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0016fc:	6803      	ldr	r3, [r0, #0]
1a0016fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001702:	0209      	lsls	r1, r1, #8
1a001704:	b289      	uxth	r1, r1
1a001706:	430b      	orrs	r3, r1
1a001708:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a00170a:	6102      	str	r2, [r0, #16]
1a00170c:	4770      	bx	lr
1a00170e:	bf00      	nop

1a001710 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001710:	b570      	push	{r4, r5, r6, lr}
1a001712:	4606      	mov	r6, r0
1a001714:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001716:	f7ff ffe5 	bl	1a0016e4 <Chip_SSP_GetPeriphClockIndex>
1a00171a:	f7ff fedd 	bl	1a0014d8 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a00171e:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a001720:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a001724:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a001726:	e00c      	b.n	1a001742 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001728:	1c4c      	adds	r4, r1, #1
1a00172a:	fb02 f304 	mul.w	r3, r2, r4
1a00172e:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001732:	42ab      	cmp	r3, r5
1a001734:	d905      	bls.n	1a001742 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a001736:	2cff      	cmp	r4, #255	; 0xff
1a001738:	d902      	bls.n	1a001740 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a00173a:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a00173c:	2100      	movs	r1, #0
1a00173e:	e000      	b.n	1a001742 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001740:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a001742:	42ab      	cmp	r3, r5
1a001744:	d8f0      	bhi.n	1a001728 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001746:	4630      	mov	r0, r6
1a001748:	f7ff ffd8 	bl	1a0016fc <Chip_SSP_SetClockRate>
1a00174c:	bd70      	pop	{r4, r5, r6, pc}
1a00174e:	bf00      	nop

1a001750 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001750:	b510      	push	{r4, lr}
1a001752:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001754:	f7ff ffbc 	bl	1a0016d0 <Chip_SSP_GetClockIndex>
1a001758:	f7ff fea4 	bl	1a0014a4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00175c:	4620      	mov	r0, r4
1a00175e:	f7ff ffc1 	bl	1a0016e4 <Chip_SSP_GetPeriphClockIndex>
1a001762:	f7ff fe9f 	bl	1a0014a4 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001766:	6863      	ldr	r3, [r4, #4]
1a001768:	f023 0304 	bic.w	r3, r3, #4
1a00176c:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a00176e:	6823      	ldr	r3, [r4, #0]
1a001770:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001774:	f043 0307 	orr.w	r3, r3, #7
1a001778:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00177a:	4620      	mov	r0, r4
1a00177c:	4901      	ldr	r1, [pc, #4]	; (1a001784 <Chip_SSP_Init+0x34>)
1a00177e:	f7ff ffc7 	bl	1a001710 <Chip_SSP_SetBitRate>
1a001782:	bd10      	pop	{r4, pc}
1a001784:	000186a0 	.word	0x000186a0

1a001788 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a001788:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00178a:	4a19      	ldr	r2, [pc, #100]	; (1a0017f0 <ResetISR+0x68>)
1a00178c:	4b19      	ldr	r3, [pc, #100]	; (1a0017f4 <ResetISR+0x6c>)
1a00178e:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001790:	4a19      	ldr	r2, [pc, #100]	; (1a0017f8 <ResetISR+0x70>)
1a001792:	3304      	adds	r3, #4
1a001794:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001796:	2300      	movs	r3, #0
1a001798:	e005      	b.n	1a0017a6 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00179a:	f04f 31ff 	mov.w	r1, #4294967295
1a00179e:	4a17      	ldr	r2, [pc, #92]	; (1a0017fc <ResetISR+0x74>)
1a0017a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0017a4:	3301      	adds	r3, #1
1a0017a6:	2b07      	cmp	r3, #7
1a0017a8:	d9f7      	bls.n	1a00179a <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0017aa:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0017ac:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0017ae:	f7ff fa51 	bl	1a000c54 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0017b2:	4b13      	ldr	r3, [pc, #76]	; (1a001800 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0017b4:	e007      	b.n	1a0017c6 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0017b6:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0017ba:	6818      	ldr	r0, [r3, #0]
1a0017bc:	6859      	ldr	r1, [r3, #4]
1a0017be:	689a      	ldr	r2, [r3, #8]
1a0017c0:	f7fe fcf4 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0017c4:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0017c6:	4a0f      	ldr	r2, [pc, #60]	; (1a001804 <ResetISR+0x7c>)
1a0017c8:	4293      	cmp	r3, r2
1a0017ca:	d3f4      	bcc.n	1a0017b6 <ResetISR+0x2e>
1a0017cc:	e006      	b.n	1a0017dc <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a0017ce:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a0017d0:	f854 0b08 	ldr.w	r0, [r4], #8
1a0017d4:	6859      	ldr	r1, [r3, #4]
1a0017d6:	f7fe fcf7 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0017da:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a0017dc:	4a0a      	ldr	r2, [pc, #40]	; (1a001808 <ResetISR+0x80>)
1a0017de:	4293      	cmp	r3, r2
1a0017e0:	d3f5      	bcc.n	1a0017ce <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a0017e2:	f000 fead 	bl	1a002540 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0017e6:	f7ff f9af 	bl	1a000b48 <Board_Init>
    main();
1a0017ea:	f7fe fe27 	bl	1a00043c <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a0017ee:	e7fe      	b.n	1a0017ee <ResetISR+0x66>
1a0017f0:	10df1000 	.word	0x10df1000
1a0017f4:	40053100 	.word	0x40053100
1a0017f8:	01dff7ff 	.word	0x01dff7ff
1a0017fc:	e000e280 	.word	0xe000e280
1a001800:	1a000114 	.word	0x1a000114
1a001804:	1a000150 	.word	0x1a000150
1a001808:	1a000178 	.word	0x1a000178

1a00180c <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a00180c:	4770      	bx	lr
1a00180e:	bf00      	nop

1a001810 <__aeabi_drsub>:
1a001810:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a001814:	e002      	b.n	1a00181c <__adddf3>
1a001816:	bf00      	nop

1a001818 <__aeabi_dsub>:
1a001818:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a00181c <__adddf3>:
1a00181c:	b530      	push	{r4, r5, lr}
1a00181e:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a001822:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a001826:	ea94 0f05 	teq	r4, r5
1a00182a:	bf08      	it	eq
1a00182c:	ea90 0f02 	teqeq	r0, r2
1a001830:	bf1f      	itttt	ne
1a001832:	ea54 0c00 	orrsne.w	ip, r4, r0
1a001836:	ea55 0c02 	orrsne.w	ip, r5, r2
1a00183a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a00183e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001842:	f000 80e2 	beq.w	1a001a0a <__adddf3+0x1ee>
1a001846:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a00184a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a00184e:	bfb8      	it	lt
1a001850:	426d      	neglt	r5, r5
1a001852:	dd0c      	ble.n	1a00186e <__adddf3+0x52>
1a001854:	442c      	add	r4, r5
1a001856:	ea80 0202 	eor.w	r2, r0, r2
1a00185a:	ea81 0303 	eor.w	r3, r1, r3
1a00185e:	ea82 0000 	eor.w	r0, r2, r0
1a001862:	ea83 0101 	eor.w	r1, r3, r1
1a001866:	ea80 0202 	eor.w	r2, r0, r2
1a00186a:	ea81 0303 	eor.w	r3, r1, r3
1a00186e:	2d36      	cmp	r5, #54	; 0x36
1a001870:	bf88      	it	hi
1a001872:	bd30      	pophi	{r4, r5, pc}
1a001874:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a001878:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a00187c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a001880:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a001884:	d002      	beq.n	1a00188c <__adddf3+0x70>
1a001886:	4240      	negs	r0, r0
1a001888:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a00188c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a001890:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001894:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a001898:	d002      	beq.n	1a0018a0 <__adddf3+0x84>
1a00189a:	4252      	negs	r2, r2
1a00189c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0018a0:	ea94 0f05 	teq	r4, r5
1a0018a4:	f000 80a7 	beq.w	1a0019f6 <__adddf3+0x1da>
1a0018a8:	f1a4 0401 	sub.w	r4, r4, #1
1a0018ac:	f1d5 0e20 	rsbs	lr, r5, #32
1a0018b0:	db0d      	blt.n	1a0018ce <__adddf3+0xb2>
1a0018b2:	fa02 fc0e 	lsl.w	ip, r2, lr
1a0018b6:	fa22 f205 	lsr.w	r2, r2, r5
1a0018ba:	1880      	adds	r0, r0, r2
1a0018bc:	f141 0100 	adc.w	r1, r1, #0
1a0018c0:	fa03 f20e 	lsl.w	r2, r3, lr
1a0018c4:	1880      	adds	r0, r0, r2
1a0018c6:	fa43 f305 	asr.w	r3, r3, r5
1a0018ca:	4159      	adcs	r1, r3
1a0018cc:	e00e      	b.n	1a0018ec <__adddf3+0xd0>
1a0018ce:	f1a5 0520 	sub.w	r5, r5, #32
1a0018d2:	f10e 0e20 	add.w	lr, lr, #32
1a0018d6:	2a01      	cmp	r2, #1
1a0018d8:	fa03 fc0e 	lsl.w	ip, r3, lr
1a0018dc:	bf28      	it	cs
1a0018de:	f04c 0c02 	orrcs.w	ip, ip, #2
1a0018e2:	fa43 f305 	asr.w	r3, r3, r5
1a0018e6:	18c0      	adds	r0, r0, r3
1a0018e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a0018ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0018f0:	d507      	bpl.n	1a001902 <__adddf3+0xe6>
1a0018f2:	f04f 0e00 	mov.w	lr, #0
1a0018f6:	f1dc 0c00 	rsbs	ip, ip, #0
1a0018fa:	eb7e 0000 	sbcs.w	r0, lr, r0
1a0018fe:	eb6e 0101 	sbc.w	r1, lr, r1
1a001902:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a001906:	d31b      	bcc.n	1a001940 <__adddf3+0x124>
1a001908:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a00190c:	d30c      	bcc.n	1a001928 <__adddf3+0x10c>
1a00190e:	0849      	lsrs	r1, r1, #1
1a001910:	ea5f 0030 	movs.w	r0, r0, rrx
1a001914:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a001918:	f104 0401 	add.w	r4, r4, #1
1a00191c:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a001920:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a001924:	f080 809a 	bcs.w	1a001a5c <__adddf3+0x240>
1a001928:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a00192c:	bf08      	it	eq
1a00192e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001932:	f150 0000 	adcs.w	r0, r0, #0
1a001936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a00193a:	ea41 0105 	orr.w	r1, r1, r5
1a00193e:	bd30      	pop	{r4, r5, pc}
1a001940:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a001944:	4140      	adcs	r0, r0
1a001946:	eb41 0101 	adc.w	r1, r1, r1
1a00194a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00194e:	f1a4 0401 	sub.w	r4, r4, #1
1a001952:	d1e9      	bne.n	1a001928 <__adddf3+0x10c>
1a001954:	f091 0f00 	teq	r1, #0
1a001958:	bf04      	itt	eq
1a00195a:	4601      	moveq	r1, r0
1a00195c:	2000      	moveq	r0, #0
1a00195e:	fab1 f381 	clz	r3, r1
1a001962:	bf08      	it	eq
1a001964:	3320      	addeq	r3, #32
1a001966:	f1a3 030b 	sub.w	r3, r3, #11
1a00196a:	f1b3 0220 	subs.w	r2, r3, #32
1a00196e:	da0c      	bge.n	1a00198a <__adddf3+0x16e>
1a001970:	320c      	adds	r2, #12
1a001972:	dd08      	ble.n	1a001986 <__adddf3+0x16a>
1a001974:	f102 0c14 	add.w	ip, r2, #20
1a001978:	f1c2 020c 	rsb	r2, r2, #12
1a00197c:	fa01 f00c 	lsl.w	r0, r1, ip
1a001980:	fa21 f102 	lsr.w	r1, r1, r2
1a001984:	e00c      	b.n	1a0019a0 <__adddf3+0x184>
1a001986:	f102 0214 	add.w	r2, r2, #20
1a00198a:	bfd8      	it	le
1a00198c:	f1c2 0c20 	rsble	ip, r2, #32
1a001990:	fa01 f102 	lsl.w	r1, r1, r2
1a001994:	fa20 fc0c 	lsr.w	ip, r0, ip
1a001998:	bfdc      	itt	le
1a00199a:	ea41 010c 	orrle.w	r1, r1, ip
1a00199e:	4090      	lslle	r0, r2
1a0019a0:	1ae4      	subs	r4, r4, r3
1a0019a2:	bfa2      	ittt	ge
1a0019a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a0019a8:	4329      	orrge	r1, r5
1a0019aa:	bd30      	popge	{r4, r5, pc}
1a0019ac:	ea6f 0404 	mvn.w	r4, r4
1a0019b0:	3c1f      	subs	r4, #31
1a0019b2:	da1c      	bge.n	1a0019ee <__adddf3+0x1d2>
1a0019b4:	340c      	adds	r4, #12
1a0019b6:	dc0e      	bgt.n	1a0019d6 <__adddf3+0x1ba>
1a0019b8:	f104 0414 	add.w	r4, r4, #20
1a0019bc:	f1c4 0220 	rsb	r2, r4, #32
1a0019c0:	fa20 f004 	lsr.w	r0, r0, r4
1a0019c4:	fa01 f302 	lsl.w	r3, r1, r2
1a0019c8:	ea40 0003 	orr.w	r0, r0, r3
1a0019cc:	fa21 f304 	lsr.w	r3, r1, r4
1a0019d0:	ea45 0103 	orr.w	r1, r5, r3
1a0019d4:	bd30      	pop	{r4, r5, pc}
1a0019d6:	f1c4 040c 	rsb	r4, r4, #12
1a0019da:	f1c4 0220 	rsb	r2, r4, #32
1a0019de:	fa20 f002 	lsr.w	r0, r0, r2
1a0019e2:	fa01 f304 	lsl.w	r3, r1, r4
1a0019e6:	ea40 0003 	orr.w	r0, r0, r3
1a0019ea:	4629      	mov	r1, r5
1a0019ec:	bd30      	pop	{r4, r5, pc}
1a0019ee:	fa21 f004 	lsr.w	r0, r1, r4
1a0019f2:	4629      	mov	r1, r5
1a0019f4:	bd30      	pop	{r4, r5, pc}
1a0019f6:	f094 0f00 	teq	r4, #0
1a0019fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a0019fe:	bf06      	itte	eq
1a001a00:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a001a04:	3401      	addeq	r4, #1
1a001a06:	3d01      	subne	r5, #1
1a001a08:	e74e      	b.n	1a0018a8 <__adddf3+0x8c>
1a001a0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001a0e:	bf18      	it	ne
1a001a10:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a001a14:	d029      	beq.n	1a001a6a <__adddf3+0x24e>
1a001a16:	ea94 0f05 	teq	r4, r5
1a001a1a:	bf08      	it	eq
1a001a1c:	ea90 0f02 	teqeq	r0, r2
1a001a20:	d005      	beq.n	1a001a2e <__adddf3+0x212>
1a001a22:	ea54 0c00 	orrs.w	ip, r4, r0
1a001a26:	bf04      	itt	eq
1a001a28:	4619      	moveq	r1, r3
1a001a2a:	4610      	moveq	r0, r2
1a001a2c:	bd30      	pop	{r4, r5, pc}
1a001a2e:	ea91 0f03 	teq	r1, r3
1a001a32:	bf1e      	ittt	ne
1a001a34:	2100      	movne	r1, #0
1a001a36:	2000      	movne	r0, #0
1a001a38:	bd30      	popne	{r4, r5, pc}
1a001a3a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a001a3e:	d105      	bne.n	1a001a4c <__adddf3+0x230>
1a001a40:	0040      	lsls	r0, r0, #1
1a001a42:	4149      	adcs	r1, r1
1a001a44:	bf28      	it	cs
1a001a46:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a001a4a:	bd30      	pop	{r4, r5, pc}
1a001a4c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a001a50:	bf3c      	itt	cc
1a001a52:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a001a56:	bd30      	popcc	{r4, r5, pc}
1a001a58:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001a5c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a001a60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001a64:	f04f 0000 	mov.w	r0, #0
1a001a68:	bd30      	pop	{r4, r5, pc}
1a001a6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a001a6e:	bf1a      	itte	ne
1a001a70:	4619      	movne	r1, r3
1a001a72:	4610      	movne	r0, r2
1a001a74:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a001a78:	bf1c      	itt	ne
1a001a7a:	460b      	movne	r3, r1
1a001a7c:	4602      	movne	r2, r0
1a001a7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a001a82:	bf06      	itte	eq
1a001a84:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a001a88:	ea91 0f03 	teqeq	r1, r3
1a001a8c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a001a90:	bd30      	pop	{r4, r5, pc}
1a001a92:	bf00      	nop

1a001a94 <__aeabi_ui2d>:
1a001a94:	f090 0f00 	teq	r0, #0
1a001a98:	bf04      	itt	eq
1a001a9a:	2100      	moveq	r1, #0
1a001a9c:	4770      	bxeq	lr
1a001a9e:	b530      	push	{r4, r5, lr}
1a001aa0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001aa4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001aa8:	f04f 0500 	mov.w	r5, #0
1a001aac:	f04f 0100 	mov.w	r1, #0
1a001ab0:	e750      	b.n	1a001954 <__adddf3+0x138>
1a001ab2:	bf00      	nop

1a001ab4 <__aeabi_i2d>:
1a001ab4:	f090 0f00 	teq	r0, #0
1a001ab8:	bf04      	itt	eq
1a001aba:	2100      	moveq	r1, #0
1a001abc:	4770      	bxeq	lr
1a001abe:	b530      	push	{r4, r5, lr}
1a001ac0:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001ac4:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001ac8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a001acc:	bf48      	it	mi
1a001ace:	4240      	negmi	r0, r0
1a001ad0:	f04f 0100 	mov.w	r1, #0
1a001ad4:	e73e      	b.n	1a001954 <__adddf3+0x138>
1a001ad6:	bf00      	nop

1a001ad8 <__aeabi_f2d>:
1a001ad8:	0042      	lsls	r2, r0, #1
1a001ada:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a001ade:	ea4f 0131 	mov.w	r1, r1, rrx
1a001ae2:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a001ae6:	bf1f      	itttt	ne
1a001ae8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a001aec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a001af0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a001af4:	4770      	bxne	lr
1a001af6:	f092 0f00 	teq	r2, #0
1a001afa:	bf14      	ite	ne
1a001afc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a001b00:	4770      	bxeq	lr
1a001b02:	b530      	push	{r4, r5, lr}
1a001b04:	f44f 7460 	mov.w	r4, #896	; 0x380
1a001b08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a001b0c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a001b10:	e720      	b.n	1a001954 <__adddf3+0x138>
1a001b12:	bf00      	nop

1a001b14 <__aeabi_ul2d>:
1a001b14:	ea50 0201 	orrs.w	r2, r0, r1
1a001b18:	bf08      	it	eq
1a001b1a:	4770      	bxeq	lr
1a001b1c:	b530      	push	{r4, r5, lr}
1a001b1e:	f04f 0500 	mov.w	r5, #0
1a001b22:	e00a      	b.n	1a001b3a <__aeabi_l2d+0x16>

1a001b24 <__aeabi_l2d>:
1a001b24:	ea50 0201 	orrs.w	r2, r0, r1
1a001b28:	bf08      	it	eq
1a001b2a:	4770      	bxeq	lr
1a001b2c:	b530      	push	{r4, r5, lr}
1a001b2e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a001b32:	d502      	bpl.n	1a001b3a <__aeabi_l2d+0x16>
1a001b34:	4240      	negs	r0, r0
1a001b36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001b3a:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a001b3e:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a001b42:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a001b46:	f43f aedc 	beq.w	1a001902 <__adddf3+0xe6>
1a001b4a:	f04f 0203 	mov.w	r2, #3
1a001b4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a001b52:	bf18      	it	ne
1a001b54:	3203      	addne	r2, #3
1a001b56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a001b5a:	bf18      	it	ne
1a001b5c:	3203      	addne	r2, #3
1a001b5e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a001b62:	f1c2 0320 	rsb	r3, r2, #32
1a001b66:	fa00 fc03 	lsl.w	ip, r0, r3
1a001b6a:	fa20 f002 	lsr.w	r0, r0, r2
1a001b6e:	fa01 fe03 	lsl.w	lr, r1, r3
1a001b72:	ea40 000e 	orr.w	r0, r0, lr
1a001b76:	fa21 f102 	lsr.w	r1, r1, r2
1a001b7a:	4414      	add	r4, r2
1a001b7c:	e6c1      	b.n	1a001902 <__adddf3+0xe6>
1a001b7e:	bf00      	nop

1a001b80 <__aeabi_uldivmod>:
1a001b80:	b953      	cbnz	r3, 1a001b98 <__aeabi_uldivmod+0x18>
1a001b82:	b94a      	cbnz	r2, 1a001b98 <__aeabi_uldivmod+0x18>
1a001b84:	2900      	cmp	r1, #0
1a001b86:	bf08      	it	eq
1a001b88:	2800      	cmpeq	r0, #0
1a001b8a:	bf1c      	itt	ne
1a001b8c:	f04f 31ff 	movne.w	r1, #4294967295
1a001b90:	f04f 30ff 	movne.w	r0, #4294967295
1a001b94:	f000 b83c 	b.w	1a001c10 <__aeabi_idiv0>
1a001b98:	b082      	sub	sp, #8
1a001b9a:	46ec      	mov	ip, sp
1a001b9c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a001ba0:	f000 f81e 	bl	1a001be0 <__gnu_uldivmod_helper>
1a001ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001ba8:	b002      	add	sp, #8
1a001baa:	bc0c      	pop	{r2, r3}
1a001bac:	4770      	bx	lr
1a001bae:	bf00      	nop

1a001bb0 <__gnu_ldivmod_helper>:
1a001bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001bb4:	9c06      	ldr	r4, [sp, #24]
1a001bb6:	4615      	mov	r5, r2
1a001bb8:	4606      	mov	r6, r0
1a001bba:	460f      	mov	r7, r1
1a001bbc:	4698      	mov	r8, r3
1a001bbe:	f000 fa3b 	bl	1a002038 <__divdi3>
1a001bc2:	fb05 f301 	mul.w	r3, r5, r1
1a001bc6:	fb00 3808 	mla	r8, r0, r8, r3
1a001bca:	fba5 2300 	umull	r2, r3, r5, r0
1a001bce:	1ab2      	subs	r2, r6, r2
1a001bd0:	4443      	add	r3, r8
1a001bd2:	eb67 0303 	sbc.w	r3, r7, r3
1a001bd6:	e9c4 2300 	strd	r2, r3, [r4]
1a001bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001bde:	bf00      	nop

1a001be0 <__gnu_uldivmod_helper>:
1a001be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001be4:	9c06      	ldr	r4, [sp, #24]
1a001be6:	4690      	mov	r8, r2
1a001be8:	4606      	mov	r6, r0
1a001bea:	460f      	mov	r7, r1
1a001bec:	461d      	mov	r5, r3
1a001bee:	f000 fb71 	bl	1a0022d4 <__udivdi3>
1a001bf2:	fb00 f505 	mul.w	r5, r0, r5
1a001bf6:	fba0 2308 	umull	r2, r3, r0, r8
1a001bfa:	fb08 5501 	mla	r5, r8, r1, r5
1a001bfe:	1ab2      	subs	r2, r6, r2
1a001c00:	442b      	add	r3, r5
1a001c02:	eb67 0303 	sbc.w	r3, r7, r3
1a001c06:	e9c4 2300 	strd	r2, r3, [r4]
1a001c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001c0e:	bf00      	nop

1a001c10 <__aeabi_idiv0>:
1a001c10:	4770      	bx	lr
1a001c12:	bf00      	nop

1a001c14 <__aeabi_dmul>:
1a001c14:	b570      	push	{r4, r5, r6, lr}
1a001c16:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a001c1a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a001c1e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a001c22:	bf1d      	ittte	ne
1a001c24:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a001c28:	ea94 0f0c 	teqne	r4, ip
1a001c2c:	ea95 0f0c 	teqne	r5, ip
1a001c30:	f000 f8de 	bleq	1a001df0 <__aeabi_dmul+0x1dc>
1a001c34:	442c      	add	r4, r5
1a001c36:	ea81 0603 	eor.w	r6, r1, r3
1a001c3a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a001c3e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a001c42:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a001c46:	bf18      	it	ne
1a001c48:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a001c4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a001c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a001c54:	d038      	beq.n	1a001cc8 <__aeabi_dmul+0xb4>
1a001c56:	fba0 ce02 	umull	ip, lr, r0, r2
1a001c5a:	f04f 0500 	mov.w	r5, #0
1a001c5e:	fbe1 e502 	umlal	lr, r5, r1, r2
1a001c62:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a001c66:	fbe0 e503 	umlal	lr, r5, r0, r3
1a001c6a:	f04f 0600 	mov.w	r6, #0
1a001c6e:	fbe1 5603 	umlal	r5, r6, r1, r3
1a001c72:	f09c 0f00 	teq	ip, #0
1a001c76:	bf18      	it	ne
1a001c78:	f04e 0e01 	orrne.w	lr, lr, #1
1a001c7c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a001c80:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a001c84:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a001c88:	d204      	bcs.n	1a001c94 <__aeabi_dmul+0x80>
1a001c8a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a001c8e:	416d      	adcs	r5, r5
1a001c90:	eb46 0606 	adc.w	r6, r6, r6
1a001c94:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a001c98:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a001c9c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a001ca0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a001ca4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a001ca8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a001cac:	bf88      	it	hi
1a001cae:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a001cb2:	d81e      	bhi.n	1a001cf2 <__aeabi_dmul+0xde>
1a001cb4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a001cb8:	bf08      	it	eq
1a001cba:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a001cbe:	f150 0000 	adcs.w	r0, r0, #0
1a001cc2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001cc6:	bd70      	pop	{r4, r5, r6, pc}
1a001cc8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a001ccc:	ea46 0101 	orr.w	r1, r6, r1
1a001cd0:	ea40 0002 	orr.w	r0, r0, r2
1a001cd4:	ea81 0103 	eor.w	r1, r1, r3
1a001cd8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a001cdc:	bfc2      	ittt	gt
1a001cde:	ebd4 050c 	rsbsgt	r5, r4, ip
1a001ce2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a001ce6:	bd70      	popgt	{r4, r5, r6, pc}
1a001ce8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a001cec:	f04f 0e00 	mov.w	lr, #0
1a001cf0:	3c01      	subs	r4, #1
1a001cf2:	f300 80ab 	bgt.w	1a001e4c <__aeabi_dmul+0x238>
1a001cf6:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a001cfa:	bfde      	ittt	le
1a001cfc:	2000      	movle	r0, #0
1a001cfe:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a001d02:	bd70      	pople	{r4, r5, r6, pc}
1a001d04:	f1c4 0400 	rsb	r4, r4, #0
1a001d08:	3c20      	subs	r4, #32
1a001d0a:	da35      	bge.n	1a001d78 <__aeabi_dmul+0x164>
1a001d0c:	340c      	adds	r4, #12
1a001d0e:	dc1b      	bgt.n	1a001d48 <__aeabi_dmul+0x134>
1a001d10:	f104 0414 	add.w	r4, r4, #20
1a001d14:	f1c4 0520 	rsb	r5, r4, #32
1a001d18:	fa00 f305 	lsl.w	r3, r0, r5
1a001d1c:	fa20 f004 	lsr.w	r0, r0, r4
1a001d20:	fa01 f205 	lsl.w	r2, r1, r5
1a001d24:	ea40 0002 	orr.w	r0, r0, r2
1a001d28:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a001d2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a001d30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a001d34:	fa21 f604 	lsr.w	r6, r1, r4
1a001d38:	eb42 0106 	adc.w	r1, r2, r6
1a001d3c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a001d40:	bf08      	it	eq
1a001d42:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a001d46:	bd70      	pop	{r4, r5, r6, pc}
1a001d48:	f1c4 040c 	rsb	r4, r4, #12
1a001d4c:	f1c4 0520 	rsb	r5, r4, #32
1a001d50:	fa00 f304 	lsl.w	r3, r0, r4
1a001d54:	fa20 f005 	lsr.w	r0, r0, r5
1a001d58:	fa01 f204 	lsl.w	r2, r1, r4
1a001d5c:	ea40 0002 	orr.w	r0, r0, r2
1a001d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001d64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a001d68:	f141 0100 	adc.w	r1, r1, #0
1a001d6c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a001d70:	bf08      	it	eq
1a001d72:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a001d76:	bd70      	pop	{r4, r5, r6, pc}
1a001d78:	f1c4 0520 	rsb	r5, r4, #32
1a001d7c:	fa00 f205 	lsl.w	r2, r0, r5
1a001d80:	ea4e 0e02 	orr.w	lr, lr, r2
1a001d84:	fa20 f304 	lsr.w	r3, r0, r4
1a001d88:	fa01 f205 	lsl.w	r2, r1, r5
1a001d8c:	ea43 0302 	orr.w	r3, r3, r2
1a001d90:	fa21 f004 	lsr.w	r0, r1, r4
1a001d94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001d98:	fa21 f204 	lsr.w	r2, r1, r4
1a001d9c:	ea20 0002 	bic.w	r0, r0, r2
1a001da0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a001da4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a001da8:	bf08      	it	eq
1a001daa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a001dae:	bd70      	pop	{r4, r5, r6, pc}
1a001db0:	f094 0f00 	teq	r4, #0
1a001db4:	d10f      	bne.n	1a001dd6 <__aeabi_dmul+0x1c2>
1a001db6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a001dba:	0040      	lsls	r0, r0, #1
1a001dbc:	eb41 0101 	adc.w	r1, r1, r1
1a001dc0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001dc4:	bf08      	it	eq
1a001dc6:	3c01      	subeq	r4, #1
1a001dc8:	d0f7      	beq.n	1a001dba <__aeabi_dmul+0x1a6>
1a001dca:	ea41 0106 	orr.w	r1, r1, r6
1a001dce:	f095 0f00 	teq	r5, #0
1a001dd2:	bf18      	it	ne
1a001dd4:	4770      	bxne	lr
1a001dd6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a001dda:	0052      	lsls	r2, r2, #1
1a001ddc:	eb43 0303 	adc.w	r3, r3, r3
1a001de0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a001de4:	bf08      	it	eq
1a001de6:	3d01      	subeq	r5, #1
1a001de8:	d0f7      	beq.n	1a001dda <__aeabi_dmul+0x1c6>
1a001dea:	ea43 0306 	orr.w	r3, r3, r6
1a001dee:	4770      	bx	lr
1a001df0:	ea94 0f0c 	teq	r4, ip
1a001df4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a001df8:	bf18      	it	ne
1a001dfa:	ea95 0f0c 	teqne	r5, ip
1a001dfe:	d00c      	beq.n	1a001e1a <__aeabi_dmul+0x206>
1a001e00:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a001e04:	bf18      	it	ne
1a001e06:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a001e0a:	d1d1      	bne.n	1a001db0 <__aeabi_dmul+0x19c>
1a001e0c:	ea81 0103 	eor.w	r1, r1, r3
1a001e10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001e14:	f04f 0000 	mov.w	r0, #0
1a001e18:	bd70      	pop	{r4, r5, r6, pc}
1a001e1a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a001e1e:	bf06      	itte	eq
1a001e20:	4610      	moveq	r0, r2
1a001e22:	4619      	moveq	r1, r3
1a001e24:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a001e28:	d019      	beq.n	1a001e5e <__aeabi_dmul+0x24a>
1a001e2a:	ea94 0f0c 	teq	r4, ip
1a001e2e:	d102      	bne.n	1a001e36 <__aeabi_dmul+0x222>
1a001e30:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a001e34:	d113      	bne.n	1a001e5e <__aeabi_dmul+0x24a>
1a001e36:	ea95 0f0c 	teq	r5, ip
1a001e3a:	d105      	bne.n	1a001e48 <__aeabi_dmul+0x234>
1a001e3c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a001e40:	bf1c      	itt	ne
1a001e42:	4610      	movne	r0, r2
1a001e44:	4619      	movne	r1, r3
1a001e46:	d10a      	bne.n	1a001e5e <__aeabi_dmul+0x24a>
1a001e48:	ea81 0103 	eor.w	r1, r1, r3
1a001e4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a001e50:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a001e54:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a001e58:	f04f 0000 	mov.w	r0, #0
1a001e5c:	bd70      	pop	{r4, r5, r6, pc}
1a001e5e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a001e62:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a001e66:	bd70      	pop	{r4, r5, r6, pc}

1a001e68 <__aeabi_ddiv>:
1a001e68:	b570      	push	{r4, r5, r6, lr}
1a001e6a:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a001e6e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a001e72:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a001e76:	bf1d      	ittte	ne
1a001e78:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a001e7c:	ea94 0f0c 	teqne	r4, ip
1a001e80:	ea95 0f0c 	teqne	r5, ip
1a001e84:	f000 f8a7 	bleq	1a001fd6 <__aeabi_ddiv+0x16e>
1a001e88:	eba4 0405 	sub.w	r4, r4, r5
1a001e8c:	ea81 0e03 	eor.w	lr, r1, r3
1a001e90:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a001e94:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a001e98:	f000 8088 	beq.w	1a001fac <__aeabi_ddiv+0x144>
1a001e9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a001ea0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a001ea4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a001ea8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a001eac:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a001eb0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a001eb4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a001eb8:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a001ebc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a001ec0:	429d      	cmp	r5, r3
1a001ec2:	bf08      	it	eq
1a001ec4:	4296      	cmpeq	r6, r2
1a001ec6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a001eca:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a001ece:	d202      	bcs.n	1a001ed6 <__aeabi_ddiv+0x6e>
1a001ed0:	085b      	lsrs	r3, r3, #1
1a001ed2:	ea4f 0232 	mov.w	r2, r2, rrx
1a001ed6:	1ab6      	subs	r6, r6, r2
1a001ed8:	eb65 0503 	sbc.w	r5, r5, r3
1a001edc:	085b      	lsrs	r3, r3, #1
1a001ede:	ea4f 0232 	mov.w	r2, r2, rrx
1a001ee2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a001ee6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a001eea:	ebb6 0e02 	subs.w	lr, r6, r2
1a001eee:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001ef2:	bf22      	ittt	cs
1a001ef4:	1ab6      	subcs	r6, r6, r2
1a001ef6:	4675      	movcs	r5, lr
1a001ef8:	ea40 000c 	orrcs.w	r0, r0, ip
1a001efc:	085b      	lsrs	r3, r3, #1
1a001efe:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f02:	ebb6 0e02 	subs.w	lr, r6, r2
1a001f06:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001f0a:	bf22      	ittt	cs
1a001f0c:	1ab6      	subcs	r6, r6, r2
1a001f0e:	4675      	movcs	r5, lr
1a001f10:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a001f14:	085b      	lsrs	r3, r3, #1
1a001f16:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f1a:	ebb6 0e02 	subs.w	lr, r6, r2
1a001f1e:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001f22:	bf22      	ittt	cs
1a001f24:	1ab6      	subcs	r6, r6, r2
1a001f26:	4675      	movcs	r5, lr
1a001f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a001f2c:	085b      	lsrs	r3, r3, #1
1a001f2e:	ea4f 0232 	mov.w	r2, r2, rrx
1a001f32:	ebb6 0e02 	subs.w	lr, r6, r2
1a001f36:	eb75 0e03 	sbcs.w	lr, r5, r3
1a001f3a:	bf22      	ittt	cs
1a001f3c:	1ab6      	subcs	r6, r6, r2
1a001f3e:	4675      	movcs	r5, lr
1a001f40:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a001f44:	ea55 0e06 	orrs.w	lr, r5, r6
1a001f48:	d018      	beq.n	1a001f7c <__aeabi_ddiv+0x114>
1a001f4a:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a001f4e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a001f52:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a001f56:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a001f5a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a001f5e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a001f62:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a001f66:	d1c0      	bne.n	1a001eea <__aeabi_ddiv+0x82>
1a001f68:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001f6c:	d10b      	bne.n	1a001f86 <__aeabi_ddiv+0x11e>
1a001f6e:	ea41 0100 	orr.w	r1, r1, r0
1a001f72:	f04f 0000 	mov.w	r0, #0
1a001f76:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a001f7a:	e7b6      	b.n	1a001eea <__aeabi_ddiv+0x82>
1a001f7c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a001f80:	bf04      	itt	eq
1a001f82:	4301      	orreq	r1, r0
1a001f84:	2000      	moveq	r0, #0
1a001f86:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a001f8a:	bf88      	it	hi
1a001f8c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a001f90:	f63f aeaf 	bhi.w	1a001cf2 <__aeabi_dmul+0xde>
1a001f94:	ebb5 0c03 	subs.w	ip, r5, r3
1a001f98:	bf04      	itt	eq
1a001f9a:	ebb6 0c02 	subseq.w	ip, r6, r2
1a001f9e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a001fa2:	f150 0000 	adcs.w	r0, r0, #0
1a001fa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a001faa:	bd70      	pop	{r4, r5, r6, pc}
1a001fac:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a001fb0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a001fb4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a001fb8:	bfc2      	ittt	gt
1a001fba:	ebd4 050c 	rsbsgt	r5, r4, ip
1a001fbe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a001fc2:	bd70      	popgt	{r4, r5, r6, pc}
1a001fc4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a001fc8:	f04f 0e00 	mov.w	lr, #0
1a001fcc:	3c01      	subs	r4, #1
1a001fce:	e690      	b.n	1a001cf2 <__aeabi_dmul+0xde>
1a001fd0:	ea45 0e06 	orr.w	lr, r5, r6
1a001fd4:	e68d      	b.n	1a001cf2 <__aeabi_dmul+0xde>
1a001fd6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a001fda:	ea94 0f0c 	teq	r4, ip
1a001fde:	bf08      	it	eq
1a001fe0:	ea95 0f0c 	teqeq	r5, ip
1a001fe4:	f43f af3b 	beq.w	1a001e5e <__aeabi_dmul+0x24a>
1a001fe8:	ea94 0f0c 	teq	r4, ip
1a001fec:	d10a      	bne.n	1a002004 <__aeabi_ddiv+0x19c>
1a001fee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a001ff2:	f47f af34 	bne.w	1a001e5e <__aeabi_dmul+0x24a>
1a001ff6:	ea95 0f0c 	teq	r5, ip
1a001ffa:	f47f af25 	bne.w	1a001e48 <__aeabi_dmul+0x234>
1a001ffe:	4610      	mov	r0, r2
1a002000:	4619      	mov	r1, r3
1a002002:	e72c      	b.n	1a001e5e <__aeabi_dmul+0x24a>
1a002004:	ea95 0f0c 	teq	r5, ip
1a002008:	d106      	bne.n	1a002018 <__aeabi_ddiv+0x1b0>
1a00200a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00200e:	f43f aefd 	beq.w	1a001e0c <__aeabi_dmul+0x1f8>
1a002012:	4610      	mov	r0, r2
1a002014:	4619      	mov	r1, r3
1a002016:	e722      	b.n	1a001e5e <__aeabi_dmul+0x24a>
1a002018:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00201c:	bf18      	it	ne
1a00201e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a002022:	f47f aec5 	bne.w	1a001db0 <__aeabi_dmul+0x19c>
1a002026:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a00202a:	f47f af0d 	bne.w	1a001e48 <__aeabi_dmul+0x234>
1a00202e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a002032:	f47f aeeb 	bne.w	1a001e0c <__aeabi_dmul+0x1f8>
1a002036:	e712      	b.n	1a001e5e <__aeabi_dmul+0x24a>

1a002038 <__divdi3>:
1a002038:	2900      	cmp	r1, #0
1a00203a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00203e:	f2c0 80a6 	blt.w	1a00218e <__divdi3+0x156>
1a002042:	2600      	movs	r6, #0
1a002044:	2b00      	cmp	r3, #0
1a002046:	f2c0 809c 	blt.w	1a002182 <__divdi3+0x14a>
1a00204a:	4688      	mov	r8, r1
1a00204c:	4694      	mov	ip, r2
1a00204e:	469e      	mov	lr, r3
1a002050:	4615      	mov	r5, r2
1a002052:	4604      	mov	r4, r0
1a002054:	460f      	mov	r7, r1
1a002056:	2b00      	cmp	r3, #0
1a002058:	d13d      	bne.n	1a0020d6 <__divdi3+0x9e>
1a00205a:	428a      	cmp	r2, r1
1a00205c:	d959      	bls.n	1a002112 <__divdi3+0xda>
1a00205e:	fab2 f382 	clz	r3, r2
1a002062:	b13b      	cbz	r3, 1a002074 <__divdi3+0x3c>
1a002064:	f1c3 0220 	rsb	r2, r3, #32
1a002068:	409f      	lsls	r7, r3
1a00206a:	fa20 f202 	lsr.w	r2, r0, r2
1a00206e:	409d      	lsls	r5, r3
1a002070:	4317      	orrs	r7, r2
1a002072:	409c      	lsls	r4, r3
1a002074:	0c29      	lsrs	r1, r5, #16
1a002076:	0c22      	lsrs	r2, r4, #16
1a002078:	fbb7 fef1 	udiv	lr, r7, r1
1a00207c:	b2a8      	uxth	r0, r5
1a00207e:	fb01 771e 	mls	r7, r1, lr, r7
1a002082:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a002086:	fb00 f30e 	mul.w	r3, r0, lr
1a00208a:	42bb      	cmp	r3, r7
1a00208c:	d90a      	bls.n	1a0020a4 <__divdi3+0x6c>
1a00208e:	197f      	adds	r7, r7, r5
1a002090:	f10e 32ff 	add.w	r2, lr, #4294967295
1a002094:	f080 8105 	bcs.w	1a0022a2 <__divdi3+0x26a>
1a002098:	42bb      	cmp	r3, r7
1a00209a:	f240 8102 	bls.w	1a0022a2 <__divdi3+0x26a>
1a00209e:	f1ae 0e02 	sub.w	lr, lr, #2
1a0020a2:	442f      	add	r7, r5
1a0020a4:	1aff      	subs	r7, r7, r3
1a0020a6:	b2a4      	uxth	r4, r4
1a0020a8:	fbb7 f3f1 	udiv	r3, r7, r1
1a0020ac:	fb01 7713 	mls	r7, r1, r3, r7
1a0020b0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0020b4:	fb00 f003 	mul.w	r0, r0, r3
1a0020b8:	42b8      	cmp	r0, r7
1a0020ba:	d908      	bls.n	1a0020ce <__divdi3+0x96>
1a0020bc:	197f      	adds	r7, r7, r5
1a0020be:	f103 32ff 	add.w	r2, r3, #4294967295
1a0020c2:	f080 80f0 	bcs.w	1a0022a6 <__divdi3+0x26e>
1a0020c6:	42b8      	cmp	r0, r7
1a0020c8:	f240 80ed 	bls.w	1a0022a6 <__divdi3+0x26e>
1a0020cc:	3b02      	subs	r3, #2
1a0020ce:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a0020d2:	2200      	movs	r2, #0
1a0020d4:	e003      	b.n	1a0020de <__divdi3+0xa6>
1a0020d6:	428b      	cmp	r3, r1
1a0020d8:	d90f      	bls.n	1a0020fa <__divdi3+0xc2>
1a0020da:	2200      	movs	r2, #0
1a0020dc:	4613      	mov	r3, r2
1a0020de:	1c34      	adds	r4, r6, #0
1a0020e0:	bf18      	it	ne
1a0020e2:	2401      	movne	r4, #1
1a0020e4:	4260      	negs	r0, r4
1a0020e6:	f04f 0500 	mov.w	r5, #0
1a0020ea:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0020ee:	4058      	eors	r0, r3
1a0020f0:	4051      	eors	r1, r2
1a0020f2:	1900      	adds	r0, r0, r4
1a0020f4:	4169      	adcs	r1, r5
1a0020f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0020fa:	fab3 f283 	clz	r2, r3
1a0020fe:	2a00      	cmp	r2, #0
1a002100:	f040 8086 	bne.w	1a002210 <__divdi3+0x1d8>
1a002104:	428b      	cmp	r3, r1
1a002106:	d302      	bcc.n	1a00210e <__divdi3+0xd6>
1a002108:	4584      	cmp	ip, r0
1a00210a:	f200 80db 	bhi.w	1a0022c4 <__divdi3+0x28c>
1a00210e:	2301      	movs	r3, #1
1a002110:	e7e5      	b.n	1a0020de <__divdi3+0xa6>
1a002112:	b912      	cbnz	r2, 1a00211a <__divdi3+0xe2>
1a002114:	2301      	movs	r3, #1
1a002116:	fbb3 f5f2 	udiv	r5, r3, r2
1a00211a:	fab5 f085 	clz	r0, r5
1a00211e:	2800      	cmp	r0, #0
1a002120:	d13b      	bne.n	1a00219a <__divdi3+0x162>
1a002122:	1b78      	subs	r0, r7, r5
1a002124:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002128:	fa1f fc85 	uxth.w	ip, r5
1a00212c:	2201      	movs	r2, #1
1a00212e:	fbb0 f8fe 	udiv	r8, r0, lr
1a002132:	0c21      	lsrs	r1, r4, #16
1a002134:	fb0e 0718 	mls	r7, lr, r8, r0
1a002138:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a00213c:	fb0c f308 	mul.w	r3, ip, r8
1a002140:	42bb      	cmp	r3, r7
1a002142:	d907      	bls.n	1a002154 <__divdi3+0x11c>
1a002144:	197f      	adds	r7, r7, r5
1a002146:	f108 31ff 	add.w	r1, r8, #4294967295
1a00214a:	d202      	bcs.n	1a002152 <__divdi3+0x11a>
1a00214c:	42bb      	cmp	r3, r7
1a00214e:	f200 80bd 	bhi.w	1a0022cc <__divdi3+0x294>
1a002152:	4688      	mov	r8, r1
1a002154:	1aff      	subs	r7, r7, r3
1a002156:	b2a4      	uxth	r4, r4
1a002158:	fbb7 f3fe 	udiv	r3, r7, lr
1a00215c:	fb0e 7713 	mls	r7, lr, r3, r7
1a002160:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a002164:	fb0c fc03 	mul.w	ip, ip, r3
1a002168:	45bc      	cmp	ip, r7
1a00216a:	d907      	bls.n	1a00217c <__divdi3+0x144>
1a00216c:	197f      	adds	r7, r7, r5
1a00216e:	f103 31ff 	add.w	r1, r3, #4294967295
1a002172:	d202      	bcs.n	1a00217a <__divdi3+0x142>
1a002174:	45bc      	cmp	ip, r7
1a002176:	f200 80a7 	bhi.w	1a0022c8 <__divdi3+0x290>
1a00217a:	460b      	mov	r3, r1
1a00217c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002180:	e7ad      	b.n	1a0020de <__divdi3+0xa6>
1a002182:	4252      	negs	r2, r2
1a002184:	ea6f 0606 	mvn.w	r6, r6
1a002188:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a00218c:	e75d      	b.n	1a00204a <__divdi3+0x12>
1a00218e:	4240      	negs	r0, r0
1a002190:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a002194:	f04f 36ff 	mov.w	r6, #4294967295
1a002198:	e754      	b.n	1a002044 <__divdi3+0xc>
1a00219a:	f1c0 0220 	rsb	r2, r0, #32
1a00219e:	fa24 f102 	lsr.w	r1, r4, r2
1a0021a2:	fa07 f300 	lsl.w	r3, r7, r0
1a0021a6:	4085      	lsls	r5, r0
1a0021a8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0021ac:	40d7      	lsrs	r7, r2
1a0021ae:	4319      	orrs	r1, r3
1a0021b0:	fbb7 f2fe 	udiv	r2, r7, lr
1a0021b4:	0c0b      	lsrs	r3, r1, #16
1a0021b6:	fb0e 7712 	mls	r7, lr, r2, r7
1a0021ba:	fa1f fc85 	uxth.w	ip, r5
1a0021be:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a0021c2:	fb0c f702 	mul.w	r7, ip, r2
1a0021c6:	429f      	cmp	r7, r3
1a0021c8:	fa04 f400 	lsl.w	r4, r4, r0
1a0021cc:	d907      	bls.n	1a0021de <__divdi3+0x1a6>
1a0021ce:	195b      	adds	r3, r3, r5
1a0021d0:	f102 30ff 	add.w	r0, r2, #4294967295
1a0021d4:	d274      	bcs.n	1a0022c0 <__divdi3+0x288>
1a0021d6:	429f      	cmp	r7, r3
1a0021d8:	d972      	bls.n	1a0022c0 <__divdi3+0x288>
1a0021da:	3a02      	subs	r2, #2
1a0021dc:	442b      	add	r3, r5
1a0021de:	1bdf      	subs	r7, r3, r7
1a0021e0:	b289      	uxth	r1, r1
1a0021e2:	fbb7 f8fe 	udiv	r8, r7, lr
1a0021e6:	fb0e 7318 	mls	r3, lr, r8, r7
1a0021ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0021ee:	fb0c f708 	mul.w	r7, ip, r8
1a0021f2:	429f      	cmp	r7, r3
1a0021f4:	d908      	bls.n	1a002208 <__divdi3+0x1d0>
1a0021f6:	195b      	adds	r3, r3, r5
1a0021f8:	f108 31ff 	add.w	r1, r8, #4294967295
1a0021fc:	d25c      	bcs.n	1a0022b8 <__divdi3+0x280>
1a0021fe:	429f      	cmp	r7, r3
1a002200:	d95a      	bls.n	1a0022b8 <__divdi3+0x280>
1a002202:	f1a8 0802 	sub.w	r8, r8, #2
1a002206:	442b      	add	r3, r5
1a002208:	1bd8      	subs	r0, r3, r7
1a00220a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a00220e:	e78e      	b.n	1a00212e <__divdi3+0xf6>
1a002210:	f1c2 0320 	rsb	r3, r2, #32
1a002214:	fa2c f103 	lsr.w	r1, ip, r3
1a002218:	fa0e fe02 	lsl.w	lr, lr, r2
1a00221c:	fa20 f703 	lsr.w	r7, r0, r3
1a002220:	ea41 0e0e 	orr.w	lr, r1, lr
1a002224:	fa08 f002 	lsl.w	r0, r8, r2
1a002228:	fa28 f103 	lsr.w	r1, r8, r3
1a00222c:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a002230:	4338      	orrs	r0, r7
1a002232:	fbb1 f8f5 	udiv	r8, r1, r5
1a002236:	0c03      	lsrs	r3, r0, #16
1a002238:	fb05 1118 	mls	r1, r5, r8, r1
1a00223c:	fa1f f78e 	uxth.w	r7, lr
1a002240:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a002244:	fb07 f308 	mul.w	r3, r7, r8
1a002248:	428b      	cmp	r3, r1
1a00224a:	fa0c fc02 	lsl.w	ip, ip, r2
1a00224e:	d909      	bls.n	1a002264 <__divdi3+0x22c>
1a002250:	eb11 010e 	adds.w	r1, r1, lr
1a002254:	f108 39ff 	add.w	r9, r8, #4294967295
1a002258:	d230      	bcs.n	1a0022bc <__divdi3+0x284>
1a00225a:	428b      	cmp	r3, r1
1a00225c:	d92e      	bls.n	1a0022bc <__divdi3+0x284>
1a00225e:	f1a8 0802 	sub.w	r8, r8, #2
1a002262:	4471      	add	r1, lr
1a002264:	1ac9      	subs	r1, r1, r3
1a002266:	b280      	uxth	r0, r0
1a002268:	fbb1 f3f5 	udiv	r3, r1, r5
1a00226c:	fb05 1113 	mls	r1, r5, r3, r1
1a002270:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a002274:	fb07 f703 	mul.w	r7, r7, r3
1a002278:	428f      	cmp	r7, r1
1a00227a:	d908      	bls.n	1a00228e <__divdi3+0x256>
1a00227c:	eb11 010e 	adds.w	r1, r1, lr
1a002280:	f103 30ff 	add.w	r0, r3, #4294967295
1a002284:	d216      	bcs.n	1a0022b4 <__divdi3+0x27c>
1a002286:	428f      	cmp	r7, r1
1a002288:	d914      	bls.n	1a0022b4 <__divdi3+0x27c>
1a00228a:	3b02      	subs	r3, #2
1a00228c:	4471      	add	r1, lr
1a00228e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a002292:	1bc9      	subs	r1, r1, r7
1a002294:	fba3 890c 	umull	r8, r9, r3, ip
1a002298:	4549      	cmp	r1, r9
1a00229a:	d309      	bcc.n	1a0022b0 <__divdi3+0x278>
1a00229c:	d005      	beq.n	1a0022aa <__divdi3+0x272>
1a00229e:	2200      	movs	r2, #0
1a0022a0:	e71d      	b.n	1a0020de <__divdi3+0xa6>
1a0022a2:	4696      	mov	lr, r2
1a0022a4:	e6fe      	b.n	1a0020a4 <__divdi3+0x6c>
1a0022a6:	4613      	mov	r3, r2
1a0022a8:	e711      	b.n	1a0020ce <__divdi3+0x96>
1a0022aa:	4094      	lsls	r4, r2
1a0022ac:	4544      	cmp	r4, r8
1a0022ae:	d2f6      	bcs.n	1a00229e <__divdi3+0x266>
1a0022b0:	3b01      	subs	r3, #1
1a0022b2:	e7f4      	b.n	1a00229e <__divdi3+0x266>
1a0022b4:	4603      	mov	r3, r0
1a0022b6:	e7ea      	b.n	1a00228e <__divdi3+0x256>
1a0022b8:	4688      	mov	r8, r1
1a0022ba:	e7a5      	b.n	1a002208 <__divdi3+0x1d0>
1a0022bc:	46c8      	mov	r8, r9
1a0022be:	e7d1      	b.n	1a002264 <__divdi3+0x22c>
1a0022c0:	4602      	mov	r2, r0
1a0022c2:	e78c      	b.n	1a0021de <__divdi3+0x1a6>
1a0022c4:	4613      	mov	r3, r2
1a0022c6:	e70a      	b.n	1a0020de <__divdi3+0xa6>
1a0022c8:	3b02      	subs	r3, #2
1a0022ca:	e757      	b.n	1a00217c <__divdi3+0x144>
1a0022cc:	f1a8 0802 	sub.w	r8, r8, #2
1a0022d0:	442f      	add	r7, r5
1a0022d2:	e73f      	b.n	1a002154 <__divdi3+0x11c>

1a0022d4 <__udivdi3>:
1a0022d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0022d8:	2b00      	cmp	r3, #0
1a0022da:	d144      	bne.n	1a002366 <__udivdi3+0x92>
1a0022dc:	428a      	cmp	r2, r1
1a0022de:	4615      	mov	r5, r2
1a0022e0:	4604      	mov	r4, r0
1a0022e2:	d94f      	bls.n	1a002384 <__udivdi3+0xb0>
1a0022e4:	fab2 f782 	clz	r7, r2
1a0022e8:	460e      	mov	r6, r1
1a0022ea:	b14f      	cbz	r7, 1a002300 <__udivdi3+0x2c>
1a0022ec:	f1c7 0320 	rsb	r3, r7, #32
1a0022f0:	40b9      	lsls	r1, r7
1a0022f2:	fa20 f603 	lsr.w	r6, r0, r3
1a0022f6:	fa02 f507 	lsl.w	r5, r2, r7
1a0022fa:	430e      	orrs	r6, r1
1a0022fc:	fa00 f407 	lsl.w	r4, r0, r7
1a002300:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002304:	0c23      	lsrs	r3, r4, #16
1a002306:	fbb6 f0fe 	udiv	r0, r6, lr
1a00230a:	b2af      	uxth	r7, r5
1a00230c:	fb0e 6110 	mls	r1, lr, r0, r6
1a002310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a002314:	fb07 f100 	mul.w	r1, r7, r0
1a002318:	4299      	cmp	r1, r3
1a00231a:	d909      	bls.n	1a002330 <__udivdi3+0x5c>
1a00231c:	195b      	adds	r3, r3, r5
1a00231e:	f100 32ff 	add.w	r2, r0, #4294967295
1a002322:	f080 80ec 	bcs.w	1a0024fe <__udivdi3+0x22a>
1a002326:	4299      	cmp	r1, r3
1a002328:	f240 80e9 	bls.w	1a0024fe <__udivdi3+0x22a>
1a00232c:	3802      	subs	r0, #2
1a00232e:	442b      	add	r3, r5
1a002330:	1a5a      	subs	r2, r3, r1
1a002332:	b2a4      	uxth	r4, r4
1a002334:	fbb2 f3fe 	udiv	r3, r2, lr
1a002338:	fb0e 2213 	mls	r2, lr, r3, r2
1a00233c:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a002340:	fb07 f703 	mul.w	r7, r7, r3
1a002344:	4297      	cmp	r7, r2
1a002346:	d908      	bls.n	1a00235a <__udivdi3+0x86>
1a002348:	1952      	adds	r2, r2, r5
1a00234a:	f103 31ff 	add.w	r1, r3, #4294967295
1a00234e:	f080 80d8 	bcs.w	1a002502 <__udivdi3+0x22e>
1a002352:	4297      	cmp	r7, r2
1a002354:	f240 80d5 	bls.w	1a002502 <__udivdi3+0x22e>
1a002358:	3b02      	subs	r3, #2
1a00235a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a00235e:	2600      	movs	r6, #0
1a002360:	4631      	mov	r1, r6
1a002362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002366:	428b      	cmp	r3, r1
1a002368:	d847      	bhi.n	1a0023fa <__udivdi3+0x126>
1a00236a:	fab3 f683 	clz	r6, r3
1a00236e:	2e00      	cmp	r6, #0
1a002370:	d148      	bne.n	1a002404 <__udivdi3+0x130>
1a002372:	428b      	cmp	r3, r1
1a002374:	d302      	bcc.n	1a00237c <__udivdi3+0xa8>
1a002376:	4282      	cmp	r2, r0
1a002378:	f200 80cd 	bhi.w	1a002516 <__udivdi3+0x242>
1a00237c:	2001      	movs	r0, #1
1a00237e:	4631      	mov	r1, r6
1a002380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002384:	b912      	cbnz	r2, 1a00238c <__udivdi3+0xb8>
1a002386:	2501      	movs	r5, #1
1a002388:	fbb5 f5f2 	udiv	r5, r5, r2
1a00238c:	fab5 f885 	clz	r8, r5
1a002390:	f1b8 0f00 	cmp.w	r8, #0
1a002394:	d177      	bne.n	1a002486 <__udivdi3+0x1b2>
1a002396:	1b4a      	subs	r2, r1, r5
1a002398:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00239c:	b2af      	uxth	r7, r5
1a00239e:	2601      	movs	r6, #1
1a0023a0:	fbb2 f0fe 	udiv	r0, r2, lr
1a0023a4:	0c23      	lsrs	r3, r4, #16
1a0023a6:	fb0e 2110 	mls	r1, lr, r0, r2
1a0023aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0023ae:	fb07 f300 	mul.w	r3, r7, r0
1a0023b2:	428b      	cmp	r3, r1
1a0023b4:	d907      	bls.n	1a0023c6 <__udivdi3+0xf2>
1a0023b6:	1949      	adds	r1, r1, r5
1a0023b8:	f100 32ff 	add.w	r2, r0, #4294967295
1a0023bc:	d202      	bcs.n	1a0023c4 <__udivdi3+0xf0>
1a0023be:	428b      	cmp	r3, r1
1a0023c0:	f200 80ba 	bhi.w	1a002538 <__udivdi3+0x264>
1a0023c4:	4610      	mov	r0, r2
1a0023c6:	1ac9      	subs	r1, r1, r3
1a0023c8:	b2a4      	uxth	r4, r4
1a0023ca:	fbb1 f3fe 	udiv	r3, r1, lr
1a0023ce:	fb0e 1113 	mls	r1, lr, r3, r1
1a0023d2:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a0023d6:	fb07 f703 	mul.w	r7, r7, r3
1a0023da:	42a7      	cmp	r7, r4
1a0023dc:	d908      	bls.n	1a0023f0 <__udivdi3+0x11c>
1a0023de:	1964      	adds	r4, r4, r5
1a0023e0:	f103 32ff 	add.w	r2, r3, #4294967295
1a0023e4:	f080 808f 	bcs.w	1a002506 <__udivdi3+0x232>
1a0023e8:	42a7      	cmp	r7, r4
1a0023ea:	f240 808c 	bls.w	1a002506 <__udivdi3+0x232>
1a0023ee:	3b02      	subs	r3, #2
1a0023f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0023f4:	4631      	mov	r1, r6
1a0023f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0023fa:	2600      	movs	r6, #0
1a0023fc:	4630      	mov	r0, r6
1a0023fe:	4631      	mov	r1, r6
1a002400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002404:	f1c6 0420 	rsb	r4, r6, #32
1a002408:	fa22 f504 	lsr.w	r5, r2, r4
1a00240c:	40b3      	lsls	r3, r6
1a00240e:	432b      	orrs	r3, r5
1a002410:	fa20 fc04 	lsr.w	ip, r0, r4
1a002414:	fa01 f706 	lsl.w	r7, r1, r6
1a002418:	fa21 f504 	lsr.w	r5, r1, r4
1a00241c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a002420:	ea4c 0707 	orr.w	r7, ip, r7
1a002424:	fbb5 f8fe 	udiv	r8, r5, lr
1a002428:	0c39      	lsrs	r1, r7, #16
1a00242a:	fb0e 5518 	mls	r5, lr, r8, r5
1a00242e:	fa1f fc83 	uxth.w	ip, r3
1a002432:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a002436:	fb0c f108 	mul.w	r1, ip, r8
1a00243a:	42a9      	cmp	r1, r5
1a00243c:	fa02 f206 	lsl.w	r2, r2, r6
1a002440:	d904      	bls.n	1a00244c <__udivdi3+0x178>
1a002442:	18ed      	adds	r5, r5, r3
1a002444:	f108 34ff 	add.w	r4, r8, #4294967295
1a002448:	d367      	bcc.n	1a00251a <__udivdi3+0x246>
1a00244a:	46a0      	mov	r8, r4
1a00244c:	1a6d      	subs	r5, r5, r1
1a00244e:	b2bf      	uxth	r7, r7
1a002450:	fbb5 f4fe 	udiv	r4, r5, lr
1a002454:	fb0e 5514 	mls	r5, lr, r4, r5
1a002458:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a00245c:	fb0c fc04 	mul.w	ip, ip, r4
1a002460:	458c      	cmp	ip, r1
1a002462:	d904      	bls.n	1a00246e <__udivdi3+0x19a>
1a002464:	18c9      	adds	r1, r1, r3
1a002466:	f104 35ff 	add.w	r5, r4, #4294967295
1a00246a:	d35c      	bcc.n	1a002526 <__udivdi3+0x252>
1a00246c:	462c      	mov	r4, r5
1a00246e:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a002472:	ebcc 0101 	rsb	r1, ip, r1
1a002476:	fba4 2302 	umull	r2, r3, r4, r2
1a00247a:	4299      	cmp	r1, r3
1a00247c:	d348      	bcc.n	1a002510 <__udivdi3+0x23c>
1a00247e:	d044      	beq.n	1a00250a <__udivdi3+0x236>
1a002480:	4620      	mov	r0, r4
1a002482:	2600      	movs	r6, #0
1a002484:	e76c      	b.n	1a002360 <__udivdi3+0x8c>
1a002486:	f1c8 0420 	rsb	r4, r8, #32
1a00248a:	fa01 f308 	lsl.w	r3, r1, r8
1a00248e:	fa05 f508 	lsl.w	r5, r5, r8
1a002492:	fa20 f704 	lsr.w	r7, r0, r4
1a002496:	40e1      	lsrs	r1, r4
1a002498:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00249c:	431f      	orrs	r7, r3
1a00249e:	fbb1 f6fe 	udiv	r6, r1, lr
1a0024a2:	0c3a      	lsrs	r2, r7, #16
1a0024a4:	fb0e 1116 	mls	r1, lr, r6, r1
1a0024a8:	fa1f fc85 	uxth.w	ip, r5
1a0024ac:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0024b0:	fb0c f206 	mul.w	r2, ip, r6
1a0024b4:	429a      	cmp	r2, r3
1a0024b6:	fa00 f408 	lsl.w	r4, r0, r8
1a0024ba:	d907      	bls.n	1a0024cc <__udivdi3+0x1f8>
1a0024bc:	195b      	adds	r3, r3, r5
1a0024be:	f106 31ff 	add.w	r1, r6, #4294967295
1a0024c2:	d237      	bcs.n	1a002534 <__udivdi3+0x260>
1a0024c4:	429a      	cmp	r2, r3
1a0024c6:	d935      	bls.n	1a002534 <__udivdi3+0x260>
1a0024c8:	3e02      	subs	r6, #2
1a0024ca:	442b      	add	r3, r5
1a0024cc:	1a9b      	subs	r3, r3, r2
1a0024ce:	b2bf      	uxth	r7, r7
1a0024d0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0024d4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0024d8:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0024dc:	fb0c f100 	mul.w	r1, ip, r0
1a0024e0:	4299      	cmp	r1, r3
1a0024e2:	d907      	bls.n	1a0024f4 <__udivdi3+0x220>
1a0024e4:	195b      	adds	r3, r3, r5
1a0024e6:	f100 32ff 	add.w	r2, r0, #4294967295
1a0024ea:	d221      	bcs.n	1a002530 <__udivdi3+0x25c>
1a0024ec:	4299      	cmp	r1, r3
1a0024ee:	d91f      	bls.n	1a002530 <__udivdi3+0x25c>
1a0024f0:	3802      	subs	r0, #2
1a0024f2:	442b      	add	r3, r5
1a0024f4:	1a5a      	subs	r2, r3, r1
1a0024f6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0024fa:	4667      	mov	r7, ip
1a0024fc:	e750      	b.n	1a0023a0 <__udivdi3+0xcc>
1a0024fe:	4610      	mov	r0, r2
1a002500:	e716      	b.n	1a002330 <__udivdi3+0x5c>
1a002502:	460b      	mov	r3, r1
1a002504:	e729      	b.n	1a00235a <__udivdi3+0x86>
1a002506:	4613      	mov	r3, r2
1a002508:	e772      	b.n	1a0023f0 <__udivdi3+0x11c>
1a00250a:	40b0      	lsls	r0, r6
1a00250c:	4290      	cmp	r0, r2
1a00250e:	d2b7      	bcs.n	1a002480 <__udivdi3+0x1ac>
1a002510:	1e60      	subs	r0, r4, #1
1a002512:	2600      	movs	r6, #0
1a002514:	e724      	b.n	1a002360 <__udivdi3+0x8c>
1a002516:	4630      	mov	r0, r6
1a002518:	e722      	b.n	1a002360 <__udivdi3+0x8c>
1a00251a:	42a9      	cmp	r1, r5
1a00251c:	d995      	bls.n	1a00244a <__udivdi3+0x176>
1a00251e:	f1a8 0802 	sub.w	r8, r8, #2
1a002522:	441d      	add	r5, r3
1a002524:	e792      	b.n	1a00244c <__udivdi3+0x178>
1a002526:	458c      	cmp	ip, r1
1a002528:	d9a0      	bls.n	1a00246c <__udivdi3+0x198>
1a00252a:	3c02      	subs	r4, #2
1a00252c:	4419      	add	r1, r3
1a00252e:	e79e      	b.n	1a00246e <__udivdi3+0x19a>
1a002530:	4610      	mov	r0, r2
1a002532:	e7df      	b.n	1a0024f4 <__udivdi3+0x220>
1a002534:	460e      	mov	r6, r1
1a002536:	e7c9      	b.n	1a0024cc <__udivdi3+0x1f8>
1a002538:	3802      	subs	r0, #2
1a00253a:	4429      	add	r1, r5
1a00253c:	e743      	b.n	1a0023c6 <__udivdi3+0xf2>
1a00253e:	bf00      	nop

1a002540 <__libc_init_array>:
1a002540:	b570      	push	{r4, r5, r6, lr}
1a002542:	4e0f      	ldr	r6, [pc, #60]	; (1a002580 <__libc_init_array+0x40>)
1a002544:	4d0f      	ldr	r5, [pc, #60]	; (1a002584 <__libc_init_array+0x44>)
1a002546:	1b76      	subs	r6, r6, r5
1a002548:	10b6      	asrs	r6, r6, #2
1a00254a:	bf18      	it	ne
1a00254c:	2400      	movne	r4, #0
1a00254e:	d005      	beq.n	1a00255c <__libc_init_array+0x1c>
1a002550:	3401      	adds	r4, #1
1a002552:	f855 3b04 	ldr.w	r3, [r5], #4
1a002556:	4798      	blx	r3
1a002558:	42a6      	cmp	r6, r4
1a00255a:	d1f9      	bne.n	1a002550 <__libc_init_array+0x10>
1a00255c:	4e0a      	ldr	r6, [pc, #40]	; (1a002588 <__libc_init_array+0x48>)
1a00255e:	4d0b      	ldr	r5, [pc, #44]	; (1a00258c <__libc_init_array+0x4c>)
1a002560:	1b76      	subs	r6, r6, r5
1a002562:	f7ff f953 	bl	1a00180c <_init>
1a002566:	10b6      	asrs	r6, r6, #2
1a002568:	bf18      	it	ne
1a00256a:	2400      	movne	r4, #0
1a00256c:	d006      	beq.n	1a00257c <__libc_init_array+0x3c>
1a00256e:	3401      	adds	r4, #1
1a002570:	f855 3b04 	ldr.w	r3, [r5], #4
1a002574:	4798      	blx	r3
1a002576:	42a6      	cmp	r6, r4
1a002578:	d1f9      	bne.n	1a00256e <__libc_init_array+0x2e>
1a00257a:	bd70      	pop	{r4, r5, r6, pc}
1a00257c:	bd70      	pop	{r4, r5, r6, pc}
1a00257e:	bf00      	nop
1a002580:	1a007208 	.word	0x1a007208
1a002584:	1a007208 	.word	0x1a007208
1a002588:	1a007208 	.word	0x1a007208
1a00258c:	1a007208 	.word	0x1a007208

1a002590 <memcmp>:
1a002590:	2a03      	cmp	r2, #3
1a002592:	b470      	push	{r4, r5, r6}
1a002594:	d926      	bls.n	1a0025e4 <memcmp+0x54>
1a002596:	ea40 0301 	orr.w	r3, r0, r1
1a00259a:	079b      	lsls	r3, r3, #30
1a00259c:	d011      	beq.n	1a0025c2 <memcmp+0x32>
1a00259e:	7804      	ldrb	r4, [r0, #0]
1a0025a0:	780d      	ldrb	r5, [r1, #0]
1a0025a2:	42ac      	cmp	r4, r5
1a0025a4:	d122      	bne.n	1a0025ec <memcmp+0x5c>
1a0025a6:	4402      	add	r2, r0
1a0025a8:	1c43      	adds	r3, r0, #1
1a0025aa:	e005      	b.n	1a0025b8 <memcmp+0x28>
1a0025ac:	f813 4b01 	ldrb.w	r4, [r3], #1
1a0025b0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a0025b4:	42ac      	cmp	r4, r5
1a0025b6:	d119      	bne.n	1a0025ec <memcmp+0x5c>
1a0025b8:	4293      	cmp	r3, r2
1a0025ba:	d1f7      	bne.n	1a0025ac <memcmp+0x1c>
1a0025bc:	2000      	movs	r0, #0
1a0025be:	bc70      	pop	{r4, r5, r6}
1a0025c0:	4770      	bx	lr
1a0025c2:	460c      	mov	r4, r1
1a0025c4:	4603      	mov	r3, r0
1a0025c6:	681e      	ldr	r6, [r3, #0]
1a0025c8:	6825      	ldr	r5, [r4, #0]
1a0025ca:	42ae      	cmp	r6, r5
1a0025cc:	4618      	mov	r0, r3
1a0025ce:	4621      	mov	r1, r4
1a0025d0:	f103 0304 	add.w	r3, r3, #4
1a0025d4:	f104 0404 	add.w	r4, r4, #4
1a0025d8:	d104      	bne.n	1a0025e4 <memcmp+0x54>
1a0025da:	3a04      	subs	r2, #4
1a0025dc:	2a03      	cmp	r2, #3
1a0025de:	4618      	mov	r0, r3
1a0025e0:	4621      	mov	r1, r4
1a0025e2:	d8f0      	bhi.n	1a0025c6 <memcmp+0x36>
1a0025e4:	2a00      	cmp	r2, #0
1a0025e6:	d1da      	bne.n	1a00259e <memcmp+0xe>
1a0025e8:	4610      	mov	r0, r2
1a0025ea:	e7e8      	b.n	1a0025be <memcmp+0x2e>
1a0025ec:	1b60      	subs	r0, r4, r5
1a0025ee:	bc70      	pop	{r4, r5, r6}
1a0025f0:	4770      	bx	lr
1a0025f2:	bf00      	nop

1a0025f4 <memcpy>:
1a0025f4:	4684      	mov	ip, r0
1a0025f6:	ea41 0300 	orr.w	r3, r1, r0
1a0025fa:	f013 0303 	ands.w	r3, r3, #3
1a0025fe:	d16d      	bne.n	1a0026dc <memcpy+0xe8>
1a002600:	3a40      	subs	r2, #64	; 0x40
1a002602:	d341      	bcc.n	1a002688 <memcpy+0x94>
1a002604:	f851 3b04 	ldr.w	r3, [r1], #4
1a002608:	f840 3b04 	str.w	r3, [r0], #4
1a00260c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002610:	f840 3b04 	str.w	r3, [r0], #4
1a002614:	f851 3b04 	ldr.w	r3, [r1], #4
1a002618:	f840 3b04 	str.w	r3, [r0], #4
1a00261c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002620:	f840 3b04 	str.w	r3, [r0], #4
1a002624:	f851 3b04 	ldr.w	r3, [r1], #4
1a002628:	f840 3b04 	str.w	r3, [r0], #4
1a00262c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002630:	f840 3b04 	str.w	r3, [r0], #4
1a002634:	f851 3b04 	ldr.w	r3, [r1], #4
1a002638:	f840 3b04 	str.w	r3, [r0], #4
1a00263c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002640:	f840 3b04 	str.w	r3, [r0], #4
1a002644:	f851 3b04 	ldr.w	r3, [r1], #4
1a002648:	f840 3b04 	str.w	r3, [r0], #4
1a00264c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002650:	f840 3b04 	str.w	r3, [r0], #4
1a002654:	f851 3b04 	ldr.w	r3, [r1], #4
1a002658:	f840 3b04 	str.w	r3, [r0], #4
1a00265c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002660:	f840 3b04 	str.w	r3, [r0], #4
1a002664:	f851 3b04 	ldr.w	r3, [r1], #4
1a002668:	f840 3b04 	str.w	r3, [r0], #4
1a00266c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002670:	f840 3b04 	str.w	r3, [r0], #4
1a002674:	f851 3b04 	ldr.w	r3, [r1], #4
1a002678:	f840 3b04 	str.w	r3, [r0], #4
1a00267c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002680:	f840 3b04 	str.w	r3, [r0], #4
1a002684:	3a40      	subs	r2, #64	; 0x40
1a002686:	d2bd      	bcs.n	1a002604 <memcpy+0x10>
1a002688:	3230      	adds	r2, #48	; 0x30
1a00268a:	d311      	bcc.n	1a0026b0 <memcpy+0xbc>
1a00268c:	f851 3b04 	ldr.w	r3, [r1], #4
1a002690:	f840 3b04 	str.w	r3, [r0], #4
1a002694:	f851 3b04 	ldr.w	r3, [r1], #4
1a002698:	f840 3b04 	str.w	r3, [r0], #4
1a00269c:	f851 3b04 	ldr.w	r3, [r1], #4
1a0026a0:	f840 3b04 	str.w	r3, [r0], #4
1a0026a4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0026a8:	f840 3b04 	str.w	r3, [r0], #4
1a0026ac:	3a10      	subs	r2, #16
1a0026ae:	d2ed      	bcs.n	1a00268c <memcpy+0x98>
1a0026b0:	320c      	adds	r2, #12
1a0026b2:	d305      	bcc.n	1a0026c0 <memcpy+0xcc>
1a0026b4:	f851 3b04 	ldr.w	r3, [r1], #4
1a0026b8:	f840 3b04 	str.w	r3, [r0], #4
1a0026bc:	3a04      	subs	r2, #4
1a0026be:	d2f9      	bcs.n	1a0026b4 <memcpy+0xc0>
1a0026c0:	3204      	adds	r2, #4
1a0026c2:	d008      	beq.n	1a0026d6 <memcpy+0xe2>
1a0026c4:	07d2      	lsls	r2, r2, #31
1a0026c6:	bf1c      	itt	ne
1a0026c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0026cc:	f800 3b01 	strbne.w	r3, [r0], #1
1a0026d0:	d301      	bcc.n	1a0026d6 <memcpy+0xe2>
1a0026d2:	880b      	ldrh	r3, [r1, #0]
1a0026d4:	8003      	strh	r3, [r0, #0]
1a0026d6:	4660      	mov	r0, ip
1a0026d8:	4770      	bx	lr
1a0026da:	bf00      	nop
1a0026dc:	2a08      	cmp	r2, #8
1a0026de:	d313      	bcc.n	1a002708 <memcpy+0x114>
1a0026e0:	078b      	lsls	r3, r1, #30
1a0026e2:	d08d      	beq.n	1a002600 <memcpy+0xc>
1a0026e4:	f010 0303 	ands.w	r3, r0, #3
1a0026e8:	d08a      	beq.n	1a002600 <memcpy+0xc>
1a0026ea:	f1c3 0304 	rsb	r3, r3, #4
1a0026ee:	1ad2      	subs	r2, r2, r3
1a0026f0:	07db      	lsls	r3, r3, #31
1a0026f2:	bf1c      	itt	ne
1a0026f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0026f8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0026fc:	d380      	bcc.n	1a002600 <memcpy+0xc>
1a0026fe:	f831 3b02 	ldrh.w	r3, [r1], #2
1a002702:	f820 3b02 	strh.w	r3, [r0], #2
1a002706:	e77b      	b.n	1a002600 <memcpy+0xc>
1a002708:	3a04      	subs	r2, #4
1a00270a:	d3d9      	bcc.n	1a0026c0 <memcpy+0xcc>
1a00270c:	3a01      	subs	r2, #1
1a00270e:	f811 3b01 	ldrb.w	r3, [r1], #1
1a002712:	f800 3b01 	strb.w	r3, [r0], #1
1a002716:	d2f9      	bcs.n	1a00270c <memcpy+0x118>
1a002718:	780b      	ldrb	r3, [r1, #0]
1a00271a:	7003      	strb	r3, [r0, #0]
1a00271c:	784b      	ldrb	r3, [r1, #1]
1a00271e:	7043      	strb	r3, [r0, #1]
1a002720:	788b      	ldrb	r3, [r1, #2]
1a002722:	7083      	strb	r3, [r0, #2]
1a002724:	4660      	mov	r0, ip
1a002726:	4770      	bx	lr

1a002728 <memset>:
1a002728:	b470      	push	{r4, r5, r6}
1a00272a:	0784      	lsls	r4, r0, #30
1a00272c:	d046      	beq.n	1a0027bc <memset+0x94>
1a00272e:	1e54      	subs	r4, r2, #1
1a002730:	2a00      	cmp	r2, #0
1a002732:	d041      	beq.n	1a0027b8 <memset+0x90>
1a002734:	b2cd      	uxtb	r5, r1
1a002736:	4603      	mov	r3, r0
1a002738:	e002      	b.n	1a002740 <memset+0x18>
1a00273a:	1e62      	subs	r2, r4, #1
1a00273c:	b3e4      	cbz	r4, 1a0027b8 <memset+0x90>
1a00273e:	4614      	mov	r4, r2
1a002740:	f803 5b01 	strb.w	r5, [r3], #1
1a002744:	079a      	lsls	r2, r3, #30
1a002746:	d1f8      	bne.n	1a00273a <memset+0x12>
1a002748:	2c03      	cmp	r4, #3
1a00274a:	d92e      	bls.n	1a0027aa <memset+0x82>
1a00274c:	b2cd      	uxtb	r5, r1
1a00274e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
1a002752:	2c0f      	cmp	r4, #15
1a002754:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
1a002758:	d919      	bls.n	1a00278e <memset+0x66>
1a00275a:	f103 0210 	add.w	r2, r3, #16
1a00275e:	4626      	mov	r6, r4
1a002760:	3e10      	subs	r6, #16
1a002762:	2e0f      	cmp	r6, #15
1a002764:	f842 5c10 	str.w	r5, [r2, #-16]
1a002768:	f842 5c0c 	str.w	r5, [r2, #-12]
1a00276c:	f842 5c08 	str.w	r5, [r2, #-8]
1a002770:	f842 5c04 	str.w	r5, [r2, #-4]
1a002774:	f102 0210 	add.w	r2, r2, #16
1a002778:	d8f2      	bhi.n	1a002760 <memset+0x38>
1a00277a:	f1a4 0210 	sub.w	r2, r4, #16
1a00277e:	f022 020f 	bic.w	r2, r2, #15
1a002782:	f004 040f 	and.w	r4, r4, #15
1a002786:	3210      	adds	r2, #16
1a002788:	2c03      	cmp	r4, #3
1a00278a:	4413      	add	r3, r2
1a00278c:	d90d      	bls.n	1a0027aa <memset+0x82>
1a00278e:	461e      	mov	r6, r3
1a002790:	4622      	mov	r2, r4
1a002792:	3a04      	subs	r2, #4
1a002794:	2a03      	cmp	r2, #3
1a002796:	f846 5b04 	str.w	r5, [r6], #4
1a00279a:	d8fa      	bhi.n	1a002792 <memset+0x6a>
1a00279c:	1f22      	subs	r2, r4, #4
1a00279e:	f022 0203 	bic.w	r2, r2, #3
1a0027a2:	3204      	adds	r2, #4
1a0027a4:	4413      	add	r3, r2
1a0027a6:	f004 0403 	and.w	r4, r4, #3
1a0027aa:	b12c      	cbz	r4, 1a0027b8 <memset+0x90>
1a0027ac:	b2c9      	uxtb	r1, r1
1a0027ae:	441c      	add	r4, r3
1a0027b0:	f803 1b01 	strb.w	r1, [r3], #1
1a0027b4:	42a3      	cmp	r3, r4
1a0027b6:	d1fb      	bne.n	1a0027b0 <memset+0x88>
1a0027b8:	bc70      	pop	{r4, r5, r6}
1a0027ba:	4770      	bx	lr
1a0027bc:	4614      	mov	r4, r2
1a0027be:	4603      	mov	r3, r0
1a0027c0:	e7c2      	b.n	1a002748 <memset+0x20>
1a0027c2:	bf00      	nop

1a0027c4 <printf>:
1a0027c4:	b40f      	push	{r0, r1, r2, r3}
1a0027c6:	b500      	push	{lr}
1a0027c8:	4907      	ldr	r1, [pc, #28]	; (1a0027e8 <printf+0x24>)
1a0027ca:	b083      	sub	sp, #12
1a0027cc:	ab04      	add	r3, sp, #16
1a0027ce:	6808      	ldr	r0, [r1, #0]
1a0027d0:	f853 2b04 	ldr.w	r2, [r3], #4
1a0027d4:	6881      	ldr	r1, [r0, #8]
1a0027d6:	9301      	str	r3, [sp, #4]
1a0027d8:	f000 f836 	bl	1a002848 <_vfprintf_r>
1a0027dc:	b003      	add	sp, #12
1a0027de:	f85d eb04 	ldr.w	lr, [sp], #4
1a0027e2:	b004      	add	sp, #16
1a0027e4:	4770      	bx	lr
1a0027e6:	bf00      	nop
1a0027e8:	100004e8 	.word	0x100004e8

1a0027ec <strlen>:
1a0027ec:	f020 0103 	bic.w	r1, r0, #3
1a0027f0:	f010 0003 	ands.w	r0, r0, #3
1a0027f4:	f1c0 0000 	rsb	r0, r0, #0
1a0027f8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0027fc:	f100 0c04 	add.w	ip, r0, #4
1a002800:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
1a002804:	f06f 0200 	mvn.w	r2, #0
1a002808:	bf1c      	itt	ne
1a00280a:	fa22 f20c 	lsrne.w	r2, r2, ip
1a00280e:	4313      	orrne	r3, r2
1a002810:	f04f 0c01 	mov.w	ip, #1
1a002814:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
1a002818:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
1a00281c:	eba3 020c 	sub.w	r2, r3, ip
1a002820:	ea22 0203 	bic.w	r2, r2, r3
1a002824:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
1a002828:	bf04      	itt	eq
1a00282a:	f851 3b04 	ldreq.w	r3, [r1], #4
1a00282e:	3004      	addeq	r0, #4
1a002830:	d0f4      	beq.n	1a00281c <strlen+0x30>
1a002832:	f1c2 0100 	rsb	r1, r2, #0
1a002836:	ea02 0201 	and.w	r2, r2, r1
1a00283a:	fab2 f282 	clz	r2, r2
1a00283e:	f1c2 021f 	rsb	r2, r2, #31
1a002842:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a002846:	4770      	bx	lr

1a002848 <_vfprintf_r>:
1a002848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00284c:	b0bd      	sub	sp, #244	; 0xf4
1a00284e:	461c      	mov	r4, r3
1a002850:	4689      	mov	r9, r1
1a002852:	9204      	str	r2, [sp, #16]
1a002854:	4607      	mov	r7, r0
1a002856:	f002 fec1 	bl	1a0055dc <_localeconv_r>
1a00285a:	6803      	ldr	r3, [r0, #0]
1a00285c:	9311      	str	r3, [sp, #68]	; 0x44
1a00285e:	4618      	mov	r0, r3
1a002860:	f7ff ffc4 	bl	1a0027ec <strlen>
1a002864:	9408      	str	r4, [sp, #32]
1a002866:	9012      	str	r0, [sp, #72]	; 0x48
1a002868:	b11f      	cbz	r7, 1a002872 <_vfprintf_r+0x2a>
1a00286a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
1a00286c:	2b00      	cmp	r3, #0
1a00286e:	f000 80f3 	beq.w	1a002a58 <_vfprintf_r+0x210>
1a002872:	f8b9 200c 	ldrh.w	r2, [r9, #12]
1a002876:	b293      	uxth	r3, r2
1a002878:	049e      	lsls	r6, r3, #18
1a00287a:	d40a      	bmi.n	1a002892 <_vfprintf_r+0x4a>
1a00287c:	f8d9 1064 	ldr.w	r1, [r9, #100]	; 0x64
1a002880:	f442 5300 	orr.w	r3, r2, #8192	; 0x2000
1a002884:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a002888:	f8a9 300c 	strh.w	r3, [r9, #12]
1a00288c:	f8c9 1064 	str.w	r1, [r9, #100]	; 0x64
1a002890:	b29b      	uxth	r3, r3
1a002892:	071d      	lsls	r5, r3, #28
1a002894:	f140 80aa 	bpl.w	1a0029ec <_vfprintf_r+0x1a4>
1a002898:	f8d9 2010 	ldr.w	r2, [r9, #16]
1a00289c:	2a00      	cmp	r2, #0
1a00289e:	f000 80a5 	beq.w	1a0029ec <_vfprintf_r+0x1a4>
1a0028a2:	f003 031a 	and.w	r3, r3, #26
1a0028a6:	2b0a      	cmp	r3, #10
1a0028a8:	f000 80ac 	beq.w	1a002a04 <_vfprintf_r+0x1bc>
1a0028ac:	ed9f 7b6e 	vldr	d7, [pc, #440]	; 1a002a68 <_vfprintf_r+0x220>
1a0028b0:	2300      	movs	r3, #0
1a0028b2:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a0028b6:	930d      	str	r3, [sp, #52]	; 0x34
1a0028b8:	9321      	str	r3, [sp, #132]	; 0x84
1a0028ba:	9320      	str	r3, [sp, #128]	; 0x80
1a0028bc:	9310      	str	r3, [sp, #64]	; 0x40
1a0028be:	9313      	str	r3, [sp, #76]	; 0x4c
1a0028c0:	9305      	str	r3, [sp, #20]
1a0028c2:	ab2c      	add	r3, sp, #176	; 0xb0
1a0028c4:	931f      	str	r3, [sp, #124]	; 0x7c
1a0028c6:	461c      	mov	r4, r3
1a0028c8:	46b8      	mov	r8, r7
1a0028ca:	9d04      	ldr	r5, [sp, #16]
1a0028cc:	782b      	ldrb	r3, [r5, #0]
1a0028ce:	2b00      	cmp	r3, #0
1a0028d0:	f000 80c6 	beq.w	1a002a60 <_vfprintf_r+0x218>
1a0028d4:	2b25      	cmp	r3, #37	; 0x25
1a0028d6:	d102      	bne.n	1a0028de <_vfprintf_r+0x96>
1a0028d8:	e0c2      	b.n	1a002a60 <_vfprintf_r+0x218>
1a0028da:	2b25      	cmp	r3, #37	; 0x25
1a0028dc:	d003      	beq.n	1a0028e6 <_vfprintf_r+0x9e>
1a0028de:	f815 3f01 	ldrb.w	r3, [r5, #1]!
1a0028e2:	2b00      	cmp	r3, #0
1a0028e4:	d1f9      	bne.n	1a0028da <_vfprintf_r+0x92>
1a0028e6:	9b04      	ldr	r3, [sp, #16]
1a0028e8:	1aee      	subs	r6, r5, r3
1a0028ea:	b17e      	cbz	r6, 1a00290c <_vfprintf_r+0xc4>
1a0028ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0028ee:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0028f0:	9904      	ldr	r1, [sp, #16]
1a0028f2:	6021      	str	r1, [r4, #0]
1a0028f4:	3301      	adds	r3, #1
1a0028f6:	4432      	add	r2, r6
1a0028f8:	2b07      	cmp	r3, #7
1a0028fa:	6066      	str	r6, [r4, #4]
1a0028fc:	9221      	str	r2, [sp, #132]	; 0x84
1a0028fe:	9320      	str	r3, [sp, #128]	; 0x80
1a002900:	f300 8093 	bgt.w	1a002a2a <_vfprintf_r+0x1e2>
1a002904:	3408      	adds	r4, #8
1a002906:	9b05      	ldr	r3, [sp, #20]
1a002908:	4433      	add	r3, r6
1a00290a:	9305      	str	r3, [sp, #20]
1a00290c:	782b      	ldrb	r3, [r5, #0]
1a00290e:	2b00      	cmp	r3, #0
1a002910:	f000 8093 	beq.w	1a002a3a <_vfprintf_r+0x1f2>
1a002914:	2300      	movs	r3, #0
1a002916:	1c69      	adds	r1, r5, #1
1a002918:	f04f 3aff 	mov.w	sl, #4294967295
1a00291c:	786d      	ldrb	r5, [r5, #1]
1a00291e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
1a002922:	461a      	mov	r2, r3
1a002924:	9306      	str	r3, [sp, #24]
1a002926:	9302      	str	r3, [sp, #8]
1a002928:	4656      	mov	r6, sl
1a00292a:	1c4b      	adds	r3, r1, #1
1a00292c:	f1a5 0120 	sub.w	r1, r5, #32
1a002930:	2958      	cmp	r1, #88	; 0x58
1a002932:	f200 83cd 	bhi.w	1a0030d0 <_vfprintf_r+0x888>
1a002936:	e8df f011 	tbh	[pc, r1, lsl #1]
1a00293a:	025c      	.short	0x025c
1a00293c:	03cb03cb 	.word	0x03cb03cb
1a002940:	03cb0302 	.word	0x03cb0302
1a002944:	03cb03cb 	.word	0x03cb03cb
1a002948:	03cb03cb 	.word	0x03cb03cb
1a00294c:	030903cb 	.word	0x030903cb
1a002950:	03cb02d2 	.word	0x03cb02d2
1a002954:	035301f8 	.word	0x035301f8
1a002958:	02d603cb 	.word	0x02d603cb
1a00295c:	02dd02dd 	.word	0x02dd02dd
1a002960:	02dd02dd 	.word	0x02dd02dd
1a002964:	02dd02dd 	.word	0x02dd02dd
1a002968:	02dd02dd 	.word	0x02dd02dd
1a00296c:	03cb02dd 	.word	0x03cb02dd
1a002970:	03cb03cb 	.word	0x03cb03cb
1a002974:	03cb03cb 	.word	0x03cb03cb
1a002978:	03cb03cb 	.word	0x03cb03cb
1a00297c:	03cb03cb 	.word	0x03cb03cb
1a002980:	027103cb 	.word	0x027103cb
1a002984:	03cb0293 	.word	0x03cb0293
1a002988:	03cb0293 	.word	0x03cb0293
1a00298c:	03cb03cb 	.word	0x03cb03cb
1a002990:	02cb03cb 	.word	0x02cb03cb
1a002994:	03cb03cb 	.word	0x03cb03cb
1a002998:	03cb036e 	.word	0x03cb036e
1a00299c:	03cb03cb 	.word	0x03cb03cb
1a0029a0:	03cb03cb 	.word	0x03cb03cb
1a0029a4:	03cb03b5 	.word	0x03cb03b5
1a0029a8:	038b03cb 	.word	0x038b03cb
1a0029ac:	03cb03cb 	.word	0x03cb03cb
1a0029b0:	03cb03cb 	.word	0x03cb03cb
1a0029b4:	03cb03cb 	.word	0x03cb03cb
1a0029b8:	03cb03cb 	.word	0x03cb03cb
1a0029bc:	03cb03cb 	.word	0x03cb03cb
1a0029c0:	031703a0 	.word	0x031703a0
1a0029c4:	02930293 	.word	0x02930293
1a0029c8:	03300293 	.word	0x03300293
1a0029cc:	03cb0317 	.word	0x03cb0317
1a0029d0:	033703cb 	.word	0x033703cb
1a0029d4:	034103cb 	.word	0x034103cb
1a0029d8:	02ec01ff 	.word	0x02ec01ff
1a0029dc:	03cb0263 	.word	0x03cb0263
1a0029e0:	03cb0211 	.word	0x03cb0211
1a0029e4:	03cb009b 	.word	0x03cb009b
1a0029e8:	023603cb 	.word	0x023603cb
1a0029ec:	4638      	mov	r0, r7
1a0029ee:	4649      	mov	r1, r9
1a0029f0:	f001 f97a 	bl	1a003ce8 <__swsetup_r>
1a0029f4:	b9a0      	cbnz	r0, 1a002a20 <_vfprintf_r+0x1d8>
1a0029f6:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a0029fa:	f003 031a 	and.w	r3, r3, #26
1a0029fe:	2b0a      	cmp	r3, #10
1a002a00:	f47f af54 	bne.w	1a0028ac <_vfprintf_r+0x64>
1a002a04:	f9b9 300e 	ldrsh.w	r3, [r9, #14]
1a002a08:	2b00      	cmp	r3, #0
1a002a0a:	f6ff af4f 	blt.w	1a0028ac <_vfprintf_r+0x64>
1a002a0e:	4638      	mov	r0, r7
1a002a10:	4649      	mov	r1, r9
1a002a12:	9a04      	ldr	r2, [sp, #16]
1a002a14:	4623      	mov	r3, r4
1a002a16:	f001 f92b 	bl	1a003c70 <__sbprintf>
1a002a1a:	b03d      	add	sp, #244	; 0xf4
1a002a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a20:	f04f 30ff 	mov.w	r0, #4294967295
1a002a24:	b03d      	add	sp, #244	; 0xf4
1a002a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a2a:	4640      	mov	r0, r8
1a002a2c:	4649      	mov	r1, r9
1a002a2e:	aa1f      	add	r2, sp, #124	; 0x7c
1a002a30:	f003 ff24 	bl	1a00687c <__sprint_r>
1a002a34:	b940      	cbnz	r0, 1a002a48 <_vfprintf_r+0x200>
1a002a36:	ac2c      	add	r4, sp, #176	; 0xb0
1a002a38:	e765      	b.n	1a002906 <_vfprintf_r+0xbe>
1a002a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a002a3c:	b123      	cbz	r3, 1a002a48 <_vfprintf_r+0x200>
1a002a3e:	4640      	mov	r0, r8
1a002a40:	4649      	mov	r1, r9
1a002a42:	aa1f      	add	r2, sp, #124	; 0x7c
1a002a44:	f003 ff1a 	bl	1a00687c <__sprint_r>
1a002a48:	f8b9 300c 	ldrh.w	r3, [r9, #12]
1a002a4c:	065a      	lsls	r2, r3, #25
1a002a4e:	d4e7      	bmi.n	1a002a20 <_vfprintf_r+0x1d8>
1a002a50:	9805      	ldr	r0, [sp, #20]
1a002a52:	b03d      	add	sp, #244	; 0xf4
1a002a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002a58:	4638      	mov	r0, r7
1a002a5a:	f002 facf 	bl	1a004ffc <__sinit>
1a002a5e:	e708      	b.n	1a002872 <_vfprintf_r+0x2a>
1a002a60:	9d04      	ldr	r5, [sp, #16]
1a002a62:	e753      	b.n	1a00290c <_vfprintf_r+0xc4>
1a002a64:	f3af 8000 	nop.w
	...
1a002a70:	9304      	str	r3, [sp, #16]
1a002a72:	9b02      	ldr	r3, [sp, #8]
1a002a74:	46b2      	mov	sl, r6
1a002a76:	069e      	lsls	r6, r3, #26
1a002a78:	f140 831e 	bpl.w	1a0030b8 <_vfprintf_r+0x870>
1a002a7c:	9f08      	ldr	r7, [sp, #32]
1a002a7e:	3707      	adds	r7, #7
1a002a80:	f027 0307 	bic.w	r3, r7, #7
1a002a84:	f103 0208 	add.w	r2, r3, #8
1a002a88:	e9d3 6700 	ldrd	r6, r7, [r3]
1a002a8c:	9208      	str	r2, [sp, #32]
1a002a8e:	2301      	movs	r3, #1
1a002a90:	f04f 0c00 	mov.w	ip, #0
1a002a94:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a002a98:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a002a9c:	f1ba 0f00 	cmp.w	sl, #0
1a002aa0:	db03      	blt.n	1a002aaa <_vfprintf_r+0x262>
1a002aa2:	9a02      	ldr	r2, [sp, #8]
1a002aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a002aa8:	9202      	str	r2, [sp, #8]
1a002aaa:	ea56 0207 	orrs.w	r2, r6, r7
1a002aae:	f040 831f 	bne.w	1a0030f0 <_vfprintf_r+0x8a8>
1a002ab2:	f1ba 0f00 	cmp.w	sl, #0
1a002ab6:	f000 841c 	beq.w	1a0032f2 <_vfprintf_r+0xaaa>
1a002aba:	2b01      	cmp	r3, #1
1a002abc:	f000 8320 	beq.w	1a003100 <_vfprintf_r+0x8b8>
1a002ac0:	2b02      	cmp	r3, #2
1a002ac2:	f000 8452 	beq.w	1a00336a <_vfprintf_r+0xb22>
1a002ac6:	a92c      	add	r1, sp, #176	; 0xb0
1a002ac8:	08f2      	lsrs	r2, r6, #3
1a002aca:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
1a002ace:	08f8      	lsrs	r0, r7, #3
1a002ad0:	f006 0307 	and.w	r3, r6, #7
1a002ad4:	4607      	mov	r7, r0
1a002ad6:	4616      	mov	r6, r2
1a002ad8:	3330      	adds	r3, #48	; 0x30
1a002ada:	ea56 0207 	orrs.w	r2, r6, r7
1a002ade:	f801 3d01 	strb.w	r3, [r1, #-1]!
1a002ae2:	d1f1      	bne.n	1a002ac8 <_vfprintf_r+0x280>
1a002ae4:	9a02      	ldr	r2, [sp, #8]
1a002ae6:	910a      	str	r1, [sp, #40]	; 0x28
1a002ae8:	07d0      	lsls	r0, r2, #31
1a002aea:	f100 84f9 	bmi.w	1a0034e0 <_vfprintf_r+0xc98>
1a002aee:	ab2c      	add	r3, sp, #176	; 0xb0
1a002af0:	1a5b      	subs	r3, r3, r1
1a002af2:	9307      	str	r3, [sp, #28]
1a002af4:	9a07      	ldr	r2, [sp, #28]
1a002af6:	4592      	cmp	sl, r2
1a002af8:	4653      	mov	r3, sl
1a002afa:	bfb8      	it	lt
1a002afc:	4613      	movlt	r3, r2
1a002afe:	9303      	str	r3, [sp, #12]
1a002b00:	2300      	movs	r3, #0
1a002b02:	930c      	str	r3, [sp, #48]	; 0x30
1a002b04:	f1bc 0f00 	cmp.w	ip, #0
1a002b08:	d002      	beq.n	1a002b10 <_vfprintf_r+0x2c8>
1a002b0a:	9b03      	ldr	r3, [sp, #12]
1a002b0c:	3301      	adds	r3, #1
1a002b0e:	9303      	str	r3, [sp, #12]
1a002b10:	9b02      	ldr	r3, [sp, #8]
1a002b12:	f013 0302 	ands.w	r3, r3, #2
1a002b16:	9309      	str	r3, [sp, #36]	; 0x24
1a002b18:	d002      	beq.n	1a002b20 <_vfprintf_r+0x2d8>
1a002b1a:	9b03      	ldr	r3, [sp, #12]
1a002b1c:	3302      	adds	r3, #2
1a002b1e:	9303      	str	r3, [sp, #12]
1a002b20:	9b02      	ldr	r3, [sp, #8]
1a002b22:	f013 0684 	ands.w	r6, r3, #132	; 0x84
1a002b26:	f040 82e0 	bne.w	1a0030ea <_vfprintf_r+0x8a2>
1a002b2a:	9b06      	ldr	r3, [sp, #24]
1a002b2c:	9a03      	ldr	r2, [sp, #12]
1a002b2e:	ebc2 0a03 	rsb	sl, r2, r3
1a002b32:	f1ba 0f00 	cmp.w	sl, #0
1a002b36:	f340 82d8 	ble.w	1a0030ea <_vfprintf_r+0x8a2>
1a002b3a:	f1ba 0f10 	cmp.w	sl, #16
1a002b3e:	9921      	ldr	r1, [sp, #132]	; 0x84
1a002b40:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a002b42:	4fb3      	ldr	r7, [pc, #716]	; (1a002e10 <_vfprintf_r+0x5c8>)
1a002b44:	bfc8      	it	gt
1a002b46:	f04f 0b10 	movgt.w	fp, #16
1a002b4a:	dc07      	bgt.n	1a002b5c <_vfprintf_r+0x314>
1a002b4c:	e01e      	b.n	1a002b8c <_vfprintf_r+0x344>
1a002b4e:	f1aa 0a10 	sub.w	sl, sl, #16
1a002b52:	f1ba 0f10 	cmp.w	sl, #16
1a002b56:	f104 0408 	add.w	r4, r4, #8
1a002b5a:	dd17      	ble.n	1a002b8c <_vfprintf_r+0x344>
1a002b5c:	3201      	adds	r2, #1
1a002b5e:	3110      	adds	r1, #16
1a002b60:	2a07      	cmp	r2, #7
1a002b62:	9121      	str	r1, [sp, #132]	; 0x84
1a002b64:	9220      	str	r2, [sp, #128]	; 0x80
1a002b66:	e884 0880 	stmia.w	r4, {r7, fp}
1a002b6a:	ddf0      	ble.n	1a002b4e <_vfprintf_r+0x306>
1a002b6c:	4640      	mov	r0, r8
1a002b6e:	4649      	mov	r1, r9
1a002b70:	aa1f      	add	r2, sp, #124	; 0x7c
1a002b72:	f003 fe83 	bl	1a00687c <__sprint_r>
1a002b76:	2800      	cmp	r0, #0
1a002b78:	f47f af66 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a002b7c:	f1aa 0a10 	sub.w	sl, sl, #16
1a002b80:	f1ba 0f10 	cmp.w	sl, #16
1a002b84:	9921      	ldr	r1, [sp, #132]	; 0x84
1a002b86:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a002b88:	ac2c      	add	r4, sp, #176	; 0xb0
1a002b8a:	dce7      	bgt.n	1a002b5c <_vfprintf_r+0x314>
1a002b8c:	3201      	adds	r2, #1
1a002b8e:	eb0a 0b01 	add.w	fp, sl, r1
1a002b92:	2a07      	cmp	r2, #7
1a002b94:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a002b98:	9220      	str	r2, [sp, #128]	; 0x80
1a002b9a:	e884 0480 	stmia.w	r4, {r7, sl}
1a002b9e:	f300 844a 	bgt.w	1a003436 <_vfprintf_r+0xbee>
1a002ba2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a002ba6:	3408      	adds	r4, #8
1a002ba8:	f1bc 0f00 	cmp.w	ip, #0
1a002bac:	d00f      	beq.n	1a002bce <_vfprintf_r+0x386>
1a002bae:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a002bb0:	3301      	adds	r3, #1
1a002bb2:	f10b 0b01 	add.w	fp, fp, #1
1a002bb6:	f10d 015f 	add.w	r1, sp, #95	; 0x5f
1a002bba:	2201      	movs	r2, #1
1a002bbc:	2b07      	cmp	r3, #7
1a002bbe:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a002bc2:	9320      	str	r3, [sp, #128]	; 0x80
1a002bc4:	e884 0006 	stmia.w	r4, {r1, r2}
1a002bc8:	f300 83b1 	bgt.w	1a00332e <_vfprintf_r+0xae6>
1a002bcc:	3408      	adds	r4, #8
1a002bce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002bd0:	b173      	cbz	r3, 1a002bf0 <_vfprintf_r+0x3a8>
1a002bd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a002bd4:	3301      	adds	r3, #1
1a002bd6:	f10b 0b02 	add.w	fp, fp, #2
1a002bda:	a918      	add	r1, sp, #96	; 0x60
1a002bdc:	2202      	movs	r2, #2
1a002bde:	2b07      	cmp	r3, #7
1a002be0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a002be4:	9320      	str	r3, [sp, #128]	; 0x80
1a002be6:	e884 0006 	stmia.w	r4, {r1, r2}
1a002bea:	f300 83ac 	bgt.w	1a003346 <_vfprintf_r+0xafe>
1a002bee:	3408      	adds	r4, #8
1a002bf0:	2e80      	cmp	r6, #128	; 0x80
1a002bf2:	f000 82f0 	beq.w	1a0031d6 <_vfprintf_r+0x98e>
1a002bf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a002bf8:	9a07      	ldr	r2, [sp, #28]
1a002bfa:	ebc2 0a03 	rsb	sl, r2, r3
1a002bfe:	f1ba 0f00 	cmp.w	sl, #0
1a002c02:	dd32      	ble.n	1a002c6a <_vfprintf_r+0x422>
1a002c04:	f1ba 0f10 	cmp.w	sl, #16
1a002c08:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a002c0a:	4f82      	ldr	r7, [pc, #520]	; (1a002e14 <_vfprintf_r+0x5cc>)
1a002c0c:	dd22      	ble.n	1a002c54 <_vfprintf_r+0x40c>
1a002c0e:	2610      	movs	r6, #16
1a002c10:	465b      	mov	r3, fp
1a002c12:	e006      	b.n	1a002c22 <_vfprintf_r+0x3da>
1a002c14:	f1aa 0a10 	sub.w	sl, sl, #16
1a002c18:	f1ba 0f10 	cmp.w	sl, #16
1a002c1c:	f104 0408 	add.w	r4, r4, #8
1a002c20:	dd17      	ble.n	1a002c52 <_vfprintf_r+0x40a>
1a002c22:	3201      	adds	r2, #1
1a002c24:	3310      	adds	r3, #16
1a002c26:	2a07      	cmp	r2, #7
1a002c28:	9321      	str	r3, [sp, #132]	; 0x84
1a002c2a:	9220      	str	r2, [sp, #128]	; 0x80
1a002c2c:	6027      	str	r7, [r4, #0]
1a002c2e:	6066      	str	r6, [r4, #4]
1a002c30:	ddf0      	ble.n	1a002c14 <_vfprintf_r+0x3cc>
1a002c32:	4640      	mov	r0, r8
1a002c34:	4649      	mov	r1, r9
1a002c36:	aa1f      	add	r2, sp, #124	; 0x7c
1a002c38:	f003 fe20 	bl	1a00687c <__sprint_r>
1a002c3c:	2800      	cmp	r0, #0
1a002c3e:	f47f af03 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a002c42:	f1aa 0a10 	sub.w	sl, sl, #16
1a002c46:	f1ba 0f10 	cmp.w	sl, #16
1a002c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a002c4c:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a002c4e:	ac2c      	add	r4, sp, #176	; 0xb0
1a002c50:	dce7      	bgt.n	1a002c22 <_vfprintf_r+0x3da>
1a002c52:	469b      	mov	fp, r3
1a002c54:	3201      	adds	r2, #1
1a002c56:	44d3      	add	fp, sl
1a002c58:	2a07      	cmp	r2, #7
1a002c5a:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a002c5e:	9220      	str	r2, [sp, #128]	; 0x80
1a002c60:	e884 0480 	stmia.w	r4, {r7, sl}
1a002c64:	f300 8357 	bgt.w	1a003316 <_vfprintf_r+0xace>
1a002c68:	3408      	adds	r4, #8
1a002c6a:	9b02      	ldr	r3, [sp, #8]
1a002c6c:	05db      	lsls	r3, r3, #23
1a002c6e:	f100 825b 	bmi.w	1a003128 <_vfprintf_r+0x8e0>
1a002c72:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a002c74:	9907      	ldr	r1, [sp, #28]
1a002c76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a002c78:	6022      	str	r2, [r4, #0]
1a002c7a:	3301      	adds	r3, #1
1a002c7c:	448b      	add	fp, r1
1a002c7e:	2b07      	cmp	r3, #7
1a002c80:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a002c84:	6061      	str	r1, [r4, #4]
1a002c86:	9320      	str	r3, [sp, #128]	; 0x80
1a002c88:	f300 831d 	bgt.w	1a0032c6 <_vfprintf_r+0xa7e>
1a002c8c:	3408      	adds	r4, #8
1a002c8e:	9b02      	ldr	r3, [sp, #8]
1a002c90:	0759      	lsls	r1, r3, #29
1a002c92:	d53a      	bpl.n	1a002d0a <_vfprintf_r+0x4c2>
1a002c94:	9b06      	ldr	r3, [sp, #24]
1a002c96:	9a03      	ldr	r2, [sp, #12]
1a002c98:	1a9d      	subs	r5, r3, r2
1a002c9a:	2d00      	cmp	r5, #0
1a002c9c:	dd35      	ble.n	1a002d0a <_vfprintf_r+0x4c2>
1a002c9e:	2d10      	cmp	r5, #16
1a002ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a002ca2:	4f5b      	ldr	r7, [pc, #364]	; (1a002e10 <_vfprintf_r+0x5c8>)
1a002ca4:	dd1e      	ble.n	1a002ce4 <_vfprintf_r+0x49c>
1a002ca6:	2610      	movs	r6, #16
1a002ca8:	465a      	mov	r2, fp
1a002caa:	e004      	b.n	1a002cb6 <_vfprintf_r+0x46e>
1a002cac:	3d10      	subs	r5, #16
1a002cae:	2d10      	cmp	r5, #16
1a002cb0:	f104 0408 	add.w	r4, r4, #8
1a002cb4:	dd15      	ble.n	1a002ce2 <_vfprintf_r+0x49a>
1a002cb6:	3301      	adds	r3, #1
1a002cb8:	3210      	adds	r2, #16
1a002cba:	2b07      	cmp	r3, #7
1a002cbc:	9221      	str	r2, [sp, #132]	; 0x84
1a002cbe:	9320      	str	r3, [sp, #128]	; 0x80
1a002cc0:	6027      	str	r7, [r4, #0]
1a002cc2:	6066      	str	r6, [r4, #4]
1a002cc4:	ddf2      	ble.n	1a002cac <_vfprintf_r+0x464>
1a002cc6:	4640      	mov	r0, r8
1a002cc8:	4649      	mov	r1, r9
1a002cca:	aa1f      	add	r2, sp, #124	; 0x7c
1a002ccc:	f003 fdd6 	bl	1a00687c <__sprint_r>
1a002cd0:	2800      	cmp	r0, #0
1a002cd2:	f47f aeb9 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a002cd6:	3d10      	subs	r5, #16
1a002cd8:	2d10      	cmp	r5, #16
1a002cda:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a002cdc:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a002cde:	ac2c      	add	r4, sp, #176	; 0xb0
1a002ce0:	dce9      	bgt.n	1a002cb6 <_vfprintf_r+0x46e>
1a002ce2:	4693      	mov	fp, r2
1a002ce4:	3301      	adds	r3, #1
1a002ce6:	44ab      	add	fp, r5
1a002ce8:	2b07      	cmp	r3, #7
1a002cea:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a002cee:	9320      	str	r3, [sp, #128]	; 0x80
1a002cf0:	6027      	str	r7, [r4, #0]
1a002cf2:	6065      	str	r5, [r4, #4]
1a002cf4:	dd09      	ble.n	1a002d0a <_vfprintf_r+0x4c2>
1a002cf6:	4640      	mov	r0, r8
1a002cf8:	4649      	mov	r1, r9
1a002cfa:	aa1f      	add	r2, sp, #124	; 0x7c
1a002cfc:	f003 fdbe 	bl	1a00687c <__sprint_r>
1a002d00:	2800      	cmp	r0, #0
1a002d02:	f47f aea1 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a002d06:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a002d0a:	9b05      	ldr	r3, [sp, #20]
1a002d0c:	9a03      	ldr	r2, [sp, #12]
1a002d0e:	9906      	ldr	r1, [sp, #24]
1a002d10:	428a      	cmp	r2, r1
1a002d12:	bfac      	ite	ge
1a002d14:	189b      	addge	r3, r3, r2
1a002d16:	185b      	addlt	r3, r3, r1
1a002d18:	9305      	str	r3, [sp, #20]
1a002d1a:	f1bb 0f00 	cmp.w	fp, #0
1a002d1e:	f040 82de 	bne.w	1a0032de <_vfprintf_r+0xa96>
1a002d22:	2300      	movs	r3, #0
1a002d24:	9320      	str	r3, [sp, #128]	; 0x80
1a002d26:	ac2c      	add	r4, sp, #176	; 0xb0
1a002d28:	e5cf      	b.n	1a0028ca <_vfprintf_r+0x82>
1a002d2a:	4619      	mov	r1, r3
1a002d2c:	9802      	ldr	r0, [sp, #8]
1a002d2e:	781d      	ldrb	r5, [r3, #0]
1a002d30:	f040 0004 	orr.w	r0, r0, #4
1a002d34:	9002      	str	r0, [sp, #8]
1a002d36:	e5f8      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002d38:	9304      	str	r3, [sp, #16]
1a002d3a:	9b02      	ldr	r3, [sp, #8]
1a002d3c:	f013 0320 	ands.w	r3, r3, #32
1a002d40:	46b2      	mov	sl, r6
1a002d42:	f000 8173 	beq.w	1a00302c <_vfprintf_r+0x7e4>
1a002d46:	9f08      	ldr	r7, [sp, #32]
1a002d48:	3707      	adds	r7, #7
1a002d4a:	f027 0307 	bic.w	r3, r7, #7
1a002d4e:	f103 0208 	add.w	r2, r3, #8
1a002d52:	e9d3 6700 	ldrd	r6, r7, [r3]
1a002d56:	9208      	str	r2, [sp, #32]
1a002d58:	2300      	movs	r3, #0
1a002d5a:	e699      	b.n	1a002a90 <_vfprintf_r+0x248>
1a002d5c:	9a08      	ldr	r2, [sp, #32]
1a002d5e:	9304      	str	r3, [sp, #16]
1a002d60:	6813      	ldr	r3, [r2, #0]
1a002d62:	930a      	str	r3, [sp, #40]	; 0x28
1a002d64:	f04f 0b00 	mov.w	fp, #0
1a002d68:	f88d b05f 	strb.w	fp, [sp, #95]	; 0x5f
1a002d6c:	1d17      	adds	r7, r2, #4
1a002d6e:	2b00      	cmp	r3, #0
1a002d70:	f000 865e 	beq.w	1a003a30 <_vfprintf_r+0x11e8>
1a002d74:	2e00      	cmp	r6, #0
1a002d76:	980a      	ldr	r0, [sp, #40]	; 0x28
1a002d78:	f2c0 8612 	blt.w	1a0039a0 <_vfprintf_r+0x1158>
1a002d7c:	4659      	mov	r1, fp
1a002d7e:	4632      	mov	r2, r6
1a002d80:	f002 ff32 	bl	1a005be8 <memchr>
1a002d84:	2800      	cmp	r0, #0
1a002d86:	f000 868f 	beq.w	1a003aa8 <_vfprintf_r+0x1260>
1a002d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a002d8c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a002d90:	1ac3      	subs	r3, r0, r3
1a002d92:	9307      	str	r3, [sp, #28]
1a002d94:	9708      	str	r7, [sp, #32]
1a002d96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a002d9a:	9303      	str	r3, [sp, #12]
1a002d9c:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
1a002da0:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a002da4:	e6ae      	b.n	1a002b04 <_vfprintf_r+0x2bc>
1a002da6:	9304      	str	r3, [sp, #16]
1a002da8:	4b1b      	ldr	r3, [pc, #108]	; (1a002e18 <_vfprintf_r+0x5d0>)
1a002daa:	9310      	str	r3, [sp, #64]	; 0x40
1a002dac:	9b02      	ldr	r3, [sp, #8]
1a002dae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a002db2:	0699      	lsls	r1, r3, #26
1a002db4:	46b2      	mov	sl, r6
1a002db6:	f140 8155 	bpl.w	1a003064 <_vfprintf_r+0x81c>
1a002dba:	9f08      	ldr	r7, [sp, #32]
1a002dbc:	3707      	adds	r7, #7
1a002dbe:	f027 0307 	bic.w	r3, r7, #7
1a002dc2:	e9d3 6700 	ldrd	r6, r7, [r3]
1a002dc6:	f103 0208 	add.w	r2, r3, #8
1a002dca:	9208      	str	r2, [sp, #32]
1a002dcc:	9b02      	ldr	r3, [sp, #8]
1a002dce:	07db      	lsls	r3, r3, #31
1a002dd0:	f140 82e4 	bpl.w	1a00339c <_vfprintf_r+0xb54>
1a002dd4:	ea56 0307 	orrs.w	r3, r6, r7
1a002dd8:	f000 82e0 	beq.w	1a00339c <_vfprintf_r+0xb54>
1a002ddc:	9a02      	ldr	r2, [sp, #8]
1a002dde:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
1a002de2:	2330      	movs	r3, #48	; 0x30
1a002de4:	f042 0202 	orr.w	r2, r2, #2
1a002de8:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
1a002dec:	9202      	str	r2, [sp, #8]
1a002dee:	2302      	movs	r3, #2
1a002df0:	e64e      	b.n	1a002a90 <_vfprintf_r+0x248>
1a002df2:	781d      	ldrb	r5, [r3, #0]
1a002df4:	4619      	mov	r1, r3
1a002df6:	2a00      	cmp	r2, #0
1a002df8:	f47f ad97 	bne.w	1a00292a <_vfprintf_r+0xe2>
1a002dfc:	2220      	movs	r2, #32
1a002dfe:	e594      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002e00:	9902      	ldr	r1, [sp, #8]
1a002e02:	f041 0120 	orr.w	r1, r1, #32
1a002e06:	9102      	str	r1, [sp, #8]
1a002e08:	781d      	ldrb	r5, [r3, #0]
1a002e0a:	4619      	mov	r1, r3
1a002e0c:	e58d      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002e0e:	bf00      	nop
1a002e10:	1a0070d8 	.word	0x1a0070d8
1a002e14:	1a007084 	.word	0x1a007084
1a002e18:	1a0070b8 	.word	0x1a0070b8
1a002e1c:	9304      	str	r3, [sp, #16]
1a002e1e:	9b02      	ldr	r3, [sp, #8]
1a002e20:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a002e24:	f043 0310 	orr.w	r3, r3, #16
1a002e28:	9302      	str	r3, [sp, #8]
1a002e2a:	9b02      	ldr	r3, [sp, #8]
1a002e2c:	0698      	lsls	r0, r3, #26
1a002e2e:	46b2      	mov	sl, r6
1a002e30:	f140 80a2 	bpl.w	1a002f78 <_vfprintf_r+0x730>
1a002e34:	9f08      	ldr	r7, [sp, #32]
1a002e36:	3707      	adds	r7, #7
1a002e38:	f027 0707 	bic.w	r7, r7, #7
1a002e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
1a002e40:	f107 0108 	add.w	r1, r7, #8
1a002e44:	9108      	str	r1, [sp, #32]
1a002e46:	4616      	mov	r6, r2
1a002e48:	461f      	mov	r7, r3
1a002e4a:	2a00      	cmp	r2, #0
1a002e4c:	f173 0300 	sbcs.w	r3, r3, #0
1a002e50:	f2c0 841c 	blt.w	1a00368c <_vfprintf_r+0xe44>
1a002e54:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a002e58:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a002e5c:	2301      	movs	r3, #1
1a002e5e:	e61d      	b.n	1a002a9c <_vfprintf_r+0x254>
1a002e60:	9304      	str	r3, [sp, #16]
1a002e62:	9b02      	ldr	r3, [sp, #8]
1a002e64:	9f08      	ldr	r7, [sp, #32]
1a002e66:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a002e6a:	071b      	lsls	r3, r3, #28
1a002e6c:	46b2      	mov	sl, r6
1a002e6e:	46b3      	mov	fp, r6
1a002e70:	f107 0707 	add.w	r7, r7, #7
1a002e74:	f140 849b 	bpl.w	1a0037ae <_vfprintf_r+0xf66>
1a002e78:	f027 0307 	bic.w	r3, r7, #7
1a002e7c:	ed93 7b00 	vldr	d7, [r3]
1a002e80:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a002e84:	f103 0208 	add.w	r2, r3, #8
1a002e88:	9208      	str	r2, [sp, #32]
1a002e8a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
1a002e8e:	f003 fc49 	bl	1a006724 <__fpclassifyd>
1a002e92:	2801      	cmp	r0, #1
1a002e94:	f040 8408 	bne.w	1a0036a8 <_vfprintf_r+0xe60>
1a002e98:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a002e9c:	2200      	movs	r2, #0
1a002e9e:	2300      	movs	r3, #0
1a002ea0:	f003 fec0 	bl	1a006c24 <__aeabi_dcmplt>
1a002ea4:	2800      	cmp	r0, #0
1a002ea6:	f040 85ec 	bne.w	1a003a82 <_vfprintf_r+0x123a>
1a002eaa:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a002eae:	9e02      	ldr	r6, [sp, #8]
1a002eb0:	4a99      	ldr	r2, [pc, #612]	; (1a003118 <_vfprintf_r+0x8d0>)
1a002eb2:	4b9a      	ldr	r3, [pc, #616]	; (1a00311c <_vfprintf_r+0x8d4>)
1a002eb4:	2103      	movs	r1, #3
1a002eb6:	2000      	movs	r0, #0
1a002eb8:	f026 0680 	bic.w	r6, r6, #128	; 0x80
1a002ebc:	2d47      	cmp	r5, #71	; 0x47
1a002ebe:	bfd8      	it	le
1a002ec0:	461a      	movle	r2, r3
1a002ec2:	9103      	str	r1, [sp, #12]
1a002ec4:	900b      	str	r0, [sp, #44]	; 0x2c
1a002ec6:	9602      	str	r6, [sp, #8]
1a002ec8:	920a      	str	r2, [sp, #40]	; 0x28
1a002eca:	9107      	str	r1, [sp, #28]
1a002ecc:	900c      	str	r0, [sp, #48]	; 0x30
1a002ece:	e619      	b.n	1a002b04 <_vfprintf_r+0x2bc>
1a002ed0:	9902      	ldr	r1, [sp, #8]
1a002ed2:	f041 0108 	orr.w	r1, r1, #8
1a002ed6:	9102      	str	r1, [sp, #8]
1a002ed8:	781d      	ldrb	r5, [r3, #0]
1a002eda:	4619      	mov	r1, r3
1a002edc:	e525      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002ede:	781d      	ldrb	r5, [r3, #0]
1a002ee0:	4619      	mov	r1, r3
1a002ee2:	222b      	movs	r2, #43	; 0x2b
1a002ee4:	e521      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002ee6:	9902      	ldr	r1, [sp, #8]
1a002ee8:	f041 0180 	orr.w	r1, r1, #128	; 0x80
1a002eec:	9102      	str	r1, [sp, #8]
1a002eee:	781d      	ldrb	r5, [r3, #0]
1a002ef0:	4619      	mov	r1, r3
1a002ef2:	e51a      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002ef4:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a002ef8:	2100      	movs	r1, #0
1a002efa:	f813 5b01 	ldrb.w	r5, [r3], #1
1a002efe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
1a002f02:	eb00 0141 	add.w	r1, r0, r1, lsl #1
1a002f06:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a002f0a:	2809      	cmp	r0, #9
1a002f0c:	d9f5      	bls.n	1a002efa <_vfprintf_r+0x6b2>
1a002f0e:	9106      	str	r1, [sp, #24]
1a002f10:	e50c      	b.n	1a00292c <_vfprintf_r+0xe4>
1a002f12:	9908      	ldr	r1, [sp, #32]
1a002f14:	9304      	str	r3, [sp, #16]
1a002f16:	2330      	movs	r3, #48	; 0x30
1a002f18:	9a02      	ldr	r2, [sp, #8]
1a002f1a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
1a002f1e:	460b      	mov	r3, r1
1a002f20:	3304      	adds	r3, #4
1a002f22:	2578      	movs	r5, #120	; 0x78
1a002f24:	f042 0202 	orr.w	r2, r2, #2
1a002f28:	9308      	str	r3, [sp, #32]
1a002f2a:	4b7d      	ldr	r3, [pc, #500]	; (1a003120 <_vfprintf_r+0x8d8>)
1a002f2c:	9310      	str	r3, [sp, #64]	; 0x40
1a002f2e:	46b2      	mov	sl, r6
1a002f30:	9202      	str	r2, [sp, #8]
1a002f32:	680e      	ldr	r6, [r1, #0]
1a002f34:	f88d 5061 	strb.w	r5, [sp, #97]	; 0x61
1a002f38:	2700      	movs	r7, #0
1a002f3a:	2302      	movs	r3, #2
1a002f3c:	e5a8      	b.n	1a002a90 <_vfprintf_r+0x248>
1a002f3e:	9902      	ldr	r1, [sp, #8]
1a002f40:	f041 0101 	orr.w	r1, r1, #1
1a002f44:	9102      	str	r1, [sp, #8]
1a002f46:	781d      	ldrb	r5, [r3, #0]
1a002f48:	4619      	mov	r1, r3
1a002f4a:	e4ee      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002f4c:	9d08      	ldr	r5, [sp, #32]
1a002f4e:	6829      	ldr	r1, [r5, #0]
1a002f50:	9106      	str	r1, [sp, #24]
1a002f52:	4608      	mov	r0, r1
1a002f54:	2800      	cmp	r0, #0
1a002f56:	4629      	mov	r1, r5
1a002f58:	f101 0104 	add.w	r1, r1, #4
1a002f5c:	f2c0 84ee 	blt.w	1a00393c <_vfprintf_r+0x10f4>
1a002f60:	9108      	str	r1, [sp, #32]
1a002f62:	781d      	ldrb	r5, [r3, #0]
1a002f64:	4619      	mov	r1, r3
1a002f66:	e4e0      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002f68:	9304      	str	r3, [sp, #16]
1a002f6a:	9b02      	ldr	r3, [sp, #8]
1a002f6c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a002f70:	0698      	lsls	r0, r3, #26
1a002f72:	46b2      	mov	sl, r6
1a002f74:	f53f af5e 	bmi.w	1a002e34 <_vfprintf_r+0x5ec>
1a002f78:	9b02      	ldr	r3, [sp, #8]
1a002f7a:	06d9      	lsls	r1, r3, #27
1a002f7c:	f100 829b 	bmi.w	1a0034b6 <_vfprintf_r+0xc6e>
1a002f80:	9b02      	ldr	r3, [sp, #8]
1a002f82:	065a      	lsls	r2, r3, #25
1a002f84:	f140 8297 	bpl.w	1a0034b6 <_vfprintf_r+0xc6e>
1a002f88:	9908      	ldr	r1, [sp, #32]
1a002f8a:	f9b1 6000 	ldrsh.w	r6, [r1]
1a002f8e:	3104      	adds	r1, #4
1a002f90:	17f7      	asrs	r7, r6, #31
1a002f92:	4632      	mov	r2, r6
1a002f94:	463b      	mov	r3, r7
1a002f96:	9108      	str	r1, [sp, #32]
1a002f98:	e757      	b.n	1a002e4a <_vfprintf_r+0x602>
1a002f9a:	9902      	ldr	r1, [sp, #8]
1a002f9c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
1a002fa0:	9102      	str	r1, [sp, #8]
1a002fa2:	781d      	ldrb	r5, [r3, #0]
1a002fa4:	4619      	mov	r1, r3
1a002fa6:	e4c0      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002fa8:	781d      	ldrb	r5, [r3, #0]
1a002faa:	9902      	ldr	r1, [sp, #8]
1a002fac:	2d6c      	cmp	r5, #108	; 0x6c
1a002fae:	f000 84be 	beq.w	1a00392e <_vfprintf_r+0x10e6>
1a002fb2:	f041 0110 	orr.w	r1, r1, #16
1a002fb6:	9102      	str	r1, [sp, #8]
1a002fb8:	4619      	mov	r1, r3
1a002fba:	e4b6      	b.n	1a00292a <_vfprintf_r+0xe2>
1a002fbc:	9304      	str	r3, [sp, #16]
1a002fbe:	9b02      	ldr	r3, [sp, #8]
1a002fc0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a002fc4:	069a      	lsls	r2, r3, #26
1a002fc6:	f140 83fd 	bpl.w	1a0037c4 <_vfprintf_r+0xf7c>
1a002fca:	9a08      	ldr	r2, [sp, #32]
1a002fcc:	9905      	ldr	r1, [sp, #20]
1a002fce:	6813      	ldr	r3, [r2, #0]
1a002fd0:	17cf      	asrs	r7, r1, #31
1a002fd2:	4608      	mov	r0, r1
1a002fd4:	3204      	adds	r2, #4
1a002fd6:	4639      	mov	r1, r7
1a002fd8:	9208      	str	r2, [sp, #32]
1a002fda:	e9c3 0100 	strd	r0, r1, [r3]
1a002fde:	e474      	b.n	1a0028ca <_vfprintf_r+0x82>
1a002fe0:	781d      	ldrb	r5, [r3, #0]
1a002fe2:	2d2a      	cmp	r5, #42	; 0x2a
1a002fe4:	f103 0101 	add.w	r1, r3, #1
1a002fe8:	f000 862a 	beq.w	1a003c40 <_vfprintf_r+0x13f8>
1a002fec:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a002ff0:	2809      	cmp	r0, #9
1a002ff2:	460b      	mov	r3, r1
1a002ff4:	f04f 0600 	mov.w	r6, #0
1a002ff8:	f63f ac98 	bhi.w	1a00292c <_vfprintf_r+0xe4>
1a002ffc:	f813 5b01 	ldrb.w	r5, [r3], #1
1a003000:	eb06 0686 	add.w	r6, r6, r6, lsl #2
1a003004:	eb00 0646 	add.w	r6, r0, r6, lsl #1
1a003008:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
1a00300c:	2809      	cmp	r0, #9
1a00300e:	d9f5      	bls.n	1a002ffc <_vfprintf_r+0x7b4>
1a003010:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
1a003014:	e48a      	b.n	1a00292c <_vfprintf_r+0xe4>
1a003016:	9304      	str	r3, [sp, #16]
1a003018:	9b02      	ldr	r3, [sp, #8]
1a00301a:	f043 0310 	orr.w	r3, r3, #16
1a00301e:	9302      	str	r3, [sp, #8]
1a003020:	9b02      	ldr	r3, [sp, #8]
1a003022:	f013 0320 	ands.w	r3, r3, #32
1a003026:	46b2      	mov	sl, r6
1a003028:	f47f ae8d 	bne.w	1a002d46 <_vfprintf_r+0x4fe>
1a00302c:	9a02      	ldr	r2, [sp, #8]
1a00302e:	f012 0210 	ands.w	r2, r2, #16
1a003032:	f040 8238 	bne.w	1a0034a6 <_vfprintf_r+0xc5e>
1a003036:	9b02      	ldr	r3, [sp, #8]
1a003038:	f013 0340 	ands.w	r3, r3, #64	; 0x40
1a00303c:	f000 8233 	beq.w	1a0034a6 <_vfprintf_r+0xc5e>
1a003040:	9908      	ldr	r1, [sp, #32]
1a003042:	4613      	mov	r3, r2
1a003044:	460a      	mov	r2, r1
1a003046:	3204      	adds	r2, #4
1a003048:	880e      	ldrh	r6, [r1, #0]
1a00304a:	9208      	str	r2, [sp, #32]
1a00304c:	2700      	movs	r7, #0
1a00304e:	e51f      	b.n	1a002a90 <_vfprintf_r+0x248>
1a003050:	9304      	str	r3, [sp, #16]
1a003052:	4b34      	ldr	r3, [pc, #208]	; (1a003124 <_vfprintf_r+0x8dc>)
1a003054:	9310      	str	r3, [sp, #64]	; 0x40
1a003056:	9b02      	ldr	r3, [sp, #8]
1a003058:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a00305c:	0699      	lsls	r1, r3, #26
1a00305e:	46b2      	mov	sl, r6
1a003060:	f53f aeab 	bmi.w	1a002dba <_vfprintf_r+0x572>
1a003064:	9b02      	ldr	r3, [sp, #8]
1a003066:	06da      	lsls	r2, r3, #27
1a003068:	f140 83d1 	bpl.w	1a00380e <_vfprintf_r+0xfc6>
1a00306c:	9a08      	ldr	r2, [sp, #32]
1a00306e:	4613      	mov	r3, r2
1a003070:	3304      	adds	r3, #4
1a003072:	6816      	ldr	r6, [r2, #0]
1a003074:	9308      	str	r3, [sp, #32]
1a003076:	2700      	movs	r7, #0
1a003078:	e6a8      	b.n	1a002dcc <_vfprintf_r+0x584>
1a00307a:	9908      	ldr	r1, [sp, #32]
1a00307c:	9304      	str	r3, [sp, #16]
1a00307e:	680a      	ldr	r2, [r1, #0]
1a003080:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
1a003084:	2300      	movs	r3, #0
1a003086:	2201      	movs	r2, #1
1a003088:	3104      	adds	r1, #4
1a00308a:	469c      	mov	ip, r3
1a00308c:	9203      	str	r2, [sp, #12]
1a00308e:	9108      	str	r1, [sp, #32]
1a003090:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
1a003094:	ab22      	add	r3, sp, #136	; 0x88
1a003096:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
1a00309a:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
1a00309e:	9207      	str	r2, [sp, #28]
1a0030a0:	930a      	str	r3, [sp, #40]	; 0x28
1a0030a2:	e535      	b.n	1a002b10 <_vfprintf_r+0x2c8>
1a0030a4:	9304      	str	r3, [sp, #16]
1a0030a6:	9b02      	ldr	r3, [sp, #8]
1a0030a8:	f043 0310 	orr.w	r3, r3, #16
1a0030ac:	9302      	str	r3, [sp, #8]
1a0030ae:	9b02      	ldr	r3, [sp, #8]
1a0030b0:	46b2      	mov	sl, r6
1a0030b2:	069e      	lsls	r6, r3, #26
1a0030b4:	f53f ace2 	bmi.w	1a002a7c <_vfprintf_r+0x234>
1a0030b8:	9b02      	ldr	r3, [sp, #8]
1a0030ba:	06d8      	lsls	r0, r3, #27
1a0030bc:	f140 8399 	bpl.w	1a0037f2 <_vfprintf_r+0xfaa>
1a0030c0:	9a08      	ldr	r2, [sp, #32]
1a0030c2:	4613      	mov	r3, r2
1a0030c4:	3204      	adds	r2, #4
1a0030c6:	681e      	ldr	r6, [r3, #0]
1a0030c8:	9208      	str	r2, [sp, #32]
1a0030ca:	2301      	movs	r3, #1
1a0030cc:	2700      	movs	r7, #0
1a0030ce:	e4df      	b.n	1a002a90 <_vfprintf_r+0x248>
1a0030d0:	9304      	str	r3, [sp, #16]
1a0030d2:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
1a0030d6:	2d00      	cmp	r5, #0
1a0030d8:	f43f acaf 	beq.w	1a002a3a <_vfprintf_r+0x1f2>
1a0030dc:	2300      	movs	r3, #0
1a0030de:	2201      	movs	r2, #1
1a0030e0:	469c      	mov	ip, r3
1a0030e2:	9203      	str	r2, [sp, #12]
1a0030e4:	f88d 5088 	strb.w	r5, [sp, #136]	; 0x88
1a0030e8:	e7d2      	b.n	1a003090 <_vfprintf_r+0x848>
1a0030ea:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a0030ee:	e55b      	b.n	1a002ba8 <_vfprintf_r+0x360>
1a0030f0:	2b01      	cmp	r3, #1
1a0030f2:	f47f ace5 	bne.w	1a002ac0 <_vfprintf_r+0x278>
1a0030f6:	2f00      	cmp	r7, #0
1a0030f8:	bf08      	it	eq
1a0030fa:	2e0a      	cmpeq	r6, #10
1a0030fc:	f080 81ff 	bcs.w	1a0034fe <_vfprintf_r+0xcb6>
1a003100:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
1a003104:	3630      	adds	r6, #48	; 0x30
1a003106:	f80b 6d41 	strb.w	r6, [fp, #-65]!
1a00310a:	ab2c      	add	r3, sp, #176	; 0xb0
1a00310c:	ebcb 0303 	rsb	r3, fp, r3
1a003110:	9307      	str	r3, [sp, #28]
1a003112:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
1a003116:	e4ed      	b.n	1a002af4 <_vfprintf_r+0x2ac>
1a003118:	1a007098 	.word	0x1a007098
1a00311c:	1a007094 	.word	0x1a007094
1a003120:	1a0070b8 	.word	0x1a0070b8
1a003124:	1a0070a4 	.word	0x1a0070a4
1a003128:	2d65      	cmp	r5, #101	; 0x65
1a00312a:	f340 808a 	ble.w	1a003242 <_vfprintf_r+0x9fa>
1a00312e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a003132:	2200      	movs	r2, #0
1a003134:	2300      	movs	r3, #0
1a003136:	f003 fd6b 	bl	1a006c10 <__aeabi_dcmpeq>
1a00313a:	2800      	cmp	r0, #0
1a00313c:	f000 8131 	beq.w	1a0033a2 <_vfprintf_r+0xb5a>
1a003140:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003142:	4aae      	ldr	r2, [pc, #696]	; (1a0033fc <_vfprintf_r+0xbb4>)
1a003144:	6022      	str	r2, [r4, #0]
1a003146:	3301      	adds	r3, #1
1a003148:	f10b 0b01 	add.w	fp, fp, #1
1a00314c:	2201      	movs	r2, #1
1a00314e:	2b07      	cmp	r3, #7
1a003150:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003154:	9320      	str	r3, [sp, #128]	; 0x80
1a003156:	6062      	str	r2, [r4, #4]
1a003158:	f300 8372 	bgt.w	1a003840 <_vfprintf_r+0xff8>
1a00315c:	3408      	adds	r4, #8
1a00315e:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a003160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003162:	4293      	cmp	r3, r2
1a003164:	db03      	blt.n	1a00316e <_vfprintf_r+0x926>
1a003166:	9b02      	ldr	r3, [sp, #8]
1a003168:	07df      	lsls	r7, r3, #31
1a00316a:	f57f ad90 	bpl.w	1a002c8e <_vfprintf_r+0x446>
1a00316e:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003170:	9912      	ldr	r1, [sp, #72]	; 0x48
1a003172:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a003174:	6022      	str	r2, [r4, #0]
1a003176:	3301      	adds	r3, #1
1a003178:	448b      	add	fp, r1
1a00317a:	2b07      	cmp	r3, #7
1a00317c:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003180:	6061      	str	r1, [r4, #4]
1a003182:	9320      	str	r3, [sp, #128]	; 0x80
1a003184:	f300 83e1 	bgt.w	1a00394a <_vfprintf_r+0x1102>
1a003188:	3408      	adds	r4, #8
1a00318a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00318c:	1e5d      	subs	r5, r3, #1
1a00318e:	2d00      	cmp	r5, #0
1a003190:	f77f ad7d 	ble.w	1a002c8e <_vfprintf_r+0x446>
1a003194:	2d10      	cmp	r5, #16
1a003196:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003198:	4f99      	ldr	r7, [pc, #612]	; (1a003400 <_vfprintf_r+0xbb8>)
1a00319a:	f340 8196 	ble.w	1a0034ca <_vfprintf_r+0xc82>
1a00319e:	2610      	movs	r6, #16
1a0031a0:	465a      	mov	r2, fp
1a0031a2:	e004      	b.n	1a0031ae <_vfprintf_r+0x966>
1a0031a4:	3408      	adds	r4, #8
1a0031a6:	3d10      	subs	r5, #16
1a0031a8:	2d10      	cmp	r5, #16
1a0031aa:	f340 818d 	ble.w	1a0034c8 <_vfprintf_r+0xc80>
1a0031ae:	3301      	adds	r3, #1
1a0031b0:	3210      	adds	r2, #16
1a0031b2:	2b07      	cmp	r3, #7
1a0031b4:	9221      	str	r2, [sp, #132]	; 0x84
1a0031b6:	9320      	str	r3, [sp, #128]	; 0x80
1a0031b8:	6027      	str	r7, [r4, #0]
1a0031ba:	6066      	str	r6, [r4, #4]
1a0031bc:	ddf2      	ble.n	1a0031a4 <_vfprintf_r+0x95c>
1a0031be:	4640      	mov	r0, r8
1a0031c0:	4649      	mov	r1, r9
1a0031c2:	aa1f      	add	r2, sp, #124	; 0x7c
1a0031c4:	f003 fb5a 	bl	1a00687c <__sprint_r>
1a0031c8:	2800      	cmp	r0, #0
1a0031ca:	f47f ac3d 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a0031ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0031d0:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0031d2:	ac2c      	add	r4, sp, #176	; 0xb0
1a0031d4:	e7e7      	b.n	1a0031a6 <_vfprintf_r+0x95e>
1a0031d6:	9b06      	ldr	r3, [sp, #24]
1a0031d8:	9a03      	ldr	r2, [sp, #12]
1a0031da:	1a9e      	subs	r6, r3, r2
1a0031dc:	2e00      	cmp	r6, #0
1a0031de:	f77f ad0a 	ble.w	1a002bf6 <_vfprintf_r+0x3ae>
1a0031e2:	2e10      	cmp	r6, #16
1a0031e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a0031e6:	4f86      	ldr	r7, [pc, #536]	; (1a003400 <_vfprintf_r+0xbb8>)
1a0031e8:	dd1f      	ble.n	1a00322a <_vfprintf_r+0x9e2>
1a0031ea:	f04f 0a10 	mov.w	sl, #16
1a0031ee:	465b      	mov	r3, fp
1a0031f0:	e004      	b.n	1a0031fc <_vfprintf_r+0x9b4>
1a0031f2:	3e10      	subs	r6, #16
1a0031f4:	2e10      	cmp	r6, #16
1a0031f6:	f104 0408 	add.w	r4, r4, #8
1a0031fa:	dd15      	ble.n	1a003228 <_vfprintf_r+0x9e0>
1a0031fc:	3201      	adds	r2, #1
1a0031fe:	3310      	adds	r3, #16
1a003200:	2a07      	cmp	r2, #7
1a003202:	9321      	str	r3, [sp, #132]	; 0x84
1a003204:	9220      	str	r2, [sp, #128]	; 0x80
1a003206:	e884 0480 	stmia.w	r4, {r7, sl}
1a00320a:	ddf2      	ble.n	1a0031f2 <_vfprintf_r+0x9aa>
1a00320c:	4640      	mov	r0, r8
1a00320e:	4649      	mov	r1, r9
1a003210:	aa1f      	add	r2, sp, #124	; 0x7c
1a003212:	f003 fb33 	bl	1a00687c <__sprint_r>
1a003216:	2800      	cmp	r0, #0
1a003218:	f47f ac16 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00321c:	3e10      	subs	r6, #16
1a00321e:	2e10      	cmp	r6, #16
1a003220:	9b21      	ldr	r3, [sp, #132]	; 0x84
1a003222:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a003224:	ac2c      	add	r4, sp, #176	; 0xb0
1a003226:	dce9      	bgt.n	1a0031fc <_vfprintf_r+0x9b4>
1a003228:	469b      	mov	fp, r3
1a00322a:	3201      	adds	r2, #1
1a00322c:	44b3      	add	fp, r6
1a00322e:	2a07      	cmp	r2, #7
1a003230:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003234:	9220      	str	r2, [sp, #128]	; 0x80
1a003236:	6027      	str	r7, [r4, #0]
1a003238:	6066      	str	r6, [r4, #4]
1a00323a:	f300 821a 	bgt.w	1a003672 <_vfprintf_r+0xe2a>
1a00323e:	3408      	adds	r4, #8
1a003240:	e4d9      	b.n	1a002bf6 <_vfprintf_r+0x3ae>
1a003242:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003244:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a003246:	2b01      	cmp	r3, #1
1a003248:	f340 81d5 	ble.w	1a0035f6 <_vfprintf_r+0xdae>
1a00324c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00324e:	6023      	str	r3, [r4, #0]
1a003250:	3501      	adds	r5, #1
1a003252:	f10b 0601 	add.w	r6, fp, #1
1a003256:	2301      	movs	r3, #1
1a003258:	2d07      	cmp	r5, #7
1a00325a:	9621      	str	r6, [sp, #132]	; 0x84
1a00325c:	9520      	str	r5, [sp, #128]	; 0x80
1a00325e:	6063      	str	r3, [r4, #4]
1a003260:	f300 81e5 	bgt.w	1a00362e <_vfprintf_r+0xde6>
1a003264:	3408      	adds	r4, #8
1a003266:	9a12      	ldr	r2, [sp, #72]	; 0x48
1a003268:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a00326a:	6023      	str	r3, [r4, #0]
1a00326c:	3501      	adds	r5, #1
1a00326e:	4416      	add	r6, r2
1a003270:	2d07      	cmp	r5, #7
1a003272:	9621      	str	r6, [sp, #132]	; 0x84
1a003274:	9520      	str	r5, [sp, #128]	; 0x80
1a003276:	6062      	str	r2, [r4, #4]
1a003278:	f300 81ef 	bgt.w	1a00365a <_vfprintf_r+0xe12>
1a00327c:	3408      	adds	r4, #8
1a00327e:	2300      	movs	r3, #0
1a003280:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a003284:	2200      	movs	r2, #0
1a003286:	f003 fcc3 	bl	1a006c10 <__aeabi_dcmpeq>
1a00328a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00328c:	2800      	cmp	r0, #0
1a00328e:	f040 80e1 	bne.w	1a003454 <_vfprintf_r+0xc0c>
1a003292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003294:	3b01      	subs	r3, #1
1a003296:	3501      	adds	r5, #1
1a003298:	3201      	adds	r2, #1
1a00329a:	441e      	add	r6, r3
1a00329c:	2d07      	cmp	r5, #7
1a00329e:	9520      	str	r5, [sp, #128]	; 0x80
1a0032a0:	9621      	str	r6, [sp, #132]	; 0x84
1a0032a2:	6022      	str	r2, [r4, #0]
1a0032a4:	6063      	str	r3, [r4, #4]
1a0032a6:	f300 81b6 	bgt.w	1a003616 <_vfprintf_r+0xdce>
1a0032aa:	3408      	adds	r4, #8
1a0032ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
1a0032ae:	6062      	str	r2, [r4, #4]
1a0032b0:	3501      	adds	r5, #1
1a0032b2:	eb06 0b02 	add.w	fp, r6, r2
1a0032b6:	ab1b      	add	r3, sp, #108	; 0x6c
1a0032b8:	2d07      	cmp	r5, #7
1a0032ba:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0032be:	9520      	str	r5, [sp, #128]	; 0x80
1a0032c0:	6023      	str	r3, [r4, #0]
1a0032c2:	f77f ace3 	ble.w	1a002c8c <_vfprintf_r+0x444>
1a0032c6:	4640      	mov	r0, r8
1a0032c8:	4649      	mov	r1, r9
1a0032ca:	aa1f      	add	r2, sp, #124	; 0x7c
1a0032cc:	f003 fad6 	bl	1a00687c <__sprint_r>
1a0032d0:	2800      	cmp	r0, #0
1a0032d2:	f47f abb9 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a0032d6:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a0032da:	ac2c      	add	r4, sp, #176	; 0xb0
1a0032dc:	e4d7      	b.n	1a002c8e <_vfprintf_r+0x446>
1a0032de:	4640      	mov	r0, r8
1a0032e0:	4649      	mov	r1, r9
1a0032e2:	aa1f      	add	r2, sp, #124	; 0x7c
1a0032e4:	f003 faca 	bl	1a00687c <__sprint_r>
1a0032e8:	2800      	cmp	r0, #0
1a0032ea:	f43f ad1a 	beq.w	1a002d22 <_vfprintf_r+0x4da>
1a0032ee:	f7ff bbab 	b.w	1a002a48 <_vfprintf_r+0x200>
1a0032f2:	2b00      	cmp	r3, #0
1a0032f4:	d133      	bne.n	1a00335e <_vfprintf_r+0xb16>
1a0032f6:	9b02      	ldr	r3, [sp, #8]
1a0032f8:	07da      	lsls	r2, r3, #31
1a0032fa:	d530      	bpl.n	1a00335e <_vfprintf_r+0xb16>
1a0032fc:	f10d 0bf0 	add.w	fp, sp, #240	; 0xf0
1a003300:	2330      	movs	r3, #48	; 0x30
1a003302:	f80b 3d41 	strb.w	r3, [fp, #-65]!
1a003306:	ab2c      	add	r3, sp, #176	; 0xb0
1a003308:	ebcb 0303 	rsb	r3, fp, r3
1a00330c:	9307      	str	r3, [sp, #28]
1a00330e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
1a003312:	f7ff bbef 	b.w	1a002af4 <_vfprintf_r+0x2ac>
1a003316:	4640      	mov	r0, r8
1a003318:	4649      	mov	r1, r9
1a00331a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00331c:	f003 faae 	bl	1a00687c <__sprint_r>
1a003320:	2800      	cmp	r0, #0
1a003322:	f47f ab91 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003326:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00332a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00332c:	e49d      	b.n	1a002c6a <_vfprintf_r+0x422>
1a00332e:	4640      	mov	r0, r8
1a003330:	4649      	mov	r1, r9
1a003332:	aa1f      	add	r2, sp, #124	; 0x7c
1a003334:	f003 faa2 	bl	1a00687c <__sprint_r>
1a003338:	2800      	cmp	r0, #0
1a00333a:	f47f ab85 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00333e:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003342:	ac2c      	add	r4, sp, #176	; 0xb0
1a003344:	e443      	b.n	1a002bce <_vfprintf_r+0x386>
1a003346:	4640      	mov	r0, r8
1a003348:	4649      	mov	r1, r9
1a00334a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00334c:	f003 fa96 	bl	1a00687c <__sprint_r>
1a003350:	2800      	cmp	r0, #0
1a003352:	f47f ab79 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003356:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00335a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00335c:	e448      	b.n	1a002bf0 <_vfprintf_r+0x3a8>
1a00335e:	ab2c      	add	r3, sp, #176	; 0xb0
1a003360:	f8cd a01c 	str.w	sl, [sp, #28]
1a003364:	930a      	str	r3, [sp, #40]	; 0x28
1a003366:	f7ff bbc5 	b.w	1a002af4 <_vfprintf_r+0x2ac>
1a00336a:	9810      	ldr	r0, [sp, #64]	; 0x40
1a00336c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
1a003370:	0933      	lsrs	r3, r6, #4
1a003372:	f006 010f 	and.w	r1, r6, #15
1a003376:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
1a00337a:	093a      	lsrs	r2, r7, #4
1a00337c:	461e      	mov	r6, r3
1a00337e:	4617      	mov	r7, r2
1a003380:	5c43      	ldrb	r3, [r0, r1]
1a003382:	f80b 3d01 	strb.w	r3, [fp, #-1]!
1a003386:	ea56 0307 	orrs.w	r3, r6, r7
1a00338a:	d1f1      	bne.n	1a003370 <_vfprintf_r+0xb28>
1a00338c:	465a      	mov	r2, fp
1a00338e:	ab2c      	add	r3, sp, #176	; 0xb0
1a003390:	1a9b      	subs	r3, r3, r2
1a003392:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
1a003396:	9307      	str	r3, [sp, #28]
1a003398:	f7ff bbac 	b.w	1a002af4 <_vfprintf_r+0x2ac>
1a00339c:	2302      	movs	r3, #2
1a00339e:	f7ff bb77 	b.w	1a002a90 <_vfprintf_r+0x248>
1a0033a2:	9d19      	ldr	r5, [sp, #100]	; 0x64
1a0033a4:	2d00      	cmp	r5, #0
1a0033a6:	f340 8257 	ble.w	1a003858 <_vfprintf_r+0x1010>
1a0033aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a0033ac:	990c      	ldr	r1, [sp, #48]	; 0x30
1a0033ae:	428a      	cmp	r2, r1
1a0033b0:	4613      	mov	r3, r2
1a0033b2:	bfa8      	it	ge
1a0033b4:	460b      	movge	r3, r1
1a0033b6:	461d      	mov	r5, r3
1a0033b8:	990a      	ldr	r1, [sp, #40]	; 0x28
1a0033ba:	2d00      	cmp	r5, #0
1a0033bc:	eb01 0a02 	add.w	sl, r1, r2
1a0033c0:	dd0b      	ble.n	1a0033da <_vfprintf_r+0xb92>
1a0033c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0033c4:	6021      	str	r1, [r4, #0]
1a0033c6:	3301      	adds	r3, #1
1a0033c8:	44ab      	add	fp, r5
1a0033ca:	2b07      	cmp	r3, #7
1a0033cc:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0033d0:	6065      	str	r5, [r4, #4]
1a0033d2:	9320      	str	r3, [sp, #128]	; 0x80
1a0033d4:	f300 8309 	bgt.w	1a0039ea <_vfprintf_r+0x11a2>
1a0033d8:	3408      	adds	r4, #8
1a0033da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0033dc:	2d00      	cmp	r5, #0
1a0033de:	bfa8      	it	ge
1a0033e0:	1b5b      	subge	r3, r3, r5
1a0033e2:	2b00      	cmp	r3, #0
1a0033e4:	461d      	mov	r5, r3
1a0033e6:	f340 80b0 	ble.w	1a00354a <_vfprintf_r+0xd02>
1a0033ea:	2d10      	cmp	r5, #16
1a0033ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0033ee:	4f04      	ldr	r7, [pc, #16]	; (1a003400 <_vfprintf_r+0xbb8>)
1a0033f0:	f340 821a 	ble.w	1a003828 <_vfprintf_r+0xfe0>
1a0033f4:	2610      	movs	r6, #16
1a0033f6:	465a      	mov	r2, fp
1a0033f8:	e009      	b.n	1a00340e <_vfprintf_r+0xbc6>
1a0033fa:	bf00      	nop
1a0033fc:	1a0070d4 	.word	0x1a0070d4
1a003400:	1a007084 	.word	0x1a007084
1a003404:	3408      	adds	r4, #8
1a003406:	3d10      	subs	r5, #16
1a003408:	2d10      	cmp	r5, #16
1a00340a:	f340 820c 	ble.w	1a003826 <_vfprintf_r+0xfde>
1a00340e:	3301      	adds	r3, #1
1a003410:	3210      	adds	r2, #16
1a003412:	2b07      	cmp	r3, #7
1a003414:	9221      	str	r2, [sp, #132]	; 0x84
1a003416:	9320      	str	r3, [sp, #128]	; 0x80
1a003418:	6027      	str	r7, [r4, #0]
1a00341a:	6066      	str	r6, [r4, #4]
1a00341c:	ddf2      	ble.n	1a003404 <_vfprintf_r+0xbbc>
1a00341e:	4640      	mov	r0, r8
1a003420:	4649      	mov	r1, r9
1a003422:	aa1f      	add	r2, sp, #124	; 0x7c
1a003424:	f003 fa2a 	bl	1a00687c <__sprint_r>
1a003428:	2800      	cmp	r0, #0
1a00342a:	f47f ab0d 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00342e:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a003430:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003432:	ac2c      	add	r4, sp, #176	; 0xb0
1a003434:	e7e7      	b.n	1a003406 <_vfprintf_r+0xbbe>
1a003436:	4640      	mov	r0, r8
1a003438:	4649      	mov	r1, r9
1a00343a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00343c:	f003 fa1e 	bl	1a00687c <__sprint_r>
1a003440:	2800      	cmp	r0, #0
1a003442:	f47f ab01 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003446:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a00344a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00344e:	ac2c      	add	r4, sp, #176	; 0xb0
1a003450:	f7ff bbaa 	b.w	1a002ba8 <_vfprintf_r+0x360>
1a003454:	f103 3aff 	add.w	sl, r3, #4294967295
1a003458:	f1ba 0f00 	cmp.w	sl, #0
1a00345c:	f77f af26 	ble.w	1a0032ac <_vfprintf_r+0xa64>
1a003460:	f1ba 0f10 	cmp.w	sl, #16
1a003464:	4f8f      	ldr	r7, [pc, #572]	; (1a0036a4 <_vfprintf_r+0xe5c>)
1a003466:	bfc8      	it	gt
1a003468:	f04f 0b10 	movgt.w	fp, #16
1a00346c:	dc07      	bgt.n	1a00347e <_vfprintf_r+0xc36>
1a00346e:	e0ea      	b.n	1a003646 <_vfprintf_r+0xdfe>
1a003470:	3408      	adds	r4, #8
1a003472:	f1aa 0a10 	sub.w	sl, sl, #16
1a003476:	f1ba 0f10 	cmp.w	sl, #16
1a00347a:	f340 80e4 	ble.w	1a003646 <_vfprintf_r+0xdfe>
1a00347e:	3501      	adds	r5, #1
1a003480:	3610      	adds	r6, #16
1a003482:	2d07      	cmp	r5, #7
1a003484:	9621      	str	r6, [sp, #132]	; 0x84
1a003486:	9520      	str	r5, [sp, #128]	; 0x80
1a003488:	e884 0880 	stmia.w	r4, {r7, fp}
1a00348c:	ddf0      	ble.n	1a003470 <_vfprintf_r+0xc28>
1a00348e:	4640      	mov	r0, r8
1a003490:	4649      	mov	r1, r9
1a003492:	aa1f      	add	r2, sp, #124	; 0x7c
1a003494:	f003 f9f2 	bl	1a00687c <__sprint_r>
1a003498:	2800      	cmp	r0, #0
1a00349a:	f47f aad5 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00349e:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a0034a0:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a0034a2:	ac2c      	add	r4, sp, #176	; 0xb0
1a0034a4:	e7e5      	b.n	1a003472 <_vfprintf_r+0xc2a>
1a0034a6:	9908      	ldr	r1, [sp, #32]
1a0034a8:	460a      	mov	r2, r1
1a0034aa:	3204      	adds	r2, #4
1a0034ac:	680e      	ldr	r6, [r1, #0]
1a0034ae:	9208      	str	r2, [sp, #32]
1a0034b0:	2700      	movs	r7, #0
1a0034b2:	f7ff baed 	b.w	1a002a90 <_vfprintf_r+0x248>
1a0034b6:	9a08      	ldr	r2, [sp, #32]
1a0034b8:	6816      	ldr	r6, [r2, #0]
1a0034ba:	4613      	mov	r3, r2
1a0034bc:	3304      	adds	r3, #4
1a0034be:	17f7      	asrs	r7, r6, #31
1a0034c0:	9308      	str	r3, [sp, #32]
1a0034c2:	4632      	mov	r2, r6
1a0034c4:	463b      	mov	r3, r7
1a0034c6:	e4c0      	b.n	1a002e4a <_vfprintf_r+0x602>
1a0034c8:	4693      	mov	fp, r2
1a0034ca:	3301      	adds	r3, #1
1a0034cc:	44ab      	add	fp, r5
1a0034ce:	2b07      	cmp	r3, #7
1a0034d0:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0034d4:	9320      	str	r3, [sp, #128]	; 0x80
1a0034d6:	6027      	str	r7, [r4, #0]
1a0034d8:	6065      	str	r5, [r4, #4]
1a0034da:	f77f abd7 	ble.w	1a002c8c <_vfprintf_r+0x444>
1a0034de:	e6f2      	b.n	1a0032c6 <_vfprintf_r+0xa7e>
1a0034e0:	2b30      	cmp	r3, #48	; 0x30
1a0034e2:	f000 823e 	beq.w	1a003962 <_vfprintf_r+0x111a>
1a0034e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0034e8:	3b01      	subs	r3, #1
1a0034ea:	461a      	mov	r2, r3
1a0034ec:	a82c      	add	r0, sp, #176	; 0xb0
1a0034ee:	930a      	str	r3, [sp, #40]	; 0x28
1a0034f0:	1a82      	subs	r2, r0, r2
1a0034f2:	2330      	movs	r3, #48	; 0x30
1a0034f4:	9207      	str	r2, [sp, #28]
1a0034f6:	f801 3c01 	strb.w	r3, [r1, #-1]
1a0034fa:	f7ff bafb 	b.w	1a002af4 <_vfprintf_r+0x2ac>
1a0034fe:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
1a003502:	f8cd c00c 	str.w	ip, [sp, #12]
1a003506:	4630      	mov	r0, r6
1a003508:	4639      	mov	r1, r7
1a00350a:	220a      	movs	r2, #10
1a00350c:	2300      	movs	r3, #0
1a00350e:	f7fe fb37 	bl	1a001b80 <__aeabi_uldivmod>
1a003512:	3230      	adds	r2, #48	; 0x30
1a003514:	4630      	mov	r0, r6
1a003516:	4639      	mov	r1, r7
1a003518:	f80b 2d01 	strb.w	r2, [fp, #-1]!
1a00351c:	2300      	movs	r3, #0
1a00351e:	220a      	movs	r2, #10
1a003520:	f7fe fb2e 	bl	1a001b80 <__aeabi_uldivmod>
1a003524:	4606      	mov	r6, r0
1a003526:	460f      	mov	r7, r1
1a003528:	ea56 0307 	orrs.w	r3, r6, r7
1a00352c:	d1eb      	bne.n	1a003506 <_vfprintf_r+0xcbe>
1a00352e:	f8dd c00c 	ldr.w	ip, [sp, #12]
1a003532:	e72b      	b.n	1a00338c <_vfprintf_r+0xb44>
1a003534:	4640      	mov	r0, r8
1a003536:	4649      	mov	r1, r9
1a003538:	aa1f      	add	r2, sp, #124	; 0x7c
1a00353a:	f003 f99f 	bl	1a00687c <__sprint_r>
1a00353e:	2800      	cmp	r0, #0
1a003540:	f47f aa82 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003544:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003548:	ac2c      	add	r4, sp, #176	; 0xb0
1a00354a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a00354c:	990c      	ldr	r1, [sp, #48]	; 0x30
1a00354e:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a003550:	440a      	add	r2, r1
1a003552:	4616      	mov	r6, r2
1a003554:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003556:	4293      	cmp	r3, r2
1a003558:	db3e      	blt.n	1a0035d8 <_vfprintf_r+0xd90>
1a00355a:	9a02      	ldr	r2, [sp, #8]
1a00355c:	07d5      	lsls	r5, r2, #31
1a00355e:	d43b      	bmi.n	1a0035d8 <_vfprintf_r+0xd90>
1a003560:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003562:	ebc6 050a 	rsb	r5, r6, sl
1a003566:	1ad3      	subs	r3, r2, r3
1a003568:	429d      	cmp	r5, r3
1a00356a:	bfa8      	it	ge
1a00356c:	461d      	movge	r5, r3
1a00356e:	2d00      	cmp	r5, #0
1a003570:	462f      	mov	r7, r5
1a003572:	dd0b      	ble.n	1a00358c <_vfprintf_r+0xd44>
1a003574:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a003576:	6026      	str	r6, [r4, #0]
1a003578:	3201      	adds	r2, #1
1a00357a:	44ab      	add	fp, r5
1a00357c:	2a07      	cmp	r2, #7
1a00357e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003582:	6065      	str	r5, [r4, #4]
1a003584:	9220      	str	r2, [sp, #128]	; 0x80
1a003586:	f300 8266 	bgt.w	1a003a56 <_vfprintf_r+0x120e>
1a00358a:	3408      	adds	r4, #8
1a00358c:	2f00      	cmp	r7, #0
1a00358e:	bfac      	ite	ge
1a003590:	1bdd      	subge	r5, r3, r7
1a003592:	461d      	movlt	r5, r3
1a003594:	2d00      	cmp	r5, #0
1a003596:	f77f ab7a 	ble.w	1a002c8e <_vfprintf_r+0x446>
1a00359a:	2d10      	cmp	r5, #16
1a00359c:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a00359e:	4f41      	ldr	r7, [pc, #260]	; (1a0036a4 <_vfprintf_r+0xe5c>)
1a0035a0:	dd93      	ble.n	1a0034ca <_vfprintf_r+0xc82>
1a0035a2:	2610      	movs	r6, #16
1a0035a4:	465a      	mov	r2, fp
1a0035a6:	e003      	b.n	1a0035b0 <_vfprintf_r+0xd68>
1a0035a8:	3408      	adds	r4, #8
1a0035aa:	3d10      	subs	r5, #16
1a0035ac:	2d10      	cmp	r5, #16
1a0035ae:	dd8b      	ble.n	1a0034c8 <_vfprintf_r+0xc80>
1a0035b0:	3301      	adds	r3, #1
1a0035b2:	3210      	adds	r2, #16
1a0035b4:	2b07      	cmp	r3, #7
1a0035b6:	9221      	str	r2, [sp, #132]	; 0x84
1a0035b8:	9320      	str	r3, [sp, #128]	; 0x80
1a0035ba:	6027      	str	r7, [r4, #0]
1a0035bc:	6066      	str	r6, [r4, #4]
1a0035be:	ddf3      	ble.n	1a0035a8 <_vfprintf_r+0xd60>
1a0035c0:	4640      	mov	r0, r8
1a0035c2:	4649      	mov	r1, r9
1a0035c4:	aa1f      	add	r2, sp, #124	; 0x7c
1a0035c6:	f003 f959 	bl	1a00687c <__sprint_r>
1a0035ca:	2800      	cmp	r0, #0
1a0035cc:	f47f aa3c 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a0035d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0035d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0035d4:	ac2c      	add	r4, sp, #176	; 0xb0
1a0035d6:	e7e8      	b.n	1a0035aa <_vfprintf_r+0xd62>
1a0035d8:	9a20      	ldr	r2, [sp, #128]	; 0x80
1a0035da:	9812      	ldr	r0, [sp, #72]	; 0x48
1a0035dc:	9911      	ldr	r1, [sp, #68]	; 0x44
1a0035de:	6021      	str	r1, [r4, #0]
1a0035e0:	3201      	adds	r2, #1
1a0035e2:	4483      	add	fp, r0
1a0035e4:	2a07      	cmp	r2, #7
1a0035e6:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a0035ea:	6060      	str	r0, [r4, #4]
1a0035ec:	9220      	str	r2, [sp, #128]	; 0x80
1a0035ee:	f300 8208 	bgt.w	1a003a02 <_vfprintf_r+0x11ba>
1a0035f2:	3408      	adds	r4, #8
1a0035f4:	e7b4      	b.n	1a003560 <_vfprintf_r+0xd18>
1a0035f6:	9b02      	ldr	r3, [sp, #8]
1a0035f8:	07d8      	lsls	r0, r3, #31
1a0035fa:	f53f ae27 	bmi.w	1a00324c <_vfprintf_r+0xa04>
1a0035fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003600:	6023      	str	r3, [r4, #0]
1a003602:	3501      	adds	r5, #1
1a003604:	f10b 0601 	add.w	r6, fp, #1
1a003608:	2301      	movs	r3, #1
1a00360a:	2d07      	cmp	r5, #7
1a00360c:	9621      	str	r6, [sp, #132]	; 0x84
1a00360e:	9520      	str	r5, [sp, #128]	; 0x80
1a003610:	6063      	str	r3, [r4, #4]
1a003612:	f77f ae4a 	ble.w	1a0032aa <_vfprintf_r+0xa62>
1a003616:	4640      	mov	r0, r8
1a003618:	4649      	mov	r1, r9
1a00361a:	aa1f      	add	r2, sp, #124	; 0x7c
1a00361c:	f003 f92e 	bl	1a00687c <__sprint_r>
1a003620:	2800      	cmp	r0, #0
1a003622:	f47f aa11 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003626:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a003628:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a00362a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00362c:	e63e      	b.n	1a0032ac <_vfprintf_r+0xa64>
1a00362e:	4640      	mov	r0, r8
1a003630:	4649      	mov	r1, r9
1a003632:	aa1f      	add	r2, sp, #124	; 0x7c
1a003634:	f003 f922 	bl	1a00687c <__sprint_r>
1a003638:	2800      	cmp	r0, #0
1a00363a:	f47f aa05 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00363e:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a003640:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a003642:	ac2c      	add	r4, sp, #176	; 0xb0
1a003644:	e60f      	b.n	1a003266 <_vfprintf_r+0xa1e>
1a003646:	3501      	adds	r5, #1
1a003648:	4456      	add	r6, sl
1a00364a:	2d07      	cmp	r5, #7
1a00364c:	9621      	str	r6, [sp, #132]	; 0x84
1a00364e:	9520      	str	r5, [sp, #128]	; 0x80
1a003650:	e884 0480 	stmia.w	r4, {r7, sl}
1a003654:	f77f ae29 	ble.w	1a0032aa <_vfprintf_r+0xa62>
1a003658:	e7dd      	b.n	1a003616 <_vfprintf_r+0xdce>
1a00365a:	4640      	mov	r0, r8
1a00365c:	4649      	mov	r1, r9
1a00365e:	aa1f      	add	r2, sp, #124	; 0x7c
1a003660:	f003 f90c 	bl	1a00687c <__sprint_r>
1a003664:	2800      	cmp	r0, #0
1a003666:	f47f a9ef 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00366a:	9e21      	ldr	r6, [sp, #132]	; 0x84
1a00366c:	9d20      	ldr	r5, [sp, #128]	; 0x80
1a00366e:	ac2c      	add	r4, sp, #176	; 0xb0
1a003670:	e605      	b.n	1a00327e <_vfprintf_r+0xa36>
1a003672:	4640      	mov	r0, r8
1a003674:	4649      	mov	r1, r9
1a003676:	aa1f      	add	r2, sp, #124	; 0x7c
1a003678:	f003 f900 	bl	1a00687c <__sprint_r>
1a00367c:	2800      	cmp	r0, #0
1a00367e:	f47f a9e3 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003682:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003686:	ac2c      	add	r4, sp, #176	; 0xb0
1a003688:	f7ff bab5 	b.w	1a002bf6 <_vfprintf_r+0x3ae>
1a00368c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a003690:	4276      	negs	r6, r6
1a003692:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
1a003696:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a00369a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a00369e:	2301      	movs	r3, #1
1a0036a0:	f7ff b9fc 	b.w	1a002a9c <_vfprintf_r+0x254>
1a0036a4:	1a007084 	.word	0x1a007084
1a0036a8:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
1a0036ac:	f003 f83a 	bl	1a006724 <__fpclassifyd>
1a0036b0:	2800      	cmp	r0, #0
1a0036b2:	f000 8116 	beq.w	1a0038e2 <_vfprintf_r+0x109a>
1a0036b6:	f025 0320 	bic.w	r3, r5, #32
1a0036ba:	f1ba 3fff 	cmp.w	sl, #4294967295
1a0036be:	9303      	str	r3, [sp, #12]
1a0036c0:	f000 8260 	beq.w	1a003b84 <_vfprintf_r+0x133c>
1a0036c4:	2b47      	cmp	r3, #71	; 0x47
1a0036c6:	d105      	bne.n	1a0036d4 <_vfprintf_r+0xe8c>
1a0036c8:	f1ba 0f00 	cmp.w	sl, #0
1a0036cc:	bf14      	ite	ne
1a0036ce:	46d3      	movne	fp, sl
1a0036d0:	f04f 0b01 	moveq.w	fp, #1
1a0036d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a0036d6:	9a02      	ldr	r2, [sp, #8]
1a0036d8:	2b00      	cmp	r3, #0
1a0036da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a0036de:	9209      	str	r2, [sp, #36]	; 0x24
1a0036e0:	f2c0 8260 	blt.w	1a003ba4 <_vfprintf_r+0x135c>
1a0036e4:	ed9d 7b0e 	vldr	d7, [sp, #56]	; 0x38
1a0036e8:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
1a0036ec:	f04f 0a00 	mov.w	sl, #0
1a0036f0:	2d66      	cmp	r5, #102	; 0x66
1a0036f2:	f000 815e 	beq.w	1a0039b2 <_vfprintf_r+0x116a>
1a0036f6:	2d46      	cmp	r5, #70	; 0x46
1a0036f8:	f000 815b 	beq.w	1a0039b2 <_vfprintf_r+0x116a>
1a0036fc:	9b03      	ldr	r3, [sp, #12]
1a0036fe:	2b45      	cmp	r3, #69	; 0x45
1a003700:	bf0c      	ite	eq
1a003702:	f10b 0701 	addeq.w	r7, fp, #1
1a003706:	465f      	movne	r7, fp
1a003708:	aa1a      	add	r2, sp, #104	; 0x68
1a00370a:	ab1d      	add	r3, sp, #116	; 0x74
1a00370c:	e88d 000c 	stmia.w	sp, {r2, r3}
1a003710:	4640      	mov	r0, r8
1a003712:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
1a003716:	2102      	movs	r1, #2
1a003718:	463a      	mov	r2, r7
1a00371a:	ab19      	add	r3, sp, #100	; 0x64
1a00371c:	f000 fbdc 	bl	1a003ed8 <_dtoa_r>
1a003720:	2d67      	cmp	r5, #103	; 0x67
1a003722:	900a      	str	r0, [sp, #40]	; 0x28
1a003724:	d002      	beq.n	1a00372c <_vfprintf_r+0xee4>
1a003726:	2d47      	cmp	r5, #71	; 0x47
1a003728:	f040 8151 	bne.w	1a0039ce <_vfprintf_r+0x1186>
1a00372c:	9b02      	ldr	r3, [sp, #8]
1a00372e:	07db      	lsls	r3, r3, #31
1a003730:	f140 8241 	bpl.w	1a003bb6 <_vfprintf_r+0x136e>
1a003734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a003736:	19de      	adds	r6, r3, r7
1a003738:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a00373c:	2200      	movs	r2, #0
1a00373e:	2300      	movs	r3, #0
1a003740:	f003 fa66 	bl	1a006c10 <__aeabi_dcmpeq>
1a003744:	2800      	cmp	r0, #0
1a003746:	f040 81ad 	bne.w	1a003aa4 <_vfprintf_r+0x125c>
1a00374a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1a00374c:	429e      	cmp	r6, r3
1a00374e:	d906      	bls.n	1a00375e <_vfprintf_r+0xf16>
1a003750:	2130      	movs	r1, #48	; 0x30
1a003752:	1c5a      	adds	r2, r3, #1
1a003754:	921d      	str	r2, [sp, #116]	; 0x74
1a003756:	7019      	strb	r1, [r3, #0]
1a003758:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1a00375a:	429e      	cmp	r6, r3
1a00375c:	d8f9      	bhi.n	1a003752 <_vfprintf_r+0xf0a>
1a00375e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003760:	1a9b      	subs	r3, r3, r2
1a003762:	930d      	str	r3, [sp, #52]	; 0x34
1a003764:	9b03      	ldr	r3, [sp, #12]
1a003766:	2b47      	cmp	r3, #71	; 0x47
1a003768:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a00376a:	f000 8183 	beq.w	1a003a74 <_vfprintf_r+0x122c>
1a00376e:	2d65      	cmp	r5, #101	; 0x65
1a003770:	f340 81a6 	ble.w	1a003ac0 <_vfprintf_r+0x1278>
1a003774:	2d66      	cmp	r5, #102	; 0x66
1a003776:	930c      	str	r3, [sp, #48]	; 0x30
1a003778:	f000 821f 	beq.w	1a003bba <_vfprintf_r+0x1372>
1a00377c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a00377e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a003780:	4293      	cmp	r3, r2
1a003782:	f300 8202 	bgt.w	1a003b8a <_vfprintf_r+0x1342>
1a003786:	9b02      	ldr	r3, [sp, #8]
1a003788:	07d9      	lsls	r1, r3, #31
1a00378a:	f100 8239 	bmi.w	1a003c00 <_vfprintf_r+0x13b8>
1a00378e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a003792:	9207      	str	r2, [sp, #28]
1a003794:	f1ba 0f00 	cmp.w	sl, #0
1a003798:	f040 8179 	bne.w	1a003a8e <_vfprintf_r+0x1246>
1a00379c:	9303      	str	r3, [sp, #12]
1a00379e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0037a0:	9302      	str	r3, [sp, #8]
1a0037a2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
1a0037a6:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a0037aa:	f7ff b9ab 	b.w	1a002b04 <_vfprintf_r+0x2bc>
1a0037ae:	f027 0707 	bic.w	r7, r7, #7
1a0037b2:	ed97 7b00 	vldr	d7, [r7]
1a0037b6:	f107 0308 	add.w	r3, r7, #8
1a0037ba:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
1a0037be:	9308      	str	r3, [sp, #32]
1a0037c0:	f7ff bb63 	b.w	1a002e8a <_vfprintf_r+0x642>
1a0037c4:	9b02      	ldr	r3, [sp, #8]
1a0037c6:	06db      	lsls	r3, r3, #27
1a0037c8:	d40b      	bmi.n	1a0037e2 <_vfprintf_r+0xf9a>
1a0037ca:	9b02      	ldr	r3, [sp, #8]
1a0037cc:	065f      	lsls	r7, r3, #25
1a0037ce:	d508      	bpl.n	1a0037e2 <_vfprintf_r+0xf9a>
1a0037d0:	9a08      	ldr	r2, [sp, #32]
1a0037d2:	6813      	ldr	r3, [r2, #0]
1a0037d4:	3204      	adds	r2, #4
1a0037d6:	9208      	str	r2, [sp, #32]
1a0037d8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
1a0037dc:	801a      	strh	r2, [r3, #0]
1a0037de:	f7ff b874 	b.w	1a0028ca <_vfprintf_r+0x82>
1a0037e2:	9a08      	ldr	r2, [sp, #32]
1a0037e4:	6813      	ldr	r3, [r2, #0]
1a0037e6:	3204      	adds	r2, #4
1a0037e8:	9208      	str	r2, [sp, #32]
1a0037ea:	9a05      	ldr	r2, [sp, #20]
1a0037ec:	601a      	str	r2, [r3, #0]
1a0037ee:	f7ff b86c 	b.w	1a0028ca <_vfprintf_r+0x82>
1a0037f2:	9b02      	ldr	r3, [sp, #8]
1a0037f4:	9a08      	ldr	r2, [sp, #32]
1a0037f6:	f013 0f40 	tst.w	r3, #64	; 0x40
1a0037fa:	4613      	mov	r3, r2
1a0037fc:	f43f ac62 	beq.w	1a0030c4 <_vfprintf_r+0x87c>
1a003800:	8816      	ldrh	r6, [r2, #0]
1a003802:	3204      	adds	r2, #4
1a003804:	2700      	movs	r7, #0
1a003806:	2301      	movs	r3, #1
1a003808:	9208      	str	r2, [sp, #32]
1a00380a:	f7ff b941 	b.w	1a002a90 <_vfprintf_r+0x248>
1a00380e:	9b02      	ldr	r3, [sp, #8]
1a003810:	9a08      	ldr	r2, [sp, #32]
1a003812:	f013 0f40 	tst.w	r3, #64	; 0x40
1a003816:	4613      	mov	r3, r2
1a003818:	d076      	beq.n	1a003908 <_vfprintf_r+0x10c0>
1a00381a:	3304      	adds	r3, #4
1a00381c:	8816      	ldrh	r6, [r2, #0]
1a00381e:	9308      	str	r3, [sp, #32]
1a003820:	2700      	movs	r7, #0
1a003822:	f7ff bad3 	b.w	1a002dcc <_vfprintf_r+0x584>
1a003826:	4693      	mov	fp, r2
1a003828:	3301      	adds	r3, #1
1a00382a:	44ab      	add	fp, r5
1a00382c:	2b07      	cmp	r3, #7
1a00382e:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003832:	9320      	str	r3, [sp, #128]	; 0x80
1a003834:	6027      	str	r7, [r4, #0]
1a003836:	6065      	str	r5, [r4, #4]
1a003838:	f73f ae7c 	bgt.w	1a003534 <_vfprintf_r+0xcec>
1a00383c:	3408      	adds	r4, #8
1a00383e:	e684      	b.n	1a00354a <_vfprintf_r+0xd02>
1a003840:	4640      	mov	r0, r8
1a003842:	4649      	mov	r1, r9
1a003844:	aa1f      	add	r2, sp, #124	; 0x7c
1a003846:	f003 f819 	bl	1a00687c <__sprint_r>
1a00384a:	2800      	cmp	r0, #0
1a00384c:	f47f a8fc 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003850:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003854:	ac2c      	add	r4, sp, #176	; 0xb0
1a003856:	e482      	b.n	1a00315e <_vfprintf_r+0x916>
1a003858:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a00385a:	4ab0      	ldr	r2, [pc, #704]	; (1a003b1c <_vfprintf_r+0x12d4>)
1a00385c:	6022      	str	r2, [r4, #0]
1a00385e:	3301      	adds	r3, #1
1a003860:	f10b 0b01 	add.w	fp, fp, #1
1a003864:	2201      	movs	r2, #1
1a003866:	2b07      	cmp	r3, #7
1a003868:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a00386c:	9320      	str	r3, [sp, #128]	; 0x80
1a00386e:	6062      	str	r2, [r4, #4]
1a003870:	dc50      	bgt.n	1a003914 <_vfprintf_r+0x10cc>
1a003872:	3408      	adds	r4, #8
1a003874:	b92d      	cbnz	r5, 1a003882 <_vfprintf_r+0x103a>
1a003876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003878:	b91b      	cbnz	r3, 1a003882 <_vfprintf_r+0x103a>
1a00387a:	9b02      	ldr	r3, [sp, #8]
1a00387c:	07de      	lsls	r6, r3, #31
1a00387e:	f57f aa06 	bpl.w	1a002c8e <_vfprintf_r+0x446>
1a003882:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003884:	9912      	ldr	r1, [sp, #72]	; 0x48
1a003886:	9a11      	ldr	r2, [sp, #68]	; 0x44
1a003888:	6022      	str	r2, [r4, #0]
1a00388a:	3301      	adds	r3, #1
1a00388c:	eb0b 0201 	add.w	r2, fp, r1
1a003890:	2b07      	cmp	r3, #7
1a003892:	9221      	str	r2, [sp, #132]	; 0x84
1a003894:	6061      	str	r1, [r4, #4]
1a003896:	9320      	str	r3, [sp, #128]	; 0x80
1a003898:	f300 8167 	bgt.w	1a003b6a <_vfprintf_r+0x1322>
1a00389c:	3408      	adds	r4, #8
1a00389e:	426d      	negs	r5, r5
1a0038a0:	2d00      	cmp	r5, #0
1a0038a2:	dd6f      	ble.n	1a003984 <_vfprintf_r+0x113c>
1a0038a4:	2d10      	cmp	r5, #16
1a0038a6:	4f9e      	ldr	r7, [pc, #632]	; (1a003b20 <_vfprintf_r+0x12d8>)
1a0038a8:	bfc8      	it	gt
1a0038aa:	2610      	movgt	r6, #16
1a0038ac:	dc05      	bgt.n	1a0038ba <_vfprintf_r+0x1072>
1a0038ae:	e0b5      	b.n	1a003a1c <_vfprintf_r+0x11d4>
1a0038b0:	3408      	adds	r4, #8
1a0038b2:	3d10      	subs	r5, #16
1a0038b4:	2d10      	cmp	r5, #16
1a0038b6:	f340 80b1 	ble.w	1a003a1c <_vfprintf_r+0x11d4>
1a0038ba:	3301      	adds	r3, #1
1a0038bc:	3210      	adds	r2, #16
1a0038be:	2b07      	cmp	r3, #7
1a0038c0:	9221      	str	r2, [sp, #132]	; 0x84
1a0038c2:	9320      	str	r3, [sp, #128]	; 0x80
1a0038c4:	6027      	str	r7, [r4, #0]
1a0038c6:	6066      	str	r6, [r4, #4]
1a0038c8:	ddf2      	ble.n	1a0038b0 <_vfprintf_r+0x1068>
1a0038ca:	4640      	mov	r0, r8
1a0038cc:	4649      	mov	r1, r9
1a0038ce:	aa1f      	add	r2, sp, #124	; 0x7c
1a0038d0:	f002 ffd4 	bl	1a00687c <__sprint_r>
1a0038d4:	2800      	cmp	r0, #0
1a0038d6:	f47f a8b7 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a0038da:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a0038dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a0038de:	ac2c      	add	r4, sp, #176	; 0xb0
1a0038e0:	e7e7      	b.n	1a0038b2 <_vfprintf_r+0x106a>
1a0038e2:	9e02      	ldr	r6, [sp, #8]
1a0038e4:	4a8f      	ldr	r2, [pc, #572]	; (1a003b24 <_vfprintf_r+0x12dc>)
1a0038e6:	4b90      	ldr	r3, [pc, #576]	; (1a003b28 <_vfprintf_r+0x12e0>)
1a0038e8:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a0038ec:	900b      	str	r0, [sp, #44]	; 0x2c
1a0038ee:	2103      	movs	r1, #3
1a0038f0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
1a0038f4:	2d47      	cmp	r5, #71	; 0x47
1a0038f6:	bfd8      	it	le
1a0038f8:	461a      	movle	r2, r3
1a0038fa:	9103      	str	r1, [sp, #12]
1a0038fc:	9602      	str	r6, [sp, #8]
1a0038fe:	900c      	str	r0, [sp, #48]	; 0x30
1a003900:	920a      	str	r2, [sp, #40]	; 0x28
1a003902:	9107      	str	r1, [sp, #28]
1a003904:	f7ff b8fe 	b.w	1a002b04 <_vfprintf_r+0x2bc>
1a003908:	3304      	adds	r3, #4
1a00390a:	6816      	ldr	r6, [r2, #0]
1a00390c:	9308      	str	r3, [sp, #32]
1a00390e:	2700      	movs	r7, #0
1a003910:	f7ff ba5c 	b.w	1a002dcc <_vfprintf_r+0x584>
1a003914:	4640      	mov	r0, r8
1a003916:	4649      	mov	r1, r9
1a003918:	aa1f      	add	r2, sp, #124	; 0x7c
1a00391a:	f002 ffaf 	bl	1a00687c <__sprint_r>
1a00391e:	2800      	cmp	r0, #0
1a003920:	f47f a892 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003924:	9d19      	ldr	r5, [sp, #100]	; 0x64
1a003926:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00392a:	ac2c      	add	r4, sp, #176	; 0xb0
1a00392c:	e7a2      	b.n	1a003874 <_vfprintf_r+0x102c>
1a00392e:	f041 0120 	orr.w	r1, r1, #32
1a003932:	9102      	str	r1, [sp, #8]
1a003934:	785d      	ldrb	r5, [r3, #1]
1a003936:	1c59      	adds	r1, r3, #1
1a003938:	f7fe bff7 	b.w	1a00292a <_vfprintf_r+0xe2>
1a00393c:	9806      	ldr	r0, [sp, #24]
1a00393e:	9108      	str	r1, [sp, #32]
1a003940:	4240      	negs	r0, r0
1a003942:	9006      	str	r0, [sp, #24]
1a003944:	4619      	mov	r1, r3
1a003946:	f7ff b9f1 	b.w	1a002d2c <_vfprintf_r+0x4e4>
1a00394a:	4640      	mov	r0, r8
1a00394c:	4649      	mov	r1, r9
1a00394e:	aa1f      	add	r2, sp, #124	; 0x7c
1a003950:	f002 ff94 	bl	1a00687c <__sprint_r>
1a003954:	2800      	cmp	r0, #0
1a003956:	f47f a877 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00395a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a00395e:	ac2c      	add	r4, sp, #176	; 0xb0
1a003960:	e413      	b.n	1a00318a <_vfprintf_r+0x942>
1a003962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003964:	ab2c      	add	r3, sp, #176	; 0xb0
1a003966:	1a9b      	subs	r3, r3, r2
1a003968:	9307      	str	r3, [sp, #28]
1a00396a:	f7ff b8c3 	b.w	1a002af4 <_vfprintf_r+0x2ac>
1a00396e:	4640      	mov	r0, r8
1a003970:	4649      	mov	r1, r9
1a003972:	aa1f      	add	r2, sp, #124	; 0x7c
1a003974:	f002 ff82 	bl	1a00687c <__sprint_r>
1a003978:	2800      	cmp	r0, #0
1a00397a:	f47f a865 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a00397e:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a003980:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003982:	ac2c      	add	r4, sp, #176	; 0xb0
1a003984:	980d      	ldr	r0, [sp, #52]	; 0x34
1a003986:	6060      	str	r0, [r4, #4]
1a003988:	3301      	adds	r3, #1
1a00398a:	eb02 0b00 	add.w	fp, r2, r0
1a00398e:	2b07      	cmp	r3, #7
1a003990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a003992:	f8cd b084 	str.w	fp, [sp, #132]	; 0x84
1a003996:	9320      	str	r3, [sp, #128]	; 0x80
1a003998:	6022      	str	r2, [r4, #0]
1a00399a:	f77f a977 	ble.w	1a002c8c <_vfprintf_r+0x444>
1a00399e:	e492      	b.n	1a0032c6 <_vfprintf_r+0xa7e>
1a0039a0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
1a0039a4:	f7fe ff22 	bl	1a0027ec <strlen>
1a0039a8:	9708      	str	r7, [sp, #32]
1a0039aa:	9007      	str	r0, [sp, #28]
1a0039ac:	4603      	mov	r3, r0
1a0039ae:	f7ff b9f2 	b.w	1a002d96 <_vfprintf_r+0x54e>
1a0039b2:	aa1a      	add	r2, sp, #104	; 0x68
1a0039b4:	ab1d      	add	r3, sp, #116	; 0x74
1a0039b6:	e88d 000c 	stmia.w	sp, {r2, r3}
1a0039ba:	4640      	mov	r0, r8
1a0039bc:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
1a0039c0:	2103      	movs	r1, #3
1a0039c2:	465a      	mov	r2, fp
1a0039c4:	ab19      	add	r3, sp, #100	; 0x64
1a0039c6:	f000 fa87 	bl	1a003ed8 <_dtoa_r>
1a0039ca:	465f      	mov	r7, fp
1a0039cc:	900a      	str	r0, [sp, #40]	; 0x28
1a0039ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0039d0:	19de      	adds	r6, r3, r7
1a0039d2:	9b03      	ldr	r3, [sp, #12]
1a0039d4:	2b46      	cmp	r3, #70	; 0x46
1a0039d6:	f47f aeaf 	bne.w	1a003738 <_vfprintf_r+0xef0>
1a0039da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0039dc:	781b      	ldrb	r3, [r3, #0]
1a0039de:	2b30      	cmp	r3, #48	; 0x30
1a0039e0:	f000 8100 	beq.w	1a003be4 <_vfprintf_r+0x139c>
1a0039e4:	9f19      	ldr	r7, [sp, #100]	; 0x64
1a0039e6:	443e      	add	r6, r7
1a0039e8:	e6a6      	b.n	1a003738 <_vfprintf_r+0xef0>
1a0039ea:	4640      	mov	r0, r8
1a0039ec:	4649      	mov	r1, r9
1a0039ee:	aa1f      	add	r2, sp, #124	; 0x7c
1a0039f0:	f002 ff44 	bl	1a00687c <__sprint_r>
1a0039f4:	2800      	cmp	r0, #0
1a0039f6:	f47f a827 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a0039fa:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a0039fe:	ac2c      	add	r4, sp, #176	; 0xb0
1a003a00:	e4eb      	b.n	1a0033da <_vfprintf_r+0xb92>
1a003a02:	4640      	mov	r0, r8
1a003a04:	4649      	mov	r1, r9
1a003a06:	aa1f      	add	r2, sp, #124	; 0x7c
1a003a08:	f002 ff38 	bl	1a00687c <__sprint_r>
1a003a0c:	2800      	cmp	r0, #0
1a003a0e:	f47f a81b 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003a12:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a003a14:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003a18:	ac2c      	add	r4, sp, #176	; 0xb0
1a003a1a:	e5a1      	b.n	1a003560 <_vfprintf_r+0xd18>
1a003a1c:	3301      	adds	r3, #1
1a003a1e:	442a      	add	r2, r5
1a003a20:	2b07      	cmp	r3, #7
1a003a22:	9221      	str	r2, [sp, #132]	; 0x84
1a003a24:	9320      	str	r3, [sp, #128]	; 0x80
1a003a26:	6027      	str	r7, [r4, #0]
1a003a28:	6065      	str	r5, [r4, #4]
1a003a2a:	dca0      	bgt.n	1a00396e <_vfprintf_r+0x1126>
1a003a2c:	3408      	adds	r4, #8
1a003a2e:	e7a9      	b.n	1a003984 <_vfprintf_r+0x113c>
1a003a30:	2e06      	cmp	r6, #6
1a003a32:	4633      	mov	r3, r6
1a003a34:	bf28      	it	cs
1a003a36:	2306      	movcs	r3, #6
1a003a38:	9307      	str	r3, [sp, #28]
1a003a3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003a3e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
1a003a42:	9303      	str	r3, [sp, #12]
1a003a44:	4b39      	ldr	r3, [pc, #228]	; (1a003b2c <_vfprintf_r+0x12e4>)
1a003a46:	9708      	str	r7, [sp, #32]
1a003a48:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
1a003a4c:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
1a003a50:	930a      	str	r3, [sp, #40]	; 0x28
1a003a52:	f7ff b857 	b.w	1a002b04 <_vfprintf_r+0x2bc>
1a003a56:	4640      	mov	r0, r8
1a003a58:	4649      	mov	r1, r9
1a003a5a:	aa1f      	add	r2, sp, #124	; 0x7c
1a003a5c:	f002 ff0e 	bl	1a00687c <__sprint_r>
1a003a60:	2800      	cmp	r0, #0
1a003a62:	f47e aff1 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003a66:	9b19      	ldr	r3, [sp, #100]	; 0x64
1a003a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003a6a:	f8dd b084 	ldr.w	fp, [sp, #132]	; 0x84
1a003a6e:	1ad3      	subs	r3, r2, r3
1a003a70:	ac2c      	add	r4, sp, #176	; 0xb0
1a003a72:	e58b      	b.n	1a00358c <_vfprintf_r+0xd44>
1a003a74:	1cdf      	adds	r7, r3, #3
1a003a76:	db22      	blt.n	1a003abe <_vfprintf_r+0x1276>
1a003a78:	459b      	cmp	fp, r3
1a003a7a:	db20      	blt.n	1a003abe <_vfprintf_r+0x1276>
1a003a7c:	930c      	str	r3, [sp, #48]	; 0x30
1a003a7e:	2567      	movs	r5, #103	; 0x67
1a003a80:	e67c      	b.n	1a00377c <_vfprintf_r+0xf34>
1a003a82:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a003a86:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a003a8a:	f7ff ba10 	b.w	1a002eae <_vfprintf_r+0x666>
1a003a8e:	9303      	str	r3, [sp, #12]
1a003a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003a92:	9302      	str	r3, [sp, #8]
1a003a94:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
1a003a98:	2300      	movs	r3, #0
1a003a9a:	f88d c05f 	strb.w	ip, [sp, #95]	; 0x5f
1a003a9e:	930b      	str	r3, [sp, #44]	; 0x2c
1a003aa0:	f7ff b833 	b.w	1a002b0a <_vfprintf_r+0x2c2>
1a003aa4:	4633      	mov	r3, r6
1a003aa6:	e65a      	b.n	1a00375e <_vfprintf_r+0xf16>
1a003aa8:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
1a003aac:	900b      	str	r0, [sp, #44]	; 0x2c
1a003aae:	9708      	str	r7, [sp, #32]
1a003ab0:	900c      	str	r0, [sp, #48]	; 0x30
1a003ab2:	f89d c05f 	ldrb.w	ip, [sp, #95]	; 0x5f
1a003ab6:	9303      	str	r3, [sp, #12]
1a003ab8:	9607      	str	r6, [sp, #28]
1a003aba:	f7ff b823 	b.w	1a002b04 <_vfprintf_r+0x2bc>
1a003abe:	3d02      	subs	r5, #2
1a003ac0:	3b01      	subs	r3, #1
1a003ac2:	2b00      	cmp	r3, #0
1a003ac4:	9319      	str	r3, [sp, #100]	; 0x64
1a003ac6:	bfba      	itte	lt
1a003ac8:	425b      	neglt	r3, r3
1a003aca:	222d      	movlt	r2, #45	; 0x2d
1a003acc:	222b      	movge	r2, #43	; 0x2b
1a003ace:	2b09      	cmp	r3, #9
1a003ad0:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
1a003ad4:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
1a003ad8:	f340 8098 	ble.w	1a003c0c <_vfprintf_r+0x13c4>
1a003adc:	f10d 067b 	add.w	r6, sp, #123	; 0x7b
1a003ae0:	4630      	mov	r0, r6
1a003ae2:	4a13      	ldr	r2, [pc, #76]	; (1a003b30 <_vfprintf_r+0x12e8>)
1a003ae4:	fb82 2103 	smull	r2, r1, r2, r3
1a003ae8:	17da      	asrs	r2, r3, #31
1a003aea:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
1a003aee:	eb02 0182 	add.w	r1, r2, r2, lsl #2
1a003af2:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
1a003af6:	f103 0130 	add.w	r1, r3, #48	; 0x30
1a003afa:	2a09      	cmp	r2, #9
1a003afc:	4613      	mov	r3, r2
1a003afe:	f800 1d01 	strb.w	r1, [r0, #-1]!
1a003b02:	dcee      	bgt.n	1a003ae2 <_vfprintf_r+0x129a>
1a003b04:	4602      	mov	r2, r0
1a003b06:	3330      	adds	r3, #48	; 0x30
1a003b08:	b2d9      	uxtb	r1, r3
1a003b0a:	f802 1d01 	strb.w	r1, [r2, #-1]!
1a003b0e:	4296      	cmp	r6, r2
1a003b10:	f240 80a9 	bls.w	1a003c66 <_vfprintf_r+0x141e>
1a003b14:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
1a003b18:	4603      	mov	r3, r0
1a003b1a:	e00d      	b.n	1a003b38 <_vfprintf_r+0x12f0>
1a003b1c:	1a0070d4 	.word	0x1a0070d4
1a003b20:	1a007084 	.word	0x1a007084
1a003b24:	1a0070a0 	.word	0x1a0070a0
1a003b28:	1a00709c 	.word	0x1a00709c
1a003b2c:	1a0070cc 	.word	0x1a0070cc
1a003b30:	66666667 	.word	0x66666667
1a003b34:	f813 1b01 	ldrb.w	r1, [r3], #1
1a003b38:	f802 1b01 	strb.w	r1, [r2], #1
1a003b3c:	42b3      	cmp	r3, r6
1a003b3e:	d1f9      	bne.n	1a003b34 <_vfprintf_r+0x12ec>
1a003b40:	ab1f      	add	r3, sp, #124	; 0x7c
1a003b42:	1a1b      	subs	r3, r3, r0
1a003b44:	f10d 026e 	add.w	r2, sp, #110	; 0x6e
1a003b48:	4413      	add	r3, r2
1a003b4a:	aa1b      	add	r2, sp, #108	; 0x6c
1a003b4c:	1a9b      	subs	r3, r3, r2
1a003b4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a003b50:	9313      	str	r3, [sp, #76]	; 0x4c
1a003b52:	2a01      	cmp	r2, #1
1a003b54:	4413      	add	r3, r2
1a003b56:	9307      	str	r3, [sp, #28]
1a003b58:	dd69      	ble.n	1a003c2e <_vfprintf_r+0x13e6>
1a003b5a:	9b07      	ldr	r3, [sp, #28]
1a003b5c:	2200      	movs	r2, #0
1a003b5e:	3301      	adds	r3, #1
1a003b60:	9307      	str	r3, [sp, #28]
1a003b62:	920c      	str	r2, [sp, #48]	; 0x30
1a003b64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003b68:	e614      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003b6a:	4640      	mov	r0, r8
1a003b6c:	4649      	mov	r1, r9
1a003b6e:	aa1f      	add	r2, sp, #124	; 0x7c
1a003b70:	f002 fe84 	bl	1a00687c <__sprint_r>
1a003b74:	2800      	cmp	r0, #0
1a003b76:	f47e af67 	bne.w	1a002a48 <_vfprintf_r+0x200>
1a003b7a:	9d19      	ldr	r5, [sp, #100]	; 0x64
1a003b7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
1a003b7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
1a003b80:	ac2c      	add	r4, sp, #176	; 0xb0
1a003b82:	e68c      	b.n	1a00389e <_vfprintf_r+0x1056>
1a003b84:	f04f 0b06 	mov.w	fp, #6
1a003b88:	e5a4      	b.n	1a0036d4 <_vfprintf_r+0xe8c>
1a003b8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003b8c:	2b00      	cmp	r3, #0
1a003b8e:	bfd8      	it	le
1a003b90:	f1c3 0602 	rsble	r6, r3, #2
1a003b94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a003b96:	bfc8      	it	gt
1a003b98:	2601      	movgt	r6, #1
1a003b9a:	18f3      	adds	r3, r6, r3
1a003b9c:	9307      	str	r3, [sp, #28]
1a003b9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003ba2:	e5f7      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003ba4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
1a003ba8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a003bac:	9014      	str	r0, [sp, #80]	; 0x50
1a003bae:	9315      	str	r3, [sp, #84]	; 0x54
1a003bb0:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
1a003bb4:	e59c      	b.n	1a0036f0 <_vfprintf_r+0xea8>
1a003bb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
1a003bb8:	e5d1      	b.n	1a00375e <_vfprintf_r+0xf16>
1a003bba:	2b00      	cmp	r3, #0
1a003bbc:	dd2e      	ble.n	1a003c1c <_vfprintf_r+0x13d4>
1a003bbe:	f1bb 0f00 	cmp.w	fp, #0
1a003bc2:	d107      	bne.n	1a003bd4 <_vfprintf_r+0x138c>
1a003bc4:	9b02      	ldr	r3, [sp, #8]
1a003bc6:	07de      	lsls	r6, r3, #31
1a003bc8:	d404      	bmi.n	1a003bd4 <_vfprintf_r+0x138c>
1a003bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a003bcc:	9207      	str	r2, [sp, #28]
1a003bce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
1a003bd2:	e5df      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003bd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003bd6:	f10b 0601 	add.w	r6, fp, #1
1a003bda:	4433      	add	r3, r6
1a003bdc:	9307      	str	r3, [sp, #28]
1a003bde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003be2:	e5d7      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003be4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
1a003be8:	2200      	movs	r2, #0
1a003bea:	2300      	movs	r3, #0
1a003bec:	f003 f810 	bl	1a006c10 <__aeabi_dcmpeq>
1a003bf0:	2800      	cmp	r0, #0
1a003bf2:	f47f aef7 	bne.w	1a0039e4 <_vfprintf_r+0x119c>
1a003bf6:	f1c7 0701 	rsb	r7, r7, #1
1a003bfa:	9719      	str	r7, [sp, #100]	; 0x64
1a003bfc:	443e      	add	r6, r7
1a003bfe:	e59b      	b.n	1a003738 <_vfprintf_r+0xef0>
1a003c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a003c02:	3301      	adds	r3, #1
1a003c04:	9307      	str	r3, [sp, #28]
1a003c06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003c0a:	e5c3      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003c0c:	3330      	adds	r3, #48	; 0x30
1a003c0e:	2230      	movs	r2, #48	; 0x30
1a003c10:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
1a003c14:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
1a003c18:	ab1c      	add	r3, sp, #112	; 0x70
1a003c1a:	e796      	b.n	1a003b4a <_vfprintf_r+0x1302>
1a003c1c:	f1bb 0f00 	cmp.w	fp, #0
1a003c20:	d11b      	bne.n	1a003c5a <_vfprintf_r+0x1412>
1a003c22:	9b02      	ldr	r3, [sp, #8]
1a003c24:	07d8      	lsls	r0, r3, #31
1a003c26:	d418      	bmi.n	1a003c5a <_vfprintf_r+0x1412>
1a003c28:	2301      	movs	r3, #1
1a003c2a:	9307      	str	r3, [sp, #28]
1a003c2c:	e5b2      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003c2e:	9b02      	ldr	r3, [sp, #8]
1a003c30:	f013 0301 	ands.w	r3, r3, #1
1a003c34:	d191      	bne.n	1a003b5a <_vfprintf_r+0x1312>
1a003c36:	930c      	str	r3, [sp, #48]	; 0x30
1a003c38:	9b07      	ldr	r3, [sp, #28]
1a003c3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003c3e:	e5a9      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003c40:	9d08      	ldr	r5, [sp, #32]
1a003c42:	682e      	ldr	r6, [r5, #0]
1a003c44:	4628      	mov	r0, r5
1a003c46:	3004      	adds	r0, #4
1a003c48:	2e00      	cmp	r6, #0
1a003c4a:	785d      	ldrb	r5, [r3, #1]
1a003c4c:	9008      	str	r0, [sp, #32]
1a003c4e:	f6be ae6c 	bge.w	1a00292a <_vfprintf_r+0xe2>
1a003c52:	f04f 36ff 	mov.w	r6, #4294967295
1a003c56:	f7fe be68 	b.w	1a00292a <_vfprintf_r+0xe2>
1a003c5a:	f10b 0302 	add.w	r3, fp, #2
1a003c5e:	9307      	str	r3, [sp, #28]
1a003c60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
1a003c64:	e596      	b.n	1a003794 <_vfprintf_r+0xf4c>
1a003c66:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
1a003c6a:	e76e      	b.n	1a003b4a <_vfprintf_r+0x1302>
1a003c6c:	f3af 8000 	nop.w

1a003c70 <__sbprintf>:
1a003c70:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
1a003c74:	460c      	mov	r4, r1
1a003c76:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
1a003c7a:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
1a003c7e:	69e7      	ldr	r7, [r4, #28]
1a003c80:	6e49      	ldr	r1, [r1, #100]	; 0x64
1a003c82:	f8b4 900e 	ldrh.w	r9, [r4, #14]
1a003c86:	9119      	str	r1, [sp, #100]	; 0x64
1a003c88:	ad1a      	add	r5, sp, #104	; 0x68
1a003c8a:	f44f 6680 	mov.w	r6, #1024	; 0x400
1a003c8e:	f02e 0e02 	bic.w	lr, lr, #2
1a003c92:	f04f 0c00 	mov.w	ip, #0
1a003c96:	9707      	str	r7, [sp, #28]
1a003c98:	4669      	mov	r1, sp
1a003c9a:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a003c9c:	9500      	str	r5, [sp, #0]
1a003c9e:	9504      	str	r5, [sp, #16]
1a003ca0:	9602      	str	r6, [sp, #8]
1a003ca2:	9605      	str	r6, [sp, #20]
1a003ca4:	f8ad e00c 	strh.w	lr, [sp, #12]
1a003ca8:	f8ad 900e 	strh.w	r9, [sp, #14]
1a003cac:	9709      	str	r7, [sp, #36]	; 0x24
1a003cae:	f8cd c018 	str.w	ip, [sp, #24]
1a003cb2:	4606      	mov	r6, r0
1a003cb4:	f7fe fdc8 	bl	1a002848 <_vfprintf_r>
1a003cb8:	1e05      	subs	r5, r0, #0
1a003cba:	db07      	blt.n	1a003ccc <__sbprintf+0x5c>
1a003cbc:	4630      	mov	r0, r6
1a003cbe:	4669      	mov	r1, sp
1a003cc0:	f001 f908 	bl	1a004ed4 <_fflush_r>
1a003cc4:	2800      	cmp	r0, #0
1a003cc6:	bf18      	it	ne
1a003cc8:	f04f 35ff 	movne.w	r5, #4294967295
1a003ccc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
1a003cd0:	065b      	lsls	r3, r3, #25
1a003cd2:	d503      	bpl.n	1a003cdc <__sbprintf+0x6c>
1a003cd4:	89a3      	ldrh	r3, [r4, #12]
1a003cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003cda:	81a3      	strh	r3, [r4, #12]
1a003cdc:	4628      	mov	r0, r5
1a003cde:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
1a003ce2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
1a003ce6:	bf00      	nop

1a003ce8 <__swsetup_r>:
1a003ce8:	b538      	push	{r3, r4, r5, lr}
1a003cea:	4b2f      	ldr	r3, [pc, #188]	; (1a003da8 <__swsetup_r+0xc0>)
1a003cec:	681b      	ldr	r3, [r3, #0]
1a003cee:	4605      	mov	r5, r0
1a003cf0:	460c      	mov	r4, r1
1a003cf2:	b113      	cbz	r3, 1a003cfa <__swsetup_r+0x12>
1a003cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
1a003cf6:	2a00      	cmp	r2, #0
1a003cf8:	d036      	beq.n	1a003d68 <__swsetup_r+0x80>
1a003cfa:	89a2      	ldrh	r2, [r4, #12]
1a003cfc:	b293      	uxth	r3, r2
1a003cfe:	0718      	lsls	r0, r3, #28
1a003d00:	d50c      	bpl.n	1a003d1c <__swsetup_r+0x34>
1a003d02:	6920      	ldr	r0, [r4, #16]
1a003d04:	b1a8      	cbz	r0, 1a003d32 <__swsetup_r+0x4a>
1a003d06:	f013 0201 	ands.w	r2, r3, #1
1a003d0a:	d01e      	beq.n	1a003d4a <__swsetup_r+0x62>
1a003d0c:	6963      	ldr	r3, [r4, #20]
1a003d0e:	2200      	movs	r2, #0
1a003d10:	425b      	negs	r3, r3
1a003d12:	61a3      	str	r3, [r4, #24]
1a003d14:	60a2      	str	r2, [r4, #8]
1a003d16:	b1f0      	cbz	r0, 1a003d56 <__swsetup_r+0x6e>
1a003d18:	2000      	movs	r0, #0
1a003d1a:	bd38      	pop	{r3, r4, r5, pc}
1a003d1c:	06d9      	lsls	r1, r3, #27
1a003d1e:	d53b      	bpl.n	1a003d98 <__swsetup_r+0xb0>
1a003d20:	0758      	lsls	r0, r3, #29
1a003d22:	d425      	bmi.n	1a003d70 <__swsetup_r+0x88>
1a003d24:	6920      	ldr	r0, [r4, #16]
1a003d26:	f042 0308 	orr.w	r3, r2, #8
1a003d2a:	81a3      	strh	r3, [r4, #12]
1a003d2c:	b29b      	uxth	r3, r3
1a003d2e:	2800      	cmp	r0, #0
1a003d30:	d1e9      	bne.n	1a003d06 <__swsetup_r+0x1e>
1a003d32:	f403 7220 	and.w	r2, r3, #640	; 0x280
1a003d36:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a003d3a:	d0e4      	beq.n	1a003d06 <__swsetup_r+0x1e>
1a003d3c:	4628      	mov	r0, r5
1a003d3e:	4621      	mov	r1, r4
1a003d40:	f001 fc50 	bl	1a0055e4 <__smakebuf_r>
1a003d44:	89a3      	ldrh	r3, [r4, #12]
1a003d46:	6920      	ldr	r0, [r4, #16]
1a003d48:	e7dd      	b.n	1a003d06 <__swsetup_r+0x1e>
1a003d4a:	0799      	lsls	r1, r3, #30
1a003d4c:	bf58      	it	pl
1a003d4e:	6962      	ldrpl	r2, [r4, #20]
1a003d50:	60a2      	str	r2, [r4, #8]
1a003d52:	2800      	cmp	r0, #0
1a003d54:	d1e0      	bne.n	1a003d18 <__swsetup_r+0x30>
1a003d56:	89a3      	ldrh	r3, [r4, #12]
1a003d58:	061a      	lsls	r2, r3, #24
1a003d5a:	d5de      	bpl.n	1a003d1a <__swsetup_r+0x32>
1a003d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a003d60:	81a3      	strh	r3, [r4, #12]
1a003d62:	f04f 30ff 	mov.w	r0, #4294967295
1a003d66:	bd38      	pop	{r3, r4, r5, pc}
1a003d68:	4618      	mov	r0, r3
1a003d6a:	f001 f947 	bl	1a004ffc <__sinit>
1a003d6e:	e7c4      	b.n	1a003cfa <__swsetup_r+0x12>
1a003d70:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a003d72:	b149      	cbz	r1, 1a003d88 <__swsetup_r+0xa0>
1a003d74:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a003d78:	4299      	cmp	r1, r3
1a003d7a:	d003      	beq.n	1a003d84 <__swsetup_r+0x9c>
1a003d7c:	4628      	mov	r0, r5
1a003d7e:	f001 f995 	bl	1a0050ac <_free_r>
1a003d82:	89a2      	ldrh	r2, [r4, #12]
1a003d84:	2300      	movs	r3, #0
1a003d86:	6323      	str	r3, [r4, #48]	; 0x30
1a003d88:	f022 0224 	bic.w	r2, r2, #36	; 0x24
1a003d8c:	2300      	movs	r3, #0
1a003d8e:	6920      	ldr	r0, [r4, #16]
1a003d90:	6063      	str	r3, [r4, #4]
1a003d92:	b292      	uxth	r2, r2
1a003d94:	6020      	str	r0, [r4, #0]
1a003d96:	e7c6      	b.n	1a003d26 <__swsetup_r+0x3e>
1a003d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
1a003d9c:	2309      	movs	r3, #9
1a003d9e:	602b      	str	r3, [r5, #0]
1a003da0:	f04f 30ff 	mov.w	r0, #4294967295
1a003da4:	81a2      	strh	r2, [r4, #12]
1a003da6:	bd38      	pop	{r3, r4, r5, pc}
1a003da8:	100004e8 	.word	0x100004e8

1a003dac <quorem>:
1a003dac:	6902      	ldr	r2, [r0, #16]
1a003dae:	690b      	ldr	r3, [r1, #16]
1a003db0:	4293      	cmp	r3, r2
1a003db2:	f300 808f 	bgt.w	1a003ed4 <quorem+0x128>
1a003db6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003dba:	f103 38ff 	add.w	r8, r3, #4294967295
1a003dbe:	f101 0714 	add.w	r7, r1, #20
1a003dc2:	f100 0b14 	add.w	fp, r0, #20
1a003dc6:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
1a003dca:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
1a003dce:	ea4f 0488 	mov.w	r4, r8, lsl #2
1a003dd2:	b083      	sub	sp, #12
1a003dd4:	3201      	adds	r2, #1
1a003dd6:	fbb3 f9f2 	udiv	r9, r3, r2
1a003dda:	eb0b 0304 	add.w	r3, fp, r4
1a003dde:	9400      	str	r4, [sp, #0]
1a003de0:	eb07 0a04 	add.w	sl, r7, r4
1a003de4:	9301      	str	r3, [sp, #4]
1a003de6:	f1b9 0f00 	cmp.w	r9, #0
1a003dea:	d03b      	beq.n	1a003e64 <quorem+0xb8>
1a003dec:	2600      	movs	r6, #0
1a003dee:	4632      	mov	r2, r6
1a003df0:	46bc      	mov	ip, r7
1a003df2:	46de      	mov	lr, fp
1a003df4:	4634      	mov	r4, r6
1a003df6:	f85c 6b04 	ldr.w	r6, [ip], #4
1a003dfa:	f8de 5000 	ldr.w	r5, [lr]
1a003dfe:	b2b3      	uxth	r3, r6
1a003e00:	0c36      	lsrs	r6, r6, #16
1a003e02:	fb03 4409 	mla	r4, r3, r9, r4
1a003e06:	fb06 f609 	mul.w	r6, r6, r9
1a003e0a:	eb06 4614 	add.w	r6, r6, r4, lsr #16
1a003e0e:	b2a3      	uxth	r3, r4
1a003e10:	1ad3      	subs	r3, r2, r3
1a003e12:	b2b4      	uxth	r4, r6
1a003e14:	fa13 f385 	uxtah	r3, r3, r5
1a003e18:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
1a003e1c:	eb04 4423 	add.w	r4, r4, r3, asr #16
1a003e20:	b29b      	uxth	r3, r3
1a003e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
1a003e26:	45e2      	cmp	sl, ip
1a003e28:	ea4f 4224 	mov.w	r2, r4, asr #16
1a003e2c:	f84e 3b04 	str.w	r3, [lr], #4
1a003e30:	ea4f 4416 	mov.w	r4, r6, lsr #16
1a003e34:	d2df      	bcs.n	1a003df6 <quorem+0x4a>
1a003e36:	9b00      	ldr	r3, [sp, #0]
1a003e38:	f85b 3003 	ldr.w	r3, [fp, r3]
1a003e3c:	b993      	cbnz	r3, 1a003e64 <quorem+0xb8>
1a003e3e:	9c01      	ldr	r4, [sp, #4]
1a003e40:	1f23      	subs	r3, r4, #4
1a003e42:	459b      	cmp	fp, r3
1a003e44:	d20c      	bcs.n	1a003e60 <quorem+0xb4>
1a003e46:	f854 3c04 	ldr.w	r3, [r4, #-4]
1a003e4a:	b94b      	cbnz	r3, 1a003e60 <quorem+0xb4>
1a003e4c:	f1a4 0308 	sub.w	r3, r4, #8
1a003e50:	e002      	b.n	1a003e58 <quorem+0xac>
1a003e52:	681a      	ldr	r2, [r3, #0]
1a003e54:	3b04      	subs	r3, #4
1a003e56:	b91a      	cbnz	r2, 1a003e60 <quorem+0xb4>
1a003e58:	459b      	cmp	fp, r3
1a003e5a:	f108 38ff 	add.w	r8, r8, #4294967295
1a003e5e:	d3f8      	bcc.n	1a003e52 <quorem+0xa6>
1a003e60:	f8c0 8010 	str.w	r8, [r0, #16]
1a003e64:	4604      	mov	r4, r0
1a003e66:	f002 f97b 	bl	1a006160 <__mcmp>
1a003e6a:	2800      	cmp	r0, #0
1a003e6c:	db2e      	blt.n	1a003ecc <quorem+0x120>
1a003e6e:	f109 0901 	add.w	r9, r9, #1
1a003e72:	465d      	mov	r5, fp
1a003e74:	2300      	movs	r3, #0
1a003e76:	f857 1b04 	ldr.w	r1, [r7], #4
1a003e7a:	6828      	ldr	r0, [r5, #0]
1a003e7c:	b28a      	uxth	r2, r1
1a003e7e:	1a9a      	subs	r2, r3, r2
1a003e80:	0c09      	lsrs	r1, r1, #16
1a003e82:	fa12 f280 	uxtah	r2, r2, r0
1a003e86:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
1a003e8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
1a003e8e:	b291      	uxth	r1, r2
1a003e90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a003e94:	45ba      	cmp	sl, r7
1a003e96:	f845 1b04 	str.w	r1, [r5], #4
1a003e9a:	ea4f 4323 	mov.w	r3, r3, asr #16
1a003e9e:	d2ea      	bcs.n	1a003e76 <quorem+0xca>
1a003ea0:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
1a003ea4:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
1a003ea8:	b982      	cbnz	r2, 1a003ecc <quorem+0x120>
1a003eaa:	1f1a      	subs	r2, r3, #4
1a003eac:	4593      	cmp	fp, r2
1a003eae:	d20b      	bcs.n	1a003ec8 <quorem+0x11c>
1a003eb0:	f853 2c04 	ldr.w	r2, [r3, #-4]
1a003eb4:	b942      	cbnz	r2, 1a003ec8 <quorem+0x11c>
1a003eb6:	3b08      	subs	r3, #8
1a003eb8:	e002      	b.n	1a003ec0 <quorem+0x114>
1a003eba:	681a      	ldr	r2, [r3, #0]
1a003ebc:	3b04      	subs	r3, #4
1a003ebe:	b91a      	cbnz	r2, 1a003ec8 <quorem+0x11c>
1a003ec0:	459b      	cmp	fp, r3
1a003ec2:	f108 38ff 	add.w	r8, r8, #4294967295
1a003ec6:	d3f8      	bcc.n	1a003eba <quorem+0x10e>
1a003ec8:	f8c4 8010 	str.w	r8, [r4, #16]
1a003ecc:	4648      	mov	r0, r9
1a003ece:	b003      	add	sp, #12
1a003ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003ed4:	2000      	movs	r0, #0
1a003ed6:	4770      	bx	lr

1a003ed8 <_dtoa_r>:
1a003ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a003edc:	b099      	sub	sp, #100	; 0x64
1a003ede:	4604      	mov	r4, r0
1a003ee0:	9103      	str	r1, [sp, #12]
1a003ee2:	6c01      	ldr	r1, [r0, #64]	; 0x40
1a003ee4:	9d22      	ldr	r5, [sp, #136]	; 0x88
1a003ee6:	9304      	str	r3, [sp, #16]
1a003ee8:	4692      	mov	sl, r2
1a003eea:	ed8d 0b00 	vstr	d0, [sp]
1a003eee:	b141      	cbz	r1, 1a003f02 <_dtoa_r+0x2a>
1a003ef0:	6c42      	ldr	r2, [r0, #68]	; 0x44
1a003ef2:	604a      	str	r2, [r1, #4]
1a003ef4:	2301      	movs	r3, #1
1a003ef6:	4093      	lsls	r3, r2
1a003ef8:	608b      	str	r3, [r1, #8]
1a003efa:	f001 ff4d 	bl	1a005d98 <_Bfree>
1a003efe:	2300      	movs	r3, #0
1a003f00:	6423      	str	r3, [r4, #64]	; 0x40
1a003f02:	e9dd 2300 	ldrd	r2, r3, [sp]
1a003f06:	2b00      	cmp	r3, #0
1a003f08:	4699      	mov	r9, r3
1a003f0a:	db36      	blt.n	1a003f7a <_dtoa_r+0xa2>
1a003f0c:	2300      	movs	r3, #0
1a003f0e:	602b      	str	r3, [r5, #0]
1a003f10:	4ba5      	ldr	r3, [pc, #660]	; (1a0041a8 <_dtoa_r+0x2d0>)
1a003f12:	461a      	mov	r2, r3
1a003f14:	ea09 0303 	and.w	r3, r9, r3
1a003f18:	4293      	cmp	r3, r2
1a003f1a:	d017      	beq.n	1a003f4c <_dtoa_r+0x74>
1a003f1c:	e9dd 6700 	ldrd	r6, r7, [sp]
1a003f20:	2200      	movs	r2, #0
1a003f22:	2300      	movs	r3, #0
1a003f24:	4630      	mov	r0, r6
1a003f26:	4639      	mov	r1, r7
1a003f28:	f002 fe72 	bl	1a006c10 <__aeabi_dcmpeq>
1a003f2c:	4680      	mov	r8, r0
1a003f2e:	2800      	cmp	r0, #0
1a003f30:	d02b      	beq.n	1a003f8a <_dtoa_r+0xb2>
1a003f32:	9a04      	ldr	r2, [sp, #16]
1a003f34:	2301      	movs	r3, #1
1a003f36:	6013      	str	r3, [r2, #0]
1a003f38:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a003f3a:	2b00      	cmp	r3, #0
1a003f3c:	f000 80cc 	beq.w	1a0040d8 <_dtoa_r+0x200>
1a003f40:	489a      	ldr	r0, [pc, #616]	; (1a0041ac <_dtoa_r+0x2d4>)
1a003f42:	6018      	str	r0, [r3, #0]
1a003f44:	3801      	subs	r0, #1
1a003f46:	b019      	add	sp, #100	; 0x64
1a003f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003f4c:	9a04      	ldr	r2, [sp, #16]
1a003f4e:	f242 730f 	movw	r3, #9999	; 0x270f
1a003f52:	6013      	str	r3, [r2, #0]
1a003f54:	9b00      	ldr	r3, [sp, #0]
1a003f56:	2b00      	cmp	r3, #0
1a003f58:	f000 80a7 	beq.w	1a0040aa <_dtoa_r+0x1d2>
1a003f5c:	4894      	ldr	r0, [pc, #592]	; (1a0041b0 <_dtoa_r+0x2d8>)
1a003f5e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a003f60:	2b00      	cmp	r3, #0
1a003f62:	d0f0      	beq.n	1a003f46 <_dtoa_r+0x6e>
1a003f64:	78c3      	ldrb	r3, [r0, #3]
1a003f66:	2b00      	cmp	r3, #0
1a003f68:	f000 80b8 	beq.w	1a0040dc <_dtoa_r+0x204>
1a003f6c:	f100 0308 	add.w	r3, r0, #8
1a003f70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
1a003f72:	6013      	str	r3, [r2, #0]
1a003f74:	b019      	add	sp, #100	; 0x64
1a003f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a003f7a:	9a01      	ldr	r2, [sp, #4]
1a003f7c:	2301      	movs	r3, #1
1a003f7e:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
1a003f82:	602b      	str	r3, [r5, #0]
1a003f84:	f8cd 9004 	str.w	r9, [sp, #4]
1a003f88:	e7c2      	b.n	1a003f10 <_dtoa_r+0x38>
1a003f8a:	4620      	mov	r0, r4
1a003f8c:	ec47 6b10 	vmov	d0, r6, r7
1a003f90:	a917      	add	r1, sp, #92	; 0x5c
1a003f92:	aa16      	add	r2, sp, #88	; 0x58
1a003f94:	f002 f972 	bl	1a00627c <__d2b>
1a003f98:	ea5f 5519 	movs.w	r5, r9, lsr #20
1a003f9c:	4683      	mov	fp, r0
1a003f9e:	f040 808d 	bne.w	1a0040bc <_dtoa_r+0x1e4>
1a003fa2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a003fa6:	9d17      	ldr	r5, [sp, #92]	; 0x5c
1a003fa8:	f46f 6382 	mvn.w	r3, #1040	; 0x410
1a003fac:	4445      	add	r5, r8
1a003fae:	429d      	cmp	r5, r3
1a003fb0:	f2c0 829e 	blt.w	1a0044f0 <_dtoa_r+0x618>
1a003fb4:	4a7f      	ldr	r2, [pc, #508]	; (1a0041b4 <_dtoa_r+0x2dc>)
1a003fb6:	1b52      	subs	r2, r2, r5
1a003fb8:	fa09 f902 	lsl.w	r9, r9, r2
1a003fbc:	9a00      	ldr	r2, [sp, #0]
1a003fbe:	f205 4312 	addw	r3, r5, #1042	; 0x412
1a003fc2:	fa22 f003 	lsr.w	r0, r2, r3
1a003fc6:	ea49 0000 	orr.w	r0, r9, r0
1a003fca:	f7fd fd63 	bl	1a001a94 <__aeabi_ui2d>
1a003fce:	2301      	movs	r3, #1
1a003fd0:	3d01      	subs	r5, #1
1a003fd2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
1a003fd6:	930f      	str	r3, [sp, #60]	; 0x3c
1a003fd8:	2200      	movs	r2, #0
1a003fda:	4b77      	ldr	r3, [pc, #476]	; (1a0041b8 <_dtoa_r+0x2e0>)
1a003fdc:	f7fd fc1c 	bl	1a001818 <__aeabi_dsub>
1a003fe0:	a36b      	add	r3, pc, #428	; (adr r3, 1a004190 <_dtoa_r+0x2b8>)
1a003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003fe6:	f7fd fe15 	bl	1a001c14 <__aeabi_dmul>
1a003fea:	a36b      	add	r3, pc, #428	; (adr r3, 1a004198 <_dtoa_r+0x2c0>)
1a003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
1a003ff0:	f7fd fc14 	bl	1a00181c <__adddf3>
1a003ff4:	4606      	mov	r6, r0
1a003ff6:	4628      	mov	r0, r5
1a003ff8:	460f      	mov	r7, r1
1a003ffa:	f7fd fd5b 	bl	1a001ab4 <__aeabi_i2d>
1a003ffe:	a368      	add	r3, pc, #416	; (adr r3, 1a0041a0 <_dtoa_r+0x2c8>)
1a004000:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004004:	f7fd fe06 	bl	1a001c14 <__aeabi_dmul>
1a004008:	4602      	mov	r2, r0
1a00400a:	460b      	mov	r3, r1
1a00400c:	4630      	mov	r0, r6
1a00400e:	4639      	mov	r1, r7
1a004010:	f7fd fc04 	bl	1a00181c <__adddf3>
1a004014:	4606      	mov	r6, r0
1a004016:	460f      	mov	r7, r1
1a004018:	f002 fe2c 	bl	1a006c74 <__aeabi_d2iz>
1a00401c:	4639      	mov	r1, r7
1a00401e:	9005      	str	r0, [sp, #20]
1a004020:	2200      	movs	r2, #0
1a004022:	4630      	mov	r0, r6
1a004024:	2300      	movs	r3, #0
1a004026:	f002 fdfd 	bl	1a006c24 <__aeabi_dcmplt>
1a00402a:	2800      	cmp	r0, #0
1a00402c:	f040 81ab 	bne.w	1a004386 <_dtoa_r+0x4ae>
1a004030:	9b05      	ldr	r3, [sp, #20]
1a004032:	2b16      	cmp	r3, #22
1a004034:	f200 81a4 	bhi.w	1a004380 <_dtoa_r+0x4a8>
1a004038:	9a05      	ldr	r2, [sp, #20]
1a00403a:	4b60      	ldr	r3, [pc, #384]	; (1a0041bc <_dtoa_r+0x2e4>)
1a00403c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004040:	e9d3 0100 	ldrd	r0, r1, [r3]
1a004044:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004048:	f002 fe0a 	bl	1a006c60 <__aeabi_dcmpgt>
1a00404c:	2800      	cmp	r0, #0
1a00404e:	f000 8255 	beq.w	1a0044fc <_dtoa_r+0x624>
1a004052:	9b05      	ldr	r3, [sp, #20]
1a004054:	3b01      	subs	r3, #1
1a004056:	9305      	str	r3, [sp, #20]
1a004058:	2300      	movs	r3, #0
1a00405a:	930d      	str	r3, [sp, #52]	; 0x34
1a00405c:	ebc5 0508 	rsb	r5, r5, r8
1a004060:	1e6b      	subs	r3, r5, #1
1a004062:	9306      	str	r3, [sp, #24]
1a004064:	f100 81a6 	bmi.w	1a0043b4 <_dtoa_r+0x4dc>
1a004068:	2300      	movs	r3, #0
1a00406a:	9307      	str	r3, [sp, #28]
1a00406c:	9b05      	ldr	r3, [sp, #20]
1a00406e:	2b00      	cmp	r3, #0
1a004070:	f2c0 8197 	blt.w	1a0043a2 <_dtoa_r+0x4ca>
1a004074:	9a06      	ldr	r2, [sp, #24]
1a004076:	930c      	str	r3, [sp, #48]	; 0x30
1a004078:	4611      	mov	r1, r2
1a00407a:	4419      	add	r1, r3
1a00407c:	2300      	movs	r3, #0
1a00407e:	9106      	str	r1, [sp, #24]
1a004080:	930a      	str	r3, [sp, #40]	; 0x28
1a004082:	9b03      	ldr	r3, [sp, #12]
1a004084:	2b09      	cmp	r3, #9
1a004086:	d82b      	bhi.n	1a0040e0 <_dtoa_r+0x208>
1a004088:	2b05      	cmp	r3, #5
1a00408a:	f340 8673 	ble.w	1a004d74 <_dtoa_r+0xe9c>
1a00408e:	3b04      	subs	r3, #4
1a004090:	9303      	str	r3, [sp, #12]
1a004092:	2700      	movs	r7, #0
1a004094:	9b03      	ldr	r3, [sp, #12]
1a004096:	3b02      	subs	r3, #2
1a004098:	2b03      	cmp	r3, #3
1a00409a:	f200 8651 	bhi.w	1a004d40 <_dtoa_r+0xe68>
1a00409e:	e8df f013 	tbh	[pc, r3, lsl #1]
1a0040a2:	03d1      	.short	0x03d1
1a0040a4:	02b603c4 	.word	0x02b603c4
1a0040a8:	0666      	.short	0x0666
1a0040aa:	4b41      	ldr	r3, [pc, #260]	; (1a0041b0 <_dtoa_r+0x2d8>)
1a0040ac:	4a44      	ldr	r2, [pc, #272]	; (1a0041c0 <_dtoa_r+0x2e8>)
1a0040ae:	f3c9 0013 	ubfx	r0, r9, #0, #20
1a0040b2:	2800      	cmp	r0, #0
1a0040b4:	bf14      	ite	ne
1a0040b6:	4618      	movne	r0, r3
1a0040b8:	4610      	moveq	r0, r2
1a0040ba:	e750      	b.n	1a003f5e <_dtoa_r+0x86>
1a0040bc:	f3c7 0313 	ubfx	r3, r7, #0, #20
1a0040c0:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
1a0040c4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
1a0040c8:	4630      	mov	r0, r6
1a0040ca:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
1a0040ce:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
1a0040d2:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
1a0040d6:	e77f      	b.n	1a003fd8 <_dtoa_r+0x100>
1a0040d8:	483a      	ldr	r0, [pc, #232]	; (1a0041c4 <_dtoa_r+0x2ec>)
1a0040da:	e734      	b.n	1a003f46 <_dtoa_r+0x6e>
1a0040dc:	1cc3      	adds	r3, r0, #3
1a0040de:	e747      	b.n	1a003f70 <_dtoa_r+0x98>
1a0040e0:	2100      	movs	r1, #0
1a0040e2:	6461      	str	r1, [r4, #68]	; 0x44
1a0040e4:	4620      	mov	r0, r4
1a0040e6:	468a      	mov	sl, r1
1a0040e8:	9103      	str	r1, [sp, #12]
1a0040ea:	f001 fe2f 	bl	1a005d4c <_Balloc>
1a0040ee:	f04f 33ff 	mov.w	r3, #4294967295
1a0040f2:	9308      	str	r3, [sp, #32]
1a0040f4:	930e      	str	r3, [sp, #56]	; 0x38
1a0040f6:	2301      	movs	r3, #1
1a0040f8:	9009      	str	r0, [sp, #36]	; 0x24
1a0040fa:	6420      	str	r0, [r4, #64]	; 0x40
1a0040fc:	930b      	str	r3, [sp, #44]	; 0x2c
1a0040fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a004100:	2b00      	cmp	r3, #0
1a004102:	f2c0 80d3 	blt.w	1a0042ac <_dtoa_r+0x3d4>
1a004106:	9a05      	ldr	r2, [sp, #20]
1a004108:	2a0e      	cmp	r2, #14
1a00410a:	f300 80cf 	bgt.w	1a0042ac <_dtoa_r+0x3d4>
1a00410e:	4b2b      	ldr	r3, [pc, #172]	; (1a0041bc <_dtoa_r+0x2e4>)
1a004110:	f1ba 0f00 	cmp.w	sl, #0
1a004114:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004118:	e9d3 8900 	ldrd	r8, r9, [r3]
1a00411c:	f2c0 8395 	blt.w	1a00484a <_dtoa_r+0x972>
1a004120:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004124:	4642      	mov	r2, r8
1a004126:	464b      	mov	r3, r9
1a004128:	4630      	mov	r0, r6
1a00412a:	4639      	mov	r1, r7
1a00412c:	f7fd fe9c 	bl	1a001e68 <__aeabi_ddiv>
1a004130:	f002 fda0 	bl	1a006c74 <__aeabi_d2iz>
1a004134:	4682      	mov	sl, r0
1a004136:	f7fd fcbd 	bl	1a001ab4 <__aeabi_i2d>
1a00413a:	4642      	mov	r2, r8
1a00413c:	464b      	mov	r3, r9
1a00413e:	f7fd fd69 	bl	1a001c14 <__aeabi_dmul>
1a004142:	460b      	mov	r3, r1
1a004144:	4602      	mov	r2, r0
1a004146:	4639      	mov	r1, r7
1a004148:	4630      	mov	r0, r6
1a00414a:	f7fd fb65 	bl	1a001818 <__aeabi_dsub>
1a00414e:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a004150:	f10a 0330 	add.w	r3, sl, #48	; 0x30
1a004154:	702b      	strb	r3, [r5, #0]
1a004156:	9b08      	ldr	r3, [sp, #32]
1a004158:	2b01      	cmp	r3, #1
1a00415a:	4606      	mov	r6, r0
1a00415c:	460f      	mov	r7, r1
1a00415e:	f105 0501 	add.w	r5, r5, #1
1a004162:	d063      	beq.n	1a00422c <_dtoa_r+0x354>
1a004164:	2200      	movs	r2, #0
1a004166:	4b18      	ldr	r3, [pc, #96]	; (1a0041c8 <_dtoa_r+0x2f0>)
1a004168:	f7fd fd54 	bl	1a001c14 <__aeabi_dmul>
1a00416c:	2200      	movs	r2, #0
1a00416e:	2300      	movs	r3, #0
1a004170:	4606      	mov	r6, r0
1a004172:	460f      	mov	r7, r1
1a004174:	f002 fd4c 	bl	1a006c10 <__aeabi_dcmpeq>
1a004178:	2800      	cmp	r0, #0
1a00417a:	f040 8084 	bne.w	1a004286 <_dtoa_r+0x3ae>
1a00417e:	f8cd b000 	str.w	fp, [sp]
1a004182:	9403      	str	r4, [sp, #12]
1a004184:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
1a004188:	9c08      	ldr	r4, [sp, #32]
1a00418a:	e02a      	b.n	1a0041e2 <_dtoa_r+0x30a>
1a00418c:	f3af 8000 	nop.w
1a004190:	636f4361 	.word	0x636f4361
1a004194:	3fd287a7 	.word	0x3fd287a7
1a004198:	8b60c8b3 	.word	0x8b60c8b3
1a00419c:	3fc68a28 	.word	0x3fc68a28
1a0041a0:	509f79fb 	.word	0x509f79fb
1a0041a4:	3fd34413 	.word	0x3fd34413
1a0041a8:	7ff00000 	.word	0x7ff00000
1a0041ac:	1a0070d5 	.word	0x1a0070d5
1a0041b0:	1a0070f4 	.word	0x1a0070f4
1a0041b4:	fffffc0e 	.word	0xfffffc0e
1a0041b8:	3ff80000 	.word	0x3ff80000
1a0041bc:	1a007118 	.word	0x1a007118
1a0041c0:	1a0070e8 	.word	0x1a0070e8
1a0041c4:	1a0070d4 	.word	0x1a0070d4
1a0041c8:	40240000 	.word	0x40240000
1a0041cc:	f7fd fd22 	bl	1a001c14 <__aeabi_dmul>
1a0041d0:	2200      	movs	r2, #0
1a0041d2:	2300      	movs	r3, #0
1a0041d4:	4606      	mov	r6, r0
1a0041d6:	460f      	mov	r7, r1
1a0041d8:	f002 fd1a 	bl	1a006c10 <__aeabi_dcmpeq>
1a0041dc:	2800      	cmp	r0, #0
1a0041de:	f040 83e4 	bne.w	1a0049aa <_dtoa_r+0xad2>
1a0041e2:	4642      	mov	r2, r8
1a0041e4:	464b      	mov	r3, r9
1a0041e6:	4630      	mov	r0, r6
1a0041e8:	4639      	mov	r1, r7
1a0041ea:	f7fd fe3d 	bl	1a001e68 <__aeabi_ddiv>
1a0041ee:	f002 fd41 	bl	1a006c74 <__aeabi_d2iz>
1a0041f2:	4682      	mov	sl, r0
1a0041f4:	f7fd fc5e 	bl	1a001ab4 <__aeabi_i2d>
1a0041f8:	4642      	mov	r2, r8
1a0041fa:	464b      	mov	r3, r9
1a0041fc:	f7fd fd0a 	bl	1a001c14 <__aeabi_dmul>
1a004200:	4602      	mov	r2, r0
1a004202:	460b      	mov	r3, r1
1a004204:	4630      	mov	r0, r6
1a004206:	4639      	mov	r1, r7
1a004208:	f7fd fb06 	bl	1a001818 <__aeabi_dsub>
1a00420c:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
1a004210:	f805 eb01 	strb.w	lr, [r5], #1
1a004214:	ebcb 0e05 	rsb	lr, fp, r5
1a004218:	4574      	cmp	r4, lr
1a00421a:	4606      	mov	r6, r0
1a00421c:	460f      	mov	r7, r1
1a00421e:	f04f 0200 	mov.w	r2, #0
1a004222:	4bb7      	ldr	r3, [pc, #732]	; (1a004500 <_dtoa_r+0x628>)
1a004224:	d1d2      	bne.n	1a0041cc <_dtoa_r+0x2f4>
1a004226:	f8dd b000 	ldr.w	fp, [sp]
1a00422a:	9c03      	ldr	r4, [sp, #12]
1a00422c:	4632      	mov	r2, r6
1a00422e:	463b      	mov	r3, r7
1a004230:	4630      	mov	r0, r6
1a004232:	4639      	mov	r1, r7
1a004234:	f7fd faf2 	bl	1a00181c <__adddf3>
1a004238:	4606      	mov	r6, r0
1a00423a:	460f      	mov	r7, r1
1a00423c:	4640      	mov	r0, r8
1a00423e:	4649      	mov	r1, r9
1a004240:	4632      	mov	r2, r6
1a004242:	463b      	mov	r3, r7
1a004244:	f002 fcee 	bl	1a006c24 <__aeabi_dcmplt>
1a004248:	b948      	cbnz	r0, 1a00425e <_dtoa_r+0x386>
1a00424a:	4640      	mov	r0, r8
1a00424c:	4649      	mov	r1, r9
1a00424e:	4632      	mov	r2, r6
1a004250:	463b      	mov	r3, r7
1a004252:	f002 fcdd 	bl	1a006c10 <__aeabi_dcmpeq>
1a004256:	b1b0      	cbz	r0, 1a004286 <_dtoa_r+0x3ae>
1a004258:	f01a 0f01 	tst.w	sl, #1
1a00425c:	d013      	beq.n	1a004286 <_dtoa_r+0x3ae>
1a00425e:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a004262:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004264:	1e6b      	subs	r3, r5, #1
1a004266:	e004      	b.n	1a004272 <_dtoa_r+0x39a>
1a004268:	428b      	cmp	r3, r1
1a00426a:	f000 8448 	beq.w	1a004afe <_dtoa_r+0xc26>
1a00426e:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
1a004272:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
1a004276:	f103 0501 	add.w	r5, r3, #1
1a00427a:	461a      	mov	r2, r3
1a00427c:	d0f4      	beq.n	1a004268 <_dtoa_r+0x390>
1a00427e:	f108 0301 	add.w	r3, r8, #1
1a004282:	b2db      	uxtb	r3, r3
1a004284:	7013      	strb	r3, [r2, #0]
1a004286:	4620      	mov	r0, r4
1a004288:	4659      	mov	r1, fp
1a00428a:	f001 fd85 	bl	1a005d98 <_Bfree>
1a00428e:	2200      	movs	r2, #0
1a004290:	9b05      	ldr	r3, [sp, #20]
1a004292:	702a      	strb	r2, [r5, #0]
1a004294:	9a04      	ldr	r2, [sp, #16]
1a004296:	3301      	adds	r3, #1
1a004298:	6013      	str	r3, [r2, #0]
1a00429a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
1a00429c:	2b00      	cmp	r3, #0
1a00429e:	f000 834b 	beq.w	1a004938 <_dtoa_r+0xa60>
1a0042a2:	9809      	ldr	r0, [sp, #36]	; 0x24
1a0042a4:	601d      	str	r5, [r3, #0]
1a0042a6:	b019      	add	sp, #100	; 0x64
1a0042a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0042ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a0042ae:	2a00      	cmp	r2, #0
1a0042b0:	f000 8085 	beq.w	1a0043be <_dtoa_r+0x4e6>
1a0042b4:	9a03      	ldr	r2, [sp, #12]
1a0042b6:	2a01      	cmp	r2, #1
1a0042b8:	f340 830a 	ble.w	1a0048d0 <_dtoa_r+0x9f8>
1a0042bc:	9b08      	ldr	r3, [sp, #32]
1a0042be:	1e5f      	subs	r7, r3, #1
1a0042c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0042c2:	42bb      	cmp	r3, r7
1a0042c4:	f2c0 83a6 	blt.w	1a004a14 <_dtoa_r+0xb3c>
1a0042c8:	1bdf      	subs	r7, r3, r7
1a0042ca:	9b08      	ldr	r3, [sp, #32]
1a0042cc:	2b00      	cmp	r3, #0
1a0042ce:	f2c0 84a4 	blt.w	1a004c1a <_dtoa_r+0xd42>
1a0042d2:	9d07      	ldr	r5, [sp, #28]
1a0042d4:	9b08      	ldr	r3, [sp, #32]
1a0042d6:	9a07      	ldr	r2, [sp, #28]
1a0042d8:	441a      	add	r2, r3
1a0042da:	9207      	str	r2, [sp, #28]
1a0042dc:	9a06      	ldr	r2, [sp, #24]
1a0042de:	4620      	mov	r0, r4
1a0042e0:	441a      	add	r2, r3
1a0042e2:	2101      	movs	r1, #1
1a0042e4:	9206      	str	r2, [sp, #24]
1a0042e6:	f001 fdf1 	bl	1a005ecc <__i2b>
1a0042ea:	4606      	mov	r6, r0
1a0042ec:	b165      	cbz	r5, 1a004308 <_dtoa_r+0x430>
1a0042ee:	9906      	ldr	r1, [sp, #24]
1a0042f0:	2900      	cmp	r1, #0
1a0042f2:	460b      	mov	r3, r1
1a0042f4:	dd08      	ble.n	1a004308 <_dtoa_r+0x430>
1a0042f6:	42a9      	cmp	r1, r5
1a0042f8:	9a07      	ldr	r2, [sp, #28]
1a0042fa:	bfa8      	it	ge
1a0042fc:	462b      	movge	r3, r5
1a0042fe:	1ad2      	subs	r2, r2, r3
1a004300:	1aed      	subs	r5, r5, r3
1a004302:	1acb      	subs	r3, r1, r3
1a004304:	9207      	str	r2, [sp, #28]
1a004306:	9306      	str	r3, [sp, #24]
1a004308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00430a:	2b00      	cmp	r3, #0
1a00430c:	dd1a      	ble.n	1a004344 <_dtoa_r+0x46c>
1a00430e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004310:	2b00      	cmp	r3, #0
1a004312:	f000 8378 	beq.w	1a004a06 <_dtoa_r+0xb2e>
1a004316:	2f00      	cmp	r7, #0
1a004318:	dd10      	ble.n	1a00433c <_dtoa_r+0x464>
1a00431a:	4631      	mov	r1, r6
1a00431c:	463a      	mov	r2, r7
1a00431e:	4620      	mov	r0, r4
1a004320:	f001 fe78 	bl	1a006014 <__pow5mult>
1a004324:	4606      	mov	r6, r0
1a004326:	465a      	mov	r2, fp
1a004328:	4631      	mov	r1, r6
1a00432a:	4620      	mov	r0, r4
1a00432c:	f001 fdd8 	bl	1a005ee0 <__multiply>
1a004330:	4659      	mov	r1, fp
1a004332:	4680      	mov	r8, r0
1a004334:	4620      	mov	r0, r4
1a004336:	f001 fd2f 	bl	1a005d98 <_Bfree>
1a00433a:	46c3      	mov	fp, r8
1a00433c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a00433e:	1bda      	subs	r2, r3, r7
1a004340:	f040 82a5 	bne.w	1a00488e <_dtoa_r+0x9b6>
1a004344:	4620      	mov	r0, r4
1a004346:	2101      	movs	r1, #1
1a004348:	f001 fdc0 	bl	1a005ecc <__i2b>
1a00434c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a00434e:	2b00      	cmp	r3, #0
1a004350:	4680      	mov	r8, r0
1a004352:	dd38      	ble.n	1a0043c6 <_dtoa_r+0x4ee>
1a004354:	4601      	mov	r1, r0
1a004356:	461a      	mov	r2, r3
1a004358:	4620      	mov	r0, r4
1a00435a:	f001 fe5b 	bl	1a006014 <__pow5mult>
1a00435e:	9b03      	ldr	r3, [sp, #12]
1a004360:	2b01      	cmp	r3, #1
1a004362:	4680      	mov	r8, r0
1a004364:	f340 8299 	ble.w	1a00489a <_dtoa_r+0x9c2>
1a004368:	f04f 0900 	mov.w	r9, #0
1a00436c:	f8d8 3010 	ldr.w	r3, [r8, #16]
1a004370:	eb08 0383 	add.w	r3, r8, r3, lsl #2
1a004374:	6918      	ldr	r0, [r3, #16]
1a004376:	f001 fd5b 	bl	1a005e30 <__hi0bits>
1a00437a:	f1c0 0020 	rsb	r0, r0, #32
1a00437e:	e02c      	b.n	1a0043da <_dtoa_r+0x502>
1a004380:	2301      	movs	r3, #1
1a004382:	930d      	str	r3, [sp, #52]	; 0x34
1a004384:	e66a      	b.n	1a00405c <_dtoa_r+0x184>
1a004386:	9805      	ldr	r0, [sp, #20]
1a004388:	f7fd fb94 	bl	1a001ab4 <__aeabi_i2d>
1a00438c:	4632      	mov	r2, r6
1a00438e:	463b      	mov	r3, r7
1a004390:	f002 fc3e 	bl	1a006c10 <__aeabi_dcmpeq>
1a004394:	2800      	cmp	r0, #0
1a004396:	f47f ae4b 	bne.w	1a004030 <_dtoa_r+0x158>
1a00439a:	9b05      	ldr	r3, [sp, #20]
1a00439c:	3b01      	subs	r3, #1
1a00439e:	9305      	str	r3, [sp, #20]
1a0043a0:	e646      	b.n	1a004030 <_dtoa_r+0x158>
1a0043a2:	9a07      	ldr	r2, [sp, #28]
1a0043a4:	9b05      	ldr	r3, [sp, #20]
1a0043a6:	1ad2      	subs	r2, r2, r3
1a0043a8:	425b      	negs	r3, r3
1a0043aa:	930a      	str	r3, [sp, #40]	; 0x28
1a0043ac:	2300      	movs	r3, #0
1a0043ae:	9207      	str	r2, [sp, #28]
1a0043b0:	930c      	str	r3, [sp, #48]	; 0x30
1a0043b2:	e666      	b.n	1a004082 <_dtoa_r+0x1aa>
1a0043b4:	425b      	negs	r3, r3
1a0043b6:	9307      	str	r3, [sp, #28]
1a0043b8:	2300      	movs	r3, #0
1a0043ba:	9306      	str	r3, [sp, #24]
1a0043bc:	e656      	b.n	1a00406c <_dtoa_r+0x194>
1a0043be:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0043c0:	9d07      	ldr	r5, [sp, #28]
1a0043c2:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
1a0043c4:	e792      	b.n	1a0042ec <_dtoa_r+0x414>
1a0043c6:	9b03      	ldr	r3, [sp, #12]
1a0043c8:	2b01      	cmp	r3, #1
1a0043ca:	f340 82b8 	ble.w	1a00493e <_dtoa_r+0xa66>
1a0043ce:	f04f 0900 	mov.w	r9, #0
1a0043d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a0043d4:	2b00      	cmp	r3, #0
1a0043d6:	d1c9      	bne.n	1a00436c <_dtoa_r+0x494>
1a0043d8:	2001      	movs	r0, #1
1a0043da:	9b06      	ldr	r3, [sp, #24]
1a0043dc:	4418      	add	r0, r3
1a0043de:	f010 001f 	ands.w	r0, r0, #31
1a0043e2:	f000 8083 	beq.w	1a0044ec <_dtoa_r+0x614>
1a0043e6:	f1c0 0320 	rsb	r3, r0, #32
1a0043ea:	2b04      	cmp	r3, #4
1a0043ec:	f340 84b9 	ble.w	1a004d62 <_dtoa_r+0xe8a>
1a0043f0:	f1c0 001c 	rsb	r0, r0, #28
1a0043f4:	9b07      	ldr	r3, [sp, #28]
1a0043f6:	4403      	add	r3, r0
1a0043f8:	9307      	str	r3, [sp, #28]
1a0043fa:	9b06      	ldr	r3, [sp, #24]
1a0043fc:	4403      	add	r3, r0
1a0043fe:	4405      	add	r5, r0
1a004400:	9306      	str	r3, [sp, #24]
1a004402:	9b07      	ldr	r3, [sp, #28]
1a004404:	2b00      	cmp	r3, #0
1a004406:	dd05      	ble.n	1a004414 <_dtoa_r+0x53c>
1a004408:	4659      	mov	r1, fp
1a00440a:	461a      	mov	r2, r3
1a00440c:	4620      	mov	r0, r4
1a00440e:	f001 fe51 	bl	1a0060b4 <__lshift>
1a004412:	4683      	mov	fp, r0
1a004414:	9b06      	ldr	r3, [sp, #24]
1a004416:	2b00      	cmp	r3, #0
1a004418:	dd05      	ble.n	1a004426 <_dtoa_r+0x54e>
1a00441a:	4641      	mov	r1, r8
1a00441c:	461a      	mov	r2, r3
1a00441e:	4620      	mov	r0, r4
1a004420:	f001 fe48 	bl	1a0060b4 <__lshift>
1a004424:	4680      	mov	r8, r0
1a004426:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a004428:	2b00      	cmp	r3, #0
1a00442a:	f040 826a 	bne.w	1a004902 <_dtoa_r+0xa2a>
1a00442e:	9b08      	ldr	r3, [sp, #32]
1a004430:	2b00      	cmp	r3, #0
1a004432:	f340 8297 	ble.w	1a004964 <_dtoa_r+0xa8c>
1a004436:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004438:	2b00      	cmp	r3, #0
1a00443a:	d171      	bne.n	1a004520 <_dtoa_r+0x648>
1a00443c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
1a004440:	9f08      	ldr	r7, [sp, #32]
1a004442:	464d      	mov	r5, r9
1a004444:	e002      	b.n	1a00444c <_dtoa_r+0x574>
1a004446:	f001 fcb1 	bl	1a005dac <__multadd>
1a00444a:	4683      	mov	fp, r0
1a00444c:	4641      	mov	r1, r8
1a00444e:	4658      	mov	r0, fp
1a004450:	f7ff fcac 	bl	1a003dac <quorem>
1a004454:	f100 0c30 	add.w	ip, r0, #48	; 0x30
1a004458:	f805 cb01 	strb.w	ip, [r5], #1
1a00445c:	ebc9 0305 	rsb	r3, r9, r5
1a004460:	42bb      	cmp	r3, r7
1a004462:	4620      	mov	r0, r4
1a004464:	4659      	mov	r1, fp
1a004466:	f04f 020a 	mov.w	r2, #10
1a00446a:	f04f 0300 	mov.w	r3, #0
1a00446e:	dbea      	blt.n	1a004446 <_dtoa_r+0x56e>
1a004470:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004472:	9a08      	ldr	r2, [sp, #32]
1a004474:	2a01      	cmp	r2, #1
1a004476:	bfac      	ite	ge
1a004478:	189b      	addge	r3, r3, r2
1a00447a:	3301      	addlt	r3, #1
1a00447c:	461d      	mov	r5, r3
1a00447e:	f04f 0a00 	mov.w	sl, #0
1a004482:	4659      	mov	r1, fp
1a004484:	2201      	movs	r2, #1
1a004486:	4620      	mov	r0, r4
1a004488:	f8cd c000 	str.w	ip, [sp]
1a00448c:	f001 fe12 	bl	1a0060b4 <__lshift>
1a004490:	4641      	mov	r1, r8
1a004492:	4683      	mov	fp, r0
1a004494:	f001 fe64 	bl	1a006160 <__mcmp>
1a004498:	2800      	cmp	r0, #0
1a00449a:	f8dd c000 	ldr.w	ip, [sp]
1a00449e:	f340 82ef 	ble.w	1a004a80 <_dtoa_r+0xba8>
1a0044a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
1a0044a6:	9909      	ldr	r1, [sp, #36]	; 0x24
1a0044a8:	1e6b      	subs	r3, r5, #1
1a0044aa:	e004      	b.n	1a0044b6 <_dtoa_r+0x5de>
1a0044ac:	428b      	cmp	r3, r1
1a0044ae:	f000 8275 	beq.w	1a00499c <_dtoa_r+0xac4>
1a0044b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
1a0044b6:	2a39      	cmp	r2, #57	; 0x39
1a0044b8:	f103 0501 	add.w	r5, r3, #1
1a0044bc:	d0f6      	beq.n	1a0044ac <_dtoa_r+0x5d4>
1a0044be:	3201      	adds	r2, #1
1a0044c0:	701a      	strb	r2, [r3, #0]
1a0044c2:	4641      	mov	r1, r8
1a0044c4:	4620      	mov	r0, r4
1a0044c6:	f001 fc67 	bl	1a005d98 <_Bfree>
1a0044ca:	2e00      	cmp	r6, #0
1a0044cc:	f43f aedb 	beq.w	1a004286 <_dtoa_r+0x3ae>
1a0044d0:	f1ba 0f00 	cmp.w	sl, #0
1a0044d4:	d005      	beq.n	1a0044e2 <_dtoa_r+0x60a>
1a0044d6:	45b2      	cmp	sl, r6
1a0044d8:	d003      	beq.n	1a0044e2 <_dtoa_r+0x60a>
1a0044da:	4651      	mov	r1, sl
1a0044dc:	4620      	mov	r0, r4
1a0044de:	f001 fc5b 	bl	1a005d98 <_Bfree>
1a0044e2:	4631      	mov	r1, r6
1a0044e4:	4620      	mov	r0, r4
1a0044e6:	f001 fc57 	bl	1a005d98 <_Bfree>
1a0044ea:	e6cc      	b.n	1a004286 <_dtoa_r+0x3ae>
1a0044ec:	201c      	movs	r0, #28
1a0044ee:	e781      	b.n	1a0043f4 <_dtoa_r+0x51c>
1a0044f0:	4b04      	ldr	r3, [pc, #16]	; (1a004504 <_dtoa_r+0x62c>)
1a0044f2:	9a00      	ldr	r2, [sp, #0]
1a0044f4:	1b5b      	subs	r3, r3, r5
1a0044f6:	fa02 f003 	lsl.w	r0, r2, r3
1a0044fa:	e566      	b.n	1a003fca <_dtoa_r+0xf2>
1a0044fc:	900d      	str	r0, [sp, #52]	; 0x34
1a0044fe:	e5ad      	b.n	1a00405c <_dtoa_r+0x184>
1a004500:	40240000 	.word	0x40240000
1a004504:	fffffbee 	.word	0xfffffbee
1a004508:	4631      	mov	r1, r6
1a00450a:	2300      	movs	r3, #0
1a00450c:	4620      	mov	r0, r4
1a00450e:	220a      	movs	r2, #10
1a004510:	f001 fc4c 	bl	1a005dac <__multadd>
1a004514:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004516:	2b00      	cmp	r3, #0
1a004518:	4606      	mov	r6, r0
1a00451a:	f340 840b 	ble.w	1a004d34 <_dtoa_r+0xe5c>
1a00451e:	9308      	str	r3, [sp, #32]
1a004520:	2d00      	cmp	r5, #0
1a004522:	dd05      	ble.n	1a004530 <_dtoa_r+0x658>
1a004524:	4631      	mov	r1, r6
1a004526:	462a      	mov	r2, r5
1a004528:	4620      	mov	r0, r4
1a00452a:	f001 fdc3 	bl	1a0060b4 <__lshift>
1a00452e:	4606      	mov	r6, r0
1a004530:	f1b9 0f00 	cmp.w	r9, #0
1a004534:	f040 82ed 	bne.w	1a004b12 <_dtoa_r+0xc3a>
1a004538:	46b1      	mov	r9, r6
1a00453a:	9b08      	ldr	r3, [sp, #32]
1a00453c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a00453e:	3b01      	subs	r3, #1
1a004540:	18d3      	adds	r3, r2, r3
1a004542:	9308      	str	r3, [sp, #32]
1a004544:	9b00      	ldr	r3, [sp, #0]
1a004546:	f003 0301 	and.w	r3, r3, #1
1a00454a:	930a      	str	r3, [sp, #40]	; 0x28
1a00454c:	4617      	mov	r7, r2
1a00454e:	4641      	mov	r1, r8
1a004550:	4658      	mov	r0, fp
1a004552:	f7ff fc2b 	bl	1a003dac <quorem>
1a004556:	4631      	mov	r1, r6
1a004558:	4605      	mov	r5, r0
1a00455a:	4658      	mov	r0, fp
1a00455c:	f001 fe00 	bl	1a006160 <__mcmp>
1a004560:	464a      	mov	r2, r9
1a004562:	4682      	mov	sl, r0
1a004564:	4641      	mov	r1, r8
1a004566:	4620      	mov	r0, r4
1a004568:	f001 fe1e 	bl	1a0061a8 <__mdiff>
1a00456c:	68c2      	ldr	r2, [r0, #12]
1a00456e:	4603      	mov	r3, r0
1a004570:	f105 0c30 	add.w	ip, r5, #48	; 0x30
1a004574:	2a00      	cmp	r2, #0
1a004576:	f040 81ba 	bne.w	1a0048ee <_dtoa_r+0xa16>
1a00457a:	4619      	mov	r1, r3
1a00457c:	4658      	mov	r0, fp
1a00457e:	f8cd c01c 	str.w	ip, [sp, #28]
1a004582:	9306      	str	r3, [sp, #24]
1a004584:	f001 fdec 	bl	1a006160 <__mcmp>
1a004588:	9b06      	ldr	r3, [sp, #24]
1a00458a:	9000      	str	r0, [sp, #0]
1a00458c:	4619      	mov	r1, r3
1a00458e:	4620      	mov	r0, r4
1a004590:	f001 fc02 	bl	1a005d98 <_Bfree>
1a004594:	9a00      	ldr	r2, [sp, #0]
1a004596:	f8dd c01c 	ldr.w	ip, [sp, #28]
1a00459a:	b92a      	cbnz	r2, 1a0045a8 <_dtoa_r+0x6d0>
1a00459c:	9b03      	ldr	r3, [sp, #12]
1a00459e:	b91b      	cbnz	r3, 1a0045a8 <_dtoa_r+0x6d0>
1a0045a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0045a2:	2b00      	cmp	r3, #0
1a0045a4:	f000 83aa 	beq.w	1a004cfc <_dtoa_r+0xe24>
1a0045a8:	f1ba 0f00 	cmp.w	sl, #0
1a0045ac:	f2c0 824a 	blt.w	1a004a44 <_dtoa_r+0xb6c>
1a0045b0:	d105      	bne.n	1a0045be <_dtoa_r+0x6e6>
1a0045b2:	9b03      	ldr	r3, [sp, #12]
1a0045b4:	b91b      	cbnz	r3, 1a0045be <_dtoa_r+0x6e6>
1a0045b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a0045b8:	2b00      	cmp	r3, #0
1a0045ba:	f000 8243 	beq.w	1a004a44 <_dtoa_r+0xb6c>
1a0045be:	2a00      	cmp	r2, #0
1a0045c0:	f300 82bb 	bgt.w	1a004b3a <_dtoa_r+0xc62>
1a0045c4:	9b08      	ldr	r3, [sp, #32]
1a0045c6:	f887 c000 	strb.w	ip, [r7]
1a0045ca:	f107 0a01 	add.w	sl, r7, #1
1a0045ce:	429f      	cmp	r7, r3
1a0045d0:	4655      	mov	r5, sl
1a0045d2:	f000 82be 	beq.w	1a004b52 <_dtoa_r+0xc7a>
1a0045d6:	4659      	mov	r1, fp
1a0045d8:	220a      	movs	r2, #10
1a0045da:	2300      	movs	r3, #0
1a0045dc:	4620      	mov	r0, r4
1a0045de:	f001 fbe5 	bl	1a005dac <__multadd>
1a0045e2:	454e      	cmp	r6, r9
1a0045e4:	4683      	mov	fp, r0
1a0045e6:	4631      	mov	r1, r6
1a0045e8:	4620      	mov	r0, r4
1a0045ea:	f04f 020a 	mov.w	r2, #10
1a0045ee:	f04f 0300 	mov.w	r3, #0
1a0045f2:	f000 8176 	beq.w	1a0048e2 <_dtoa_r+0xa0a>
1a0045f6:	f001 fbd9 	bl	1a005dac <__multadd>
1a0045fa:	4649      	mov	r1, r9
1a0045fc:	4606      	mov	r6, r0
1a0045fe:	220a      	movs	r2, #10
1a004600:	4620      	mov	r0, r4
1a004602:	2300      	movs	r3, #0
1a004604:	f001 fbd2 	bl	1a005dac <__multadd>
1a004608:	4657      	mov	r7, sl
1a00460a:	4681      	mov	r9, r0
1a00460c:	e79f      	b.n	1a00454e <_dtoa_r+0x676>
1a00460e:	2301      	movs	r3, #1
1a004610:	930b      	str	r3, [sp, #44]	; 0x2c
1a004612:	f1ba 0f00 	cmp.w	sl, #0
1a004616:	f340 820c 	ble.w	1a004a32 <_dtoa_r+0xb5a>
1a00461a:	4656      	mov	r6, sl
1a00461c:	4655      	mov	r5, sl
1a00461e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
1a004622:	f8cd a020 	str.w	sl, [sp, #32]
1a004626:	2100      	movs	r1, #0
1a004628:	2e17      	cmp	r6, #23
1a00462a:	6461      	str	r1, [r4, #68]	; 0x44
1a00462c:	d90a      	bls.n	1a004644 <_dtoa_r+0x76c>
1a00462e:	2201      	movs	r2, #1
1a004630:	2304      	movs	r3, #4
1a004632:	005b      	lsls	r3, r3, #1
1a004634:	f103 0014 	add.w	r0, r3, #20
1a004638:	4286      	cmp	r6, r0
1a00463a:	4611      	mov	r1, r2
1a00463c:	f102 0201 	add.w	r2, r2, #1
1a004640:	d2f7      	bcs.n	1a004632 <_dtoa_r+0x75a>
1a004642:	6461      	str	r1, [r4, #68]	; 0x44
1a004644:	4620      	mov	r0, r4
1a004646:	f001 fb81 	bl	1a005d4c <_Balloc>
1a00464a:	2d0e      	cmp	r5, #14
1a00464c:	9009      	str	r0, [sp, #36]	; 0x24
1a00464e:	6420      	str	r0, [r4, #64]	; 0x40
1a004650:	f63f ad55 	bhi.w	1a0040fe <_dtoa_r+0x226>
1a004654:	2f00      	cmp	r7, #0
1a004656:	f43f ad52 	beq.w	1a0040fe <_dtoa_r+0x226>
1a00465a:	ed9d 7b00 	vldr	d7, [sp]
1a00465e:	9905      	ldr	r1, [sp, #20]
1a004660:	2900      	cmp	r1, #0
1a004662:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a004666:	f340 8223 	ble.w	1a004ab0 <_dtoa_r+0xbd8>
1a00466a:	4bb7      	ldr	r3, [pc, #732]	; (1a004948 <_dtoa_r+0xa70>)
1a00466c:	f001 020f 	and.w	r2, r1, #15
1a004670:	110d      	asrs	r5, r1, #4
1a004672:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004676:	06e9      	lsls	r1, r5, #27
1a004678:	e9d3 6700 	ldrd	r6, r7, [r3]
1a00467c:	f140 81d2 	bpl.w	1a004a24 <_dtoa_r+0xb4c>
1a004680:	4bb2      	ldr	r3, [pc, #712]	; (1a00494c <_dtoa_r+0xa74>)
1a004682:	ec51 0b17 	vmov	r0, r1, d7
1a004686:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
1a00468a:	f7fd fbed 	bl	1a001e68 <__aeabi_ddiv>
1a00468e:	e9cd 0100 	strd	r0, r1, [sp]
1a004692:	f005 050f 	and.w	r5, r5, #15
1a004696:	f04f 0803 	mov.w	r8, #3
1a00469a:	b18d      	cbz	r5, 1a0046c0 <_dtoa_r+0x7e8>
1a00469c:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 1a00494c <_dtoa_r+0xa74>
1a0046a0:	4630      	mov	r0, r6
1a0046a2:	4639      	mov	r1, r7
1a0046a4:	07ea      	lsls	r2, r5, #31
1a0046a6:	d505      	bpl.n	1a0046b4 <_dtoa_r+0x7dc>
1a0046a8:	e9d9 2300 	ldrd	r2, r3, [r9]
1a0046ac:	f7fd fab2 	bl	1a001c14 <__aeabi_dmul>
1a0046b0:	f108 0801 	add.w	r8, r8, #1
1a0046b4:	106d      	asrs	r5, r5, #1
1a0046b6:	f109 0908 	add.w	r9, r9, #8
1a0046ba:	d1f3      	bne.n	1a0046a4 <_dtoa_r+0x7cc>
1a0046bc:	4606      	mov	r6, r0
1a0046be:	460f      	mov	r7, r1
1a0046c0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0046c4:	4632      	mov	r2, r6
1a0046c6:	463b      	mov	r3, r7
1a0046c8:	f7fd fbce 	bl	1a001e68 <__aeabi_ddiv>
1a0046cc:	e9cd 0100 	strd	r0, r1, [sp]
1a0046d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a0046d2:	b143      	cbz	r3, 1a0046e6 <_dtoa_r+0x80e>
1a0046d4:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0046d8:	2200      	movs	r2, #0
1a0046da:	4b9d      	ldr	r3, [pc, #628]	; (1a004950 <_dtoa_r+0xa78>)
1a0046dc:	f002 faa2 	bl	1a006c24 <__aeabi_dcmplt>
1a0046e0:	2800      	cmp	r0, #0
1a0046e2:	f040 82ae 	bne.w	1a004c42 <_dtoa_r+0xd6a>
1a0046e6:	4640      	mov	r0, r8
1a0046e8:	f7fd f9e4 	bl	1a001ab4 <__aeabi_i2d>
1a0046ec:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0046f0:	f7fd fa90 	bl	1a001c14 <__aeabi_dmul>
1a0046f4:	4b97      	ldr	r3, [pc, #604]	; (1a004954 <_dtoa_r+0xa7c>)
1a0046f6:	2200      	movs	r2, #0
1a0046f8:	f7fd f890 	bl	1a00181c <__adddf3>
1a0046fc:	9b08      	ldr	r3, [sp, #32]
1a0046fe:	4606      	mov	r6, r0
1a004700:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a004704:	2b00      	cmp	r3, #0
1a004706:	f000 8162 	beq.w	1a0049ce <_dtoa_r+0xaf6>
1a00470a:	9b05      	ldr	r3, [sp, #20]
1a00470c:	f8dd 9020 	ldr.w	r9, [sp, #32]
1a004710:	9314      	str	r3, [sp, #80]	; 0x50
1a004712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004714:	2b00      	cmp	r3, #0
1a004716:	f000 8223 	beq.w	1a004b60 <_dtoa_r+0xc88>
1a00471a:	4b8b      	ldr	r3, [pc, #556]	; (1a004948 <_dtoa_r+0xa70>)
1a00471c:	498e      	ldr	r1, [pc, #568]	; (1a004958 <_dtoa_r+0xa80>)
1a00471e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
1a004722:	e953 2302 	ldrd	r2, r3, [r3, #-8]
1a004726:	2000      	movs	r0, #0
1a004728:	f7fd fb9e 	bl	1a001e68 <__aeabi_ddiv>
1a00472c:	4632      	mov	r2, r6
1a00472e:	463b      	mov	r3, r7
1a004730:	f7fd f872 	bl	1a001818 <__aeabi_dsub>
1a004734:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004738:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a00473c:	4639      	mov	r1, r7
1a00473e:	4630      	mov	r0, r6
1a004740:	f002 fa98 	bl	1a006c74 <__aeabi_d2iz>
1a004744:	4605      	mov	r5, r0
1a004746:	f7fd f9b5 	bl	1a001ab4 <__aeabi_i2d>
1a00474a:	3530      	adds	r5, #48	; 0x30
1a00474c:	4602      	mov	r2, r0
1a00474e:	460b      	mov	r3, r1
1a004750:	4630      	mov	r0, r6
1a004752:	4639      	mov	r1, r7
1a004754:	f7fd f860 	bl	1a001818 <__aeabi_dsub>
1a004758:	fa5f f885 	uxtb.w	r8, r5
1a00475c:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00475e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a004762:	f885 8000 	strb.w	r8, [r5]
1a004766:	4606      	mov	r6, r0
1a004768:	460f      	mov	r7, r1
1a00476a:	3501      	adds	r5, #1
1a00476c:	f002 fa5a 	bl	1a006c24 <__aeabi_dcmplt>
1a004770:	2800      	cmp	r0, #0
1a004772:	f040 82a7 	bne.w	1a004cc4 <_dtoa_r+0xdec>
1a004776:	4632      	mov	r2, r6
1a004778:	463b      	mov	r3, r7
1a00477a:	2000      	movs	r0, #0
1a00477c:	4974      	ldr	r1, [pc, #464]	; (1a004950 <_dtoa_r+0xa78>)
1a00477e:	f7fd f84b 	bl	1a001818 <__aeabi_dsub>
1a004782:	4602      	mov	r2, r0
1a004784:	460b      	mov	r3, r1
1a004786:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a00478a:	f002 fa69 	bl	1a006c60 <__aeabi_dcmpgt>
1a00478e:	2800      	cmp	r0, #0
1a004790:	f040 82ad 	bne.w	1a004cee <_dtoa_r+0xe16>
1a004794:	f1b9 0f01 	cmp.w	r9, #1
1a004798:	f340 8184 	ble.w	1a004aa4 <_dtoa_r+0xbcc>
1a00479c:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00479e:	f8cd b000 	str.w	fp, [sp]
1a0047a2:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
1a0047a6:	4499      	add	r9, r3
1a0047a8:	46a0      	mov	r8, r4
1a0047aa:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
1a0047ae:	e00d      	b.n	1a0047cc <_dtoa_r+0x8f4>
1a0047b0:	2000      	movs	r0, #0
1a0047b2:	4967      	ldr	r1, [pc, #412]	; (1a004950 <_dtoa_r+0xa78>)
1a0047b4:	f7fd f830 	bl	1a001818 <__aeabi_dsub>
1a0047b8:	4652      	mov	r2, sl
1a0047ba:	465b      	mov	r3, fp
1a0047bc:	f002 fa32 	bl	1a006c24 <__aeabi_dcmplt>
1a0047c0:	2800      	cmp	r0, #0
1a0047c2:	f040 828f 	bne.w	1a004ce4 <_dtoa_r+0xe0c>
1a0047c6:	454d      	cmp	r5, r9
1a0047c8:	f000 8167 	beq.w	1a004a9a <_dtoa_r+0xbc2>
1a0047cc:	4650      	mov	r0, sl
1a0047ce:	4659      	mov	r1, fp
1a0047d0:	2200      	movs	r2, #0
1a0047d2:	4b62      	ldr	r3, [pc, #392]	; (1a00495c <_dtoa_r+0xa84>)
1a0047d4:	f7fd fa1e 	bl	1a001c14 <__aeabi_dmul>
1a0047d8:	2200      	movs	r2, #0
1a0047da:	4b60      	ldr	r3, [pc, #384]	; (1a00495c <_dtoa_r+0xa84>)
1a0047dc:	4682      	mov	sl, r0
1a0047de:	468b      	mov	fp, r1
1a0047e0:	4630      	mov	r0, r6
1a0047e2:	4639      	mov	r1, r7
1a0047e4:	f7fd fa16 	bl	1a001c14 <__aeabi_dmul>
1a0047e8:	460f      	mov	r7, r1
1a0047ea:	4606      	mov	r6, r0
1a0047ec:	f002 fa42 	bl	1a006c74 <__aeabi_d2iz>
1a0047f0:	4604      	mov	r4, r0
1a0047f2:	f7fd f95f 	bl	1a001ab4 <__aeabi_i2d>
1a0047f6:	4602      	mov	r2, r0
1a0047f8:	460b      	mov	r3, r1
1a0047fa:	4630      	mov	r0, r6
1a0047fc:	4639      	mov	r1, r7
1a0047fe:	f7fd f80b 	bl	1a001818 <__aeabi_dsub>
1a004802:	3430      	adds	r4, #48	; 0x30
1a004804:	b2e4      	uxtb	r4, r4
1a004806:	4652      	mov	r2, sl
1a004808:	465b      	mov	r3, fp
1a00480a:	f805 4b01 	strb.w	r4, [r5], #1
1a00480e:	4606      	mov	r6, r0
1a004810:	460f      	mov	r7, r1
1a004812:	f002 fa07 	bl	1a006c24 <__aeabi_dcmplt>
1a004816:	4632      	mov	r2, r6
1a004818:	463b      	mov	r3, r7
1a00481a:	2800      	cmp	r0, #0
1a00481c:	d0c8      	beq.n	1a0047b0 <_dtoa_r+0x8d8>
1a00481e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004820:	f8dd b000 	ldr.w	fp, [sp]
1a004824:	9305      	str	r3, [sp, #20]
1a004826:	4644      	mov	r4, r8
1a004828:	e52d      	b.n	1a004286 <_dtoa_r+0x3ae>
1a00482a:	2300      	movs	r3, #0
1a00482c:	930b      	str	r3, [sp, #44]	; 0x2c
1a00482e:	9b05      	ldr	r3, [sp, #20]
1a004830:	4453      	add	r3, sl
1a004832:	930e      	str	r3, [sp, #56]	; 0x38
1a004834:	3301      	adds	r3, #1
1a004836:	2b00      	cmp	r3, #0
1a004838:	9308      	str	r3, [sp, #32]
1a00483a:	f340 8101 	ble.w	1a004a40 <_dtoa_r+0xb68>
1a00483e:	9d08      	ldr	r5, [sp, #32]
1a004840:	462e      	mov	r6, r5
1a004842:	e6f0      	b.n	1a004626 <_dtoa_r+0x74e>
1a004844:	2300      	movs	r3, #0
1a004846:	930b      	str	r3, [sp, #44]	; 0x2c
1a004848:	e6e3      	b.n	1a004612 <_dtoa_r+0x73a>
1a00484a:	9b08      	ldr	r3, [sp, #32]
1a00484c:	2b00      	cmp	r3, #0
1a00484e:	f73f ac67 	bgt.w	1a004120 <_dtoa_r+0x248>
1a004852:	f040 80d4 	bne.w	1a0049fe <_dtoa_r+0xb26>
1a004856:	4640      	mov	r0, r8
1a004858:	2200      	movs	r2, #0
1a00485a:	4b41      	ldr	r3, [pc, #260]	; (1a004960 <_dtoa_r+0xa88>)
1a00485c:	4649      	mov	r1, r9
1a00485e:	f7fd f9d9 	bl	1a001c14 <__aeabi_dmul>
1a004862:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004866:	f002 f9f1 	bl	1a006c4c <__aeabi_dcmpge>
1a00486a:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a00486e:	4646      	mov	r6, r8
1a004870:	2800      	cmp	r0, #0
1a004872:	f000 808b 	beq.w	1a00498c <_dtoa_r+0xab4>
1a004876:	ea6f 030a 	mvn.w	r3, sl
1a00487a:	9d09      	ldr	r5, [sp, #36]	; 0x24
1a00487c:	9305      	str	r3, [sp, #20]
1a00487e:	4641      	mov	r1, r8
1a004880:	4620      	mov	r0, r4
1a004882:	f001 fa89 	bl	1a005d98 <_Bfree>
1a004886:	2e00      	cmp	r6, #0
1a004888:	f47f ae2b 	bne.w	1a0044e2 <_dtoa_r+0x60a>
1a00488c:	e4fb      	b.n	1a004286 <_dtoa_r+0x3ae>
1a00488e:	4659      	mov	r1, fp
1a004890:	4620      	mov	r0, r4
1a004892:	f001 fbbf 	bl	1a006014 <__pow5mult>
1a004896:	4683      	mov	fp, r0
1a004898:	e554      	b.n	1a004344 <_dtoa_r+0x46c>
1a00489a:	9b00      	ldr	r3, [sp, #0]
1a00489c:	2b00      	cmp	r3, #0
1a00489e:	f47f ad63 	bne.w	1a004368 <_dtoa_r+0x490>
1a0048a2:	9b01      	ldr	r3, [sp, #4]
1a0048a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a0048a8:	2b00      	cmp	r3, #0
1a0048aa:	f47f ad90 	bne.w	1a0043ce <_dtoa_r+0x4f6>
1a0048ae:	9b01      	ldr	r3, [sp, #4]
1a0048b0:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
1a0048b4:	0d3f      	lsrs	r7, r7, #20
1a0048b6:	053f      	lsls	r7, r7, #20
1a0048b8:	2f00      	cmp	r7, #0
1a0048ba:	f000 821c 	beq.w	1a004cf6 <_dtoa_r+0xe1e>
1a0048be:	9b07      	ldr	r3, [sp, #28]
1a0048c0:	3301      	adds	r3, #1
1a0048c2:	9307      	str	r3, [sp, #28]
1a0048c4:	9b06      	ldr	r3, [sp, #24]
1a0048c6:	3301      	adds	r3, #1
1a0048c8:	9306      	str	r3, [sp, #24]
1a0048ca:	f04f 0901 	mov.w	r9, #1
1a0048ce:	e580      	b.n	1a0043d2 <_dtoa_r+0x4fa>
1a0048d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1a0048d2:	2a00      	cmp	r2, #0
1a0048d4:	f000 81a7 	beq.w	1a004c26 <_dtoa_r+0xd4e>
1a0048d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
1a0048dc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a0048de:	9d07      	ldr	r5, [sp, #28]
1a0048e0:	e4f9      	b.n	1a0042d6 <_dtoa_r+0x3fe>
1a0048e2:	f001 fa63 	bl	1a005dac <__multadd>
1a0048e6:	4657      	mov	r7, sl
1a0048e8:	4606      	mov	r6, r0
1a0048ea:	4681      	mov	r9, r0
1a0048ec:	e62f      	b.n	1a00454e <_dtoa_r+0x676>
1a0048ee:	4601      	mov	r1, r0
1a0048f0:	4620      	mov	r0, r4
1a0048f2:	f8cd c000 	str.w	ip, [sp]
1a0048f6:	f001 fa4f 	bl	1a005d98 <_Bfree>
1a0048fa:	2201      	movs	r2, #1
1a0048fc:	f8dd c000 	ldr.w	ip, [sp]
1a004900:	e652      	b.n	1a0045a8 <_dtoa_r+0x6d0>
1a004902:	4658      	mov	r0, fp
1a004904:	4641      	mov	r1, r8
1a004906:	f001 fc2b 	bl	1a006160 <__mcmp>
1a00490a:	2800      	cmp	r0, #0
1a00490c:	f6bf ad8f 	bge.w	1a00442e <_dtoa_r+0x556>
1a004910:	9f05      	ldr	r7, [sp, #20]
1a004912:	4659      	mov	r1, fp
1a004914:	2300      	movs	r3, #0
1a004916:	4620      	mov	r0, r4
1a004918:	220a      	movs	r2, #10
1a00491a:	3f01      	subs	r7, #1
1a00491c:	9705      	str	r7, [sp, #20]
1a00491e:	f001 fa45 	bl	1a005dac <__multadd>
1a004922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
1a004924:	4683      	mov	fp, r0
1a004926:	2b00      	cmp	r3, #0
1a004928:	f47f adee 	bne.w	1a004508 <_dtoa_r+0x630>
1a00492c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00492e:	2b00      	cmp	r3, #0
1a004930:	f340 81f5 	ble.w	1a004d1e <_dtoa_r+0xe46>
1a004934:	9308      	str	r3, [sp, #32]
1a004936:	e581      	b.n	1a00443c <_dtoa_r+0x564>
1a004938:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00493a:	f7ff bb04 	b.w	1a003f46 <_dtoa_r+0x6e>
1a00493e:	9b00      	ldr	r3, [sp, #0]
1a004940:	2b00      	cmp	r3, #0
1a004942:	f47f ad44 	bne.w	1a0043ce <_dtoa_r+0x4f6>
1a004946:	e7ac      	b.n	1a0048a2 <_dtoa_r+0x9ca>
1a004948:	1a007118 	.word	0x1a007118
1a00494c:	1a0071e0 	.word	0x1a0071e0
1a004950:	3ff00000 	.word	0x3ff00000
1a004954:	401c0000 	.word	0x401c0000
1a004958:	3fe00000 	.word	0x3fe00000
1a00495c:	40240000 	.word	0x40240000
1a004960:	40140000 	.word	0x40140000
1a004964:	9b03      	ldr	r3, [sp, #12]
1a004966:	2b02      	cmp	r3, #2
1a004968:	f77f ad65 	ble.w	1a004436 <_dtoa_r+0x55e>
1a00496c:	9b08      	ldr	r3, [sp, #32]
1a00496e:	2b00      	cmp	r3, #0
1a004970:	d181      	bne.n	1a004876 <_dtoa_r+0x99e>
1a004972:	4641      	mov	r1, r8
1a004974:	2205      	movs	r2, #5
1a004976:	4620      	mov	r0, r4
1a004978:	f001 fa18 	bl	1a005dac <__multadd>
1a00497c:	4680      	mov	r8, r0
1a00497e:	4641      	mov	r1, r8
1a004980:	4658      	mov	r0, fp
1a004982:	f001 fbed 	bl	1a006160 <__mcmp>
1a004986:	2800      	cmp	r0, #0
1a004988:	f77f af75 	ble.w	1a004876 <_dtoa_r+0x99e>
1a00498c:	9a05      	ldr	r2, [sp, #20]
1a00498e:	9909      	ldr	r1, [sp, #36]	; 0x24
1a004990:	2331      	movs	r3, #49	; 0x31
1a004992:	3201      	adds	r2, #1
1a004994:	9205      	str	r2, [sp, #20]
1a004996:	700b      	strb	r3, [r1, #0]
1a004998:	1c4d      	adds	r5, r1, #1
1a00499a:	e770      	b.n	1a00487e <_dtoa_r+0x9a6>
1a00499c:	9a05      	ldr	r2, [sp, #20]
1a00499e:	3201      	adds	r2, #1
1a0049a0:	9205      	str	r2, [sp, #20]
1a0049a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a0049a4:	2331      	movs	r3, #49	; 0x31
1a0049a6:	7013      	strb	r3, [r2, #0]
1a0049a8:	e58b      	b.n	1a0044c2 <_dtoa_r+0x5ea>
1a0049aa:	f8dd b000 	ldr.w	fp, [sp]
1a0049ae:	9c03      	ldr	r4, [sp, #12]
1a0049b0:	e469      	b.n	1a004286 <_dtoa_r+0x3ae>
1a0049b2:	4640      	mov	r0, r8
1a0049b4:	f7fd f87e 	bl	1a001ab4 <__aeabi_i2d>
1a0049b8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a0049bc:	f7fd f92a 	bl	1a001c14 <__aeabi_dmul>
1a0049c0:	2200      	movs	r2, #0
1a0049c2:	4bc2      	ldr	r3, [pc, #776]	; (1a004ccc <_dtoa_r+0xdf4>)
1a0049c4:	f7fc ff2a 	bl	1a00181c <__adddf3>
1a0049c8:	4606      	mov	r6, r0
1a0049ca:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a0049ce:	2200      	movs	r2, #0
1a0049d0:	4bbf      	ldr	r3, [pc, #764]	; (1a004cd0 <_dtoa_r+0xdf8>)
1a0049d2:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0049d6:	f7fc ff1f 	bl	1a001818 <__aeabi_dsub>
1a0049da:	4632      	mov	r2, r6
1a0049dc:	463b      	mov	r3, r7
1a0049de:	4680      	mov	r8, r0
1a0049e0:	4689      	mov	r9, r1
1a0049e2:	f002 f93d 	bl	1a006c60 <__aeabi_dcmpgt>
1a0049e6:	2800      	cmp	r0, #0
1a0049e8:	f040 80b6 	bne.w	1a004b58 <_dtoa_r+0xc80>
1a0049ec:	4632      	mov	r2, r6
1a0049ee:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
1a0049f2:	4640      	mov	r0, r8
1a0049f4:	4649      	mov	r1, r9
1a0049f6:	f002 f915 	bl	1a006c24 <__aeabi_dcmplt>
1a0049fa:	2800      	cmp	r0, #0
1a0049fc:	d052      	beq.n	1a004aa4 <_dtoa_r+0xbcc>
1a0049fe:	f04f 0800 	mov.w	r8, #0
1a004a02:	4646      	mov	r6, r8
1a004a04:	e737      	b.n	1a004876 <_dtoa_r+0x99e>
1a004a06:	4659      	mov	r1, fp
1a004a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1a004a0a:	4620      	mov	r0, r4
1a004a0c:	f001 fb02 	bl	1a006014 <__pow5mult>
1a004a10:	4683      	mov	fp, r0
1a004a12:	e497      	b.n	1a004344 <_dtoa_r+0x46c>
1a004a14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a004a16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a004a18:	970a      	str	r7, [sp, #40]	; 0x28
1a004a1a:	1afb      	subs	r3, r7, r3
1a004a1c:	441a      	add	r2, r3
1a004a1e:	920c      	str	r2, [sp, #48]	; 0x30
1a004a20:	2700      	movs	r7, #0
1a004a22:	e452      	b.n	1a0042ca <_dtoa_r+0x3f2>
1a004a24:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004a28:	f04f 0802 	mov.w	r8, #2
1a004a2c:	ed8d 7b00 	vstr	d7, [sp]
1a004a30:	e633      	b.n	1a00469a <_dtoa_r+0x7c2>
1a004a32:	2501      	movs	r5, #1
1a004a34:	950e      	str	r5, [sp, #56]	; 0x38
1a004a36:	9508      	str	r5, [sp, #32]
1a004a38:	46aa      	mov	sl, r5
1a004a3a:	2100      	movs	r1, #0
1a004a3c:	6461      	str	r1, [r4, #68]	; 0x44
1a004a3e:	e601      	b.n	1a004644 <_dtoa_r+0x76c>
1a004a40:	461d      	mov	r5, r3
1a004a42:	e7fa      	b.n	1a004a3a <_dtoa_r+0xb62>
1a004a44:	2a00      	cmp	r2, #0
1a004a46:	dd15      	ble.n	1a004a74 <_dtoa_r+0xb9c>
1a004a48:	4659      	mov	r1, fp
1a004a4a:	2201      	movs	r2, #1
1a004a4c:	4620      	mov	r0, r4
1a004a4e:	f8cd c000 	str.w	ip, [sp]
1a004a52:	f001 fb2f 	bl	1a0060b4 <__lshift>
1a004a56:	4641      	mov	r1, r8
1a004a58:	4683      	mov	fp, r0
1a004a5a:	f001 fb81 	bl	1a006160 <__mcmp>
1a004a5e:	2800      	cmp	r0, #0
1a004a60:	f8dd c000 	ldr.w	ip, [sp]
1a004a64:	f340 8154 	ble.w	1a004d10 <_dtoa_r+0xe38>
1a004a68:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a004a6c:	f000 8111 	beq.w	1a004c92 <_dtoa_r+0xdba>
1a004a70:	f10c 0c01 	add.w	ip, ip, #1
1a004a74:	46b2      	mov	sl, r6
1a004a76:	f887 c000 	strb.w	ip, [r7]
1a004a7a:	1c7d      	adds	r5, r7, #1
1a004a7c:	464e      	mov	r6, r9
1a004a7e:	e520      	b.n	1a0044c2 <_dtoa_r+0x5ea>
1a004a80:	d104      	bne.n	1a004a8c <_dtoa_r+0xbb4>
1a004a82:	f01c 0f01 	tst.w	ip, #1
1a004a86:	d001      	beq.n	1a004a8c <_dtoa_r+0xbb4>
1a004a88:	e50b      	b.n	1a0044a2 <_dtoa_r+0x5ca>
1a004a8a:	4615      	mov	r5, r2
1a004a8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a004a90:	2b30      	cmp	r3, #48	; 0x30
1a004a92:	f105 32ff 	add.w	r2, r5, #4294967295
1a004a96:	d0f8      	beq.n	1a004a8a <_dtoa_r+0xbb2>
1a004a98:	e513      	b.n	1a0044c2 <_dtoa_r+0x5ea>
1a004a9a:	f8dd b000 	ldr.w	fp, [sp]
1a004a9e:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
1a004aa2:	4644      	mov	r4, r8
1a004aa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a004aa8:	e9cd 2300 	strd	r2, r3, [sp]
1a004aac:	f7ff bb27 	b.w	1a0040fe <_dtoa_r+0x226>
1a004ab0:	9b05      	ldr	r3, [sp, #20]
1a004ab2:	425d      	negs	r5, r3
1a004ab4:	2d00      	cmp	r5, #0
1a004ab6:	f000 80bd 	beq.w	1a004c34 <_dtoa_r+0xd5c>
1a004aba:	4b86      	ldr	r3, [pc, #536]	; (1a004cd4 <_dtoa_r+0xdfc>)
1a004abc:	f005 020f 	and.w	r2, r5, #15
1a004ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
1a004ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004ac8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
1a004acc:	f7fd f8a2 	bl	1a001c14 <__aeabi_dmul>
1a004ad0:	112d      	asrs	r5, r5, #4
1a004ad2:	e9cd 0100 	strd	r0, r1, [sp]
1a004ad6:	f000 8127 	beq.w	1a004d28 <_dtoa_r+0xe50>
1a004ada:	4e7f      	ldr	r6, [pc, #508]	; (1a004cd8 <_dtoa_r+0xe00>)
1a004adc:	f04f 0802 	mov.w	r8, #2
1a004ae0:	07eb      	lsls	r3, r5, #31
1a004ae2:	d505      	bpl.n	1a004af0 <_dtoa_r+0xc18>
1a004ae4:	e9d6 2300 	ldrd	r2, r3, [r6]
1a004ae8:	f7fd f894 	bl	1a001c14 <__aeabi_dmul>
1a004aec:	f108 0801 	add.w	r8, r8, #1
1a004af0:	106d      	asrs	r5, r5, #1
1a004af2:	f106 0608 	add.w	r6, r6, #8
1a004af6:	d1f3      	bne.n	1a004ae0 <_dtoa_r+0xc08>
1a004af8:	e9cd 0100 	strd	r0, r1, [sp]
1a004afc:	e5e8      	b.n	1a0046d0 <_dtoa_r+0x7f8>
1a004afe:	9a05      	ldr	r2, [sp, #20]
1a004b00:	3201      	adds	r2, #1
1a004b02:	9205      	str	r2, [sp, #20]
1a004b04:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004b06:	2330      	movs	r3, #48	; 0x30
1a004b08:	7013      	strb	r3, [r2, #0]
1a004b0a:	2331      	movs	r3, #49	; 0x31
1a004b0c:	7013      	strb	r3, [r2, #0]
1a004b0e:	f7ff bbba 	b.w	1a004286 <_dtoa_r+0x3ae>
1a004b12:	6871      	ldr	r1, [r6, #4]
1a004b14:	4620      	mov	r0, r4
1a004b16:	f001 f919 	bl	1a005d4c <_Balloc>
1a004b1a:	6933      	ldr	r3, [r6, #16]
1a004b1c:	1c9a      	adds	r2, r3, #2
1a004b1e:	4605      	mov	r5, r0
1a004b20:	0092      	lsls	r2, r2, #2
1a004b22:	f106 010c 	add.w	r1, r6, #12
1a004b26:	300c      	adds	r0, #12
1a004b28:	f7fd fd64 	bl	1a0025f4 <memcpy>
1a004b2c:	4620      	mov	r0, r4
1a004b2e:	4629      	mov	r1, r5
1a004b30:	2201      	movs	r2, #1
1a004b32:	f001 fabf 	bl	1a0060b4 <__lshift>
1a004b36:	4681      	mov	r9, r0
1a004b38:	e4ff      	b.n	1a00453a <_dtoa_r+0x662>
1a004b3a:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a004b3e:	f000 80a8 	beq.w	1a004c92 <_dtoa_r+0xdba>
1a004b42:	f10c 0c01 	add.w	ip, ip, #1
1a004b46:	46b2      	mov	sl, r6
1a004b48:	f887 c000 	strb.w	ip, [r7]
1a004b4c:	1c7d      	adds	r5, r7, #1
1a004b4e:	464e      	mov	r6, r9
1a004b50:	e4b7      	b.n	1a0044c2 <_dtoa_r+0x5ea>
1a004b52:	46b2      	mov	sl, r6
1a004b54:	464e      	mov	r6, r9
1a004b56:	e494      	b.n	1a004482 <_dtoa_r+0x5aa>
1a004b58:	f04f 0800 	mov.w	r8, #0
1a004b5c:	4646      	mov	r6, r8
1a004b5e:	e715      	b.n	1a00498c <_dtoa_r+0xab4>
1a004b60:	495c      	ldr	r1, [pc, #368]	; (1a004cd4 <_dtoa_r+0xdfc>)
1a004b62:	f109 33ff 	add.w	r3, r9, #4294967295
1a004b66:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
1a004b6a:	4632      	mov	r2, r6
1a004b6c:	9315      	str	r3, [sp, #84]	; 0x54
1a004b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
1a004b72:	463b      	mov	r3, r7
1a004b74:	f7fd f84e 	bl	1a001c14 <__aeabi_dmul>
1a004b78:	e9dd 6700 	ldrd	r6, r7, [sp]
1a004b7c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
1a004b80:	4639      	mov	r1, r7
1a004b82:	4630      	mov	r0, r6
1a004b84:	f002 f876 	bl	1a006c74 <__aeabi_d2iz>
1a004b88:	4605      	mov	r5, r0
1a004b8a:	f7fc ff93 	bl	1a001ab4 <__aeabi_i2d>
1a004b8e:	4602      	mov	r2, r0
1a004b90:	460b      	mov	r3, r1
1a004b92:	4630      	mov	r0, r6
1a004b94:	4639      	mov	r1, r7
1a004b96:	f7fc fe3f 	bl	1a001818 <__aeabi_dsub>
1a004b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a004b9c:	3530      	adds	r5, #48	; 0x30
1a004b9e:	f1b9 0f01 	cmp.w	r9, #1
1a004ba2:	7015      	strb	r5, [r2, #0]
1a004ba4:	4606      	mov	r6, r0
1a004ba6:	460f      	mov	r7, r1
1a004ba8:	f102 0501 	add.w	r5, r2, #1
1a004bac:	d023      	beq.n	1a004bf6 <_dtoa_r+0xd1e>
1a004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a004bb0:	f8cd b000 	str.w	fp, [sp]
1a004bb4:	444b      	add	r3, r9
1a004bb6:	4698      	mov	r8, r3
1a004bb8:	46a9      	mov	r9, r5
1a004bba:	46ab      	mov	fp, r5
1a004bbc:	2200      	movs	r2, #0
1a004bbe:	4b47      	ldr	r3, [pc, #284]	; (1a004cdc <_dtoa_r+0xe04>)
1a004bc0:	f7fd f828 	bl	1a001c14 <__aeabi_dmul>
1a004bc4:	460f      	mov	r7, r1
1a004bc6:	4606      	mov	r6, r0
1a004bc8:	f002 f854 	bl	1a006c74 <__aeabi_d2iz>
1a004bcc:	4605      	mov	r5, r0
1a004bce:	f7fc ff71 	bl	1a001ab4 <__aeabi_i2d>
1a004bd2:	3530      	adds	r5, #48	; 0x30
1a004bd4:	4602      	mov	r2, r0
1a004bd6:	460b      	mov	r3, r1
1a004bd8:	4630      	mov	r0, r6
1a004bda:	4639      	mov	r1, r7
1a004bdc:	f7fc fe1c 	bl	1a001818 <__aeabi_dsub>
1a004be0:	f809 5b01 	strb.w	r5, [r9], #1
1a004be4:	45c1      	cmp	r9, r8
1a004be6:	d1e9      	bne.n	1a004bbc <_dtoa_r+0xce4>
1a004be8:	9b15      	ldr	r3, [sp, #84]	; 0x54
1a004bea:	465d      	mov	r5, fp
1a004bec:	f8dd b000 	ldr.w	fp, [sp]
1a004bf0:	4606      	mov	r6, r0
1a004bf2:	460f      	mov	r7, r1
1a004bf4:	441d      	add	r5, r3
1a004bf6:	2200      	movs	r2, #0
1a004bf8:	4b39      	ldr	r3, [pc, #228]	; (1a004ce0 <_dtoa_r+0xe08>)
1a004bfa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
1a004bfe:	f7fc fe0d 	bl	1a00181c <__adddf3>
1a004c02:	4632      	mov	r2, r6
1a004c04:	463b      	mov	r3, r7
1a004c06:	f002 f80d 	bl	1a006c24 <__aeabi_dcmplt>
1a004c0a:	2800      	cmp	r0, #0
1a004c0c:	d047      	beq.n	1a004c9e <_dtoa_r+0xdc6>
1a004c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004c10:	9305      	str	r3, [sp, #20]
1a004c12:	f815 8c01 	ldrb.w	r8, [r5, #-1]
1a004c16:	f7ff bb24 	b.w	1a004262 <_dtoa_r+0x38a>
1a004c1a:	9b07      	ldr	r3, [sp, #28]
1a004c1c:	9a08      	ldr	r2, [sp, #32]
1a004c1e:	1a9d      	subs	r5, r3, r2
1a004c20:	2300      	movs	r3, #0
1a004c22:	f7ff bb58 	b.w	1a0042d6 <_dtoa_r+0x3fe>
1a004c26:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a004c28:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a004c2a:	9d07      	ldr	r5, [sp, #28]
1a004c2c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
1a004c30:	f7ff bb51 	b.w	1a0042d6 <_dtoa_r+0x3fe>
1a004c34:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
1a004c38:	f04f 0802 	mov.w	r8, #2
1a004c3c:	ed8d 7b00 	vstr	d7, [sp]
1a004c40:	e546      	b.n	1a0046d0 <_dtoa_r+0x7f8>
1a004c42:	9b08      	ldr	r3, [sp, #32]
1a004c44:	2b00      	cmp	r3, #0
1a004c46:	f43f aeb4 	beq.w	1a0049b2 <_dtoa_r+0xada>
1a004c4a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
1a004c4c:	2d00      	cmp	r5, #0
1a004c4e:	f77f af29 	ble.w	1a004aa4 <_dtoa_r+0xbcc>
1a004c52:	2200      	movs	r2, #0
1a004c54:	4b21      	ldr	r3, [pc, #132]	; (1a004cdc <_dtoa_r+0xe04>)
1a004c56:	e9dd 0100 	ldrd	r0, r1, [sp]
1a004c5a:	f7fc ffdb 	bl	1a001c14 <__aeabi_dmul>
1a004c5e:	4606      	mov	r6, r0
1a004c60:	460f      	mov	r7, r1
1a004c62:	f108 0001 	add.w	r0, r8, #1
1a004c66:	e9cd 6700 	strd	r6, r7, [sp]
1a004c6a:	f7fc ff23 	bl	1a001ab4 <__aeabi_i2d>
1a004c6e:	4602      	mov	r2, r0
1a004c70:	460b      	mov	r3, r1
1a004c72:	4630      	mov	r0, r6
1a004c74:	4639      	mov	r1, r7
1a004c76:	f7fc ffcd 	bl	1a001c14 <__aeabi_dmul>
1a004c7a:	4b14      	ldr	r3, [pc, #80]	; (1a004ccc <_dtoa_r+0xdf4>)
1a004c7c:	2200      	movs	r2, #0
1a004c7e:	f7fc fdcd 	bl	1a00181c <__adddf3>
1a004c82:	9b05      	ldr	r3, [sp, #20]
1a004c84:	3b01      	subs	r3, #1
1a004c86:	4606      	mov	r6, r0
1a004c88:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
1a004c8c:	9314      	str	r3, [sp, #80]	; 0x50
1a004c8e:	46a9      	mov	r9, r5
1a004c90:	e53f      	b.n	1a004712 <_dtoa_r+0x83a>
1a004c92:	2239      	movs	r2, #57	; 0x39
1a004c94:	46b2      	mov	sl, r6
1a004c96:	703a      	strb	r2, [r7, #0]
1a004c98:	464e      	mov	r6, r9
1a004c9a:	1c7d      	adds	r5, r7, #1
1a004c9c:	e403      	b.n	1a0044a6 <_dtoa_r+0x5ce>
1a004c9e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
1a004ca2:	2000      	movs	r0, #0
1a004ca4:	490e      	ldr	r1, [pc, #56]	; (1a004ce0 <_dtoa_r+0xe08>)
1a004ca6:	f7fc fdb7 	bl	1a001818 <__aeabi_dsub>
1a004caa:	4632      	mov	r2, r6
1a004cac:	463b      	mov	r3, r7
1a004cae:	f001 ffd7 	bl	1a006c60 <__aeabi_dcmpgt>
1a004cb2:	b908      	cbnz	r0, 1a004cb8 <_dtoa_r+0xde0>
1a004cb4:	e6f6      	b.n	1a004aa4 <_dtoa_r+0xbcc>
1a004cb6:	4615      	mov	r5, r2
1a004cb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a004cbc:	2b30      	cmp	r3, #48	; 0x30
1a004cbe:	f105 32ff 	add.w	r2, r5, #4294967295
1a004cc2:	d0f8      	beq.n	1a004cb6 <_dtoa_r+0xdde>
1a004cc4:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004cc6:	9305      	str	r3, [sp, #20]
1a004cc8:	f7ff badd 	b.w	1a004286 <_dtoa_r+0x3ae>
1a004ccc:	401c0000 	.word	0x401c0000
1a004cd0:	40140000 	.word	0x40140000
1a004cd4:	1a007118 	.word	0x1a007118
1a004cd8:	1a0071e0 	.word	0x1a0071e0
1a004cdc:	40240000 	.word	0x40240000
1a004ce0:	3fe00000 	.word	0x3fe00000
1a004ce4:	4643      	mov	r3, r8
1a004ce6:	f8dd b000 	ldr.w	fp, [sp]
1a004cea:	46a0      	mov	r8, r4
1a004cec:	461c      	mov	r4, r3
1a004cee:	9b14      	ldr	r3, [sp, #80]	; 0x50
1a004cf0:	9305      	str	r3, [sp, #20]
1a004cf2:	f7ff bab6 	b.w	1a004262 <_dtoa_r+0x38a>
1a004cf6:	46b9      	mov	r9, r7
1a004cf8:	f7ff bb6b 	b.w	1a0043d2 <_dtoa_r+0x4fa>
1a004cfc:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
1a004d00:	d0c7      	beq.n	1a004c92 <_dtoa_r+0xdba>
1a004d02:	f1ba 0f00 	cmp.w	sl, #0
1a004d06:	f77f aeb5 	ble.w	1a004a74 <_dtoa_r+0xb9c>
1a004d0a:	f105 0c31 	add.w	ip, r5, #49	; 0x31
1a004d0e:	e6b1      	b.n	1a004a74 <_dtoa_r+0xb9c>
1a004d10:	f47f aeb0 	bne.w	1a004a74 <_dtoa_r+0xb9c>
1a004d14:	f01c 0f01 	tst.w	ip, #1
1a004d18:	f43f aeac 	beq.w	1a004a74 <_dtoa_r+0xb9c>
1a004d1c:	e6a4      	b.n	1a004a68 <_dtoa_r+0xb90>
1a004d1e:	9b03      	ldr	r3, [sp, #12]
1a004d20:	2b02      	cmp	r3, #2
1a004d22:	dc04      	bgt.n	1a004d2e <_dtoa_r+0xe56>
1a004d24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d26:	e605      	b.n	1a004934 <_dtoa_r+0xa5c>
1a004d28:	f04f 0802 	mov.w	r8, #2
1a004d2c:	e4d0      	b.n	1a0046d0 <_dtoa_r+0x7f8>
1a004d2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d30:	9308      	str	r3, [sp, #32]
1a004d32:	e61b      	b.n	1a00496c <_dtoa_r+0xa94>
1a004d34:	9b03      	ldr	r3, [sp, #12]
1a004d36:	2b02      	cmp	r3, #2
1a004d38:	dcf9      	bgt.n	1a004d2e <_dtoa_r+0xe56>
1a004d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a004d3c:	f7ff bbef 	b.w	1a00451e <_dtoa_r+0x646>
1a004d40:	2500      	movs	r5, #0
1a004d42:	6465      	str	r5, [r4, #68]	; 0x44
1a004d44:	4629      	mov	r1, r5
1a004d46:	4620      	mov	r0, r4
1a004d48:	f001 f800 	bl	1a005d4c <_Balloc>
1a004d4c:	f04f 33ff 	mov.w	r3, #4294967295
1a004d50:	9308      	str	r3, [sp, #32]
1a004d52:	930e      	str	r3, [sp, #56]	; 0x38
1a004d54:	2301      	movs	r3, #1
1a004d56:	9009      	str	r0, [sp, #36]	; 0x24
1a004d58:	46aa      	mov	sl, r5
1a004d5a:	6420      	str	r0, [r4, #64]	; 0x40
1a004d5c:	930b      	str	r3, [sp, #44]	; 0x2c
1a004d5e:	f7ff b9ce 	b.w	1a0040fe <_dtoa_r+0x226>
1a004d62:	f43f ab4e 	beq.w	1a004402 <_dtoa_r+0x52a>
1a004d66:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
1a004d6a:	f7ff bb43 	b.w	1a0043f4 <_dtoa_r+0x51c>
1a004d6e:	2301      	movs	r3, #1
1a004d70:	930b      	str	r3, [sp, #44]	; 0x2c
1a004d72:	e55c      	b.n	1a00482e <_dtoa_r+0x956>
1a004d74:	2701      	movs	r7, #1
1a004d76:	f7ff b98d 	b.w	1a004094 <_dtoa_r+0x1bc>
1a004d7a:	bf00      	nop
1a004d7c:	f3af 8000 	nop.w

1a004d80 <__sflush_r>:
1a004d80:	898b      	ldrh	r3, [r1, #12]
1a004d82:	b29a      	uxth	r2, r3
1a004d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a004d88:	460d      	mov	r5, r1
1a004d8a:	0711      	lsls	r1, r2, #28
1a004d8c:	4680      	mov	r8, r0
1a004d8e:	d43c      	bmi.n	1a004e0a <__sflush_r+0x8a>
1a004d90:	686a      	ldr	r2, [r5, #4]
1a004d92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a004d96:	2a00      	cmp	r2, #0
1a004d98:	81ab      	strh	r3, [r5, #12]
1a004d9a:	dd65      	ble.n	1a004e68 <__sflush_r+0xe8>
1a004d9c:	6aae      	ldr	r6, [r5, #40]	; 0x28
1a004d9e:	2e00      	cmp	r6, #0
1a004da0:	d04b      	beq.n	1a004e3a <__sflush_r+0xba>
1a004da2:	b29b      	uxth	r3, r3
1a004da4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
1a004da8:	2100      	movs	r1, #0
1a004daa:	b292      	uxth	r2, r2
1a004dac:	f8d8 4000 	ldr.w	r4, [r8]
1a004db0:	f8c8 1000 	str.w	r1, [r8]
1a004db4:	2a00      	cmp	r2, #0
1a004db6:	d05b      	beq.n	1a004e70 <__sflush_r+0xf0>
1a004db8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
1a004dba:	075f      	lsls	r7, r3, #29
1a004dbc:	d505      	bpl.n	1a004dca <__sflush_r+0x4a>
1a004dbe:	6869      	ldr	r1, [r5, #4]
1a004dc0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
1a004dc2:	1a52      	subs	r2, r2, r1
1a004dc4:	b10b      	cbz	r3, 1a004dca <__sflush_r+0x4a>
1a004dc6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
1a004dc8:	1ad2      	subs	r2, r2, r3
1a004dca:	4640      	mov	r0, r8
1a004dcc:	69e9      	ldr	r1, [r5, #28]
1a004dce:	2300      	movs	r3, #0
1a004dd0:	47b0      	blx	r6
1a004dd2:	1c46      	adds	r6, r0, #1
1a004dd4:	d056      	beq.n	1a004e84 <__sflush_r+0x104>
1a004dd6:	89ab      	ldrh	r3, [r5, #12]
1a004dd8:	692a      	ldr	r2, [r5, #16]
1a004dda:	602a      	str	r2, [r5, #0]
1a004ddc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a004de0:	b29b      	uxth	r3, r3
1a004de2:	2200      	movs	r2, #0
1a004de4:	606a      	str	r2, [r5, #4]
1a004de6:	04da      	lsls	r2, r3, #19
1a004de8:	81ab      	strh	r3, [r5, #12]
1a004dea:	d43b      	bmi.n	1a004e64 <__sflush_r+0xe4>
1a004dec:	6b29      	ldr	r1, [r5, #48]	; 0x30
1a004dee:	f8c8 4000 	str.w	r4, [r8]
1a004df2:	b311      	cbz	r1, 1a004e3a <__sflush_r+0xba>
1a004df4:	f105 0340 	add.w	r3, r5, #64	; 0x40
1a004df8:	4299      	cmp	r1, r3
1a004dfa:	d002      	beq.n	1a004e02 <__sflush_r+0x82>
1a004dfc:	4640      	mov	r0, r8
1a004dfe:	f000 f955 	bl	1a0050ac <_free_r>
1a004e02:	2000      	movs	r0, #0
1a004e04:	6328      	str	r0, [r5, #48]	; 0x30
1a004e06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004e0a:	692e      	ldr	r6, [r5, #16]
1a004e0c:	b1ae      	cbz	r6, 1a004e3a <__sflush_r+0xba>
1a004e0e:	682c      	ldr	r4, [r5, #0]
1a004e10:	602e      	str	r6, [r5, #0]
1a004e12:	0791      	lsls	r1, r2, #30
1a004e14:	bf0c      	ite	eq
1a004e16:	696b      	ldreq	r3, [r5, #20]
1a004e18:	2300      	movne	r3, #0
1a004e1a:	1ba4      	subs	r4, r4, r6
1a004e1c:	60ab      	str	r3, [r5, #8]
1a004e1e:	e00a      	b.n	1a004e36 <__sflush_r+0xb6>
1a004e20:	4632      	mov	r2, r6
1a004e22:	4623      	mov	r3, r4
1a004e24:	6a6f      	ldr	r7, [r5, #36]	; 0x24
1a004e26:	69e9      	ldr	r1, [r5, #28]
1a004e28:	4640      	mov	r0, r8
1a004e2a:	47b8      	blx	r7
1a004e2c:	2800      	cmp	r0, #0
1a004e2e:	eba4 0400 	sub.w	r4, r4, r0
1a004e32:	4406      	add	r6, r0
1a004e34:	dd04      	ble.n	1a004e40 <__sflush_r+0xc0>
1a004e36:	2c00      	cmp	r4, #0
1a004e38:	dcf2      	bgt.n	1a004e20 <__sflush_r+0xa0>
1a004e3a:	2000      	movs	r0, #0
1a004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004e40:	89ab      	ldrh	r3, [r5, #12]
1a004e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e46:	81ab      	strh	r3, [r5, #12]
1a004e48:	f04f 30ff 	mov.w	r0, #4294967295
1a004e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004e50:	89ab      	ldrh	r3, [r5, #12]
1a004e52:	692a      	ldr	r2, [r5, #16]
1a004e54:	6069      	str	r1, [r5, #4]
1a004e56:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a004e5a:	b29b      	uxth	r3, r3
1a004e5c:	81ab      	strh	r3, [r5, #12]
1a004e5e:	04db      	lsls	r3, r3, #19
1a004e60:	602a      	str	r2, [r5, #0]
1a004e62:	d5c3      	bpl.n	1a004dec <__sflush_r+0x6c>
1a004e64:	6528      	str	r0, [r5, #80]	; 0x50
1a004e66:	e7c1      	b.n	1a004dec <__sflush_r+0x6c>
1a004e68:	6bea      	ldr	r2, [r5, #60]	; 0x3c
1a004e6a:	2a00      	cmp	r2, #0
1a004e6c:	dc96      	bgt.n	1a004d9c <__sflush_r+0x1c>
1a004e6e:	e7e4      	b.n	1a004e3a <__sflush_r+0xba>
1a004e70:	2301      	movs	r3, #1
1a004e72:	4640      	mov	r0, r8
1a004e74:	69e9      	ldr	r1, [r5, #28]
1a004e76:	47b0      	blx	r6
1a004e78:	1c43      	adds	r3, r0, #1
1a004e7a:	4602      	mov	r2, r0
1a004e7c:	d019      	beq.n	1a004eb2 <__sflush_r+0x132>
1a004e7e:	89ab      	ldrh	r3, [r5, #12]
1a004e80:	6aae      	ldr	r6, [r5, #40]	; 0x28
1a004e82:	e79a      	b.n	1a004dba <__sflush_r+0x3a>
1a004e84:	f8d8 1000 	ldr.w	r1, [r8]
1a004e88:	2900      	cmp	r1, #0
1a004e8a:	d0e1      	beq.n	1a004e50 <__sflush_r+0xd0>
1a004e8c:	291d      	cmp	r1, #29
1a004e8e:	d007      	beq.n	1a004ea0 <__sflush_r+0x120>
1a004e90:	2916      	cmp	r1, #22
1a004e92:	d005      	beq.n	1a004ea0 <__sflush_r+0x120>
1a004e94:	89ab      	ldrh	r3, [r5, #12]
1a004e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004e9a:	81ab      	strh	r3, [r5, #12]
1a004e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004ea0:	89ab      	ldrh	r3, [r5, #12]
1a004ea2:	692a      	ldr	r2, [r5, #16]
1a004ea4:	602a      	str	r2, [r5, #0]
1a004ea6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
1a004eaa:	2200      	movs	r2, #0
1a004eac:	81ab      	strh	r3, [r5, #12]
1a004eae:	606a      	str	r2, [r5, #4]
1a004eb0:	e79c      	b.n	1a004dec <__sflush_r+0x6c>
1a004eb2:	f8d8 3000 	ldr.w	r3, [r8]
1a004eb6:	2b00      	cmp	r3, #0
1a004eb8:	d0e1      	beq.n	1a004e7e <__sflush_r+0xfe>
1a004eba:	2b1d      	cmp	r3, #29
1a004ebc:	d007      	beq.n	1a004ece <__sflush_r+0x14e>
1a004ebe:	2b16      	cmp	r3, #22
1a004ec0:	d005      	beq.n	1a004ece <__sflush_r+0x14e>
1a004ec2:	89ab      	ldrh	r3, [r5, #12]
1a004ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a004ec8:	81ab      	strh	r3, [r5, #12]
1a004eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a004ece:	f8c8 4000 	str.w	r4, [r8]
1a004ed2:	e7b2      	b.n	1a004e3a <__sflush_r+0xba>

1a004ed4 <_fflush_r>:
1a004ed4:	b510      	push	{r4, lr}
1a004ed6:	4604      	mov	r4, r0
1a004ed8:	b082      	sub	sp, #8
1a004eda:	b108      	cbz	r0, 1a004ee0 <_fflush_r+0xc>
1a004edc:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a004ede:	b153      	cbz	r3, 1a004ef6 <_fflush_r+0x22>
1a004ee0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
1a004ee4:	b908      	cbnz	r0, 1a004eea <_fflush_r+0x16>
1a004ee6:	b002      	add	sp, #8
1a004ee8:	bd10      	pop	{r4, pc}
1a004eea:	4620      	mov	r0, r4
1a004eec:	b002      	add	sp, #8
1a004eee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a004ef2:	f7ff bf45 	b.w	1a004d80 <__sflush_r>
1a004ef6:	9101      	str	r1, [sp, #4]
1a004ef8:	f000 f880 	bl	1a004ffc <__sinit>
1a004efc:	9901      	ldr	r1, [sp, #4]
1a004efe:	e7ef      	b.n	1a004ee0 <_fflush_r+0xc>

1a004f00 <_cleanup_r>:
1a004f00:	4901      	ldr	r1, [pc, #4]	; (1a004f08 <_cleanup_r+0x8>)
1a004f02:	f000 bb37 	b.w	1a005574 <_fwalk_reent>
1a004f06:	bf00      	nop
1a004f08:	1a00699d 	.word	0x1a00699d

1a004f0c <__sinit.part.1>:
1a004f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004f10:	4b35      	ldr	r3, [pc, #212]	; (1a004fe8 <__sinit.part.1+0xdc>)
1a004f12:	6845      	ldr	r5, [r0, #4]
1a004f14:	63c3      	str	r3, [r0, #60]	; 0x3c
1a004f16:	2400      	movs	r4, #0
1a004f18:	4607      	mov	r7, r0
1a004f1a:	f500 723b 	add.w	r2, r0, #748	; 0x2ec
1a004f1e:	2304      	movs	r3, #4
1a004f20:	2103      	movs	r1, #3
1a004f22:	f8c0 12e4 	str.w	r1, [r0, #740]	; 0x2e4
1a004f26:	f8c0 22e8 	str.w	r2, [r0, #744]	; 0x2e8
1a004f2a:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
1a004f2e:	b083      	sub	sp, #12
1a004f30:	602c      	str	r4, [r5, #0]
1a004f32:	606c      	str	r4, [r5, #4]
1a004f34:	60ac      	str	r4, [r5, #8]
1a004f36:	666c      	str	r4, [r5, #100]	; 0x64
1a004f38:	81ec      	strh	r4, [r5, #14]
1a004f3a:	612c      	str	r4, [r5, #16]
1a004f3c:	616c      	str	r4, [r5, #20]
1a004f3e:	61ac      	str	r4, [r5, #24]
1a004f40:	81ab      	strh	r3, [r5, #12]
1a004f42:	4621      	mov	r1, r4
1a004f44:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a004f48:	2208      	movs	r2, #8
1a004f4a:	f7fd fbed 	bl	1a002728 <memset>
1a004f4e:	68be      	ldr	r6, [r7, #8]
1a004f50:	f8df b098 	ldr.w	fp, [pc, #152]	; 1a004fec <__sinit.part.1+0xe0>
1a004f54:	f8df a098 	ldr.w	sl, [pc, #152]	; 1a004ff0 <__sinit.part.1+0xe4>
1a004f58:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1a004ff4 <__sinit.part.1+0xe8>
1a004f5c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 1a004ff8 <__sinit.part.1+0xec>
1a004f60:	f8c5 b020 	str.w	fp, [r5, #32]
1a004f64:	2301      	movs	r3, #1
1a004f66:	2209      	movs	r2, #9
1a004f68:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
1a004f6c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
1a004f70:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1a004f74:	61ed      	str	r5, [r5, #28]
1a004f76:	4621      	mov	r1, r4
1a004f78:	81f3      	strh	r3, [r6, #14]
1a004f7a:	81b2      	strh	r2, [r6, #12]
1a004f7c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
1a004f80:	6034      	str	r4, [r6, #0]
1a004f82:	6074      	str	r4, [r6, #4]
1a004f84:	60b4      	str	r4, [r6, #8]
1a004f86:	6674      	str	r4, [r6, #100]	; 0x64
1a004f88:	6134      	str	r4, [r6, #16]
1a004f8a:	6174      	str	r4, [r6, #20]
1a004f8c:	61b4      	str	r4, [r6, #24]
1a004f8e:	2208      	movs	r2, #8
1a004f90:	9301      	str	r3, [sp, #4]
1a004f92:	f7fd fbc9 	bl	1a002728 <memset>
1a004f96:	68fd      	ldr	r5, [r7, #12]
1a004f98:	61f6      	str	r6, [r6, #28]
1a004f9a:	2012      	movs	r0, #18
1a004f9c:	2202      	movs	r2, #2
1a004f9e:	f8c6 b020 	str.w	fp, [r6, #32]
1a004fa2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
1a004fa6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
1a004faa:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
1a004fae:	4621      	mov	r1, r4
1a004fb0:	81a8      	strh	r0, [r5, #12]
1a004fb2:	81ea      	strh	r2, [r5, #14]
1a004fb4:	602c      	str	r4, [r5, #0]
1a004fb6:	606c      	str	r4, [r5, #4]
1a004fb8:	60ac      	str	r4, [r5, #8]
1a004fba:	666c      	str	r4, [r5, #100]	; 0x64
1a004fbc:	612c      	str	r4, [r5, #16]
1a004fbe:	616c      	str	r4, [r5, #20]
1a004fc0:	61ac      	str	r4, [r5, #24]
1a004fc2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
1a004fc6:	2208      	movs	r2, #8
1a004fc8:	f7fd fbae 	bl	1a002728 <memset>
1a004fcc:	9b01      	ldr	r3, [sp, #4]
1a004fce:	61ed      	str	r5, [r5, #28]
1a004fd0:	f8c5 b020 	str.w	fp, [r5, #32]
1a004fd4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
1a004fd8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
1a004fdc:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
1a004fe0:	63bb      	str	r3, [r7, #56]	; 0x38
1a004fe2:	b003      	add	sp, #12
1a004fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004fe8:	1a004f01 	.word	0x1a004f01
1a004fec:	1a006781 	.word	0x1a006781
1a004ff0:	1a0067a5 	.word	0x1a0067a5
1a004ff4:	1a0067dd 	.word	0x1a0067dd
1a004ff8:	1a0067fd 	.word	0x1a0067fd

1a004ffc <__sinit>:
1a004ffc:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a004ffe:	b103      	cbz	r3, 1a005002 <__sinit+0x6>
1a005000:	4770      	bx	lr
1a005002:	f7ff bf83 	b.w	1a004f0c <__sinit.part.1>
1a005006:	bf00      	nop

1a005008 <__sfp_lock_acquire>:
1a005008:	4770      	bx	lr
1a00500a:	bf00      	nop

1a00500c <__sfp_lock_release>:
1a00500c:	4770      	bx	lr
1a00500e:	bf00      	nop

1a005010 <_malloc_trim_r>:
1a005010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a005012:	4f23      	ldr	r7, [pc, #140]	; (1a0050a0 <_malloc_trim_r+0x90>)
1a005014:	460c      	mov	r4, r1
1a005016:	4606      	mov	r6, r0
1a005018:	f000 fe94 	bl	1a005d44 <__malloc_lock>
1a00501c:	68bb      	ldr	r3, [r7, #8]
1a00501e:	685d      	ldr	r5, [r3, #4]
1a005020:	f025 0503 	bic.w	r5, r5, #3
1a005024:	1b29      	subs	r1, r5, r4
1a005026:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
1a00502a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
1a00502e:	f021 010f 	bic.w	r1, r1, #15
1a005032:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
1a005036:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
1a00503a:	db07      	blt.n	1a00504c <_malloc_trim_r+0x3c>
1a00503c:	4630      	mov	r0, r6
1a00503e:	2100      	movs	r1, #0
1a005040:	f7fb fde2 	bl	1a000c08 <_sbrk_r>
1a005044:	68bb      	ldr	r3, [r7, #8]
1a005046:	442b      	add	r3, r5
1a005048:	4298      	cmp	r0, r3
1a00504a:	d004      	beq.n	1a005056 <_malloc_trim_r+0x46>
1a00504c:	4630      	mov	r0, r6
1a00504e:	f000 fe7b 	bl	1a005d48 <__malloc_unlock>
1a005052:	2000      	movs	r0, #0
1a005054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a005056:	4630      	mov	r0, r6
1a005058:	4261      	negs	r1, r4
1a00505a:	f7fb fdd5 	bl	1a000c08 <_sbrk_r>
1a00505e:	3001      	adds	r0, #1
1a005060:	d00d      	beq.n	1a00507e <_malloc_trim_r+0x6e>
1a005062:	4b10      	ldr	r3, [pc, #64]	; (1a0050a4 <_malloc_trim_r+0x94>)
1a005064:	68ba      	ldr	r2, [r7, #8]
1a005066:	6819      	ldr	r1, [r3, #0]
1a005068:	1b2d      	subs	r5, r5, r4
1a00506a:	f045 0501 	orr.w	r5, r5, #1
1a00506e:	4630      	mov	r0, r6
1a005070:	1b09      	subs	r1, r1, r4
1a005072:	6055      	str	r5, [r2, #4]
1a005074:	6019      	str	r1, [r3, #0]
1a005076:	f000 fe67 	bl	1a005d48 <__malloc_unlock>
1a00507a:	2001      	movs	r0, #1
1a00507c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00507e:	4630      	mov	r0, r6
1a005080:	2100      	movs	r1, #0
1a005082:	f7fb fdc1 	bl	1a000c08 <_sbrk_r>
1a005086:	68ba      	ldr	r2, [r7, #8]
1a005088:	1a83      	subs	r3, r0, r2
1a00508a:	2b0f      	cmp	r3, #15
1a00508c:	ddde      	ble.n	1a00504c <_malloc_trim_r+0x3c>
1a00508e:	4c06      	ldr	r4, [pc, #24]	; (1a0050a8 <_malloc_trim_r+0x98>)
1a005090:	4904      	ldr	r1, [pc, #16]	; (1a0050a4 <_malloc_trim_r+0x94>)
1a005092:	6824      	ldr	r4, [r4, #0]
1a005094:	f043 0301 	orr.w	r3, r3, #1
1a005098:	1b00      	subs	r0, r0, r4
1a00509a:	6053      	str	r3, [r2, #4]
1a00509c:	6008      	str	r0, [r1, #0]
1a00509e:	e7d5      	b.n	1a00504c <_malloc_trim_r+0x3c>
1a0050a0:	10000548 	.word	0x10000548
1a0050a4:	10000998 	.word	0x10000998
1a0050a8:	10000954 	.word	0x10000954

1a0050ac <_free_r>:
1a0050ac:	2900      	cmp	r1, #0
1a0050ae:	d04e      	beq.n	1a00514e <_free_r+0xa2>
1a0050b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0050b4:	460c      	mov	r4, r1
1a0050b6:	4680      	mov	r8, r0
1a0050b8:	f000 fe44 	bl	1a005d44 <__malloc_lock>
1a0050bc:	f854 7c04 	ldr.w	r7, [r4, #-4]
1a0050c0:	4962      	ldr	r1, [pc, #392]	; (1a00524c <_free_r+0x1a0>)
1a0050c2:	f027 0201 	bic.w	r2, r7, #1
1a0050c6:	f1a4 0508 	sub.w	r5, r4, #8
1a0050ca:	18ab      	adds	r3, r5, r2
1a0050cc:	688e      	ldr	r6, [r1, #8]
1a0050ce:	6858      	ldr	r0, [r3, #4]
1a0050d0:	429e      	cmp	r6, r3
1a0050d2:	f020 0003 	bic.w	r0, r0, #3
1a0050d6:	d05a      	beq.n	1a00518e <_free_r+0xe2>
1a0050d8:	07fe      	lsls	r6, r7, #31
1a0050da:	6058      	str	r0, [r3, #4]
1a0050dc:	d40b      	bmi.n	1a0050f6 <_free_r+0x4a>
1a0050de:	f854 7c08 	ldr.w	r7, [r4, #-8]
1a0050e2:	1bed      	subs	r5, r5, r7
1a0050e4:	f101 0e08 	add.w	lr, r1, #8
1a0050e8:	68ac      	ldr	r4, [r5, #8]
1a0050ea:	4574      	cmp	r4, lr
1a0050ec:	443a      	add	r2, r7
1a0050ee:	d067      	beq.n	1a0051c0 <_free_r+0x114>
1a0050f0:	68ef      	ldr	r7, [r5, #12]
1a0050f2:	60e7      	str	r7, [r4, #12]
1a0050f4:	60bc      	str	r4, [r7, #8]
1a0050f6:	181c      	adds	r4, r3, r0
1a0050f8:	6864      	ldr	r4, [r4, #4]
1a0050fa:	07e4      	lsls	r4, r4, #31
1a0050fc:	d40c      	bmi.n	1a005118 <_free_r+0x6c>
1a0050fe:	4f54      	ldr	r7, [pc, #336]	; (1a005250 <_free_r+0x1a4>)
1a005100:	689c      	ldr	r4, [r3, #8]
1a005102:	42bc      	cmp	r4, r7
1a005104:	4402      	add	r2, r0
1a005106:	d07c      	beq.n	1a005202 <_free_r+0x156>
1a005108:	68d8      	ldr	r0, [r3, #12]
1a00510a:	60e0      	str	r0, [r4, #12]
1a00510c:	f042 0301 	orr.w	r3, r2, #1
1a005110:	6084      	str	r4, [r0, #8]
1a005112:	606b      	str	r3, [r5, #4]
1a005114:	50aa      	str	r2, [r5, r2]
1a005116:	e003      	b.n	1a005120 <_free_r+0x74>
1a005118:	f042 0301 	orr.w	r3, r2, #1
1a00511c:	606b      	str	r3, [r5, #4]
1a00511e:	50aa      	str	r2, [r5, r2]
1a005120:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
1a005124:	d214      	bcs.n	1a005150 <_free_r+0xa4>
1a005126:	08d2      	lsrs	r2, r2, #3
1a005128:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
1a00512c:	6848      	ldr	r0, [r1, #4]
1a00512e:	689f      	ldr	r7, [r3, #8]
1a005130:	60af      	str	r7, [r5, #8]
1a005132:	1092      	asrs	r2, r2, #2
1a005134:	2401      	movs	r4, #1
1a005136:	fa04 f202 	lsl.w	r2, r4, r2
1a00513a:	4310      	orrs	r0, r2
1a00513c:	60eb      	str	r3, [r5, #12]
1a00513e:	6048      	str	r0, [r1, #4]
1a005140:	609d      	str	r5, [r3, #8]
1a005142:	60fd      	str	r5, [r7, #12]
1a005144:	4640      	mov	r0, r8
1a005146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00514a:	f000 bdfd 	b.w	1a005d48 <__malloc_unlock>
1a00514e:	4770      	bx	lr
1a005150:	0a53      	lsrs	r3, r2, #9
1a005152:	2b04      	cmp	r3, #4
1a005154:	d847      	bhi.n	1a0051e6 <_free_r+0x13a>
1a005156:	0993      	lsrs	r3, r2, #6
1a005158:	f103 0438 	add.w	r4, r3, #56	; 0x38
1a00515c:	0060      	lsls	r0, r4, #1
1a00515e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
1a005162:	493a      	ldr	r1, [pc, #232]	; (1a00524c <_free_r+0x1a0>)
1a005164:	6883      	ldr	r3, [r0, #8]
1a005166:	4283      	cmp	r3, r0
1a005168:	d043      	beq.n	1a0051f2 <_free_r+0x146>
1a00516a:	6859      	ldr	r1, [r3, #4]
1a00516c:	f021 0103 	bic.w	r1, r1, #3
1a005170:	4291      	cmp	r1, r2
1a005172:	d902      	bls.n	1a00517a <_free_r+0xce>
1a005174:	689b      	ldr	r3, [r3, #8]
1a005176:	4298      	cmp	r0, r3
1a005178:	d1f7      	bne.n	1a00516a <_free_r+0xbe>
1a00517a:	68da      	ldr	r2, [r3, #12]
1a00517c:	60ea      	str	r2, [r5, #12]
1a00517e:	60ab      	str	r3, [r5, #8]
1a005180:	4640      	mov	r0, r8
1a005182:	6095      	str	r5, [r2, #8]
1a005184:	60dd      	str	r5, [r3, #12]
1a005186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a00518a:	f000 bddd 	b.w	1a005d48 <__malloc_unlock>
1a00518e:	07ff      	lsls	r7, r7, #31
1a005190:	4402      	add	r2, r0
1a005192:	d407      	bmi.n	1a0051a4 <_free_r+0xf8>
1a005194:	f854 3c08 	ldr.w	r3, [r4, #-8]
1a005198:	1aed      	subs	r5, r5, r3
1a00519a:	441a      	add	r2, r3
1a00519c:	68a8      	ldr	r0, [r5, #8]
1a00519e:	68eb      	ldr	r3, [r5, #12]
1a0051a0:	60c3      	str	r3, [r0, #12]
1a0051a2:	6098      	str	r0, [r3, #8]
1a0051a4:	4b2b      	ldr	r3, [pc, #172]	; (1a005254 <_free_r+0x1a8>)
1a0051a6:	681b      	ldr	r3, [r3, #0]
1a0051a8:	f042 0001 	orr.w	r0, r2, #1
1a0051ac:	429a      	cmp	r2, r3
1a0051ae:	6068      	str	r0, [r5, #4]
1a0051b0:	608d      	str	r5, [r1, #8]
1a0051b2:	d3c7      	bcc.n	1a005144 <_free_r+0x98>
1a0051b4:	4b28      	ldr	r3, [pc, #160]	; (1a005258 <_free_r+0x1ac>)
1a0051b6:	4640      	mov	r0, r8
1a0051b8:	6819      	ldr	r1, [r3, #0]
1a0051ba:	f7ff ff29 	bl	1a005010 <_malloc_trim_r>
1a0051be:	e7c1      	b.n	1a005144 <_free_r+0x98>
1a0051c0:	1819      	adds	r1, r3, r0
1a0051c2:	6849      	ldr	r1, [r1, #4]
1a0051c4:	07c9      	lsls	r1, r1, #31
1a0051c6:	d409      	bmi.n	1a0051dc <_free_r+0x130>
1a0051c8:	68d9      	ldr	r1, [r3, #12]
1a0051ca:	689b      	ldr	r3, [r3, #8]
1a0051cc:	4402      	add	r2, r0
1a0051ce:	f042 0001 	orr.w	r0, r2, #1
1a0051d2:	60d9      	str	r1, [r3, #12]
1a0051d4:	608b      	str	r3, [r1, #8]
1a0051d6:	6068      	str	r0, [r5, #4]
1a0051d8:	50aa      	str	r2, [r5, r2]
1a0051da:	e7b3      	b.n	1a005144 <_free_r+0x98>
1a0051dc:	f042 0301 	orr.w	r3, r2, #1
1a0051e0:	606b      	str	r3, [r5, #4]
1a0051e2:	50aa      	str	r2, [r5, r2]
1a0051e4:	e7ae      	b.n	1a005144 <_free_r+0x98>
1a0051e6:	2b14      	cmp	r3, #20
1a0051e8:	d814      	bhi.n	1a005214 <_free_r+0x168>
1a0051ea:	f103 045b 	add.w	r4, r3, #91	; 0x5b
1a0051ee:	0060      	lsls	r0, r4, #1
1a0051f0:	e7b5      	b.n	1a00515e <_free_r+0xb2>
1a0051f2:	684a      	ldr	r2, [r1, #4]
1a0051f4:	10a4      	asrs	r4, r4, #2
1a0051f6:	2001      	movs	r0, #1
1a0051f8:	40a0      	lsls	r0, r4
1a0051fa:	4302      	orrs	r2, r0
1a0051fc:	604a      	str	r2, [r1, #4]
1a0051fe:	461a      	mov	r2, r3
1a005200:	e7bc      	b.n	1a00517c <_free_r+0xd0>
1a005202:	f042 0301 	orr.w	r3, r2, #1
1a005206:	614d      	str	r5, [r1, #20]
1a005208:	610d      	str	r5, [r1, #16]
1a00520a:	60ec      	str	r4, [r5, #12]
1a00520c:	60ac      	str	r4, [r5, #8]
1a00520e:	606b      	str	r3, [r5, #4]
1a005210:	50aa      	str	r2, [r5, r2]
1a005212:	e797      	b.n	1a005144 <_free_r+0x98>
1a005214:	2b54      	cmp	r3, #84	; 0x54
1a005216:	d804      	bhi.n	1a005222 <_free_r+0x176>
1a005218:	0b13      	lsrs	r3, r2, #12
1a00521a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
1a00521e:	0060      	lsls	r0, r4, #1
1a005220:	e79d      	b.n	1a00515e <_free_r+0xb2>
1a005222:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
1a005226:	d804      	bhi.n	1a005232 <_free_r+0x186>
1a005228:	0bd3      	lsrs	r3, r2, #15
1a00522a:	f103 0477 	add.w	r4, r3, #119	; 0x77
1a00522e:	0060      	lsls	r0, r4, #1
1a005230:	e795      	b.n	1a00515e <_free_r+0xb2>
1a005232:	f240 5054 	movw	r0, #1364	; 0x554
1a005236:	4283      	cmp	r3, r0
1a005238:	d804      	bhi.n	1a005244 <_free_r+0x198>
1a00523a:	0c93      	lsrs	r3, r2, #18
1a00523c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
1a005240:	0060      	lsls	r0, r4, #1
1a005242:	e78c      	b.n	1a00515e <_free_r+0xb2>
1a005244:	20fc      	movs	r0, #252	; 0xfc
1a005246:	247e      	movs	r4, #126	; 0x7e
1a005248:	e789      	b.n	1a00515e <_free_r+0xb2>
1a00524a:	bf00      	nop
1a00524c:	10000548 	.word	0x10000548
1a005250:	10000550 	.word	0x10000550
1a005254:	10000950 	.word	0x10000950
1a005258:	10000994 	.word	0x10000994

1a00525c <__sfvwrite_r>:
1a00525c:	6893      	ldr	r3, [r2, #8]
1a00525e:	2b00      	cmp	r3, #0
1a005260:	d07a      	beq.n	1a005358 <__sfvwrite_r+0xfc>
1a005262:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005266:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
1a00526a:	f01e 0f08 	tst.w	lr, #8
1a00526e:	b083      	sub	sp, #12
1a005270:	460c      	mov	r4, r1
1a005272:	4681      	mov	r9, r0
1a005274:	4616      	mov	r6, r2
1a005276:	d026      	beq.n	1a0052c6 <__sfvwrite_r+0x6a>
1a005278:	690b      	ldr	r3, [r1, #16]
1a00527a:	b323      	cbz	r3, 1a0052c6 <__sfvwrite_r+0x6a>
1a00527c:	f00e 0802 	and.w	r8, lr, #2
1a005280:	fa1f f088 	uxth.w	r0, r8
1a005284:	6835      	ldr	r5, [r6, #0]
1a005286:	b370      	cbz	r0, 1a0052e6 <__sfvwrite_r+0x8a>
1a005288:	f04f 0a00 	mov.w	sl, #0
1a00528c:	f8df b2e0 	ldr.w	fp, [pc, #736]	; 1a005570 <__sfvwrite_r+0x314>
1a005290:	46d0      	mov	r8, sl
1a005292:	45d8      	cmp	r8, fp
1a005294:	4643      	mov	r3, r8
1a005296:	4652      	mov	r2, sl
1a005298:	bf28      	it	cs
1a00529a:	465b      	movcs	r3, fp
1a00529c:	4648      	mov	r0, r9
1a00529e:	f1b8 0f00 	cmp.w	r8, #0
1a0052a2:	d053      	beq.n	1a00534c <__sfvwrite_r+0xf0>
1a0052a4:	69e1      	ldr	r1, [r4, #28]
1a0052a6:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0052a8:	47b8      	blx	r7
1a0052aa:	2800      	cmp	r0, #0
1a0052ac:	dd73      	ble.n	1a005396 <__sfvwrite_r+0x13a>
1a0052ae:	68b3      	ldr	r3, [r6, #8]
1a0052b0:	1a1b      	subs	r3, r3, r0
1a0052b2:	4482      	add	sl, r0
1a0052b4:	ebc0 0808 	rsb	r8, r0, r8
1a0052b8:	60b3      	str	r3, [r6, #8]
1a0052ba:	2b00      	cmp	r3, #0
1a0052bc:	d1e9      	bne.n	1a005292 <__sfvwrite_r+0x36>
1a0052be:	2000      	movs	r0, #0
1a0052c0:	b003      	add	sp, #12
1a0052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0052c6:	4648      	mov	r0, r9
1a0052c8:	4621      	mov	r1, r4
1a0052ca:	f7fe fd0d 	bl	1a003ce8 <__swsetup_r>
1a0052ce:	2800      	cmp	r0, #0
1a0052d0:	f040 8145 	bne.w	1a00555e <__sfvwrite_r+0x302>
1a0052d4:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
1a0052d8:	6835      	ldr	r5, [r6, #0]
1a0052da:	f00e 0802 	and.w	r8, lr, #2
1a0052de:	fa1f f088 	uxth.w	r0, r8
1a0052e2:	2800      	cmp	r0, #0
1a0052e4:	d1d0      	bne.n	1a005288 <__sfvwrite_r+0x2c>
1a0052e6:	f01e 0b01 	ands.w	fp, lr, #1
1a0052ea:	d15d      	bne.n	1a0053a8 <__sfvwrite_r+0x14c>
1a0052ec:	46d8      	mov	r8, fp
1a0052ee:	f1b8 0f00 	cmp.w	r8, #0
1a0052f2:	d025      	beq.n	1a005340 <__sfvwrite_r+0xe4>
1a0052f4:	f41e 7f00 	tst.w	lr, #512	; 0x200
1a0052f8:	68a7      	ldr	r7, [r4, #8]
1a0052fa:	d02f      	beq.n	1a00535c <__sfvwrite_r+0x100>
1a0052fc:	45b8      	cmp	r8, r7
1a0052fe:	46ba      	mov	sl, r7
1a005300:	f0c0 80a9 	bcc.w	1a005456 <__sfvwrite_r+0x1fa>
1a005304:	f41e 6f90 	tst.w	lr, #1152	; 0x480
1a005308:	f040 80b6 	bne.w	1a005478 <__sfvwrite_r+0x21c>
1a00530c:	6820      	ldr	r0, [r4, #0]
1a00530e:	4652      	mov	r2, sl
1a005310:	4659      	mov	r1, fp
1a005312:	f000 fcb3 	bl	1a005c7c <memmove>
1a005316:	68a0      	ldr	r0, [r4, #8]
1a005318:	6822      	ldr	r2, [r4, #0]
1a00531a:	1bc0      	subs	r0, r0, r7
1a00531c:	eb02 030a 	add.w	r3, r2, sl
1a005320:	60a0      	str	r0, [r4, #8]
1a005322:	6023      	str	r3, [r4, #0]
1a005324:	4640      	mov	r0, r8
1a005326:	68b3      	ldr	r3, [r6, #8]
1a005328:	1a1b      	subs	r3, r3, r0
1a00532a:	4483      	add	fp, r0
1a00532c:	ebc0 0808 	rsb	r8, r0, r8
1a005330:	60b3      	str	r3, [r6, #8]
1a005332:	2b00      	cmp	r3, #0
1a005334:	d0c3      	beq.n	1a0052be <__sfvwrite_r+0x62>
1a005336:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
1a00533a:	f1b8 0f00 	cmp.w	r8, #0
1a00533e:	d1d9      	bne.n	1a0052f4 <__sfvwrite_r+0x98>
1a005340:	f8d5 b000 	ldr.w	fp, [r5]
1a005344:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a005348:	3508      	adds	r5, #8
1a00534a:	e7d0      	b.n	1a0052ee <__sfvwrite_r+0x92>
1a00534c:	f8d5 a000 	ldr.w	sl, [r5]
1a005350:	f8d5 8004 	ldr.w	r8, [r5, #4]
1a005354:	3508      	adds	r5, #8
1a005356:	e79c      	b.n	1a005292 <__sfvwrite_r+0x36>
1a005358:	2000      	movs	r0, #0
1a00535a:	4770      	bx	lr
1a00535c:	6820      	ldr	r0, [r4, #0]
1a00535e:	6923      	ldr	r3, [r4, #16]
1a005360:	4298      	cmp	r0, r3
1a005362:	d803      	bhi.n	1a00536c <__sfvwrite_r+0x110>
1a005364:	6962      	ldr	r2, [r4, #20]
1a005366:	4590      	cmp	r8, r2
1a005368:	f080 80b9 	bcs.w	1a0054de <__sfvwrite_r+0x282>
1a00536c:	4547      	cmp	r7, r8
1a00536e:	bf28      	it	cs
1a005370:	4647      	movcs	r7, r8
1a005372:	463a      	mov	r2, r7
1a005374:	4659      	mov	r1, fp
1a005376:	f000 fc81 	bl	1a005c7c <memmove>
1a00537a:	68a3      	ldr	r3, [r4, #8]
1a00537c:	6822      	ldr	r2, [r4, #0]
1a00537e:	1bdb      	subs	r3, r3, r7
1a005380:	443a      	add	r2, r7
1a005382:	60a3      	str	r3, [r4, #8]
1a005384:	6022      	str	r2, [r4, #0]
1a005386:	2b00      	cmp	r3, #0
1a005388:	d14a      	bne.n	1a005420 <__sfvwrite_r+0x1c4>
1a00538a:	4648      	mov	r0, r9
1a00538c:	4621      	mov	r1, r4
1a00538e:	f7ff fda1 	bl	1a004ed4 <_fflush_r>
1a005392:	2800      	cmp	r0, #0
1a005394:	d044      	beq.n	1a005420 <__sfvwrite_r+0x1c4>
1a005396:	89a3      	ldrh	r3, [r4, #12]
1a005398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00539c:	f04f 30ff 	mov.w	r0, #4294967295
1a0053a0:	81a3      	strh	r3, [r4, #12]
1a0053a2:	b003      	add	sp, #12
1a0053a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0053a8:	4680      	mov	r8, r0
1a0053aa:	9000      	str	r0, [sp, #0]
1a0053ac:	4683      	mov	fp, r0
1a0053ae:	4682      	mov	sl, r0
1a0053b0:	f1ba 0f00 	cmp.w	sl, #0
1a0053b4:	d02c      	beq.n	1a005410 <__sfvwrite_r+0x1b4>
1a0053b6:	9b00      	ldr	r3, [sp, #0]
1a0053b8:	2b00      	cmp	r3, #0
1a0053ba:	d050      	beq.n	1a00545e <__sfvwrite_r+0x202>
1a0053bc:	6820      	ldr	r0, [r4, #0]
1a0053be:	6921      	ldr	r1, [r4, #16]
1a0053c0:	f8d4 e008 	ldr.w	lr, [r4, #8]
1a0053c4:	6962      	ldr	r2, [r4, #20]
1a0053c6:	45d0      	cmp	r8, sl
1a0053c8:	4643      	mov	r3, r8
1a0053ca:	bf28      	it	cs
1a0053cc:	4653      	movcs	r3, sl
1a0053ce:	4288      	cmp	r0, r1
1a0053d0:	461f      	mov	r7, r3
1a0053d2:	d904      	bls.n	1a0053de <__sfvwrite_r+0x182>
1a0053d4:	eb0e 0c02 	add.w	ip, lr, r2
1a0053d8:	4563      	cmp	r3, ip
1a0053da:	f300 8092 	bgt.w	1a005502 <__sfvwrite_r+0x2a6>
1a0053de:	4293      	cmp	r3, r2
1a0053e0:	db20      	blt.n	1a005424 <__sfvwrite_r+0x1c8>
1a0053e2:	4613      	mov	r3, r2
1a0053e4:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0053e6:	69e1      	ldr	r1, [r4, #28]
1a0053e8:	4648      	mov	r0, r9
1a0053ea:	465a      	mov	r2, fp
1a0053ec:	47b8      	blx	r7
1a0053ee:	1e07      	subs	r7, r0, #0
1a0053f0:	ddd1      	ble.n	1a005396 <__sfvwrite_r+0x13a>
1a0053f2:	ebb8 0807 	subs.w	r8, r8, r7
1a0053f6:	d025      	beq.n	1a005444 <__sfvwrite_r+0x1e8>
1a0053f8:	68b3      	ldr	r3, [r6, #8]
1a0053fa:	1bdb      	subs	r3, r3, r7
1a0053fc:	44bb      	add	fp, r7
1a0053fe:	ebc7 0a0a 	rsb	sl, r7, sl
1a005402:	60b3      	str	r3, [r6, #8]
1a005404:	2b00      	cmp	r3, #0
1a005406:	f43f af5a 	beq.w	1a0052be <__sfvwrite_r+0x62>
1a00540a:	f1ba 0f00 	cmp.w	sl, #0
1a00540e:	d1d2      	bne.n	1a0053b6 <__sfvwrite_r+0x15a>
1a005410:	2300      	movs	r3, #0
1a005412:	f8d5 b000 	ldr.w	fp, [r5]
1a005416:	f8d5 a004 	ldr.w	sl, [r5, #4]
1a00541a:	9300      	str	r3, [sp, #0]
1a00541c:	3508      	adds	r5, #8
1a00541e:	e7c7      	b.n	1a0053b0 <__sfvwrite_r+0x154>
1a005420:	4638      	mov	r0, r7
1a005422:	e780      	b.n	1a005326 <__sfvwrite_r+0xca>
1a005424:	461a      	mov	r2, r3
1a005426:	4659      	mov	r1, fp
1a005428:	9301      	str	r3, [sp, #4]
1a00542a:	f000 fc27 	bl	1a005c7c <memmove>
1a00542e:	68a2      	ldr	r2, [r4, #8]
1a005430:	6821      	ldr	r1, [r4, #0]
1a005432:	9b01      	ldr	r3, [sp, #4]
1a005434:	ebb8 0807 	subs.w	r8, r8, r7
1a005438:	eba2 0203 	sub.w	r2, r2, r3
1a00543c:	440b      	add	r3, r1
1a00543e:	60a2      	str	r2, [r4, #8]
1a005440:	6023      	str	r3, [r4, #0]
1a005442:	d1d9      	bne.n	1a0053f8 <__sfvwrite_r+0x19c>
1a005444:	4648      	mov	r0, r9
1a005446:	4621      	mov	r1, r4
1a005448:	f7ff fd44 	bl	1a004ed4 <_fflush_r>
1a00544c:	2800      	cmp	r0, #0
1a00544e:	d1a2      	bne.n	1a005396 <__sfvwrite_r+0x13a>
1a005450:	f8cd 8000 	str.w	r8, [sp]
1a005454:	e7d0      	b.n	1a0053f8 <__sfvwrite_r+0x19c>
1a005456:	6820      	ldr	r0, [r4, #0]
1a005458:	4647      	mov	r7, r8
1a00545a:	46c2      	mov	sl, r8
1a00545c:	e757      	b.n	1a00530e <__sfvwrite_r+0xb2>
1a00545e:	4658      	mov	r0, fp
1a005460:	210a      	movs	r1, #10
1a005462:	4652      	mov	r2, sl
1a005464:	f000 fbc0 	bl	1a005be8 <memchr>
1a005468:	2800      	cmp	r0, #0
1a00546a:	d073      	beq.n	1a005554 <__sfvwrite_r+0x2f8>
1a00546c:	3001      	adds	r0, #1
1a00546e:	2301      	movs	r3, #1
1a005470:	ebcb 0800 	rsb	r8, fp, r0
1a005474:	9300      	str	r3, [sp, #0]
1a005476:	e7a1      	b.n	1a0053bc <__sfvwrite_r+0x160>
1a005478:	6967      	ldr	r7, [r4, #20]
1a00547a:	6921      	ldr	r1, [r4, #16]
1a00547c:	6823      	ldr	r3, [r4, #0]
1a00547e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
1a005482:	1a5b      	subs	r3, r3, r1
1a005484:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
1a005488:	1c58      	adds	r0, r3, #1
1a00548a:	107f      	asrs	r7, r7, #1
1a00548c:	4440      	add	r0, r8
1a00548e:	4287      	cmp	r7, r0
1a005490:	463a      	mov	r2, r7
1a005492:	bf3c      	itt	cc
1a005494:	4607      	movcc	r7, r0
1a005496:	463a      	movcc	r2, r7
1a005498:	f41e 6f80 	tst.w	lr, #1024	; 0x400
1a00549c:	9300      	str	r3, [sp, #0]
1a00549e:	d046      	beq.n	1a00552e <__sfvwrite_r+0x2d2>
1a0054a0:	4611      	mov	r1, r2
1a0054a2:	4648      	mov	r0, r9
1a0054a4:	f000 f90e 	bl	1a0056c4 <_malloc_r>
1a0054a8:	9b00      	ldr	r3, [sp, #0]
1a0054aa:	4682      	mov	sl, r0
1a0054ac:	2800      	cmp	r0, #0
1a0054ae:	d059      	beq.n	1a005564 <__sfvwrite_r+0x308>
1a0054b0:	461a      	mov	r2, r3
1a0054b2:	6921      	ldr	r1, [r4, #16]
1a0054b4:	9300      	str	r3, [sp, #0]
1a0054b6:	f7fd f89d 	bl	1a0025f4 <memcpy>
1a0054ba:	89a2      	ldrh	r2, [r4, #12]
1a0054bc:	9b00      	ldr	r3, [sp, #0]
1a0054be:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
1a0054c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0054c6:	81a2      	strh	r2, [r4, #12]
1a0054c8:	eb0a 0003 	add.w	r0, sl, r3
1a0054cc:	1afb      	subs	r3, r7, r3
1a0054ce:	f8c4 a010 	str.w	sl, [r4, #16]
1a0054d2:	6167      	str	r7, [r4, #20]
1a0054d4:	6020      	str	r0, [r4, #0]
1a0054d6:	60a3      	str	r3, [r4, #8]
1a0054d8:	4647      	mov	r7, r8
1a0054da:	46c2      	mov	sl, r8
1a0054dc:	e717      	b.n	1a00530e <__sfvwrite_r+0xb2>
1a0054de:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
1a0054e2:	4543      	cmp	r3, r8
1a0054e4:	bf28      	it	cs
1a0054e6:	4643      	movcs	r3, r8
1a0054e8:	6a67      	ldr	r7, [r4, #36]	; 0x24
1a0054ea:	fb93 f3f2 	sdiv	r3, r3, r2
1a0054ee:	4648      	mov	r0, r9
1a0054f0:	fb03 f302 	mul.w	r3, r3, r2
1a0054f4:	69e1      	ldr	r1, [r4, #28]
1a0054f6:	465a      	mov	r2, fp
1a0054f8:	47b8      	blx	r7
1a0054fa:	2800      	cmp	r0, #0
1a0054fc:	f73f af13 	bgt.w	1a005326 <__sfvwrite_r+0xca>
1a005500:	e749      	b.n	1a005396 <__sfvwrite_r+0x13a>
1a005502:	4662      	mov	r2, ip
1a005504:	4659      	mov	r1, fp
1a005506:	f8cd c004 	str.w	ip, [sp, #4]
1a00550a:	f000 fbb7 	bl	1a005c7c <memmove>
1a00550e:	6823      	ldr	r3, [r4, #0]
1a005510:	f8dd c004 	ldr.w	ip, [sp, #4]
1a005514:	4463      	add	r3, ip
1a005516:	6023      	str	r3, [r4, #0]
1a005518:	4648      	mov	r0, r9
1a00551a:	4621      	mov	r1, r4
1a00551c:	f7ff fcda 	bl	1a004ed4 <_fflush_r>
1a005520:	f8dd c004 	ldr.w	ip, [sp, #4]
1a005524:	2800      	cmp	r0, #0
1a005526:	f47f af36 	bne.w	1a005396 <__sfvwrite_r+0x13a>
1a00552a:	4667      	mov	r7, ip
1a00552c:	e761      	b.n	1a0053f2 <__sfvwrite_r+0x196>
1a00552e:	4648      	mov	r0, r9
1a005530:	f000 ff02 	bl	1a006338 <_realloc_r>
1a005534:	9b00      	ldr	r3, [sp, #0]
1a005536:	4682      	mov	sl, r0
1a005538:	2800      	cmp	r0, #0
1a00553a:	d1c5      	bne.n	1a0054c8 <__sfvwrite_r+0x26c>
1a00553c:	4648      	mov	r0, r9
1a00553e:	6921      	ldr	r1, [r4, #16]
1a005540:	f7ff fdb4 	bl	1a0050ac <_free_r>
1a005544:	89a3      	ldrh	r3, [r4, #12]
1a005546:	220c      	movs	r2, #12
1a005548:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00554c:	b29b      	uxth	r3, r3
1a00554e:	f8c9 2000 	str.w	r2, [r9]
1a005552:	e721      	b.n	1a005398 <__sfvwrite_r+0x13c>
1a005554:	2301      	movs	r3, #1
1a005556:	f10a 0801 	add.w	r8, sl, #1
1a00555a:	9300      	str	r3, [sp, #0]
1a00555c:	e72e      	b.n	1a0053bc <__sfvwrite_r+0x160>
1a00555e:	f04f 30ff 	mov.w	r0, #4294967295
1a005562:	e6ad      	b.n	1a0052c0 <__sfvwrite_r+0x64>
1a005564:	230c      	movs	r3, #12
1a005566:	f8c9 3000 	str.w	r3, [r9]
1a00556a:	89a3      	ldrh	r3, [r4, #12]
1a00556c:	e714      	b.n	1a005398 <__sfvwrite_r+0x13c>
1a00556e:	bf00      	nop
1a005570:	7ffffc00 	.word	0x7ffffc00

1a005574 <_fwalk_reent>:
1a005574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a005578:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
1a00557c:	d01f      	beq.n	1a0055be <_fwalk_reent+0x4a>
1a00557e:	4688      	mov	r8, r1
1a005580:	4606      	mov	r6, r0
1a005582:	f04f 0900 	mov.w	r9, #0
1a005586:	687d      	ldr	r5, [r7, #4]
1a005588:	68bc      	ldr	r4, [r7, #8]
1a00558a:	3d01      	subs	r5, #1
1a00558c:	d411      	bmi.n	1a0055b2 <_fwalk_reent+0x3e>
1a00558e:	89a3      	ldrh	r3, [r4, #12]
1a005590:	2b01      	cmp	r3, #1
1a005592:	f105 35ff 	add.w	r5, r5, #4294967295
1a005596:	d908      	bls.n	1a0055aa <_fwalk_reent+0x36>
1a005598:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a00559c:	3301      	adds	r3, #1
1a00559e:	4621      	mov	r1, r4
1a0055a0:	4630      	mov	r0, r6
1a0055a2:	d002      	beq.n	1a0055aa <_fwalk_reent+0x36>
1a0055a4:	47c0      	blx	r8
1a0055a6:	ea49 0900 	orr.w	r9, r9, r0
1a0055aa:	1c6b      	adds	r3, r5, #1
1a0055ac:	f104 0468 	add.w	r4, r4, #104	; 0x68
1a0055b0:	d1ed      	bne.n	1a00558e <_fwalk_reent+0x1a>
1a0055b2:	683f      	ldr	r7, [r7, #0]
1a0055b4:	2f00      	cmp	r7, #0
1a0055b6:	d1e6      	bne.n	1a005586 <_fwalk_reent+0x12>
1a0055b8:	4648      	mov	r0, r9
1a0055ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0055be:	46b9      	mov	r9, r7
1a0055c0:	4648      	mov	r0, r9
1a0055c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0055c6:	bf00      	nop

1a0055c8 <__locale_charset>:
1a0055c8:	4800      	ldr	r0, [pc, #0]	; (1a0055cc <__locale_charset+0x4>)
1a0055ca:	4770      	bx	lr
1a0055cc:	10000524 	.word	0x10000524

1a0055d0 <__locale_mb_cur_max>:
1a0055d0:	4b01      	ldr	r3, [pc, #4]	; (1a0055d8 <__locale_mb_cur_max+0x8>)
1a0055d2:	6818      	ldr	r0, [r3, #0]
1a0055d4:	4770      	bx	lr
1a0055d6:	bf00      	nop
1a0055d8:	10000544 	.word	0x10000544

1a0055dc <_localeconv_r>:
1a0055dc:	4800      	ldr	r0, [pc, #0]	; (1a0055e0 <_localeconv_r+0x4>)
1a0055de:	4770      	bx	lr
1a0055e0:	100004ec 	.word	0x100004ec

1a0055e4 <__smakebuf_r>:
1a0055e4:	898b      	ldrh	r3, [r1, #12]
1a0055e6:	b29a      	uxth	r2, r3
1a0055e8:	f012 0f02 	tst.w	r2, #2
1a0055ec:	d13c      	bne.n	1a005668 <__smakebuf_r+0x84>
1a0055ee:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0055f0:	460c      	mov	r4, r1
1a0055f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0055f6:	2900      	cmp	r1, #0
1a0055f8:	b091      	sub	sp, #68	; 0x44
1a0055fa:	4605      	mov	r5, r0
1a0055fc:	db19      	blt.n	1a005632 <__smakebuf_r+0x4e>
1a0055fe:	aa01      	add	r2, sp, #4
1a005600:	f7fb fac6 	bl	1a000b90 <_fstat_r>
1a005604:	2800      	cmp	r0, #0
1a005606:	db12      	blt.n	1a00562e <__smakebuf_r+0x4a>
1a005608:	9b02      	ldr	r3, [sp, #8]
1a00560a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
1a00560e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
1a005612:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
1a005616:	fab7 f787 	clz	r7, r7
1a00561a:	ea4f 1757 	mov.w	r7, r7, lsr #5
1a00561e:	d02a      	beq.n	1a005676 <__smakebuf_r+0x92>
1a005620:	89a3      	ldrh	r3, [r4, #12]
1a005622:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a005626:	81a3      	strh	r3, [r4, #12]
1a005628:	f44f 6680 	mov.w	r6, #1024	; 0x400
1a00562c:	e00b      	b.n	1a005646 <__smakebuf_r+0x62>
1a00562e:	89a3      	ldrh	r3, [r4, #12]
1a005630:	b29a      	uxth	r2, r3
1a005632:	f012 0f80 	tst.w	r2, #128	; 0x80
1a005636:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00563a:	81a3      	strh	r3, [r4, #12]
1a00563c:	bf0c      	ite	eq
1a00563e:	f44f 6680 	moveq.w	r6, #1024	; 0x400
1a005642:	2640      	movne	r6, #64	; 0x40
1a005644:	2700      	movs	r7, #0
1a005646:	4628      	mov	r0, r5
1a005648:	4631      	mov	r1, r6
1a00564a:	f000 f83b 	bl	1a0056c4 <_malloc_r>
1a00564e:	89a3      	ldrh	r3, [r4, #12]
1a005650:	b340      	cbz	r0, 1a0056a4 <__smakebuf_r+0xc0>
1a005652:	4a1a      	ldr	r2, [pc, #104]	; (1a0056bc <__smakebuf_r+0xd8>)
1a005654:	63ea      	str	r2, [r5, #60]	; 0x3c
1a005656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00565a:	81a3      	strh	r3, [r4, #12]
1a00565c:	6020      	str	r0, [r4, #0]
1a00565e:	6120      	str	r0, [r4, #16]
1a005660:	6166      	str	r6, [r4, #20]
1a005662:	b99f      	cbnz	r7, 1a00568c <__smakebuf_r+0xa8>
1a005664:	b011      	add	sp, #68	; 0x44
1a005666:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005668:	f101 0343 	add.w	r3, r1, #67	; 0x43
1a00566c:	2201      	movs	r2, #1
1a00566e:	600b      	str	r3, [r1, #0]
1a005670:	610b      	str	r3, [r1, #16]
1a005672:	614a      	str	r2, [r1, #20]
1a005674:	4770      	bx	lr
1a005676:	4b12      	ldr	r3, [pc, #72]	; (1a0056c0 <__smakebuf_r+0xdc>)
1a005678:	6aa2      	ldr	r2, [r4, #40]	; 0x28
1a00567a:	429a      	cmp	r2, r3
1a00567c:	d1d0      	bne.n	1a005620 <__smakebuf_r+0x3c>
1a00567e:	89a3      	ldrh	r3, [r4, #12]
1a005680:	f44f 6680 	mov.w	r6, #1024	; 0x400
1a005684:	4333      	orrs	r3, r6
1a005686:	81a3      	strh	r3, [r4, #12]
1a005688:	64e6      	str	r6, [r4, #76]	; 0x4c
1a00568a:	e7dc      	b.n	1a005646 <__smakebuf_r+0x62>
1a00568c:	4628      	mov	r0, r5
1a00568e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a005692:	f7fb fa83 	bl	1a000b9c <_isatty_r>
1a005696:	2800      	cmp	r0, #0
1a005698:	d0e4      	beq.n	1a005664 <__smakebuf_r+0x80>
1a00569a:	89a3      	ldrh	r3, [r4, #12]
1a00569c:	f043 0301 	orr.w	r3, r3, #1
1a0056a0:	81a3      	strh	r3, [r4, #12]
1a0056a2:	e7df      	b.n	1a005664 <__smakebuf_r+0x80>
1a0056a4:	059a      	lsls	r2, r3, #22
1a0056a6:	d4dd      	bmi.n	1a005664 <__smakebuf_r+0x80>
1a0056a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0056ac:	f043 0302 	orr.w	r3, r3, #2
1a0056b0:	2101      	movs	r1, #1
1a0056b2:	81a3      	strh	r3, [r4, #12]
1a0056b4:	6022      	str	r2, [r4, #0]
1a0056b6:	6122      	str	r2, [r4, #16]
1a0056b8:	6161      	str	r1, [r4, #20]
1a0056ba:	e7d3      	b.n	1a005664 <__smakebuf_r+0x80>
1a0056bc:	1a004f01 	.word	0x1a004f01
1a0056c0:	1a0067dd 	.word	0x1a0067dd

1a0056c4 <_malloc_r>:
1a0056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0056c8:	f101 050b 	add.w	r5, r1, #11
1a0056cc:	2d16      	cmp	r5, #22
1a0056ce:	b083      	sub	sp, #12
1a0056d0:	4606      	mov	r6, r0
1a0056d2:	d927      	bls.n	1a005724 <_malloc_r+0x60>
1a0056d4:	f035 0507 	bics.w	r5, r5, #7
1a0056d8:	f100 80b6 	bmi.w	1a005848 <_malloc_r+0x184>
1a0056dc:	42a9      	cmp	r1, r5
1a0056de:	f200 80b3 	bhi.w	1a005848 <_malloc_r+0x184>
1a0056e2:	f000 fb2f 	bl	1a005d44 <__malloc_lock>
1a0056e6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
1a0056ea:	d222      	bcs.n	1a005732 <_malloc_r+0x6e>
1a0056ec:	4fc2      	ldr	r7, [pc, #776]	; (1a0059f8 <_malloc_r+0x334>)
1a0056ee:	08e8      	lsrs	r0, r5, #3
1a0056f0:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
1a0056f4:	68dc      	ldr	r4, [r3, #12]
1a0056f6:	429c      	cmp	r4, r3
1a0056f8:	f000 81c8 	beq.w	1a005a8c <_malloc_r+0x3c8>
1a0056fc:	6863      	ldr	r3, [r4, #4]
1a0056fe:	68e1      	ldr	r1, [r4, #12]
1a005700:	68a5      	ldr	r5, [r4, #8]
1a005702:	f023 0303 	bic.w	r3, r3, #3
1a005706:	4423      	add	r3, r4
1a005708:	4630      	mov	r0, r6
1a00570a:	685a      	ldr	r2, [r3, #4]
1a00570c:	60e9      	str	r1, [r5, #12]
1a00570e:	f042 0201 	orr.w	r2, r2, #1
1a005712:	608d      	str	r5, [r1, #8]
1a005714:	605a      	str	r2, [r3, #4]
1a005716:	f000 fb17 	bl	1a005d48 <__malloc_unlock>
1a00571a:	3408      	adds	r4, #8
1a00571c:	4620      	mov	r0, r4
1a00571e:	b003      	add	sp, #12
1a005720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005724:	2910      	cmp	r1, #16
1a005726:	f200 808f 	bhi.w	1a005848 <_malloc_r+0x184>
1a00572a:	f000 fb0b 	bl	1a005d44 <__malloc_lock>
1a00572e:	2510      	movs	r5, #16
1a005730:	e7dc      	b.n	1a0056ec <_malloc_r+0x28>
1a005732:	0a68      	lsrs	r0, r5, #9
1a005734:	f000 808f 	beq.w	1a005856 <_malloc_r+0x192>
1a005738:	2804      	cmp	r0, #4
1a00573a:	f200 8154 	bhi.w	1a0059e6 <_malloc_r+0x322>
1a00573e:	09a8      	lsrs	r0, r5, #6
1a005740:	3038      	adds	r0, #56	; 0x38
1a005742:	0041      	lsls	r1, r0, #1
1a005744:	4fac      	ldr	r7, [pc, #688]	; (1a0059f8 <_malloc_r+0x334>)
1a005746:	eb07 0181 	add.w	r1, r7, r1, lsl #2
1a00574a:	68cc      	ldr	r4, [r1, #12]
1a00574c:	42a1      	cmp	r1, r4
1a00574e:	d106      	bne.n	1a00575e <_malloc_r+0x9a>
1a005750:	e00c      	b.n	1a00576c <_malloc_r+0xa8>
1a005752:	2a00      	cmp	r2, #0
1a005754:	f280 8082 	bge.w	1a00585c <_malloc_r+0x198>
1a005758:	68e4      	ldr	r4, [r4, #12]
1a00575a:	42a1      	cmp	r1, r4
1a00575c:	d006      	beq.n	1a00576c <_malloc_r+0xa8>
1a00575e:	6863      	ldr	r3, [r4, #4]
1a005760:	f023 0303 	bic.w	r3, r3, #3
1a005764:	1b5a      	subs	r2, r3, r5
1a005766:	2a0f      	cmp	r2, #15
1a005768:	ddf3      	ble.n	1a005752 <_malloc_r+0x8e>
1a00576a:	3801      	subs	r0, #1
1a00576c:	3001      	adds	r0, #1
1a00576e:	49a2      	ldr	r1, [pc, #648]	; (1a0059f8 <_malloc_r+0x334>)
1a005770:	693c      	ldr	r4, [r7, #16]
1a005772:	f101 0e08 	add.w	lr, r1, #8
1a005776:	4574      	cmp	r4, lr
1a005778:	f000 817d 	beq.w	1a005a76 <_malloc_r+0x3b2>
1a00577c:	6863      	ldr	r3, [r4, #4]
1a00577e:	f023 0303 	bic.w	r3, r3, #3
1a005782:	1b5a      	subs	r2, r3, r5
1a005784:	2a0f      	cmp	r2, #15
1a005786:	f300 8163 	bgt.w	1a005a50 <_malloc_r+0x38c>
1a00578a:	2a00      	cmp	r2, #0
1a00578c:	f8c1 e014 	str.w	lr, [r1, #20]
1a005790:	f8c1 e010 	str.w	lr, [r1, #16]
1a005794:	da73      	bge.n	1a00587e <_malloc_r+0x1ba>
1a005796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a00579a:	f080 8139 	bcs.w	1a005a10 <_malloc_r+0x34c>
1a00579e:	08db      	lsrs	r3, r3, #3
1a0057a0:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
1a0057a4:	ea4f 0ca3 	mov.w	ip, r3, asr #2
1a0057a8:	684a      	ldr	r2, [r1, #4]
1a0057aa:	f8d8 9008 	ldr.w	r9, [r8, #8]
1a0057ae:	f8c4 9008 	str.w	r9, [r4, #8]
1a0057b2:	2301      	movs	r3, #1
1a0057b4:	fa03 f30c 	lsl.w	r3, r3, ip
1a0057b8:	4313      	orrs	r3, r2
1a0057ba:	f8c4 800c 	str.w	r8, [r4, #12]
1a0057be:	604b      	str	r3, [r1, #4]
1a0057c0:	f8c8 4008 	str.w	r4, [r8, #8]
1a0057c4:	f8c9 400c 	str.w	r4, [r9, #12]
1a0057c8:	1082      	asrs	r2, r0, #2
1a0057ca:	2401      	movs	r4, #1
1a0057cc:	4094      	lsls	r4, r2
1a0057ce:	429c      	cmp	r4, r3
1a0057d0:	d862      	bhi.n	1a005898 <_malloc_r+0x1d4>
1a0057d2:	4223      	tst	r3, r4
1a0057d4:	d106      	bne.n	1a0057e4 <_malloc_r+0x120>
1a0057d6:	f020 0003 	bic.w	r0, r0, #3
1a0057da:	0064      	lsls	r4, r4, #1
1a0057dc:	4223      	tst	r3, r4
1a0057de:	f100 0004 	add.w	r0, r0, #4
1a0057e2:	d0fa      	beq.n	1a0057da <_malloc_r+0x116>
1a0057e4:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
1a0057e8:	46c4      	mov	ip, r8
1a0057ea:	4681      	mov	r9, r0
1a0057ec:	f8dc 300c 	ldr.w	r3, [ip, #12]
1a0057f0:	459c      	cmp	ip, r3
1a0057f2:	d107      	bne.n	1a005804 <_malloc_r+0x140>
1a0057f4:	e141      	b.n	1a005a7a <_malloc_r+0x3b6>
1a0057f6:	2900      	cmp	r1, #0
1a0057f8:	f280 8151 	bge.w	1a005a9e <_malloc_r+0x3da>
1a0057fc:	68db      	ldr	r3, [r3, #12]
1a0057fe:	459c      	cmp	ip, r3
1a005800:	f000 813b 	beq.w	1a005a7a <_malloc_r+0x3b6>
1a005804:	685a      	ldr	r2, [r3, #4]
1a005806:	f022 0203 	bic.w	r2, r2, #3
1a00580a:	1b51      	subs	r1, r2, r5
1a00580c:	290f      	cmp	r1, #15
1a00580e:	ddf2      	ble.n	1a0057f6 <_malloc_r+0x132>
1a005810:	461c      	mov	r4, r3
1a005812:	f8d3 c00c 	ldr.w	ip, [r3, #12]
1a005816:	f854 8f08 	ldr.w	r8, [r4, #8]!
1a00581a:	195a      	adds	r2, r3, r5
1a00581c:	f045 0901 	orr.w	r9, r5, #1
1a005820:	f041 0501 	orr.w	r5, r1, #1
1a005824:	f8c3 9004 	str.w	r9, [r3, #4]
1a005828:	4630      	mov	r0, r6
1a00582a:	f8c8 c00c 	str.w	ip, [r8, #12]
1a00582e:	f8cc 8008 	str.w	r8, [ip, #8]
1a005832:	617a      	str	r2, [r7, #20]
1a005834:	613a      	str	r2, [r7, #16]
1a005836:	f8c2 e00c 	str.w	lr, [r2, #12]
1a00583a:	f8c2 e008 	str.w	lr, [r2, #8]
1a00583e:	6055      	str	r5, [r2, #4]
1a005840:	5051      	str	r1, [r2, r1]
1a005842:	f000 fa81 	bl	1a005d48 <__malloc_unlock>
1a005846:	e769      	b.n	1a00571c <_malloc_r+0x58>
1a005848:	2400      	movs	r4, #0
1a00584a:	230c      	movs	r3, #12
1a00584c:	4620      	mov	r0, r4
1a00584e:	6033      	str	r3, [r6, #0]
1a005850:	b003      	add	sp, #12
1a005852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005856:	217e      	movs	r1, #126	; 0x7e
1a005858:	203f      	movs	r0, #63	; 0x3f
1a00585a:	e773      	b.n	1a005744 <_malloc_r+0x80>
1a00585c:	4423      	add	r3, r4
1a00585e:	68e1      	ldr	r1, [r4, #12]
1a005860:	685a      	ldr	r2, [r3, #4]
1a005862:	68a5      	ldr	r5, [r4, #8]
1a005864:	f042 0201 	orr.w	r2, r2, #1
1a005868:	60e9      	str	r1, [r5, #12]
1a00586a:	4630      	mov	r0, r6
1a00586c:	608d      	str	r5, [r1, #8]
1a00586e:	605a      	str	r2, [r3, #4]
1a005870:	f000 fa6a 	bl	1a005d48 <__malloc_unlock>
1a005874:	3408      	adds	r4, #8
1a005876:	4620      	mov	r0, r4
1a005878:	b003      	add	sp, #12
1a00587a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00587e:	4423      	add	r3, r4
1a005880:	4630      	mov	r0, r6
1a005882:	685a      	ldr	r2, [r3, #4]
1a005884:	f042 0201 	orr.w	r2, r2, #1
1a005888:	605a      	str	r2, [r3, #4]
1a00588a:	f000 fa5d 	bl	1a005d48 <__malloc_unlock>
1a00588e:	3408      	adds	r4, #8
1a005890:	4620      	mov	r0, r4
1a005892:	b003      	add	sp, #12
1a005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005898:	68bc      	ldr	r4, [r7, #8]
1a00589a:	6863      	ldr	r3, [r4, #4]
1a00589c:	f023 0803 	bic.w	r8, r3, #3
1a0058a0:	4545      	cmp	r5, r8
1a0058a2:	d804      	bhi.n	1a0058ae <_malloc_r+0x1ea>
1a0058a4:	ebc5 0308 	rsb	r3, r5, r8
1a0058a8:	2b0f      	cmp	r3, #15
1a0058aa:	f300 808c 	bgt.w	1a0059c6 <_malloc_r+0x302>
1a0058ae:	4b53      	ldr	r3, [pc, #332]	; (1a0059fc <_malloc_r+0x338>)
1a0058b0:	f8df a158 	ldr.w	sl, [pc, #344]	; 1a005a0c <_malloc_r+0x348>
1a0058b4:	681a      	ldr	r2, [r3, #0]
1a0058b6:	f8da 3000 	ldr.w	r3, [sl]
1a0058ba:	3301      	adds	r3, #1
1a0058bc:	442a      	add	r2, r5
1a0058be:	eb04 0b08 	add.w	fp, r4, r8
1a0058c2:	f000 8150 	beq.w	1a005b66 <_malloc_r+0x4a2>
1a0058c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
1a0058ca:	320f      	adds	r2, #15
1a0058cc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
1a0058d0:	f022 020f 	bic.w	r2, r2, #15
1a0058d4:	4611      	mov	r1, r2
1a0058d6:	4630      	mov	r0, r6
1a0058d8:	9201      	str	r2, [sp, #4]
1a0058da:	f7fb f995 	bl	1a000c08 <_sbrk_r>
1a0058de:	f1b0 3fff 	cmp.w	r0, #4294967295
1a0058e2:	4681      	mov	r9, r0
1a0058e4:	9a01      	ldr	r2, [sp, #4]
1a0058e6:	f000 8147 	beq.w	1a005b78 <_malloc_r+0x4b4>
1a0058ea:	4583      	cmp	fp, r0
1a0058ec:	f200 80ee 	bhi.w	1a005acc <_malloc_r+0x408>
1a0058f0:	4b43      	ldr	r3, [pc, #268]	; (1a005a00 <_malloc_r+0x33c>)
1a0058f2:	6819      	ldr	r1, [r3, #0]
1a0058f4:	45cb      	cmp	fp, r9
1a0058f6:	4411      	add	r1, r2
1a0058f8:	6019      	str	r1, [r3, #0]
1a0058fa:	f000 8142 	beq.w	1a005b82 <_malloc_r+0x4be>
1a0058fe:	f8da 0000 	ldr.w	r0, [sl]
1a005902:	f8df e108 	ldr.w	lr, [pc, #264]	; 1a005a0c <_malloc_r+0x348>
1a005906:	3001      	adds	r0, #1
1a005908:	bf1b      	ittet	ne
1a00590a:	ebcb 0b09 	rsbne	fp, fp, r9
1a00590e:	4459      	addne	r1, fp
1a005910:	f8ce 9000 	streq.w	r9, [lr]
1a005914:	6019      	strne	r1, [r3, #0]
1a005916:	f019 0107 	ands.w	r1, r9, #7
1a00591a:	f000 8107 	beq.w	1a005b2c <_malloc_r+0x468>
1a00591e:	f1c1 0008 	rsb	r0, r1, #8
1a005922:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
1a005926:	4481      	add	r9, r0
1a005928:	3108      	adds	r1, #8
1a00592a:	444a      	add	r2, r9
1a00592c:	f3c2 020b 	ubfx	r2, r2, #0, #12
1a005930:	ebc2 0a01 	rsb	sl, r2, r1
1a005934:	4651      	mov	r1, sl
1a005936:	4630      	mov	r0, r6
1a005938:	9301      	str	r3, [sp, #4]
1a00593a:	f7fb f965 	bl	1a000c08 <_sbrk_r>
1a00593e:	1c43      	adds	r3, r0, #1
1a005940:	9b01      	ldr	r3, [sp, #4]
1a005942:	f000 812c 	beq.w	1a005b9e <_malloc_r+0x4da>
1a005946:	ebc9 0200 	rsb	r2, r9, r0
1a00594a:	4452      	add	r2, sl
1a00594c:	f042 0201 	orr.w	r2, r2, #1
1a005950:	6819      	ldr	r1, [r3, #0]
1a005952:	f8c7 9008 	str.w	r9, [r7, #8]
1a005956:	4451      	add	r1, sl
1a005958:	42bc      	cmp	r4, r7
1a00595a:	f8c9 2004 	str.w	r2, [r9, #4]
1a00595e:	6019      	str	r1, [r3, #0]
1a005960:	f8df a09c 	ldr.w	sl, [pc, #156]	; 1a005a00 <_malloc_r+0x33c>
1a005964:	d016      	beq.n	1a005994 <_malloc_r+0x2d0>
1a005966:	f1b8 0f0f 	cmp.w	r8, #15
1a00596a:	f240 80ee 	bls.w	1a005b4a <_malloc_r+0x486>
1a00596e:	6862      	ldr	r2, [r4, #4]
1a005970:	f1a8 030c 	sub.w	r3, r8, #12
1a005974:	f023 0307 	bic.w	r3, r3, #7
1a005978:	18e0      	adds	r0, r4, r3
1a00597a:	f002 0201 	and.w	r2, r2, #1
1a00597e:	f04f 0e05 	mov.w	lr, #5
1a005982:	431a      	orrs	r2, r3
1a005984:	2b0f      	cmp	r3, #15
1a005986:	6062      	str	r2, [r4, #4]
1a005988:	f8c0 e004 	str.w	lr, [r0, #4]
1a00598c:	f8c0 e008 	str.w	lr, [r0, #8]
1a005990:	f200 8109 	bhi.w	1a005ba6 <_malloc_r+0x4e2>
1a005994:	4b1b      	ldr	r3, [pc, #108]	; (1a005a04 <_malloc_r+0x340>)
1a005996:	68bc      	ldr	r4, [r7, #8]
1a005998:	681a      	ldr	r2, [r3, #0]
1a00599a:	4291      	cmp	r1, r2
1a00599c:	bf88      	it	hi
1a00599e:	6019      	strhi	r1, [r3, #0]
1a0059a0:	4b19      	ldr	r3, [pc, #100]	; (1a005a08 <_malloc_r+0x344>)
1a0059a2:	681a      	ldr	r2, [r3, #0]
1a0059a4:	4291      	cmp	r1, r2
1a0059a6:	6862      	ldr	r2, [r4, #4]
1a0059a8:	bf88      	it	hi
1a0059aa:	6019      	strhi	r1, [r3, #0]
1a0059ac:	f022 0203 	bic.w	r2, r2, #3
1a0059b0:	4295      	cmp	r5, r2
1a0059b2:	eba2 0305 	sub.w	r3, r2, r5
1a0059b6:	d801      	bhi.n	1a0059bc <_malloc_r+0x2f8>
1a0059b8:	2b0f      	cmp	r3, #15
1a0059ba:	dc04      	bgt.n	1a0059c6 <_malloc_r+0x302>
1a0059bc:	4630      	mov	r0, r6
1a0059be:	f000 f9c3 	bl	1a005d48 <__malloc_unlock>
1a0059c2:	2400      	movs	r4, #0
1a0059c4:	e6aa      	b.n	1a00571c <_malloc_r+0x58>
1a0059c6:	1962      	adds	r2, r4, r5
1a0059c8:	f043 0301 	orr.w	r3, r3, #1
1a0059cc:	f045 0501 	orr.w	r5, r5, #1
1a0059d0:	6065      	str	r5, [r4, #4]
1a0059d2:	4630      	mov	r0, r6
1a0059d4:	60ba      	str	r2, [r7, #8]
1a0059d6:	6053      	str	r3, [r2, #4]
1a0059d8:	f000 f9b6 	bl	1a005d48 <__malloc_unlock>
1a0059dc:	3408      	adds	r4, #8
1a0059de:	4620      	mov	r0, r4
1a0059e0:	b003      	add	sp, #12
1a0059e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0059e6:	2814      	cmp	r0, #20
1a0059e8:	d968      	bls.n	1a005abc <_malloc_r+0x3f8>
1a0059ea:	2854      	cmp	r0, #84	; 0x54
1a0059ec:	f200 8097 	bhi.w	1a005b1e <_malloc_r+0x45a>
1a0059f0:	0b28      	lsrs	r0, r5, #12
1a0059f2:	306e      	adds	r0, #110	; 0x6e
1a0059f4:	0041      	lsls	r1, r0, #1
1a0059f6:	e6a5      	b.n	1a005744 <_malloc_r+0x80>
1a0059f8:	10000548 	.word	0x10000548
1a0059fc:	10000994 	.word	0x10000994
1a005a00:	10000998 	.word	0x10000998
1a005a04:	10000990 	.word	0x10000990
1a005a08:	1000098c 	.word	0x1000098c
1a005a0c:	10000954 	.word	0x10000954
1a005a10:	0a5a      	lsrs	r2, r3, #9
1a005a12:	2a04      	cmp	r2, #4
1a005a14:	d955      	bls.n	1a005ac2 <_malloc_r+0x3fe>
1a005a16:	2a14      	cmp	r2, #20
1a005a18:	f200 80a7 	bhi.w	1a005b6a <_malloc_r+0x4a6>
1a005a1c:	325b      	adds	r2, #91	; 0x5b
1a005a1e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a005a22:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
1a005a26:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 1a005be4 <_malloc_r+0x520>
1a005a2a:	f8dc 1008 	ldr.w	r1, [ip, #8]
1a005a2e:	4561      	cmp	r1, ip
1a005a30:	d07f      	beq.n	1a005b32 <_malloc_r+0x46e>
1a005a32:	684a      	ldr	r2, [r1, #4]
1a005a34:	f022 0203 	bic.w	r2, r2, #3
1a005a38:	4293      	cmp	r3, r2
1a005a3a:	d202      	bcs.n	1a005a42 <_malloc_r+0x37e>
1a005a3c:	6889      	ldr	r1, [r1, #8]
1a005a3e:	458c      	cmp	ip, r1
1a005a40:	d1f7      	bne.n	1a005a32 <_malloc_r+0x36e>
1a005a42:	68ca      	ldr	r2, [r1, #12]
1a005a44:	687b      	ldr	r3, [r7, #4]
1a005a46:	60e2      	str	r2, [r4, #12]
1a005a48:	60a1      	str	r1, [r4, #8]
1a005a4a:	6094      	str	r4, [r2, #8]
1a005a4c:	60cc      	str	r4, [r1, #12]
1a005a4e:	e6bb      	b.n	1a0057c8 <_malloc_r+0x104>
1a005a50:	1963      	adds	r3, r4, r5
1a005a52:	f042 0701 	orr.w	r7, r2, #1
1a005a56:	f045 0501 	orr.w	r5, r5, #1
1a005a5a:	6065      	str	r5, [r4, #4]
1a005a5c:	4630      	mov	r0, r6
1a005a5e:	614b      	str	r3, [r1, #20]
1a005a60:	610b      	str	r3, [r1, #16]
1a005a62:	f8c3 e00c 	str.w	lr, [r3, #12]
1a005a66:	f8c3 e008 	str.w	lr, [r3, #8]
1a005a6a:	605f      	str	r7, [r3, #4]
1a005a6c:	509a      	str	r2, [r3, r2]
1a005a6e:	3408      	adds	r4, #8
1a005a70:	f000 f96a 	bl	1a005d48 <__malloc_unlock>
1a005a74:	e652      	b.n	1a00571c <_malloc_r+0x58>
1a005a76:	684b      	ldr	r3, [r1, #4]
1a005a78:	e6a6      	b.n	1a0057c8 <_malloc_r+0x104>
1a005a7a:	f109 0901 	add.w	r9, r9, #1
1a005a7e:	f019 0f03 	tst.w	r9, #3
1a005a82:	f10c 0c08 	add.w	ip, ip, #8
1a005a86:	f47f aeb1 	bne.w	1a0057ec <_malloc_r+0x128>
1a005a8a:	e02c      	b.n	1a005ae6 <_malloc_r+0x422>
1a005a8c:	f104 0308 	add.w	r3, r4, #8
1a005a90:	6964      	ldr	r4, [r4, #20]
1a005a92:	42a3      	cmp	r3, r4
1a005a94:	bf08      	it	eq
1a005a96:	3002      	addeq	r0, #2
1a005a98:	f43f ae69 	beq.w	1a00576e <_malloc_r+0xaa>
1a005a9c:	e62e      	b.n	1a0056fc <_malloc_r+0x38>
1a005a9e:	441a      	add	r2, r3
1a005aa0:	461c      	mov	r4, r3
1a005aa2:	6851      	ldr	r1, [r2, #4]
1a005aa4:	68db      	ldr	r3, [r3, #12]
1a005aa6:	f854 5f08 	ldr.w	r5, [r4, #8]!
1a005aaa:	f041 0101 	orr.w	r1, r1, #1
1a005aae:	6051      	str	r1, [r2, #4]
1a005ab0:	4630      	mov	r0, r6
1a005ab2:	60eb      	str	r3, [r5, #12]
1a005ab4:	609d      	str	r5, [r3, #8]
1a005ab6:	f000 f947 	bl	1a005d48 <__malloc_unlock>
1a005aba:	e62f      	b.n	1a00571c <_malloc_r+0x58>
1a005abc:	305b      	adds	r0, #91	; 0x5b
1a005abe:	0041      	lsls	r1, r0, #1
1a005ac0:	e640      	b.n	1a005744 <_malloc_r+0x80>
1a005ac2:	099a      	lsrs	r2, r3, #6
1a005ac4:	3238      	adds	r2, #56	; 0x38
1a005ac6:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a005aca:	e7aa      	b.n	1a005a22 <_malloc_r+0x35e>
1a005acc:	42bc      	cmp	r4, r7
1a005ace:	4b45      	ldr	r3, [pc, #276]	; (1a005be4 <_malloc_r+0x520>)
1a005ad0:	f43f af0e 	beq.w	1a0058f0 <_malloc_r+0x22c>
1a005ad4:	689c      	ldr	r4, [r3, #8]
1a005ad6:	6862      	ldr	r2, [r4, #4]
1a005ad8:	f022 0203 	bic.w	r2, r2, #3
1a005adc:	e768      	b.n	1a0059b0 <_malloc_r+0x2ec>
1a005ade:	f8d8 8000 	ldr.w	r8, [r8]
1a005ae2:	4598      	cmp	r8, r3
1a005ae4:	d17c      	bne.n	1a005be0 <_malloc_r+0x51c>
1a005ae6:	f010 0f03 	tst.w	r0, #3
1a005aea:	f1a8 0308 	sub.w	r3, r8, #8
1a005aee:	f100 30ff 	add.w	r0, r0, #4294967295
1a005af2:	d1f4      	bne.n	1a005ade <_malloc_r+0x41a>
1a005af4:	687b      	ldr	r3, [r7, #4]
1a005af6:	ea23 0304 	bic.w	r3, r3, r4
1a005afa:	607b      	str	r3, [r7, #4]
1a005afc:	0064      	lsls	r4, r4, #1
1a005afe:	429c      	cmp	r4, r3
1a005b00:	f63f aeca 	bhi.w	1a005898 <_malloc_r+0x1d4>
1a005b04:	2c00      	cmp	r4, #0
1a005b06:	f43f aec7 	beq.w	1a005898 <_malloc_r+0x1d4>
1a005b0a:	4223      	tst	r3, r4
1a005b0c:	4648      	mov	r0, r9
1a005b0e:	f47f ae69 	bne.w	1a0057e4 <_malloc_r+0x120>
1a005b12:	0064      	lsls	r4, r4, #1
1a005b14:	4223      	tst	r3, r4
1a005b16:	f100 0004 	add.w	r0, r0, #4
1a005b1a:	d0fa      	beq.n	1a005b12 <_malloc_r+0x44e>
1a005b1c:	e662      	b.n	1a0057e4 <_malloc_r+0x120>
1a005b1e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
1a005b22:	d818      	bhi.n	1a005b56 <_malloc_r+0x492>
1a005b24:	0be8      	lsrs	r0, r5, #15
1a005b26:	3077      	adds	r0, #119	; 0x77
1a005b28:	0041      	lsls	r1, r0, #1
1a005b2a:	e60b      	b.n	1a005744 <_malloc_r+0x80>
1a005b2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
1a005b30:	e6fb      	b.n	1a00592a <_malloc_r+0x266>
1a005b32:	f8d8 3004 	ldr.w	r3, [r8, #4]
1a005b36:	1092      	asrs	r2, r2, #2
1a005b38:	f04f 0c01 	mov.w	ip, #1
1a005b3c:	fa0c f202 	lsl.w	r2, ip, r2
1a005b40:	4313      	orrs	r3, r2
1a005b42:	f8c8 3004 	str.w	r3, [r8, #4]
1a005b46:	460a      	mov	r2, r1
1a005b48:	e77d      	b.n	1a005a46 <_malloc_r+0x382>
1a005b4a:	2301      	movs	r3, #1
1a005b4c:	f8c9 3004 	str.w	r3, [r9, #4]
1a005b50:	464c      	mov	r4, r9
1a005b52:	2200      	movs	r2, #0
1a005b54:	e72c      	b.n	1a0059b0 <_malloc_r+0x2ec>
1a005b56:	f240 5354 	movw	r3, #1364	; 0x554
1a005b5a:	4298      	cmp	r0, r3
1a005b5c:	d81c      	bhi.n	1a005b98 <_malloc_r+0x4d4>
1a005b5e:	0ca8      	lsrs	r0, r5, #18
1a005b60:	307c      	adds	r0, #124	; 0x7c
1a005b62:	0041      	lsls	r1, r0, #1
1a005b64:	e5ee      	b.n	1a005744 <_malloc_r+0x80>
1a005b66:	3210      	adds	r2, #16
1a005b68:	e6b4      	b.n	1a0058d4 <_malloc_r+0x210>
1a005b6a:	2a54      	cmp	r2, #84	; 0x54
1a005b6c:	d823      	bhi.n	1a005bb6 <_malloc_r+0x4f2>
1a005b6e:	0b1a      	lsrs	r2, r3, #12
1a005b70:	326e      	adds	r2, #110	; 0x6e
1a005b72:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a005b76:	e754      	b.n	1a005a22 <_malloc_r+0x35e>
1a005b78:	68bc      	ldr	r4, [r7, #8]
1a005b7a:	6862      	ldr	r2, [r4, #4]
1a005b7c:	f022 0203 	bic.w	r2, r2, #3
1a005b80:	e716      	b.n	1a0059b0 <_malloc_r+0x2ec>
1a005b82:	f3cb 000b 	ubfx	r0, fp, #0, #12
1a005b86:	2800      	cmp	r0, #0
1a005b88:	f47f aeb9 	bne.w	1a0058fe <_malloc_r+0x23a>
1a005b8c:	4442      	add	r2, r8
1a005b8e:	68bb      	ldr	r3, [r7, #8]
1a005b90:	f042 0201 	orr.w	r2, r2, #1
1a005b94:	605a      	str	r2, [r3, #4]
1a005b96:	e6fd      	b.n	1a005994 <_malloc_r+0x2d0>
1a005b98:	21fc      	movs	r1, #252	; 0xfc
1a005b9a:	207e      	movs	r0, #126	; 0x7e
1a005b9c:	e5d2      	b.n	1a005744 <_malloc_r+0x80>
1a005b9e:	2201      	movs	r2, #1
1a005ba0:	f04f 0a00 	mov.w	sl, #0
1a005ba4:	e6d4      	b.n	1a005950 <_malloc_r+0x28c>
1a005ba6:	f104 0108 	add.w	r1, r4, #8
1a005baa:	4630      	mov	r0, r6
1a005bac:	f7ff fa7e 	bl	1a0050ac <_free_r>
1a005bb0:	f8da 1000 	ldr.w	r1, [sl]
1a005bb4:	e6ee      	b.n	1a005994 <_malloc_r+0x2d0>
1a005bb6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
1a005bba:	d804      	bhi.n	1a005bc6 <_malloc_r+0x502>
1a005bbc:	0bda      	lsrs	r2, r3, #15
1a005bbe:	3277      	adds	r2, #119	; 0x77
1a005bc0:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a005bc4:	e72d      	b.n	1a005a22 <_malloc_r+0x35e>
1a005bc6:	f240 5154 	movw	r1, #1364	; 0x554
1a005bca:	428a      	cmp	r2, r1
1a005bcc:	d804      	bhi.n	1a005bd8 <_malloc_r+0x514>
1a005bce:	0c9a      	lsrs	r2, r3, #18
1a005bd0:	327c      	adds	r2, #124	; 0x7c
1a005bd2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
1a005bd6:	e724      	b.n	1a005a22 <_malloc_r+0x35e>
1a005bd8:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
1a005bdc:	227e      	movs	r2, #126	; 0x7e
1a005bde:	e720      	b.n	1a005a22 <_malloc_r+0x35e>
1a005be0:	687b      	ldr	r3, [r7, #4]
1a005be2:	e78b      	b.n	1a005afc <_malloc_r+0x438>
1a005be4:	10000548 	.word	0x10000548

1a005be8 <memchr>:
1a005be8:	0783      	lsls	r3, r0, #30
1a005bea:	b470      	push	{r4, r5, r6}
1a005bec:	b2c9      	uxtb	r1, r1
1a005bee:	d040      	beq.n	1a005c72 <memchr+0x8a>
1a005bf0:	1e54      	subs	r4, r2, #1
1a005bf2:	2a00      	cmp	r2, #0
1a005bf4:	d03f      	beq.n	1a005c76 <memchr+0x8e>
1a005bf6:	7803      	ldrb	r3, [r0, #0]
1a005bf8:	428b      	cmp	r3, r1
1a005bfa:	bf18      	it	ne
1a005bfc:	1c43      	addne	r3, r0, #1
1a005bfe:	d106      	bne.n	1a005c0e <memchr+0x26>
1a005c00:	e01d      	b.n	1a005c3e <memchr+0x56>
1a005c02:	b1f4      	cbz	r4, 1a005c42 <memchr+0x5a>
1a005c04:	7802      	ldrb	r2, [r0, #0]
1a005c06:	428a      	cmp	r2, r1
1a005c08:	f104 34ff 	add.w	r4, r4, #4294967295
1a005c0c:	d017      	beq.n	1a005c3e <memchr+0x56>
1a005c0e:	f013 0f03 	tst.w	r3, #3
1a005c12:	4618      	mov	r0, r3
1a005c14:	f103 0301 	add.w	r3, r3, #1
1a005c18:	d1f3      	bne.n	1a005c02 <memchr+0x1a>
1a005c1a:	2c03      	cmp	r4, #3
1a005c1c:	d814      	bhi.n	1a005c48 <memchr+0x60>
1a005c1e:	b184      	cbz	r4, 1a005c42 <memchr+0x5a>
1a005c20:	7803      	ldrb	r3, [r0, #0]
1a005c22:	428b      	cmp	r3, r1
1a005c24:	d00b      	beq.n	1a005c3e <memchr+0x56>
1a005c26:	1905      	adds	r5, r0, r4
1a005c28:	1c43      	adds	r3, r0, #1
1a005c2a:	e002      	b.n	1a005c32 <memchr+0x4a>
1a005c2c:	7802      	ldrb	r2, [r0, #0]
1a005c2e:	428a      	cmp	r2, r1
1a005c30:	d005      	beq.n	1a005c3e <memchr+0x56>
1a005c32:	42ab      	cmp	r3, r5
1a005c34:	4618      	mov	r0, r3
1a005c36:	f103 0301 	add.w	r3, r3, #1
1a005c3a:	d1f7      	bne.n	1a005c2c <memchr+0x44>
1a005c3c:	2000      	movs	r0, #0
1a005c3e:	bc70      	pop	{r4, r5, r6}
1a005c40:	4770      	bx	lr
1a005c42:	4620      	mov	r0, r4
1a005c44:	bc70      	pop	{r4, r5, r6}
1a005c46:	4770      	bx	lr
1a005c48:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
1a005c4c:	4602      	mov	r2, r0
1a005c4e:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
1a005c52:	4610      	mov	r0, r2
1a005c54:	3204      	adds	r2, #4
1a005c56:	6803      	ldr	r3, [r0, #0]
1a005c58:	4073      	eors	r3, r6
1a005c5a:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
1a005c5e:	ea25 0303 	bic.w	r3, r5, r3
1a005c62:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
1a005c66:	d1da      	bne.n	1a005c1e <memchr+0x36>
1a005c68:	3c04      	subs	r4, #4
1a005c6a:	2c03      	cmp	r4, #3
1a005c6c:	4610      	mov	r0, r2
1a005c6e:	d8f0      	bhi.n	1a005c52 <memchr+0x6a>
1a005c70:	e7d5      	b.n	1a005c1e <memchr+0x36>
1a005c72:	4614      	mov	r4, r2
1a005c74:	e7d1      	b.n	1a005c1a <memchr+0x32>
1a005c76:	4610      	mov	r0, r2
1a005c78:	e7e1      	b.n	1a005c3e <memchr+0x56>
1a005c7a:	bf00      	nop

1a005c7c <memmove>:
1a005c7c:	4288      	cmp	r0, r1
1a005c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005c80:	d90d      	bls.n	1a005c9e <memmove+0x22>
1a005c82:	188b      	adds	r3, r1, r2
1a005c84:	4298      	cmp	r0, r3
1a005c86:	d20a      	bcs.n	1a005c9e <memmove+0x22>
1a005c88:	1881      	adds	r1, r0, r2
1a005c8a:	2a00      	cmp	r2, #0
1a005c8c:	d054      	beq.n	1a005d38 <memmove+0xbc>
1a005c8e:	1a9a      	subs	r2, r3, r2
1a005c90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
1a005c94:	f801 4d01 	strb.w	r4, [r1, #-1]!
1a005c98:	4293      	cmp	r3, r2
1a005c9a:	d1f9      	bne.n	1a005c90 <memmove+0x14>
1a005c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005c9e:	2a0f      	cmp	r2, #15
1a005ca0:	d948      	bls.n	1a005d34 <memmove+0xb8>
1a005ca2:	ea40 0301 	orr.w	r3, r0, r1
1a005ca6:	079b      	lsls	r3, r3, #30
1a005ca8:	d147      	bne.n	1a005d3a <memmove+0xbe>
1a005caa:	f100 0410 	add.w	r4, r0, #16
1a005cae:	f101 0310 	add.w	r3, r1, #16
1a005cb2:	4615      	mov	r5, r2
1a005cb4:	f853 6c10 	ldr.w	r6, [r3, #-16]
1a005cb8:	f844 6c10 	str.w	r6, [r4, #-16]
1a005cbc:	f853 6c0c 	ldr.w	r6, [r3, #-12]
1a005cc0:	f844 6c0c 	str.w	r6, [r4, #-12]
1a005cc4:	f853 6c08 	ldr.w	r6, [r3, #-8]
1a005cc8:	f844 6c08 	str.w	r6, [r4, #-8]
1a005ccc:	3d10      	subs	r5, #16
1a005cce:	f853 6c04 	ldr.w	r6, [r3, #-4]
1a005cd2:	f844 6c04 	str.w	r6, [r4, #-4]
1a005cd6:	2d0f      	cmp	r5, #15
1a005cd8:	f103 0310 	add.w	r3, r3, #16
1a005cdc:	f104 0410 	add.w	r4, r4, #16
1a005ce0:	d8e8      	bhi.n	1a005cb4 <memmove+0x38>
1a005ce2:	f1a2 0310 	sub.w	r3, r2, #16
1a005ce6:	f023 030f 	bic.w	r3, r3, #15
1a005cea:	f002 0e0f 	and.w	lr, r2, #15
1a005cee:	3310      	adds	r3, #16
1a005cf0:	f1be 0f03 	cmp.w	lr, #3
1a005cf4:	4419      	add	r1, r3
1a005cf6:	4403      	add	r3, r0
1a005cf8:	d921      	bls.n	1a005d3e <memmove+0xc2>
1a005cfa:	1f1e      	subs	r6, r3, #4
1a005cfc:	460d      	mov	r5, r1
1a005cfe:	4674      	mov	r4, lr
1a005d00:	3c04      	subs	r4, #4
1a005d02:	f855 7b04 	ldr.w	r7, [r5], #4
1a005d06:	f846 7f04 	str.w	r7, [r6, #4]!
1a005d0a:	2c03      	cmp	r4, #3
1a005d0c:	d8f8      	bhi.n	1a005d00 <memmove+0x84>
1a005d0e:	f1ae 0404 	sub.w	r4, lr, #4
1a005d12:	f024 0403 	bic.w	r4, r4, #3
1a005d16:	3404      	adds	r4, #4
1a005d18:	4423      	add	r3, r4
1a005d1a:	4421      	add	r1, r4
1a005d1c:	f002 0203 	and.w	r2, r2, #3
1a005d20:	b152      	cbz	r2, 1a005d38 <memmove+0xbc>
1a005d22:	3b01      	subs	r3, #1
1a005d24:	440a      	add	r2, r1
1a005d26:	f811 4b01 	ldrb.w	r4, [r1], #1
1a005d2a:	f803 4f01 	strb.w	r4, [r3, #1]!
1a005d2e:	4291      	cmp	r1, r2
1a005d30:	d1f9      	bne.n	1a005d26 <memmove+0xaa>
1a005d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005d34:	4603      	mov	r3, r0
1a005d36:	e7f3      	b.n	1a005d20 <memmove+0xa4>
1a005d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005d3a:	4603      	mov	r3, r0
1a005d3c:	e7f1      	b.n	1a005d22 <memmove+0xa6>
1a005d3e:	4672      	mov	r2, lr
1a005d40:	e7ee      	b.n	1a005d20 <memmove+0xa4>
1a005d42:	bf00      	nop

1a005d44 <__malloc_lock>:
1a005d44:	4770      	bx	lr
1a005d46:	bf00      	nop

1a005d48 <__malloc_unlock>:
1a005d48:	4770      	bx	lr
1a005d4a:	bf00      	nop

1a005d4c <_Balloc>:
1a005d4c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a005d4e:	b570      	push	{r4, r5, r6, lr}
1a005d50:	4605      	mov	r5, r0
1a005d52:	460c      	mov	r4, r1
1a005d54:	b14b      	cbz	r3, 1a005d6a <_Balloc+0x1e>
1a005d56:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
1a005d5a:	b180      	cbz	r0, 1a005d7e <_Balloc+0x32>
1a005d5c:	6802      	ldr	r2, [r0, #0]
1a005d5e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
1a005d62:	2300      	movs	r3, #0
1a005d64:	6103      	str	r3, [r0, #16]
1a005d66:	60c3      	str	r3, [r0, #12]
1a005d68:	bd70      	pop	{r4, r5, r6, pc}
1a005d6a:	2104      	movs	r1, #4
1a005d6c:	2221      	movs	r2, #33	; 0x21
1a005d6e:	f000 fde5 	bl	1a00693c <_calloc_r>
1a005d72:	64e8      	str	r0, [r5, #76]	; 0x4c
1a005d74:	4603      	mov	r3, r0
1a005d76:	2800      	cmp	r0, #0
1a005d78:	d1ed      	bne.n	1a005d56 <_Balloc+0xa>
1a005d7a:	2000      	movs	r0, #0
1a005d7c:	bd70      	pop	{r4, r5, r6, pc}
1a005d7e:	2101      	movs	r1, #1
1a005d80:	fa01 f604 	lsl.w	r6, r1, r4
1a005d84:	1d72      	adds	r2, r6, #5
1a005d86:	4628      	mov	r0, r5
1a005d88:	0092      	lsls	r2, r2, #2
1a005d8a:	f000 fdd7 	bl	1a00693c <_calloc_r>
1a005d8e:	2800      	cmp	r0, #0
1a005d90:	d0f3      	beq.n	1a005d7a <_Balloc+0x2e>
1a005d92:	6044      	str	r4, [r0, #4]
1a005d94:	6086      	str	r6, [r0, #8]
1a005d96:	e7e4      	b.n	1a005d62 <_Balloc+0x16>

1a005d98 <_Bfree>:
1a005d98:	b131      	cbz	r1, 1a005da8 <_Bfree+0x10>
1a005d9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
1a005d9c:	684a      	ldr	r2, [r1, #4]
1a005d9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
1a005da2:	6008      	str	r0, [r1, #0]
1a005da4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
1a005da8:	4770      	bx	lr
1a005daa:	bf00      	nop

1a005dac <__multadd>:
1a005dac:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005dae:	690c      	ldr	r4, [r1, #16]
1a005db0:	b083      	sub	sp, #12
1a005db2:	460d      	mov	r5, r1
1a005db4:	4606      	mov	r6, r0
1a005db6:	f101 0e14 	add.w	lr, r1, #20
1a005dba:	2700      	movs	r7, #0
1a005dbc:	f8de 1000 	ldr.w	r1, [lr]
1a005dc0:	b288      	uxth	r0, r1
1a005dc2:	0c09      	lsrs	r1, r1, #16
1a005dc4:	fb02 3300 	mla	r3, r2, r0, r3
1a005dc8:	fb02 f101 	mul.w	r1, r2, r1
1a005dcc:	eb01 4113 	add.w	r1, r1, r3, lsr #16
1a005dd0:	3701      	adds	r7, #1
1a005dd2:	b29b      	uxth	r3, r3
1a005dd4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
1a005dd8:	42bc      	cmp	r4, r7
1a005dda:	f84e 3b04 	str.w	r3, [lr], #4
1a005dde:	ea4f 4311 	mov.w	r3, r1, lsr #16
1a005de2:	dceb      	bgt.n	1a005dbc <__multadd+0x10>
1a005de4:	b13b      	cbz	r3, 1a005df6 <__multadd+0x4a>
1a005de6:	68aa      	ldr	r2, [r5, #8]
1a005de8:	4294      	cmp	r4, r2
1a005dea:	da07      	bge.n	1a005dfc <__multadd+0x50>
1a005dec:	eb05 0284 	add.w	r2, r5, r4, lsl #2
1a005df0:	3401      	adds	r4, #1
1a005df2:	6153      	str	r3, [r2, #20]
1a005df4:	612c      	str	r4, [r5, #16]
1a005df6:	4628      	mov	r0, r5
1a005df8:	b003      	add	sp, #12
1a005dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005dfc:	6869      	ldr	r1, [r5, #4]
1a005dfe:	9301      	str	r3, [sp, #4]
1a005e00:	3101      	adds	r1, #1
1a005e02:	4630      	mov	r0, r6
1a005e04:	f7ff ffa2 	bl	1a005d4c <_Balloc>
1a005e08:	692a      	ldr	r2, [r5, #16]
1a005e0a:	3202      	adds	r2, #2
1a005e0c:	f105 010c 	add.w	r1, r5, #12
1a005e10:	4607      	mov	r7, r0
1a005e12:	0092      	lsls	r2, r2, #2
1a005e14:	300c      	adds	r0, #12
1a005e16:	f7fc fbed 	bl	1a0025f4 <memcpy>
1a005e1a:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
1a005e1c:	6869      	ldr	r1, [r5, #4]
1a005e1e:	9b01      	ldr	r3, [sp, #4]
1a005e20:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
1a005e24:	6028      	str	r0, [r5, #0]
1a005e26:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
1a005e2a:	463d      	mov	r5, r7
1a005e2c:	e7de      	b.n	1a005dec <__multadd+0x40>
1a005e2e:	bf00      	nop

1a005e30 <__hi0bits>:
1a005e30:	0c03      	lsrs	r3, r0, #16
1a005e32:	041b      	lsls	r3, r3, #16
1a005e34:	b9b3      	cbnz	r3, 1a005e64 <__hi0bits+0x34>
1a005e36:	0400      	lsls	r0, r0, #16
1a005e38:	2310      	movs	r3, #16
1a005e3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
1a005e3e:	bf04      	itt	eq
1a005e40:	0200      	lsleq	r0, r0, #8
1a005e42:	3308      	addeq	r3, #8
1a005e44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
1a005e48:	bf04      	itt	eq
1a005e4a:	0100      	lsleq	r0, r0, #4
1a005e4c:	3304      	addeq	r3, #4
1a005e4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
1a005e52:	bf04      	itt	eq
1a005e54:	0080      	lsleq	r0, r0, #2
1a005e56:	3302      	addeq	r3, #2
1a005e58:	2800      	cmp	r0, #0
1a005e5a:	db07      	blt.n	1a005e6c <__hi0bits+0x3c>
1a005e5c:	0042      	lsls	r2, r0, #1
1a005e5e:	d403      	bmi.n	1a005e68 <__hi0bits+0x38>
1a005e60:	2020      	movs	r0, #32
1a005e62:	4770      	bx	lr
1a005e64:	2300      	movs	r3, #0
1a005e66:	e7e8      	b.n	1a005e3a <__hi0bits+0xa>
1a005e68:	1c58      	adds	r0, r3, #1
1a005e6a:	4770      	bx	lr
1a005e6c:	4618      	mov	r0, r3
1a005e6e:	4770      	bx	lr

1a005e70 <__lo0bits>:
1a005e70:	6803      	ldr	r3, [r0, #0]
1a005e72:	f013 0207 	ands.w	r2, r3, #7
1a005e76:	d007      	beq.n	1a005e88 <__lo0bits+0x18>
1a005e78:	07d9      	lsls	r1, r3, #31
1a005e7a:	d420      	bmi.n	1a005ebe <__lo0bits+0x4e>
1a005e7c:	079a      	lsls	r2, r3, #30
1a005e7e:	d420      	bmi.n	1a005ec2 <__lo0bits+0x52>
1a005e80:	089b      	lsrs	r3, r3, #2
1a005e82:	6003      	str	r3, [r0, #0]
1a005e84:	2002      	movs	r0, #2
1a005e86:	4770      	bx	lr
1a005e88:	b299      	uxth	r1, r3
1a005e8a:	b909      	cbnz	r1, 1a005e90 <__lo0bits+0x20>
1a005e8c:	0c1b      	lsrs	r3, r3, #16
1a005e8e:	2210      	movs	r2, #16
1a005e90:	f013 0fff 	tst.w	r3, #255	; 0xff
1a005e94:	bf04      	itt	eq
1a005e96:	0a1b      	lsreq	r3, r3, #8
1a005e98:	3208      	addeq	r2, #8
1a005e9a:	0719      	lsls	r1, r3, #28
1a005e9c:	bf04      	itt	eq
1a005e9e:	091b      	lsreq	r3, r3, #4
1a005ea0:	3204      	addeq	r2, #4
1a005ea2:	0799      	lsls	r1, r3, #30
1a005ea4:	bf04      	itt	eq
1a005ea6:	089b      	lsreq	r3, r3, #2
1a005ea8:	3202      	addeq	r2, #2
1a005eaa:	07d9      	lsls	r1, r3, #31
1a005eac:	d404      	bmi.n	1a005eb8 <__lo0bits+0x48>
1a005eae:	085b      	lsrs	r3, r3, #1
1a005eb0:	d101      	bne.n	1a005eb6 <__lo0bits+0x46>
1a005eb2:	2020      	movs	r0, #32
1a005eb4:	4770      	bx	lr
1a005eb6:	3201      	adds	r2, #1
1a005eb8:	6003      	str	r3, [r0, #0]
1a005eba:	4610      	mov	r0, r2
1a005ebc:	4770      	bx	lr
1a005ebe:	2000      	movs	r0, #0
1a005ec0:	4770      	bx	lr
1a005ec2:	085b      	lsrs	r3, r3, #1
1a005ec4:	6003      	str	r3, [r0, #0]
1a005ec6:	2001      	movs	r0, #1
1a005ec8:	4770      	bx	lr
1a005eca:	bf00      	nop

1a005ecc <__i2b>:
1a005ecc:	b510      	push	{r4, lr}
1a005ece:	460c      	mov	r4, r1
1a005ed0:	2101      	movs	r1, #1
1a005ed2:	f7ff ff3b 	bl	1a005d4c <_Balloc>
1a005ed6:	2201      	movs	r2, #1
1a005ed8:	6144      	str	r4, [r0, #20]
1a005eda:	6102      	str	r2, [r0, #16]
1a005edc:	bd10      	pop	{r4, pc}
1a005ede:	bf00      	nop

1a005ee0 <__multiply>:
1a005ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a005ee4:	690f      	ldr	r7, [r1, #16]
1a005ee6:	6916      	ldr	r6, [r2, #16]
1a005ee8:	42b7      	cmp	r7, r6
1a005eea:	b083      	sub	sp, #12
1a005eec:	460d      	mov	r5, r1
1a005eee:	4614      	mov	r4, r2
1a005ef0:	f2c0 808d 	blt.w	1a00600e <__multiply+0x12e>
1a005ef4:	4633      	mov	r3, r6
1a005ef6:	463e      	mov	r6, r7
1a005ef8:	461f      	mov	r7, r3
1a005efa:	68ab      	ldr	r3, [r5, #8]
1a005efc:	6869      	ldr	r1, [r5, #4]
1a005efe:	eb06 0807 	add.w	r8, r6, r7
1a005f02:	4598      	cmp	r8, r3
1a005f04:	bfc8      	it	gt
1a005f06:	3101      	addgt	r1, #1
1a005f08:	f7ff ff20 	bl	1a005d4c <_Balloc>
1a005f0c:	f100 0c14 	add.w	ip, r0, #20
1a005f10:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
1a005f14:	45cc      	cmp	ip, r9
1a005f16:	9000      	str	r0, [sp, #0]
1a005f18:	d205      	bcs.n	1a005f26 <__multiply+0x46>
1a005f1a:	4663      	mov	r3, ip
1a005f1c:	2100      	movs	r1, #0
1a005f1e:	f843 1b04 	str.w	r1, [r3], #4
1a005f22:	4599      	cmp	r9, r3
1a005f24:	d8fb      	bhi.n	1a005f1e <__multiply+0x3e>
1a005f26:	f104 0214 	add.w	r2, r4, #20
1a005f2a:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
1a005f2e:	f105 0314 	add.w	r3, r5, #20
1a005f32:	4552      	cmp	r2, sl
1a005f34:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
1a005f38:	d254      	bcs.n	1a005fe4 <__multiply+0x104>
1a005f3a:	f8cd 9004 	str.w	r9, [sp, #4]
1a005f3e:	4699      	mov	r9, r3
1a005f40:	f852 3b04 	ldr.w	r3, [r2], #4
1a005f44:	fa1f fb83 	uxth.w	fp, r3
1a005f48:	f1bb 0f00 	cmp.w	fp, #0
1a005f4c:	d020      	beq.n	1a005f90 <__multiply+0xb0>
1a005f4e:	2000      	movs	r0, #0
1a005f50:	464f      	mov	r7, r9
1a005f52:	4666      	mov	r6, ip
1a005f54:	4605      	mov	r5, r0
1a005f56:	e000      	b.n	1a005f5a <__multiply+0x7a>
1a005f58:	461e      	mov	r6, r3
1a005f5a:	f857 4b04 	ldr.w	r4, [r7], #4
1a005f5e:	6830      	ldr	r0, [r6, #0]
1a005f60:	b2a1      	uxth	r1, r4
1a005f62:	b283      	uxth	r3, r0
1a005f64:	fb0b 3101 	mla	r1, fp, r1, r3
1a005f68:	0c24      	lsrs	r4, r4, #16
1a005f6a:	0c00      	lsrs	r0, r0, #16
1a005f6c:	194b      	adds	r3, r1, r5
1a005f6e:	fb0b 0004 	mla	r0, fp, r4, r0
1a005f72:	eb00 4013 	add.w	r0, r0, r3, lsr #16
1a005f76:	b299      	uxth	r1, r3
1a005f78:	4633      	mov	r3, r6
1a005f7a:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a005f7e:	45be      	cmp	lr, r7
1a005f80:	ea4f 4510 	mov.w	r5, r0, lsr #16
1a005f84:	f843 1b04 	str.w	r1, [r3], #4
1a005f88:	d8e6      	bhi.n	1a005f58 <__multiply+0x78>
1a005f8a:	6075      	str	r5, [r6, #4]
1a005f8c:	f852 3c04 	ldr.w	r3, [r2, #-4]
1a005f90:	ea5f 4b13 	movs.w	fp, r3, lsr #16
1a005f94:	d020      	beq.n	1a005fd8 <__multiply+0xf8>
1a005f96:	f8dc 3000 	ldr.w	r3, [ip]
1a005f9a:	4667      	mov	r7, ip
1a005f9c:	4618      	mov	r0, r3
1a005f9e:	464d      	mov	r5, r9
1a005fa0:	2100      	movs	r1, #0
1a005fa2:	e000      	b.n	1a005fa6 <__multiply+0xc6>
1a005fa4:	4637      	mov	r7, r6
1a005fa6:	882c      	ldrh	r4, [r5, #0]
1a005fa8:	0c00      	lsrs	r0, r0, #16
1a005faa:	fb0b 0004 	mla	r0, fp, r4, r0
1a005fae:	4401      	add	r1, r0
1a005fb0:	b29c      	uxth	r4, r3
1a005fb2:	463e      	mov	r6, r7
1a005fb4:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
1a005fb8:	f846 3b04 	str.w	r3, [r6], #4
1a005fbc:	6878      	ldr	r0, [r7, #4]
1a005fbe:	f855 4b04 	ldr.w	r4, [r5], #4
1a005fc2:	b283      	uxth	r3, r0
1a005fc4:	0c24      	lsrs	r4, r4, #16
1a005fc6:	fb0b 3404 	mla	r4, fp, r4, r3
1a005fca:	eb04 4311 	add.w	r3, r4, r1, lsr #16
1a005fce:	45ae      	cmp	lr, r5
1a005fd0:	ea4f 4113 	mov.w	r1, r3, lsr #16
1a005fd4:	d8e6      	bhi.n	1a005fa4 <__multiply+0xc4>
1a005fd6:	607b      	str	r3, [r7, #4]
1a005fd8:	4592      	cmp	sl, r2
1a005fda:	f10c 0c04 	add.w	ip, ip, #4
1a005fde:	d8af      	bhi.n	1a005f40 <__multiply+0x60>
1a005fe0:	f8dd 9004 	ldr.w	r9, [sp, #4]
1a005fe4:	f1b8 0f00 	cmp.w	r8, #0
1a005fe8:	dd0b      	ble.n	1a006002 <__multiply+0x122>
1a005fea:	f859 3c04 	ldr.w	r3, [r9, #-4]
1a005fee:	f1a9 0904 	sub.w	r9, r9, #4
1a005ff2:	b11b      	cbz	r3, 1a005ffc <__multiply+0x11c>
1a005ff4:	e005      	b.n	1a006002 <__multiply+0x122>
1a005ff6:	f859 3d04 	ldr.w	r3, [r9, #-4]!
1a005ffa:	b913      	cbnz	r3, 1a006002 <__multiply+0x122>
1a005ffc:	f1b8 0801 	subs.w	r8, r8, #1
1a006000:	d1f9      	bne.n	1a005ff6 <__multiply+0x116>
1a006002:	9800      	ldr	r0, [sp, #0]
1a006004:	f8c0 8010 	str.w	r8, [r0, #16]
1a006008:	b003      	add	sp, #12
1a00600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00600e:	4615      	mov	r5, r2
1a006010:	460c      	mov	r4, r1
1a006012:	e772      	b.n	1a005efa <__multiply+0x1a>

1a006014 <__pow5mult>:
1a006014:	f012 0303 	ands.w	r3, r2, #3
1a006018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00601c:	4614      	mov	r4, r2
1a00601e:	4607      	mov	r7, r0
1a006020:	460e      	mov	r6, r1
1a006022:	d12d      	bne.n	1a006080 <__pow5mult+0x6c>
1a006024:	10a4      	asrs	r4, r4, #2
1a006026:	d01c      	beq.n	1a006062 <__pow5mult+0x4e>
1a006028:	6cbd      	ldr	r5, [r7, #72]	; 0x48
1a00602a:	b395      	cbz	r5, 1a006092 <__pow5mult+0x7e>
1a00602c:	07e3      	lsls	r3, r4, #31
1a00602e:	f04f 0800 	mov.w	r8, #0
1a006032:	d406      	bmi.n	1a006042 <__pow5mult+0x2e>
1a006034:	1064      	asrs	r4, r4, #1
1a006036:	d014      	beq.n	1a006062 <__pow5mult+0x4e>
1a006038:	6828      	ldr	r0, [r5, #0]
1a00603a:	b1a8      	cbz	r0, 1a006068 <__pow5mult+0x54>
1a00603c:	4605      	mov	r5, r0
1a00603e:	07e3      	lsls	r3, r4, #31
1a006040:	d5f8      	bpl.n	1a006034 <__pow5mult+0x20>
1a006042:	4638      	mov	r0, r7
1a006044:	4631      	mov	r1, r6
1a006046:	462a      	mov	r2, r5
1a006048:	f7ff ff4a 	bl	1a005ee0 <__multiply>
1a00604c:	b1b6      	cbz	r6, 1a00607c <__pow5mult+0x68>
1a00604e:	6872      	ldr	r2, [r6, #4]
1a006050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
1a006052:	1064      	asrs	r4, r4, #1
1a006054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006058:	6031      	str	r1, [r6, #0]
1a00605a:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00605e:	4606      	mov	r6, r0
1a006060:	d1ea      	bne.n	1a006038 <__pow5mult+0x24>
1a006062:	4630      	mov	r0, r6
1a006064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006068:	4629      	mov	r1, r5
1a00606a:	462a      	mov	r2, r5
1a00606c:	4638      	mov	r0, r7
1a00606e:	f7ff ff37 	bl	1a005ee0 <__multiply>
1a006072:	6028      	str	r0, [r5, #0]
1a006074:	f8c0 8000 	str.w	r8, [r0]
1a006078:	4605      	mov	r5, r0
1a00607a:	e7e0      	b.n	1a00603e <__pow5mult+0x2a>
1a00607c:	4606      	mov	r6, r0
1a00607e:	e7d9      	b.n	1a006034 <__pow5mult+0x20>
1a006080:	1e5a      	subs	r2, r3, #1
1a006082:	4d0b      	ldr	r5, [pc, #44]	; (1a0060b0 <__pow5mult+0x9c>)
1a006084:	2300      	movs	r3, #0
1a006086:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
1a00608a:	f7ff fe8f 	bl	1a005dac <__multadd>
1a00608e:	4606      	mov	r6, r0
1a006090:	e7c8      	b.n	1a006024 <__pow5mult+0x10>
1a006092:	2101      	movs	r1, #1
1a006094:	4638      	mov	r0, r7
1a006096:	f7ff fe59 	bl	1a005d4c <_Balloc>
1a00609a:	f240 2171 	movw	r1, #625	; 0x271
1a00609e:	2201      	movs	r2, #1
1a0060a0:	2300      	movs	r3, #0
1a0060a2:	6141      	str	r1, [r0, #20]
1a0060a4:	6102      	str	r2, [r0, #16]
1a0060a6:	4605      	mov	r5, r0
1a0060a8:	64b8      	str	r0, [r7, #72]	; 0x48
1a0060aa:	6003      	str	r3, [r0, #0]
1a0060ac:	e7be      	b.n	1a00602c <__pow5mult+0x18>
1a0060ae:	bf00      	nop
1a0060b0:	1a007108 	.word	0x1a007108

1a0060b4 <__lshift>:
1a0060b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0060b8:	690f      	ldr	r7, [r1, #16]
1a0060ba:	688b      	ldr	r3, [r1, #8]
1a0060bc:	ea4f 1962 	mov.w	r9, r2, asr #5
1a0060c0:	444f      	add	r7, r9
1a0060c2:	1c7d      	adds	r5, r7, #1
1a0060c4:	429d      	cmp	r5, r3
1a0060c6:	460e      	mov	r6, r1
1a0060c8:	4614      	mov	r4, r2
1a0060ca:	6849      	ldr	r1, [r1, #4]
1a0060cc:	4680      	mov	r8, r0
1a0060ce:	dd04      	ble.n	1a0060da <__lshift+0x26>
1a0060d0:	005b      	lsls	r3, r3, #1
1a0060d2:	429d      	cmp	r5, r3
1a0060d4:	f101 0101 	add.w	r1, r1, #1
1a0060d8:	dcfa      	bgt.n	1a0060d0 <__lshift+0x1c>
1a0060da:	4640      	mov	r0, r8
1a0060dc:	f7ff fe36 	bl	1a005d4c <_Balloc>
1a0060e0:	f1b9 0f00 	cmp.w	r9, #0
1a0060e4:	f100 0114 	add.w	r1, r0, #20
1a0060e8:	dd09      	ble.n	1a0060fe <__lshift+0x4a>
1a0060ea:	2300      	movs	r3, #0
1a0060ec:	469e      	mov	lr, r3
1a0060ee:	460a      	mov	r2, r1
1a0060f0:	3301      	adds	r3, #1
1a0060f2:	454b      	cmp	r3, r9
1a0060f4:	f842 eb04 	str.w	lr, [r2], #4
1a0060f8:	d1fa      	bne.n	1a0060f0 <__lshift+0x3c>
1a0060fa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
1a0060fe:	6932      	ldr	r2, [r6, #16]
1a006100:	f106 0314 	add.w	r3, r6, #20
1a006104:	f014 0c1f 	ands.w	ip, r4, #31
1a006108:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
1a00610c:	d01f      	beq.n	1a00614e <__lshift+0x9a>
1a00610e:	f1cc 0920 	rsb	r9, ip, #32
1a006112:	2200      	movs	r2, #0
1a006114:	681c      	ldr	r4, [r3, #0]
1a006116:	fa04 f40c 	lsl.w	r4, r4, ip
1a00611a:	4314      	orrs	r4, r2
1a00611c:	468a      	mov	sl, r1
1a00611e:	f841 4b04 	str.w	r4, [r1], #4
1a006122:	f853 4b04 	ldr.w	r4, [r3], #4
1a006126:	459e      	cmp	lr, r3
1a006128:	fa24 f209 	lsr.w	r2, r4, r9
1a00612c:	d8f2      	bhi.n	1a006114 <__lshift+0x60>
1a00612e:	f8ca 2004 	str.w	r2, [sl, #4]
1a006132:	b102      	cbz	r2, 1a006136 <__lshift+0x82>
1a006134:	1cbd      	adds	r5, r7, #2
1a006136:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
1a00613a:	6872      	ldr	r2, [r6, #4]
1a00613c:	3d01      	subs	r5, #1
1a00613e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
1a006142:	6105      	str	r5, [r0, #16]
1a006144:	6031      	str	r1, [r6, #0]
1a006146:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
1a00614a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00614e:	3904      	subs	r1, #4
1a006150:	f853 2b04 	ldr.w	r2, [r3], #4
1a006154:	f841 2f04 	str.w	r2, [r1, #4]!
1a006158:	459e      	cmp	lr, r3
1a00615a:	d8f9      	bhi.n	1a006150 <__lshift+0x9c>
1a00615c:	e7eb      	b.n	1a006136 <__lshift+0x82>
1a00615e:	bf00      	nop

1a006160 <__mcmp>:
1a006160:	6902      	ldr	r2, [r0, #16]
1a006162:	690b      	ldr	r3, [r1, #16]
1a006164:	1ad2      	subs	r2, r2, r3
1a006166:	d113      	bne.n	1a006190 <__mcmp+0x30>
1a006168:	009b      	lsls	r3, r3, #2
1a00616a:	3014      	adds	r0, #20
1a00616c:	3114      	adds	r1, #20
1a00616e:	4419      	add	r1, r3
1a006170:	b410      	push	{r4}
1a006172:	4403      	add	r3, r0
1a006174:	e001      	b.n	1a00617a <__mcmp+0x1a>
1a006176:	4298      	cmp	r0, r3
1a006178:	d20c      	bcs.n	1a006194 <__mcmp+0x34>
1a00617a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
1a00617e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
1a006182:	4294      	cmp	r4, r2
1a006184:	d0f7      	beq.n	1a006176 <__mcmp+0x16>
1a006186:	d309      	bcc.n	1a00619c <__mcmp+0x3c>
1a006188:	2001      	movs	r0, #1
1a00618a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00618e:	4770      	bx	lr
1a006190:	4610      	mov	r0, r2
1a006192:	4770      	bx	lr
1a006194:	2000      	movs	r0, #0
1a006196:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00619a:	4770      	bx	lr
1a00619c:	f04f 30ff 	mov.w	r0, #4294967295
1a0061a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0061a4:	4770      	bx	lr
1a0061a6:	bf00      	nop

1a0061a8 <__mdiff>:
1a0061a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0061ac:	460e      	mov	r6, r1
1a0061ae:	4605      	mov	r5, r0
1a0061b0:	4611      	mov	r1, r2
1a0061b2:	4630      	mov	r0, r6
1a0061b4:	4614      	mov	r4, r2
1a0061b6:	f7ff ffd3 	bl	1a006160 <__mcmp>
1a0061ba:	1e07      	subs	r7, r0, #0
1a0061bc:	d054      	beq.n	1a006268 <__mdiff+0xc0>
1a0061be:	db4d      	blt.n	1a00625c <__mdiff+0xb4>
1a0061c0:	f04f 0800 	mov.w	r8, #0
1a0061c4:	6871      	ldr	r1, [r6, #4]
1a0061c6:	4628      	mov	r0, r5
1a0061c8:	f7ff fdc0 	bl	1a005d4c <_Balloc>
1a0061cc:	6937      	ldr	r7, [r6, #16]
1a0061ce:	6923      	ldr	r3, [r4, #16]
1a0061d0:	f8c0 800c 	str.w	r8, [r0, #12]
1a0061d4:	3614      	adds	r6, #20
1a0061d6:	f104 0214 	add.w	r2, r4, #20
1a0061da:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
1a0061de:	f100 0514 	add.w	r5, r0, #20
1a0061e2:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
1a0061e6:	2300      	movs	r3, #0
1a0061e8:	f856 8b04 	ldr.w	r8, [r6], #4
1a0061ec:	f852 4b04 	ldr.w	r4, [r2], #4
1a0061f0:	fa13 f388 	uxtah	r3, r3, r8
1a0061f4:	b2a1      	uxth	r1, r4
1a0061f6:	0c24      	lsrs	r4, r4, #16
1a0061f8:	1a59      	subs	r1, r3, r1
1a0061fa:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
1a0061fe:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a006202:	b289      	uxth	r1, r1
1a006204:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006208:	4594      	cmp	ip, r2
1a00620a:	f845 1b04 	str.w	r1, [r5], #4
1a00620e:	ea4f 4323 	mov.w	r3, r3, asr #16
1a006212:	4634      	mov	r4, r6
1a006214:	d8e8      	bhi.n	1a0061e8 <__mdiff+0x40>
1a006216:	45b6      	cmp	lr, r6
1a006218:	46ac      	mov	ip, r5
1a00621a:	d915      	bls.n	1a006248 <__mdiff+0xa0>
1a00621c:	f854 2b04 	ldr.w	r2, [r4], #4
1a006220:	fa13 f182 	uxtah	r1, r3, r2
1a006224:	0c13      	lsrs	r3, r2, #16
1a006226:	eb03 4321 	add.w	r3, r3, r1, asr #16
1a00622a:	b289      	uxth	r1, r1
1a00622c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006230:	45a6      	cmp	lr, r4
1a006232:	f845 1b04 	str.w	r1, [r5], #4
1a006236:	ea4f 4323 	mov.w	r3, r3, asr #16
1a00623a:	d8ef      	bhi.n	1a00621c <__mdiff+0x74>
1a00623c:	43f6      	mvns	r6, r6
1a00623e:	4476      	add	r6, lr
1a006240:	f026 0503 	bic.w	r5, r6, #3
1a006244:	3504      	adds	r5, #4
1a006246:	4465      	add	r5, ip
1a006248:	3d04      	subs	r5, #4
1a00624a:	b921      	cbnz	r1, 1a006256 <__mdiff+0xae>
1a00624c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
1a006250:	3f01      	subs	r7, #1
1a006252:	2b00      	cmp	r3, #0
1a006254:	d0fa      	beq.n	1a00624c <__mdiff+0xa4>
1a006256:	6107      	str	r7, [r0, #16]
1a006258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00625c:	4633      	mov	r3, r6
1a00625e:	f04f 0801 	mov.w	r8, #1
1a006262:	4626      	mov	r6, r4
1a006264:	461c      	mov	r4, r3
1a006266:	e7ad      	b.n	1a0061c4 <__mdiff+0x1c>
1a006268:	4628      	mov	r0, r5
1a00626a:	4639      	mov	r1, r7
1a00626c:	f7ff fd6e 	bl	1a005d4c <_Balloc>
1a006270:	2301      	movs	r3, #1
1a006272:	6147      	str	r7, [r0, #20]
1a006274:	6103      	str	r3, [r0, #16]
1a006276:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00627a:	bf00      	nop

1a00627c <__d2b>:
1a00627c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a006280:	ec57 6b10 	vmov	r6, r7, d0
1a006284:	b083      	sub	sp, #12
1a006286:	4688      	mov	r8, r1
1a006288:	2101      	movs	r1, #1
1a00628a:	463c      	mov	r4, r7
1a00628c:	f3c7 550a 	ubfx	r5, r7, #20, #11
1a006290:	4617      	mov	r7, r2
1a006292:	f7ff fd5b 	bl	1a005d4c <_Balloc>
1a006296:	f3c4 0413 	ubfx	r4, r4, #0, #20
1a00629a:	4681      	mov	r9, r0
1a00629c:	b10d      	cbz	r5, 1a0062a2 <__d2b+0x26>
1a00629e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
1a0062a2:	9401      	str	r4, [sp, #4]
1a0062a4:	b31e      	cbz	r6, 1a0062ee <__d2b+0x72>
1a0062a6:	a802      	add	r0, sp, #8
1a0062a8:	f840 6d08 	str.w	r6, [r0, #-8]!
1a0062ac:	f7ff fde0 	bl	1a005e70 <__lo0bits>
1a0062b0:	2800      	cmp	r0, #0
1a0062b2:	d134      	bne.n	1a00631e <__d2b+0xa2>
1a0062b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a0062b8:	f8c9 2014 	str.w	r2, [r9, #20]
1a0062bc:	2b00      	cmp	r3, #0
1a0062be:	bf14      	ite	ne
1a0062c0:	2402      	movne	r4, #2
1a0062c2:	2401      	moveq	r4, #1
1a0062c4:	f8c9 3018 	str.w	r3, [r9, #24]
1a0062c8:	f8c9 4010 	str.w	r4, [r9, #16]
1a0062cc:	b9dd      	cbnz	r5, 1a006306 <__d2b+0x8a>
1a0062ce:	eb09 0384 	add.w	r3, r9, r4, lsl #2
1a0062d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
1a0062d6:	f8c8 0000 	str.w	r0, [r8]
1a0062da:	6918      	ldr	r0, [r3, #16]
1a0062dc:	f7ff fda8 	bl	1a005e30 <__hi0bits>
1a0062e0:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
1a0062e4:	6038      	str	r0, [r7, #0]
1a0062e6:	4648      	mov	r0, r9
1a0062e8:	b003      	add	sp, #12
1a0062ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0062ee:	a801      	add	r0, sp, #4
1a0062f0:	f7ff fdbe 	bl	1a005e70 <__lo0bits>
1a0062f4:	2401      	movs	r4, #1
1a0062f6:	9b01      	ldr	r3, [sp, #4]
1a0062f8:	f8c9 3014 	str.w	r3, [r9, #20]
1a0062fc:	3020      	adds	r0, #32
1a0062fe:	f8c9 4010 	str.w	r4, [r9, #16]
1a006302:	2d00      	cmp	r5, #0
1a006304:	d0e3      	beq.n	1a0062ce <__d2b+0x52>
1a006306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
1a00630a:	4405      	add	r5, r0
1a00630c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
1a006310:	f8c8 5000 	str.w	r5, [r8]
1a006314:	6038      	str	r0, [r7, #0]
1a006316:	4648      	mov	r0, r9
1a006318:	b003      	add	sp, #12
1a00631a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00631e:	e89d 000c 	ldmia.w	sp, {r2, r3}
1a006322:	f1c0 0120 	rsb	r1, r0, #32
1a006326:	fa03 f101 	lsl.w	r1, r3, r1
1a00632a:	430a      	orrs	r2, r1
1a00632c:	40c3      	lsrs	r3, r0
1a00632e:	9301      	str	r3, [sp, #4]
1a006330:	f8c9 2014 	str.w	r2, [r9, #20]
1a006334:	e7c2      	b.n	1a0062bc <__d2b+0x40>
1a006336:	bf00      	nop

1a006338 <_realloc_r>:
1a006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00633c:	4617      	mov	r7, r2
1a00633e:	b083      	sub	sp, #12
1a006340:	460e      	mov	r6, r1
1a006342:	2900      	cmp	r1, #0
1a006344:	f000 80e7 	beq.w	1a006516 <_realloc_r+0x1de>
1a006348:	4681      	mov	r9, r0
1a00634a:	f107 050b 	add.w	r5, r7, #11
1a00634e:	f7ff fcf9 	bl	1a005d44 <__malloc_lock>
1a006352:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a006356:	2d16      	cmp	r5, #22
1a006358:	f023 0403 	bic.w	r4, r3, #3
1a00635c:	f1a6 0808 	sub.w	r8, r6, #8
1a006360:	d84c      	bhi.n	1a0063fc <_realloc_r+0xc4>
1a006362:	2210      	movs	r2, #16
1a006364:	4615      	mov	r5, r2
1a006366:	42af      	cmp	r7, r5
1a006368:	d84d      	bhi.n	1a006406 <_realloc_r+0xce>
1a00636a:	4294      	cmp	r4, r2
1a00636c:	f280 8084 	bge.w	1a006478 <_realloc_r+0x140>
1a006370:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 1a006720 <_realloc_r+0x3e8>
1a006374:	f8db 0008 	ldr.w	r0, [fp, #8]
1a006378:	eb08 0104 	add.w	r1, r8, r4
1a00637c:	4288      	cmp	r0, r1
1a00637e:	f000 80d6 	beq.w	1a00652e <_realloc_r+0x1f6>
1a006382:	6848      	ldr	r0, [r1, #4]
1a006384:	f020 0e01 	bic.w	lr, r0, #1
1a006388:	448e      	add	lr, r1
1a00638a:	f8de e004 	ldr.w	lr, [lr, #4]
1a00638e:	f01e 0f01 	tst.w	lr, #1
1a006392:	d13f      	bne.n	1a006414 <_realloc_r+0xdc>
1a006394:	f020 0003 	bic.w	r0, r0, #3
1a006398:	4420      	add	r0, r4
1a00639a:	4290      	cmp	r0, r2
1a00639c:	f280 80c1 	bge.w	1a006522 <_realloc_r+0x1ea>
1a0063a0:	07db      	lsls	r3, r3, #31
1a0063a2:	f100 808f 	bmi.w	1a0064c4 <_realloc_r+0x18c>
1a0063a6:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a0063aa:	ebc3 0a08 	rsb	sl, r3, r8
1a0063ae:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0063b2:	f023 0303 	bic.w	r3, r3, #3
1a0063b6:	eb00 0e03 	add.w	lr, r0, r3
1a0063ba:	4596      	cmp	lr, r2
1a0063bc:	db34      	blt.n	1a006428 <_realloc_r+0xf0>
1a0063be:	68cb      	ldr	r3, [r1, #12]
1a0063c0:	688a      	ldr	r2, [r1, #8]
1a0063c2:	4657      	mov	r7, sl
1a0063c4:	60d3      	str	r3, [r2, #12]
1a0063c6:	609a      	str	r2, [r3, #8]
1a0063c8:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a0063cc:	f8da 300c 	ldr.w	r3, [sl, #12]
1a0063d0:	60cb      	str	r3, [r1, #12]
1a0063d2:	1f22      	subs	r2, r4, #4
1a0063d4:	2a24      	cmp	r2, #36	; 0x24
1a0063d6:	6099      	str	r1, [r3, #8]
1a0063d8:	f200 8136 	bhi.w	1a006648 <_realloc_r+0x310>
1a0063dc:	2a13      	cmp	r2, #19
1a0063de:	f240 80fd 	bls.w	1a0065dc <_realloc_r+0x2a4>
1a0063e2:	6833      	ldr	r3, [r6, #0]
1a0063e4:	f8ca 3008 	str.w	r3, [sl, #8]
1a0063e8:	6873      	ldr	r3, [r6, #4]
1a0063ea:	f8ca 300c 	str.w	r3, [sl, #12]
1a0063ee:	2a1b      	cmp	r2, #27
1a0063f0:	f200 8140 	bhi.w	1a006674 <_realloc_r+0x33c>
1a0063f4:	3608      	adds	r6, #8
1a0063f6:	f10a 0310 	add.w	r3, sl, #16
1a0063fa:	e0f0      	b.n	1a0065de <_realloc_r+0x2a6>
1a0063fc:	f025 0507 	bic.w	r5, r5, #7
1a006400:	2d00      	cmp	r5, #0
1a006402:	462a      	mov	r2, r5
1a006404:	daaf      	bge.n	1a006366 <_realloc_r+0x2e>
1a006406:	230c      	movs	r3, #12
1a006408:	2000      	movs	r0, #0
1a00640a:	f8c9 3000 	str.w	r3, [r9]
1a00640e:	b003      	add	sp, #12
1a006410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006414:	07d9      	lsls	r1, r3, #31
1a006416:	d455      	bmi.n	1a0064c4 <_realloc_r+0x18c>
1a006418:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a00641c:	ebc3 0a08 	rsb	sl, r3, r8
1a006420:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006424:	f023 0303 	bic.w	r3, r3, #3
1a006428:	4423      	add	r3, r4
1a00642a:	4293      	cmp	r3, r2
1a00642c:	db4a      	blt.n	1a0064c4 <_realloc_r+0x18c>
1a00642e:	4657      	mov	r7, sl
1a006430:	f8da 100c 	ldr.w	r1, [sl, #12]
1a006434:	f857 0f08 	ldr.w	r0, [r7, #8]!
1a006438:	1f22      	subs	r2, r4, #4
1a00643a:	2a24      	cmp	r2, #36	; 0x24
1a00643c:	60c1      	str	r1, [r0, #12]
1a00643e:	6088      	str	r0, [r1, #8]
1a006440:	f200 810e 	bhi.w	1a006660 <_realloc_r+0x328>
1a006444:	2a13      	cmp	r2, #19
1a006446:	f240 8109 	bls.w	1a00665c <_realloc_r+0x324>
1a00644a:	6831      	ldr	r1, [r6, #0]
1a00644c:	f8ca 1008 	str.w	r1, [sl, #8]
1a006450:	6871      	ldr	r1, [r6, #4]
1a006452:	f8ca 100c 	str.w	r1, [sl, #12]
1a006456:	2a1b      	cmp	r2, #27
1a006458:	f200 8121 	bhi.w	1a00669e <_realloc_r+0x366>
1a00645c:	3608      	adds	r6, #8
1a00645e:	f10a 0210 	add.w	r2, sl, #16
1a006462:	6831      	ldr	r1, [r6, #0]
1a006464:	6011      	str	r1, [r2, #0]
1a006466:	6871      	ldr	r1, [r6, #4]
1a006468:	6051      	str	r1, [r2, #4]
1a00646a:	68b1      	ldr	r1, [r6, #8]
1a00646c:	6091      	str	r1, [r2, #8]
1a00646e:	461c      	mov	r4, r3
1a006470:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006474:	463e      	mov	r6, r7
1a006476:	46d0      	mov	r8, sl
1a006478:	1b62      	subs	r2, r4, r5
1a00647a:	2a0f      	cmp	r2, #15
1a00647c:	f003 0301 	and.w	r3, r3, #1
1a006480:	d80e      	bhi.n	1a0064a0 <_realloc_r+0x168>
1a006482:	4323      	orrs	r3, r4
1a006484:	4444      	add	r4, r8
1a006486:	f8c8 3004 	str.w	r3, [r8, #4]
1a00648a:	6863      	ldr	r3, [r4, #4]
1a00648c:	f043 0301 	orr.w	r3, r3, #1
1a006490:	6063      	str	r3, [r4, #4]
1a006492:	4648      	mov	r0, r9
1a006494:	f7ff fc58 	bl	1a005d48 <__malloc_unlock>
1a006498:	4630      	mov	r0, r6
1a00649a:	b003      	add	sp, #12
1a00649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0064a0:	eb08 0105 	add.w	r1, r8, r5
1a0064a4:	431d      	orrs	r5, r3
1a0064a6:	f042 0301 	orr.w	r3, r2, #1
1a0064aa:	440a      	add	r2, r1
1a0064ac:	f8c8 5004 	str.w	r5, [r8, #4]
1a0064b0:	604b      	str	r3, [r1, #4]
1a0064b2:	6853      	ldr	r3, [r2, #4]
1a0064b4:	f043 0301 	orr.w	r3, r3, #1
1a0064b8:	3108      	adds	r1, #8
1a0064ba:	6053      	str	r3, [r2, #4]
1a0064bc:	4648      	mov	r0, r9
1a0064be:	f7fe fdf5 	bl	1a0050ac <_free_r>
1a0064c2:	e7e6      	b.n	1a006492 <_realloc_r+0x15a>
1a0064c4:	4639      	mov	r1, r7
1a0064c6:	4648      	mov	r0, r9
1a0064c8:	f7ff f8fc 	bl	1a0056c4 <_malloc_r>
1a0064cc:	4607      	mov	r7, r0
1a0064ce:	b1d8      	cbz	r0, 1a006508 <_realloc_r+0x1d0>
1a0064d0:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a0064d4:	f023 0201 	bic.w	r2, r3, #1
1a0064d8:	4442      	add	r2, r8
1a0064da:	f1a0 0108 	sub.w	r1, r0, #8
1a0064de:	4291      	cmp	r1, r2
1a0064e0:	f000 80ac 	beq.w	1a00663c <_realloc_r+0x304>
1a0064e4:	1f22      	subs	r2, r4, #4
1a0064e6:	2a24      	cmp	r2, #36	; 0x24
1a0064e8:	f200 8099 	bhi.w	1a00661e <_realloc_r+0x2e6>
1a0064ec:	2a13      	cmp	r2, #19
1a0064ee:	d86a      	bhi.n	1a0065c6 <_realloc_r+0x28e>
1a0064f0:	4603      	mov	r3, r0
1a0064f2:	4632      	mov	r2, r6
1a0064f4:	6811      	ldr	r1, [r2, #0]
1a0064f6:	6019      	str	r1, [r3, #0]
1a0064f8:	6851      	ldr	r1, [r2, #4]
1a0064fa:	6059      	str	r1, [r3, #4]
1a0064fc:	6892      	ldr	r2, [r2, #8]
1a0064fe:	609a      	str	r2, [r3, #8]
1a006500:	4631      	mov	r1, r6
1a006502:	4648      	mov	r0, r9
1a006504:	f7fe fdd2 	bl	1a0050ac <_free_r>
1a006508:	4648      	mov	r0, r9
1a00650a:	f7ff fc1d 	bl	1a005d48 <__malloc_unlock>
1a00650e:	4638      	mov	r0, r7
1a006510:	b003      	add	sp, #12
1a006512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a006516:	4611      	mov	r1, r2
1a006518:	b003      	add	sp, #12
1a00651a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00651e:	f7ff b8d1 	b.w	1a0056c4 <_malloc_r>
1a006522:	68ca      	ldr	r2, [r1, #12]
1a006524:	6889      	ldr	r1, [r1, #8]
1a006526:	4604      	mov	r4, r0
1a006528:	60ca      	str	r2, [r1, #12]
1a00652a:	6091      	str	r1, [r2, #8]
1a00652c:	e7a4      	b.n	1a006478 <_realloc_r+0x140>
1a00652e:	6841      	ldr	r1, [r0, #4]
1a006530:	f021 0103 	bic.w	r1, r1, #3
1a006534:	4421      	add	r1, r4
1a006536:	f105 0010 	add.w	r0, r5, #16
1a00653a:	4281      	cmp	r1, r0
1a00653c:	da5b      	bge.n	1a0065f6 <_realloc_r+0x2be>
1a00653e:	07db      	lsls	r3, r3, #31
1a006540:	d4c0      	bmi.n	1a0064c4 <_realloc_r+0x18c>
1a006542:	f856 3c08 	ldr.w	r3, [r6, #-8]
1a006546:	ebc3 0a08 	rsb	sl, r3, r8
1a00654a:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00654e:	f023 0303 	bic.w	r3, r3, #3
1a006552:	eb01 0c03 	add.w	ip, r1, r3
1a006556:	4560      	cmp	r0, ip
1a006558:	f73f af66 	bgt.w	1a006428 <_realloc_r+0xf0>
1a00655c:	4657      	mov	r7, sl
1a00655e:	f8da 300c 	ldr.w	r3, [sl, #12]
1a006562:	f857 1f08 	ldr.w	r1, [r7, #8]!
1a006566:	1f22      	subs	r2, r4, #4
1a006568:	2a24      	cmp	r2, #36	; 0x24
1a00656a:	60cb      	str	r3, [r1, #12]
1a00656c:	6099      	str	r1, [r3, #8]
1a00656e:	f200 80b8 	bhi.w	1a0066e2 <_realloc_r+0x3aa>
1a006572:	2a13      	cmp	r2, #19
1a006574:	f240 80a9 	bls.w	1a0066ca <_realloc_r+0x392>
1a006578:	6833      	ldr	r3, [r6, #0]
1a00657a:	f8ca 3008 	str.w	r3, [sl, #8]
1a00657e:	6873      	ldr	r3, [r6, #4]
1a006580:	f8ca 300c 	str.w	r3, [sl, #12]
1a006584:	2a1b      	cmp	r2, #27
1a006586:	f200 80b5 	bhi.w	1a0066f4 <_realloc_r+0x3bc>
1a00658a:	3608      	adds	r6, #8
1a00658c:	f10a 0310 	add.w	r3, sl, #16
1a006590:	6832      	ldr	r2, [r6, #0]
1a006592:	601a      	str	r2, [r3, #0]
1a006594:	6872      	ldr	r2, [r6, #4]
1a006596:	605a      	str	r2, [r3, #4]
1a006598:	68b2      	ldr	r2, [r6, #8]
1a00659a:	609a      	str	r2, [r3, #8]
1a00659c:	eb0a 0205 	add.w	r2, sl, r5
1a0065a0:	ebc5 030c 	rsb	r3, r5, ip
1a0065a4:	f043 0301 	orr.w	r3, r3, #1
1a0065a8:	f8cb 2008 	str.w	r2, [fp, #8]
1a0065ac:	6053      	str	r3, [r2, #4]
1a0065ae:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0065b2:	f003 0301 	and.w	r3, r3, #1
1a0065b6:	431d      	orrs	r5, r3
1a0065b8:	4648      	mov	r0, r9
1a0065ba:	f8ca 5004 	str.w	r5, [sl, #4]
1a0065be:	f7ff fbc3 	bl	1a005d48 <__malloc_unlock>
1a0065c2:	4638      	mov	r0, r7
1a0065c4:	e769      	b.n	1a00649a <_realloc_r+0x162>
1a0065c6:	6833      	ldr	r3, [r6, #0]
1a0065c8:	6003      	str	r3, [r0, #0]
1a0065ca:	6873      	ldr	r3, [r6, #4]
1a0065cc:	6043      	str	r3, [r0, #4]
1a0065ce:	2a1b      	cmp	r2, #27
1a0065d0:	d829      	bhi.n	1a006626 <_realloc_r+0x2ee>
1a0065d2:	f100 0308 	add.w	r3, r0, #8
1a0065d6:	f106 0208 	add.w	r2, r6, #8
1a0065da:	e78b      	b.n	1a0064f4 <_realloc_r+0x1bc>
1a0065dc:	463b      	mov	r3, r7
1a0065de:	6832      	ldr	r2, [r6, #0]
1a0065e0:	601a      	str	r2, [r3, #0]
1a0065e2:	6872      	ldr	r2, [r6, #4]
1a0065e4:	605a      	str	r2, [r3, #4]
1a0065e6:	68b2      	ldr	r2, [r6, #8]
1a0065e8:	609a      	str	r2, [r3, #8]
1a0065ea:	463e      	mov	r6, r7
1a0065ec:	4674      	mov	r4, lr
1a0065ee:	f8da 3004 	ldr.w	r3, [sl, #4]
1a0065f2:	46d0      	mov	r8, sl
1a0065f4:	e740      	b.n	1a006478 <_realloc_r+0x140>
1a0065f6:	eb08 0205 	add.w	r2, r8, r5
1a0065fa:	1b4b      	subs	r3, r1, r5
1a0065fc:	f043 0301 	orr.w	r3, r3, #1
1a006600:	f8cb 2008 	str.w	r2, [fp, #8]
1a006604:	6053      	str	r3, [r2, #4]
1a006606:	f856 3c04 	ldr.w	r3, [r6, #-4]
1a00660a:	f003 0301 	and.w	r3, r3, #1
1a00660e:	431d      	orrs	r5, r3
1a006610:	4648      	mov	r0, r9
1a006612:	f846 5c04 	str.w	r5, [r6, #-4]
1a006616:	f7ff fb97 	bl	1a005d48 <__malloc_unlock>
1a00661a:	4630      	mov	r0, r6
1a00661c:	e73d      	b.n	1a00649a <_realloc_r+0x162>
1a00661e:	4631      	mov	r1, r6
1a006620:	f7ff fb2c 	bl	1a005c7c <memmove>
1a006624:	e76c      	b.n	1a006500 <_realloc_r+0x1c8>
1a006626:	68b3      	ldr	r3, [r6, #8]
1a006628:	6083      	str	r3, [r0, #8]
1a00662a:	68f3      	ldr	r3, [r6, #12]
1a00662c:	60c3      	str	r3, [r0, #12]
1a00662e:	2a24      	cmp	r2, #36	; 0x24
1a006630:	d02c      	beq.n	1a00668c <_realloc_r+0x354>
1a006632:	f100 0310 	add.w	r3, r0, #16
1a006636:	f106 0210 	add.w	r2, r6, #16
1a00663a:	e75b      	b.n	1a0064f4 <_realloc_r+0x1bc>
1a00663c:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a006640:	f022 0203 	bic.w	r2, r2, #3
1a006644:	4414      	add	r4, r2
1a006646:	e717      	b.n	1a006478 <_realloc_r+0x140>
1a006648:	4631      	mov	r1, r6
1a00664a:	4638      	mov	r0, r7
1a00664c:	4674      	mov	r4, lr
1a00664e:	463e      	mov	r6, r7
1a006650:	f7ff fb14 	bl	1a005c7c <memmove>
1a006654:	46d0      	mov	r8, sl
1a006656:	f8da 3004 	ldr.w	r3, [sl, #4]
1a00665a:	e70d      	b.n	1a006478 <_realloc_r+0x140>
1a00665c:	463a      	mov	r2, r7
1a00665e:	e700      	b.n	1a006462 <_realloc_r+0x12a>
1a006660:	4631      	mov	r1, r6
1a006662:	4638      	mov	r0, r7
1a006664:	461c      	mov	r4, r3
1a006666:	463e      	mov	r6, r7
1a006668:	f7ff fb08 	bl	1a005c7c <memmove>
1a00666c:	46d0      	mov	r8, sl
1a00666e:	f8da 3004 	ldr.w	r3, [sl, #4]
1a006672:	e701      	b.n	1a006478 <_realloc_r+0x140>
1a006674:	68b3      	ldr	r3, [r6, #8]
1a006676:	f8ca 3010 	str.w	r3, [sl, #16]
1a00667a:	68f3      	ldr	r3, [r6, #12]
1a00667c:	f8ca 3014 	str.w	r3, [sl, #20]
1a006680:	2a24      	cmp	r2, #36	; 0x24
1a006682:	d018      	beq.n	1a0066b6 <_realloc_r+0x37e>
1a006684:	3610      	adds	r6, #16
1a006686:	f10a 0318 	add.w	r3, sl, #24
1a00668a:	e7a8      	b.n	1a0065de <_realloc_r+0x2a6>
1a00668c:	6933      	ldr	r3, [r6, #16]
1a00668e:	6103      	str	r3, [r0, #16]
1a006690:	6973      	ldr	r3, [r6, #20]
1a006692:	6143      	str	r3, [r0, #20]
1a006694:	f106 0218 	add.w	r2, r6, #24
1a006698:	f100 0318 	add.w	r3, r0, #24
1a00669c:	e72a      	b.n	1a0064f4 <_realloc_r+0x1bc>
1a00669e:	68b1      	ldr	r1, [r6, #8]
1a0066a0:	f8ca 1010 	str.w	r1, [sl, #16]
1a0066a4:	68f1      	ldr	r1, [r6, #12]
1a0066a6:	f8ca 1014 	str.w	r1, [sl, #20]
1a0066aa:	2a24      	cmp	r2, #36	; 0x24
1a0066ac:	d00f      	beq.n	1a0066ce <_realloc_r+0x396>
1a0066ae:	3610      	adds	r6, #16
1a0066b0:	f10a 0218 	add.w	r2, sl, #24
1a0066b4:	e6d5      	b.n	1a006462 <_realloc_r+0x12a>
1a0066b6:	6933      	ldr	r3, [r6, #16]
1a0066b8:	f8ca 3018 	str.w	r3, [sl, #24]
1a0066bc:	6973      	ldr	r3, [r6, #20]
1a0066be:	f8ca 301c 	str.w	r3, [sl, #28]
1a0066c2:	3618      	adds	r6, #24
1a0066c4:	f10a 0320 	add.w	r3, sl, #32
1a0066c8:	e789      	b.n	1a0065de <_realloc_r+0x2a6>
1a0066ca:	463b      	mov	r3, r7
1a0066cc:	e760      	b.n	1a006590 <_realloc_r+0x258>
1a0066ce:	6932      	ldr	r2, [r6, #16]
1a0066d0:	f8ca 2018 	str.w	r2, [sl, #24]
1a0066d4:	6972      	ldr	r2, [r6, #20]
1a0066d6:	f8ca 201c 	str.w	r2, [sl, #28]
1a0066da:	3618      	adds	r6, #24
1a0066dc:	f10a 0220 	add.w	r2, sl, #32
1a0066e0:	e6bf      	b.n	1a006462 <_realloc_r+0x12a>
1a0066e2:	4631      	mov	r1, r6
1a0066e4:	4638      	mov	r0, r7
1a0066e6:	f8cd c004 	str.w	ip, [sp, #4]
1a0066ea:	f7ff fac7 	bl	1a005c7c <memmove>
1a0066ee:	f8dd c004 	ldr.w	ip, [sp, #4]
1a0066f2:	e753      	b.n	1a00659c <_realloc_r+0x264>
1a0066f4:	68b3      	ldr	r3, [r6, #8]
1a0066f6:	f8ca 3010 	str.w	r3, [sl, #16]
1a0066fa:	68f3      	ldr	r3, [r6, #12]
1a0066fc:	f8ca 3014 	str.w	r3, [sl, #20]
1a006700:	2a24      	cmp	r2, #36	; 0x24
1a006702:	d003      	beq.n	1a00670c <_realloc_r+0x3d4>
1a006704:	3610      	adds	r6, #16
1a006706:	f10a 0318 	add.w	r3, sl, #24
1a00670a:	e741      	b.n	1a006590 <_realloc_r+0x258>
1a00670c:	6933      	ldr	r3, [r6, #16]
1a00670e:	f8ca 3018 	str.w	r3, [sl, #24]
1a006712:	6973      	ldr	r3, [r6, #20]
1a006714:	f8ca 301c 	str.w	r3, [sl, #28]
1a006718:	3618      	adds	r6, #24
1a00671a:	f10a 0320 	add.w	r3, sl, #32
1a00671e:	e737      	b.n	1a006590 <_realloc_r+0x258>
1a006720:	10000548 	.word	0x10000548

1a006724 <__fpclassifyd>:
1a006724:	ec53 2b10 	vmov	r2, r3, d0
1a006728:	b410      	push	{r4}
1a00672a:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
1a00672e:	d008      	beq.n	1a006742 <__fpclassifyd+0x1e>
1a006730:	4911      	ldr	r1, [pc, #68]	; (1a006778 <__fpclassifyd+0x54>)
1a006732:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
1a006736:	4288      	cmp	r0, r1
1a006738:	d808      	bhi.n	1a00674c <__fpclassifyd+0x28>
1a00673a:	2004      	movs	r0, #4
1a00673c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006740:	4770      	bx	lr
1a006742:	b91a      	cbnz	r2, 1a00674c <__fpclassifyd+0x28>
1a006744:	2002      	movs	r0, #2
1a006746:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00674a:	4770      	bx	lr
1a00674c:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
1a006750:	4909      	ldr	r1, [pc, #36]	; (1a006778 <__fpclassifyd+0x54>)
1a006752:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a006756:	428b      	cmp	r3, r1
1a006758:	d9ef      	bls.n	1a00673a <__fpclassifyd+0x16>
1a00675a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
1a00675e:	d201      	bcs.n	1a006764 <__fpclassifyd+0x40>
1a006760:	2003      	movs	r0, #3
1a006762:	e7eb      	b.n	1a00673c <__fpclassifyd+0x18>
1a006764:	4b05      	ldr	r3, [pc, #20]	; (1a00677c <__fpclassifyd+0x58>)
1a006766:	429c      	cmp	r4, r3
1a006768:	d001      	beq.n	1a00676e <__fpclassifyd+0x4a>
1a00676a:	2000      	movs	r0, #0
1a00676c:	e7e6      	b.n	1a00673c <__fpclassifyd+0x18>
1a00676e:	fab2 f082 	clz	r0, r2
1a006772:	0940      	lsrs	r0, r0, #5
1a006774:	e7e2      	b.n	1a00673c <__fpclassifyd+0x18>
1a006776:	bf00      	nop
1a006778:	7fdfffff 	.word	0x7fdfffff
1a00677c:	7ff00000 	.word	0x7ff00000

1a006780 <__sread>:
1a006780:	b510      	push	{r4, lr}
1a006782:	460c      	mov	r4, r1
1a006784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006788:	f7fa fa18 	bl	1a000bbc <_read_r>
1a00678c:	2800      	cmp	r0, #0
1a00678e:	db03      	blt.n	1a006798 <__sread+0x18>
1a006790:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a006792:	4403      	add	r3, r0
1a006794:	6523      	str	r3, [r4, #80]	; 0x50
1a006796:	bd10      	pop	{r4, pc}
1a006798:	89a3      	ldrh	r3, [r4, #12]
1a00679a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a00679e:	81a3      	strh	r3, [r4, #12]
1a0067a0:	bd10      	pop	{r4, pc}
1a0067a2:	bf00      	nop

1a0067a4 <__swrite>:
1a0067a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0067a8:	4616      	mov	r6, r2
1a0067aa:	898a      	ldrh	r2, [r1, #12]
1a0067ac:	461d      	mov	r5, r3
1a0067ae:	05d3      	lsls	r3, r2, #23
1a0067b0:	460c      	mov	r4, r1
1a0067b2:	4607      	mov	r7, r0
1a0067b4:	d506      	bpl.n	1a0067c4 <__swrite+0x20>
1a0067b6:	2200      	movs	r2, #0
1a0067b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0067bc:	2302      	movs	r3, #2
1a0067be:	f7fa f9f7 	bl	1a000bb0 <_lseek_r>
1a0067c2:	89a2      	ldrh	r2, [r4, #12]
1a0067c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0067c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
1a0067cc:	81a2      	strh	r2, [r4, #12]
1a0067ce:	4638      	mov	r0, r7
1a0067d0:	4632      	mov	r2, r6
1a0067d2:	462b      	mov	r3, r5
1a0067d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0067d8:	f7fa ba26 	b.w	1a000c28 <_write_r>

1a0067dc <__sseek>:
1a0067dc:	b510      	push	{r4, lr}
1a0067de:	460c      	mov	r4, r1
1a0067e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0067e4:	f7fa f9e4 	bl	1a000bb0 <_lseek_r>
1a0067e8:	89a3      	ldrh	r3, [r4, #12]
1a0067ea:	1c42      	adds	r2, r0, #1
1a0067ec:	bf0e      	itee	eq
1a0067ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0067f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0067f6:	6520      	strne	r0, [r4, #80]	; 0x50
1a0067f8:	81a3      	strh	r3, [r4, #12]
1a0067fa:	bd10      	pop	{r4, pc}

1a0067fc <__sclose>:
1a0067fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a006800:	f7fa b9c0 	b.w	1a000b84 <_close_r>

1a006804 <__sprint_r.part.0>:
1a006804:	6e4b      	ldr	r3, [r1, #100]	; 0x64
1a006806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00680a:	049c      	lsls	r4, r3, #18
1a00680c:	460f      	mov	r7, r1
1a00680e:	4692      	mov	sl, r2
1a006810:	d52b      	bpl.n	1a00686a <__sprint_r.part.0+0x66>
1a006812:	6893      	ldr	r3, [r2, #8]
1a006814:	6812      	ldr	r2, [r2, #0]
1a006816:	b333      	cbz	r3, 1a006866 <__sprint_r.part.0+0x62>
1a006818:	4680      	mov	r8, r0
1a00681a:	f102 0908 	add.w	r9, r2, #8
1a00681e:	e919 0060 	ldmdb	r9, {r5, r6}
1a006822:	08b6      	lsrs	r6, r6, #2
1a006824:	d017      	beq.n	1a006856 <__sprint_r.part.0+0x52>
1a006826:	3d04      	subs	r5, #4
1a006828:	2400      	movs	r4, #0
1a00682a:	e001      	b.n	1a006830 <__sprint_r.part.0+0x2c>
1a00682c:	42a6      	cmp	r6, r4
1a00682e:	d010      	beq.n	1a006852 <__sprint_r.part.0+0x4e>
1a006830:	4640      	mov	r0, r8
1a006832:	f855 1f04 	ldr.w	r1, [r5, #4]!
1a006836:	463a      	mov	r2, r7
1a006838:	f000 f94a 	bl	1a006ad0 <_fputwc_r>
1a00683c:	1c43      	adds	r3, r0, #1
1a00683e:	f104 0401 	add.w	r4, r4, #1
1a006842:	d1f3      	bne.n	1a00682c <__sprint_r.part.0+0x28>
1a006844:	2300      	movs	r3, #0
1a006846:	f8ca 3008 	str.w	r3, [sl, #8]
1a00684a:	f8ca 3004 	str.w	r3, [sl, #4]
1a00684e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006852:	f8da 3008 	ldr.w	r3, [sl, #8]
1a006856:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
1a00685a:	f8ca 3008 	str.w	r3, [sl, #8]
1a00685e:	f109 0908 	add.w	r9, r9, #8
1a006862:	2b00      	cmp	r3, #0
1a006864:	d1db      	bne.n	1a00681e <__sprint_r.part.0+0x1a>
1a006866:	2000      	movs	r0, #0
1a006868:	e7ec      	b.n	1a006844 <__sprint_r.part.0+0x40>
1a00686a:	f7fe fcf7 	bl	1a00525c <__sfvwrite_r>
1a00686e:	2300      	movs	r3, #0
1a006870:	f8ca 3008 	str.w	r3, [sl, #8]
1a006874:	f8ca 3004 	str.w	r3, [sl, #4]
1a006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

1a00687c <__sprint_r>:
1a00687c:	6893      	ldr	r3, [r2, #8]
1a00687e:	b410      	push	{r4}
1a006880:	b11b      	cbz	r3, 1a00688a <__sprint_r+0xe>
1a006882:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006886:	f7ff bfbd 	b.w	1a006804 <__sprint_r.part.0>
1a00688a:	4618      	mov	r0, r3
1a00688c:	6053      	str	r3, [r2, #4]
1a00688e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006892:	4770      	bx	lr

1a006894 <__swbuf_r>:
1a006894:	b570      	push	{r4, r5, r6, lr}
1a006896:	460d      	mov	r5, r1
1a006898:	4614      	mov	r4, r2
1a00689a:	4606      	mov	r6, r0
1a00689c:	b110      	cbz	r0, 1a0068a4 <__swbuf_r+0x10>
1a00689e:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0068a0:	2b00      	cmp	r3, #0
1a0068a2:	d048      	beq.n	1a006936 <__swbuf_r+0xa2>
1a0068a4:	89a2      	ldrh	r2, [r4, #12]
1a0068a6:	69a3      	ldr	r3, [r4, #24]
1a0068a8:	60a3      	str	r3, [r4, #8]
1a0068aa:	b291      	uxth	r1, r2
1a0068ac:	0708      	lsls	r0, r1, #28
1a0068ae:	d538      	bpl.n	1a006922 <__swbuf_r+0x8e>
1a0068b0:	6923      	ldr	r3, [r4, #16]
1a0068b2:	2b00      	cmp	r3, #0
1a0068b4:	d035      	beq.n	1a006922 <__swbuf_r+0x8e>
1a0068b6:	0489      	lsls	r1, r1, #18
1a0068b8:	b2ed      	uxtb	r5, r5
1a0068ba:	d515      	bpl.n	1a0068e8 <__swbuf_r+0x54>
1a0068bc:	6822      	ldr	r2, [r4, #0]
1a0068be:	6961      	ldr	r1, [r4, #20]
1a0068c0:	1ad3      	subs	r3, r2, r3
1a0068c2:	428b      	cmp	r3, r1
1a0068c4:	da1c      	bge.n	1a006900 <__swbuf_r+0x6c>
1a0068c6:	3301      	adds	r3, #1
1a0068c8:	68a1      	ldr	r1, [r4, #8]
1a0068ca:	1c50      	adds	r0, r2, #1
1a0068cc:	3901      	subs	r1, #1
1a0068ce:	60a1      	str	r1, [r4, #8]
1a0068d0:	6020      	str	r0, [r4, #0]
1a0068d2:	7015      	strb	r5, [r2, #0]
1a0068d4:	6962      	ldr	r2, [r4, #20]
1a0068d6:	429a      	cmp	r2, r3
1a0068d8:	d01a      	beq.n	1a006910 <__swbuf_r+0x7c>
1a0068da:	89a3      	ldrh	r3, [r4, #12]
1a0068dc:	07db      	lsls	r3, r3, #31
1a0068de:	d501      	bpl.n	1a0068e4 <__swbuf_r+0x50>
1a0068e0:	2d0a      	cmp	r5, #10
1a0068e2:	d015      	beq.n	1a006910 <__swbuf_r+0x7c>
1a0068e4:	4628      	mov	r0, r5
1a0068e6:	bd70      	pop	{r4, r5, r6, pc}
1a0068e8:	6e61      	ldr	r1, [r4, #100]	; 0x64
1a0068ea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
1a0068ee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
1a0068f2:	81a2      	strh	r2, [r4, #12]
1a0068f4:	6822      	ldr	r2, [r4, #0]
1a0068f6:	6661      	str	r1, [r4, #100]	; 0x64
1a0068f8:	6961      	ldr	r1, [r4, #20]
1a0068fa:	1ad3      	subs	r3, r2, r3
1a0068fc:	428b      	cmp	r3, r1
1a0068fe:	dbe2      	blt.n	1a0068c6 <__swbuf_r+0x32>
1a006900:	4630      	mov	r0, r6
1a006902:	4621      	mov	r1, r4
1a006904:	f7fe fae6 	bl	1a004ed4 <_fflush_r>
1a006908:	b940      	cbnz	r0, 1a00691c <__swbuf_r+0x88>
1a00690a:	6822      	ldr	r2, [r4, #0]
1a00690c:	2301      	movs	r3, #1
1a00690e:	e7db      	b.n	1a0068c8 <__swbuf_r+0x34>
1a006910:	4630      	mov	r0, r6
1a006912:	4621      	mov	r1, r4
1a006914:	f7fe fade 	bl	1a004ed4 <_fflush_r>
1a006918:	2800      	cmp	r0, #0
1a00691a:	d0e3      	beq.n	1a0068e4 <__swbuf_r+0x50>
1a00691c:	f04f 30ff 	mov.w	r0, #4294967295
1a006920:	bd70      	pop	{r4, r5, r6, pc}
1a006922:	4630      	mov	r0, r6
1a006924:	4621      	mov	r1, r4
1a006926:	f7fd f9df 	bl	1a003ce8 <__swsetup_r>
1a00692a:	2800      	cmp	r0, #0
1a00692c:	d1f6      	bne.n	1a00691c <__swbuf_r+0x88>
1a00692e:	89a2      	ldrh	r2, [r4, #12]
1a006930:	6923      	ldr	r3, [r4, #16]
1a006932:	b291      	uxth	r1, r2
1a006934:	e7bf      	b.n	1a0068b6 <__swbuf_r+0x22>
1a006936:	f7fe fb61 	bl	1a004ffc <__sinit>
1a00693a:	e7b3      	b.n	1a0068a4 <__swbuf_r+0x10>

1a00693c <_calloc_r>:
1a00693c:	b510      	push	{r4, lr}
1a00693e:	fb02 f101 	mul.w	r1, r2, r1
1a006942:	f7fe febf 	bl	1a0056c4 <_malloc_r>
1a006946:	4604      	mov	r4, r0
1a006948:	b168      	cbz	r0, 1a006966 <_calloc_r+0x2a>
1a00694a:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a00694e:	f022 0203 	bic.w	r2, r2, #3
1a006952:	3a04      	subs	r2, #4
1a006954:	2a24      	cmp	r2, #36	; 0x24
1a006956:	d818      	bhi.n	1a00698a <_calloc_r+0x4e>
1a006958:	2a13      	cmp	r2, #19
1a00695a:	d806      	bhi.n	1a00696a <_calloc_r+0x2e>
1a00695c:	4603      	mov	r3, r0
1a00695e:	2200      	movs	r2, #0
1a006960:	601a      	str	r2, [r3, #0]
1a006962:	605a      	str	r2, [r3, #4]
1a006964:	609a      	str	r2, [r3, #8]
1a006966:	4620      	mov	r0, r4
1a006968:	bd10      	pop	{r4, pc}
1a00696a:	2300      	movs	r3, #0
1a00696c:	2a1b      	cmp	r2, #27
1a00696e:	6003      	str	r3, [r0, #0]
1a006970:	6043      	str	r3, [r0, #4]
1a006972:	d90f      	bls.n	1a006994 <_calloc_r+0x58>
1a006974:	2a24      	cmp	r2, #36	; 0x24
1a006976:	6083      	str	r3, [r0, #8]
1a006978:	60c3      	str	r3, [r0, #12]
1a00697a:	bf05      	ittet	eq
1a00697c:	6103      	streq	r3, [r0, #16]
1a00697e:	6143      	streq	r3, [r0, #20]
1a006980:	f100 0310 	addne.w	r3, r0, #16
1a006984:	f100 0318 	addeq.w	r3, r0, #24
1a006988:	e7e9      	b.n	1a00695e <_calloc_r+0x22>
1a00698a:	2100      	movs	r1, #0
1a00698c:	f7fb fecc 	bl	1a002728 <memset>
1a006990:	4620      	mov	r0, r4
1a006992:	bd10      	pop	{r4, pc}
1a006994:	f100 0308 	add.w	r3, r0, #8
1a006998:	e7e1      	b.n	1a00695e <_calloc_r+0x22>
1a00699a:	bf00      	nop

1a00699c <_fclose_r>:
1a00699c:	2900      	cmp	r1, #0
1a00699e:	d03d      	beq.n	1a006a1c <_fclose_r+0x80>
1a0069a0:	b570      	push	{r4, r5, r6, lr}
1a0069a2:	4605      	mov	r5, r0
1a0069a4:	460c      	mov	r4, r1
1a0069a6:	b108      	cbz	r0, 1a0069ac <_fclose_r+0x10>
1a0069a8:	6b83      	ldr	r3, [r0, #56]	; 0x38
1a0069aa:	b37b      	cbz	r3, 1a006a0c <_fclose_r+0x70>
1a0069ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0069b0:	b90b      	cbnz	r3, 1a0069b6 <_fclose_r+0x1a>
1a0069b2:	2000      	movs	r0, #0
1a0069b4:	bd70      	pop	{r4, r5, r6, pc}
1a0069b6:	4628      	mov	r0, r5
1a0069b8:	4621      	mov	r1, r4
1a0069ba:	f7fe f9e1 	bl	1a004d80 <__sflush_r>
1a0069be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a0069c0:	4606      	mov	r6, r0
1a0069c2:	b133      	cbz	r3, 1a0069d2 <_fclose_r+0x36>
1a0069c4:	4628      	mov	r0, r5
1a0069c6:	69e1      	ldr	r1, [r4, #28]
1a0069c8:	4798      	blx	r3
1a0069ca:	2800      	cmp	r0, #0
1a0069cc:	bfb8      	it	lt
1a0069ce:	f04f 36ff 	movlt.w	r6, #4294967295
1a0069d2:	89a3      	ldrh	r3, [r4, #12]
1a0069d4:	061b      	lsls	r3, r3, #24
1a0069d6:	d41c      	bmi.n	1a006a12 <_fclose_r+0x76>
1a0069d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
1a0069da:	b141      	cbz	r1, 1a0069ee <_fclose_r+0x52>
1a0069dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
1a0069e0:	4299      	cmp	r1, r3
1a0069e2:	d002      	beq.n	1a0069ea <_fclose_r+0x4e>
1a0069e4:	4628      	mov	r0, r5
1a0069e6:	f7fe fb61 	bl	1a0050ac <_free_r>
1a0069ea:	2300      	movs	r3, #0
1a0069ec:	6323      	str	r3, [r4, #48]	; 0x30
1a0069ee:	6c61      	ldr	r1, [r4, #68]	; 0x44
1a0069f0:	b121      	cbz	r1, 1a0069fc <_fclose_r+0x60>
1a0069f2:	4628      	mov	r0, r5
1a0069f4:	f7fe fb5a 	bl	1a0050ac <_free_r>
1a0069f8:	2300      	movs	r3, #0
1a0069fa:	6463      	str	r3, [r4, #68]	; 0x44
1a0069fc:	f7fe fb04 	bl	1a005008 <__sfp_lock_acquire>
1a006a00:	2300      	movs	r3, #0
1a006a02:	81a3      	strh	r3, [r4, #12]
1a006a04:	f7fe fb02 	bl	1a00500c <__sfp_lock_release>
1a006a08:	4630      	mov	r0, r6
1a006a0a:	bd70      	pop	{r4, r5, r6, pc}
1a006a0c:	f7fe faf6 	bl	1a004ffc <__sinit>
1a006a10:	e7cc      	b.n	1a0069ac <_fclose_r+0x10>
1a006a12:	4628      	mov	r0, r5
1a006a14:	6921      	ldr	r1, [r4, #16]
1a006a16:	f7fe fb49 	bl	1a0050ac <_free_r>
1a006a1a:	e7dd      	b.n	1a0069d8 <_fclose_r+0x3c>
1a006a1c:	2000      	movs	r0, #0
1a006a1e:	4770      	bx	lr

1a006a20 <__fputwc>:
1a006a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006a24:	b082      	sub	sp, #8
1a006a26:	4607      	mov	r7, r0
1a006a28:	460e      	mov	r6, r1
1a006a2a:	4614      	mov	r4, r2
1a006a2c:	f7fe fdd0 	bl	1a0055d0 <__locale_mb_cur_max>
1a006a30:	2801      	cmp	r0, #1
1a006a32:	d041      	beq.n	1a006ab8 <__fputwc+0x98>
1a006a34:	4638      	mov	r0, r7
1a006a36:	a901      	add	r1, sp, #4
1a006a38:	4632      	mov	r2, r6
1a006a3a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
1a006a3e:	f000 f859 	bl	1a006af4 <_wcrtomb_r>
1a006a42:	f1b0 3fff 	cmp.w	r0, #4294967295
1a006a46:	4680      	mov	r8, r0
1a006a48:	d02f      	beq.n	1a006aaa <__fputwc+0x8a>
1a006a4a:	2800      	cmp	r0, #0
1a006a4c:	d03c      	beq.n	1a006ac8 <__fputwc+0xa8>
1a006a4e:	f89d 1004 	ldrb.w	r1, [sp, #4]
1a006a52:	2500      	movs	r5, #0
1a006a54:	e009      	b.n	1a006a6a <__fputwc+0x4a>
1a006a56:	6823      	ldr	r3, [r4, #0]
1a006a58:	7019      	strb	r1, [r3, #0]
1a006a5a:	6823      	ldr	r3, [r4, #0]
1a006a5c:	3301      	adds	r3, #1
1a006a5e:	6023      	str	r3, [r4, #0]
1a006a60:	3501      	adds	r5, #1
1a006a62:	45a8      	cmp	r8, r5
1a006a64:	d930      	bls.n	1a006ac8 <__fputwc+0xa8>
1a006a66:	ab01      	add	r3, sp, #4
1a006a68:	5d59      	ldrb	r1, [r3, r5]
1a006a6a:	68a3      	ldr	r3, [r4, #8]
1a006a6c:	3b01      	subs	r3, #1
1a006a6e:	2b00      	cmp	r3, #0
1a006a70:	60a3      	str	r3, [r4, #8]
1a006a72:	daf0      	bge.n	1a006a56 <__fputwc+0x36>
1a006a74:	69a2      	ldr	r2, [r4, #24]
1a006a76:	4293      	cmp	r3, r2
1a006a78:	db07      	blt.n	1a006a8a <__fputwc+0x6a>
1a006a7a:	6823      	ldr	r3, [r4, #0]
1a006a7c:	7019      	strb	r1, [r3, #0]
1a006a7e:	6823      	ldr	r3, [r4, #0]
1a006a80:	7819      	ldrb	r1, [r3, #0]
1a006a82:	290a      	cmp	r1, #10
1a006a84:	f103 0301 	add.w	r3, r3, #1
1a006a88:	d1e9      	bne.n	1a006a5e <__fputwc+0x3e>
1a006a8a:	4638      	mov	r0, r7
1a006a8c:	4622      	mov	r2, r4
1a006a8e:	f7ff ff01 	bl	1a006894 <__swbuf_r>
1a006a92:	f1a0 30ff 	sub.w	r0, r0, #4294967295
1a006a96:	fab0 f080 	clz	r0, r0
1a006a9a:	0940      	lsrs	r0, r0, #5
1a006a9c:	2800      	cmp	r0, #0
1a006a9e:	d0df      	beq.n	1a006a60 <__fputwc+0x40>
1a006aa0:	f04f 30ff 	mov.w	r0, #4294967295
1a006aa4:	b002      	add	sp, #8
1a006aa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006aaa:	89a3      	ldrh	r3, [r4, #12]
1a006aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006ab0:	81a3      	strh	r3, [r4, #12]
1a006ab2:	b002      	add	sp, #8
1a006ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006ab8:	1e73      	subs	r3, r6, #1
1a006aba:	2bfe      	cmp	r3, #254	; 0xfe
1a006abc:	d8ba      	bhi.n	1a006a34 <__fputwc+0x14>
1a006abe:	b2f1      	uxtb	r1, r6
1a006ac0:	4680      	mov	r8, r0
1a006ac2:	f88d 1004 	strb.w	r1, [sp, #4]
1a006ac6:	e7c4      	b.n	1a006a52 <__fputwc+0x32>
1a006ac8:	4630      	mov	r0, r6
1a006aca:	b002      	add	sp, #8
1a006acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a006ad0 <_fputwc_r>:
1a006ad0:	8993      	ldrh	r3, [r2, #12]
1a006ad2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
1a006ad6:	d10b      	bne.n	1a006af0 <_fputwc_r+0x20>
1a006ad8:	b410      	push	{r4}
1a006ada:	6e54      	ldr	r4, [r2, #100]	; 0x64
1a006adc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
1a006ae0:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
1a006ae4:	6654      	str	r4, [r2, #100]	; 0x64
1a006ae6:	8193      	strh	r3, [r2, #12]
1a006ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a006aec:	f7ff bf98 	b.w	1a006a20 <__fputwc>
1a006af0:	f7ff bf96 	b.w	1a006a20 <__fputwc>

1a006af4 <_wcrtomb_r>:
1a006af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006af8:	4605      	mov	r5, r0
1a006afa:	b086      	sub	sp, #24
1a006afc:	461e      	mov	r6, r3
1a006afe:	460c      	mov	r4, r1
1a006b00:	b1a1      	cbz	r1, 1a006b2c <_wcrtomb_r+0x38>
1a006b02:	4b10      	ldr	r3, [pc, #64]	; (1a006b44 <_wcrtomb_r+0x50>)
1a006b04:	4617      	mov	r7, r2
1a006b06:	f8d3 8000 	ldr.w	r8, [r3]
1a006b0a:	f7fe fd5d 	bl	1a0055c8 <__locale_charset>
1a006b0e:	9600      	str	r6, [sp, #0]
1a006b10:	4603      	mov	r3, r0
1a006b12:	4621      	mov	r1, r4
1a006b14:	463a      	mov	r2, r7
1a006b16:	4628      	mov	r0, r5
1a006b18:	47c0      	blx	r8
1a006b1a:	1c43      	adds	r3, r0, #1
1a006b1c:	d103      	bne.n	1a006b26 <_wcrtomb_r+0x32>
1a006b1e:	2200      	movs	r2, #0
1a006b20:	238a      	movs	r3, #138	; 0x8a
1a006b22:	6032      	str	r2, [r6, #0]
1a006b24:	602b      	str	r3, [r5, #0]
1a006b26:	b006      	add	sp, #24
1a006b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006b2c:	4b05      	ldr	r3, [pc, #20]	; (1a006b44 <_wcrtomb_r+0x50>)
1a006b2e:	681f      	ldr	r7, [r3, #0]
1a006b30:	f7fe fd4a 	bl	1a0055c8 <__locale_charset>
1a006b34:	9600      	str	r6, [sp, #0]
1a006b36:	4603      	mov	r3, r0
1a006b38:	4622      	mov	r2, r4
1a006b3a:	4628      	mov	r0, r5
1a006b3c:	a903      	add	r1, sp, #12
1a006b3e:	47b8      	blx	r7
1a006b40:	e7eb      	b.n	1a006b1a <_wcrtomb_r+0x26>
1a006b42:	bf00      	nop
1a006b44:	10000958 	.word	0x10000958

1a006b48 <__ascii_wctomb>:
1a006b48:	b121      	cbz	r1, 1a006b54 <__ascii_wctomb+0xc>
1a006b4a:	2aff      	cmp	r2, #255	; 0xff
1a006b4c:	d804      	bhi.n	1a006b58 <__ascii_wctomb+0x10>
1a006b4e:	700a      	strb	r2, [r1, #0]
1a006b50:	2001      	movs	r0, #1
1a006b52:	4770      	bx	lr
1a006b54:	4608      	mov	r0, r1
1a006b56:	4770      	bx	lr
1a006b58:	238a      	movs	r3, #138	; 0x8a
1a006b5a:	6003      	str	r3, [r0, #0]
1a006b5c:	f04f 30ff 	mov.w	r0, #4294967295
1a006b60:	4770      	bx	lr
1a006b62:	bf00      	nop

1a006b64 <__gedf2>:
1a006b64:	f04f 3cff 	mov.w	ip, #4294967295
1a006b68:	e006      	b.n	1a006b78 <__cmpdf2+0x4>
1a006b6a:	bf00      	nop

1a006b6c <__ledf2>:
1a006b6c:	f04f 0c01 	mov.w	ip, #1
1a006b70:	e002      	b.n	1a006b78 <__cmpdf2+0x4>
1a006b72:	bf00      	nop

1a006b74 <__cmpdf2>:
1a006b74:	f04f 0c01 	mov.w	ip, #1
1a006b78:	f84d cd04 	str.w	ip, [sp, #-4]!
1a006b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a006b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a006b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a006b88:	bf18      	it	ne
1a006b8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a006b8e:	d01b      	beq.n	1a006bc8 <__cmpdf2+0x54>
1a006b90:	b001      	add	sp, #4
1a006b92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a006b96:	bf0c      	ite	eq
1a006b98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a006b9c:	ea91 0f03 	teqne	r1, r3
1a006ba0:	bf02      	ittt	eq
1a006ba2:	ea90 0f02 	teqeq	r0, r2
1a006ba6:	2000      	moveq	r0, #0
1a006ba8:	4770      	bxeq	lr
1a006baa:	f110 0f00 	cmn.w	r0, #0
1a006bae:	ea91 0f03 	teq	r1, r3
1a006bb2:	bf58      	it	pl
1a006bb4:	4299      	cmppl	r1, r3
1a006bb6:	bf08      	it	eq
1a006bb8:	4290      	cmpeq	r0, r2
1a006bba:	bf2c      	ite	cs
1a006bbc:	17d8      	asrcs	r0, r3, #31
1a006bbe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a006bc2:	f040 0001 	orr.w	r0, r0, #1
1a006bc6:	4770      	bx	lr
1a006bc8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a006bcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a006bd0:	d102      	bne.n	1a006bd8 <__cmpdf2+0x64>
1a006bd2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a006bd6:	d107      	bne.n	1a006be8 <__cmpdf2+0x74>
1a006bd8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a006bdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a006be0:	d1d6      	bne.n	1a006b90 <__cmpdf2+0x1c>
1a006be2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a006be6:	d0d3      	beq.n	1a006b90 <__cmpdf2+0x1c>
1a006be8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a006bec:	4770      	bx	lr
1a006bee:	bf00      	nop

1a006bf0 <__aeabi_cdrcmple>:
1a006bf0:	4684      	mov	ip, r0
1a006bf2:	4610      	mov	r0, r2
1a006bf4:	4662      	mov	r2, ip
1a006bf6:	468c      	mov	ip, r1
1a006bf8:	4619      	mov	r1, r3
1a006bfa:	4663      	mov	r3, ip
1a006bfc:	e000      	b.n	1a006c00 <__aeabi_cdcmpeq>
1a006bfe:	bf00      	nop

1a006c00 <__aeabi_cdcmpeq>:
1a006c00:	b501      	push	{r0, lr}
1a006c02:	f7ff ffb7 	bl	1a006b74 <__cmpdf2>
1a006c06:	2800      	cmp	r0, #0
1a006c08:	bf48      	it	mi
1a006c0a:	f110 0f00 	cmnmi.w	r0, #0
1a006c0e:	bd01      	pop	{r0, pc}

1a006c10 <__aeabi_dcmpeq>:
1a006c10:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006c14:	f7ff fff4 	bl	1a006c00 <__aeabi_cdcmpeq>
1a006c18:	bf0c      	ite	eq
1a006c1a:	2001      	moveq	r0, #1
1a006c1c:	2000      	movne	r0, #0
1a006c1e:	f85d fb08 	ldr.w	pc, [sp], #8
1a006c22:	bf00      	nop

1a006c24 <__aeabi_dcmplt>:
1a006c24:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006c28:	f7ff ffea 	bl	1a006c00 <__aeabi_cdcmpeq>
1a006c2c:	bf34      	ite	cc
1a006c2e:	2001      	movcc	r0, #1
1a006c30:	2000      	movcs	r0, #0
1a006c32:	f85d fb08 	ldr.w	pc, [sp], #8
1a006c36:	bf00      	nop

1a006c38 <__aeabi_dcmple>:
1a006c38:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006c3c:	f7ff ffe0 	bl	1a006c00 <__aeabi_cdcmpeq>
1a006c40:	bf94      	ite	ls
1a006c42:	2001      	movls	r0, #1
1a006c44:	2000      	movhi	r0, #0
1a006c46:	f85d fb08 	ldr.w	pc, [sp], #8
1a006c4a:	bf00      	nop

1a006c4c <__aeabi_dcmpge>:
1a006c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006c50:	f7ff ffce 	bl	1a006bf0 <__aeabi_cdrcmple>
1a006c54:	bf94      	ite	ls
1a006c56:	2001      	movls	r0, #1
1a006c58:	2000      	movhi	r0, #0
1a006c5a:	f85d fb08 	ldr.w	pc, [sp], #8
1a006c5e:	bf00      	nop

1a006c60 <__aeabi_dcmpgt>:
1a006c60:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006c64:	f7ff ffc4 	bl	1a006bf0 <__aeabi_cdrcmple>
1a006c68:	bf34      	ite	cc
1a006c6a:	2001      	movcc	r0, #1
1a006c6c:	2000      	movcs	r0, #0
1a006c6e:	f85d fb08 	ldr.w	pc, [sp], #8
1a006c72:	bf00      	nop

1a006c74 <__aeabi_d2iz>:
1a006c74:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a006c78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a006c7c:	d215      	bcs.n	1a006caa <__aeabi_d2iz+0x36>
1a006c7e:	d511      	bpl.n	1a006ca4 <__aeabi_d2iz+0x30>
1a006c80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a006c84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a006c88:	d912      	bls.n	1a006cb0 <__aeabi_d2iz+0x3c>
1a006c8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a006c8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a006c92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a006c96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a006c9a:	fa23 f002 	lsr.w	r0, r3, r2
1a006c9e:	bf18      	it	ne
1a006ca0:	4240      	negne	r0, r0
1a006ca2:	4770      	bx	lr
1a006ca4:	f04f 0000 	mov.w	r0, #0
1a006ca8:	4770      	bx	lr
1a006caa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a006cae:	d105      	bne.n	1a006cbc <__aeabi_d2iz+0x48>
1a006cb0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a006cb4:	bf08      	it	eq
1a006cb6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a006cba:	4770      	bx	lr
1a006cbc:	f04f 0000 	mov.w	r0, #0
1a006cc0:	4770      	bx	lr
1a006cc2:	bf00      	nop
1a006cc4:	bf1678ba 	.word	0xbf1678ba
1a006cc8:	eacf018f 	.word	0xeacf018f
1a006ccc:	de404141 	.word	0xde404141
1a006cd0:	2322ae5d 	.word	0x2322ae5d
1a006cd4:	a36103b0 	.word	0xa36103b0
1a006cd8:	9c7a1796 	.word	0x9c7a1796
1a006cdc:	61ff10b4 	.word	0x61ff10b4
1a006ce0:	ad1500f2 	.word	0xad1500f2
1a006ce4:	616a8d24 	.word	0x616a8d24
1a006ce8:	b83806d2 	.word	0xb83806d2
1a006cec:	9326c0e5 	.word	0x9326c0e5
1a006cf0:	39603e0c 	.word	0x39603e0c
1a006cf4:	59e43ca3 	.word	0x59e43ca3
1a006cf8:	6721ff64 	.word	0x6721ff64
1a006cfc:	d4edecf6 	.word	0xd4edecf6
1a006d00:	c106db19 	.word	0xc106db19
1a006d04:	5c6ec7cd 	.word	0x5c6ec7cd
1a006d08:	92fb1499 	.word	0x92fb1499
1a006d0c:	e2c7a181 	.word	0xe2c7a181
1a006d10:	673ed784 	.word	0x673ed784
1a006d14:	489a80f1 	.word	0x489a80f1
1a006d18:	0e2097a4 	.word	0x0e2097a4
1a006d1c:	cc396d04 	.word	0xcc396d04
1a006d20:	d02c11c7 	.word	0xd02c11c7
1a006d24:	64636261 	.word	0x64636261
1a006d28:	65646362 	.word	0x65646362
1a006d2c:	66656463 	.word	0x66656463
1a006d30:	67666564 	.word	0x67666564
1a006d34:	68676665 	.word	0x68676665
1a006d38:	69686766 	.word	0x69686766
1a006d3c:	6a696867 	.word	0x6a696867
1a006d40:	6b6a6968 	.word	0x6b6a6968
1a006d44:	6c6b6a69 	.word	0x6c6b6a69
1a006d48:	6d6c6b6a 	.word	0x6d6c6b6a
1a006d4c:	6e6d6c6b 	.word	0x6e6d6c6b
1a006d50:	6f6e6d6c 	.word	0x6f6e6d6c
1a006d54:	706f6e6d 	.word	0x706f6e6d
1a006d58:	71706f6e 	.word	0x71706f6e
1a006d5c:	00000000 	.word	0x00000000
1a006d60:	61616161 	.word	0x61616161
1a006d64:	61616161 	.word	0x61616161
1a006d68:	00006161 	.word	0x00006161
1a006d6c:	43435553 	.word	0x43435553
1a006d70:	45444545 	.word	0x45444545
1a006d74:	00000044 	.word	0x00000044
1a006d78:	4c494146 	.word	0x4c494146
1a006d7c:	00004445 	.word	0x00004445
1a006d80:	2d414853 	.word	0x2d414853
1a006d84:	20363532 	.word	0x20363532
1a006d88:	74736574 	.word	0x74736574
1a006d8c:	25203a73 	.word	0x25203a73
1a006d90:	00000a73 	.word	0x00000a73

1a006d94 <k>:
1a006d94:	428a2f98 71374491 b5c0fbcf e9b5dba5     ./.B.D7q........
1a006da4:	3956c25b 59f111f1 923f82a4 ab1c5ed5     [.V9...Y..?..^..
1a006db4:	d807aa98 12835b01 243185be 550c7dc3     .....[....1$.}.U
1a006dc4:	72be5d74 80deb1fe 9bdc06a7 c19bf174     t].r........t...
1a006dd4:	e49b69c1 efbe4786 0fc19dc6 240ca1cc     .i...G.........$
1a006de4:	2de92c6f 4a7484aa 5cb0a9dc 76f988da     o,.-..tJ...\...v
1a006df4:	983e5152 a831c66d b00327c8 bf597fc7     RQ>.m.1..'....Y.
1a006e04:	c6e00bf3 d5a79147 06ca6351 14292967     ....G...Qc..g)).
1a006e14:	27b70a85 2e1b2138 4d2c6dfc 53380d13     ...'8!...m,M..8S
1a006e24:	650a7354 766a0abb 81c2c92e 92722c85     Ts.e..jv.....,r.
1a006e34:	a2bfe8a1 a81a664b c24b8b70 c76c51a3     ....Kf..p.K..Ql.
1a006e44:	d192e819 d6990624 f40e3585 106aa070     ....$....5..p.j.
1a006e54:	19a4c116 1e376c08 2748774c 34b0bcb5     .....l7.LwH'...4
1a006e64:	391c0cb3 4ed8aa4a 5b9cca4f 682e6ff3     ...9J..NO..[.o.h
1a006e74:	748f82ee 78a5636f 84c87814 8cc70208     ...toc.x.x......
1a006e84:	90befffa a4506ceb bef9a3f7 c67178f2     .....lP......xq.

1a006e94 <ultrasonicSensorsIrqMap>:
1a006e94:	00020100                                ....

1a006e98 <lpcUarts>:
1a006e98:	40081000 06020406 00180205 40081000     ...@...........@
1a006ea8:	09070509 00180706 40082000 00000000     ......... .@....
1a006eb8:	00190000 400c1000 07060107 001a0602     .......@........
1a006ec8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a006ed8:	02020302 001b0204                       ........

1a006ee0 <GpioPorts>:
1a006ee0:	03030003 0f050403 05031005 07030603     ................
1a006ef0:	00000802                                ....

1a006ef4 <OscRateIn>:
1a006ef4:	00b71b00                                ....

1a006ef8 <ExtRateIn>:
1a006ef8:	00000000                                ....

1a006efc <GpioButtons>:
1a006efc:	08000400 09010900                       ........

1a006f04 <GpioLeds>:
1a006f04:	01050005 0e000205 0c010b01              ............

1a006f10 <InitClkStates>:
1a006f10:	00010308 00010307 01010f01              ............

1a006f1c <pinmuxing>:
1a006f1c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a006f2c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a006f3c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a006f4c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a006f5c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a006f6c:	00d50301 00d50401 00160107 00560207     ..............V.
1a006f7c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a006f8c:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a006f9c:	00b31201 00f01301 00b31401 00b60707     ................
1a006fac:	00f20000 00b60100                       ........

1a006fb4 <UART_BClock>:
1a006fb4:	01a201c2 01620182                       ......b.

1a006fbc <UART_PClock>:
1a006fbc:	00820081 00a200a1 08040201 0f0f0f03     ................
1a006fcc:	000000ff                                ....

1a006fd0 <periph_to_base>:
1a006fd0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a006fe0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a006ff0:	000100e0 01000100 01200003 00060120     .......... . ...
1a007000:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007010:	01820013 00120182 01a201a2 01c20011     ................
1a007020:	001001c2 01e201e2 0202000f 000e0202     ................
1a007030:	02220222 0223000d 001c0223              "."...#.#...

1a00703c <InitClkStates>:
1a00703c:	00010100 00010909 0001090a 01010701     ................
1a00704c:	00010902 00010906 0101090c 0001090d     ................
1a00705c:	0001090e 0001090f 00010910 00010911     ................
1a00706c:	00010912 00010913 00011114 00011119     ................
1a00707c:	0001111a 0001111b                       ........

1a007084 <zeroes.6931>:
1a007084:	30303030 30303030 30303030 30303030     0000000000000000
1a007094:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
1a0070a4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
1a0070b4:	00000000 33323130 37363534 62613938     ....0123456789ab
1a0070c4:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
1a0070d4:	00000030                                0...

1a0070d8 <blanks.6930>:
1a0070d8:	20202020 20202020 20202020 20202020                     
1a0070e8:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
1a0070f8:	00000043 49534f50 00000058 0000002e     C...POSIX.......

1a007108 <p05.5296>:
1a007108:	00000005 00000019 0000007d 00000000     ........}.......

1a007118 <__mprec_tens>:
1a007118:	00000000 3ff00000 00000000 40240000     .......?......$@
1a007128:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
1a007138:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
1a007148:	00000000 412e8480 00000000 416312d0     .......A......cA
1a007158:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
1a007168:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
1a007178:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
1a007188:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
1a007198:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
1a0071a8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
1a0071b8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
1a0071c8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
1a0071d8:	79d99db4 44ea7843                       ...yCx.D

1a0071e0 <__mprec_bigtens>:
1a0071e0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
1a0071f0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
1a007200:	7f73bf3c 75154fdd                       <.s..O.u
