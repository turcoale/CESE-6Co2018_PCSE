
PCSE/spi_01_sdCard_fatFileSystem/out/spi_01_sdCard_fatFileSystem.elf:     file format elf32-littlearm
PCSE/spi_01_sdCard_fatFileSystem/out/spi_01_sdCard_fatFileSystem.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0031e5

Program Header:
0x70000001 off    0x0000bbb4 vaddr 0x1a003bb4 paddr 0x1a003bb4 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x00000574 flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x00003bbc memsz 0x00003bbc flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a003bbc align 2**15
         filesz 0x000000cc memsz 0x000000cc flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bb4  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000cc  10000000  1a003bbc  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
  6 .bss          000004a4  100000d0  100000d0  000000d0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a003bb4  1a003bb4  0000bbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000100cc  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000100cc  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000100cc  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000100cc  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000100cc  2**2
                  CONTENTS
 17 .noinit       00000000  10000574  10000574  000100cc  2**2
                  CONTENTS
 18 .debug_info   0001739a  00000000  00000000  000100cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 00003800  00000000  00000000  00027466  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    0000abe8  00000000  00000000  0002ac66  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000b68  00000000  00000000  0003584e  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000a48  00000000  00000000  000363b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000ad57  00000000  00000000  00036dfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000dc23  00000000  00000000  00041b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001f1f6  00000000  00000000  0004f778  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0006e96e  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  0006e9de  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001ed4  00000000  00000000  0006ea18  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000d0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a003bb4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000574 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0020ac l     F .text	000000ac uartProcessIRQ
1000053c l     O .bss	00000004 rxIsrCallbackUART0
10000540 l     O .bss	00000004 txIsrCallbackUART0
10000544 l     O .bss	00000004 txIsrCallbackUART2
10000548 l     O .bss	00000004 txIsrCallbackUART3
1a0039c8 l     O .text	00000048 lpcUarts
1000054c l     O .bss	00000004 rxIsrCallbackUART2
10000550 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 sd_spi.c
100000d0 l     O .bss	00000228 fp
100002f8 l     O .bss	00000230 fs
00000000 l    df *ABS*	00000000 ff.c
1a000394 l     F .text	0000000a ld_word
1a0003a0 l     F .text	00000016 ld_dword
1a0003b8 l     F .text	00000008 st_word
1a0003c0 l     F .text	00000014 st_dword
1a0003d4 l     F .text	00000012 mem_cpy
1a0003e8 l     F .text	0000000a mem_set
1a0003f4 l     F .text	0000001e mem_cmp
1a000414 l     F .text	00000010 chk_chr
1a000424 l     F .text	00000018 clust2sect
1a00043c l     F .text	00000024 ld_clust
1a000460 l     F .text	00000024 st_clust
1a000484 l     F .text	000000d0 create_name
1a000554 l     F .text	00000056 get_ldnumber
1a0005ac l     F .text	00000034 validate
1a0005e0 l     F .text	00000054 sync_window
1a000634 l     F .text	00000034 move_window
1a000668 l     F .text	0000007c check_fs
1a0006e4 l     F .text	000002d4 find_volume
1a0009b8 l     F .text	0000010a put_fat
1a000ac4 l     F .text	000000d0 get_fat
1a000b94 l     F .text	000000b0 dir_sdi
1a000c44 l     F .text	000000ca create_chain
1a000d10 l     F .text	0000007c remove_chain
1a000d8c l     F .text	00000126 dir_next
1a000eb4 l     F .text	00000054 dir_find
1a000f08 l     F .text	0000008c follow_path
1a000f94 l     F .text	0000004c dir_alloc
1a000fe0 l     F .text	0000003a dir_register
1a00101c l     F .text	0000008c sync_fs
10000528 l     O .bss	00000002 Fsid
1000052c l     O .bss	00000004 FatFs
00000000 l    df *ABS*	00000000 mmc.c
1a001544 l     F .text	00000004 chk_power
1a001548 l     F .text	00000024 SSPSend
1a00156c l     F .text	00000018 xmit_spi
1a0015a8 l     F .text	0000001c rcvr_spi
1a0015c4 l     F .text	00000024 wait_ready
1a0015e8 l     F .text	00000018 deselect
1a001600 l     F .text	00000024 select_
1a001624 l     F .text	0000007e send_cmd
1a0016a4 l     F .text	0000005c xmit_datablock
1a001700 l     F .text	00000064 rcvr_datablock
10000530 l     O .bss	00000001 pv.10205
10000531 l     O .bss	00000001 Timer1
10000532 l     O .bss	00000001 Timer2
10000533 l     O .bss	00000001 CardType
10000000 l     O .data	00000001 Stat
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000008 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a001d10 l     F .text	00000010 clearInterrupt
1a001d20 l     F .text	00000060 serveInterrupt
1000000c l     O .data	00000048 ultrasonicSensors
1a00388c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001da4 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_sleep.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_spi.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0021c0 l     F .text	00000002 errorOcurred
1a0021c4 l     F .text	00000002 doNothing
10000054 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a0023bc l     F .text	00000040 Board_LED_Init
1a0023fc l     F .text	0000003c Board_TEC_Init
1a002438 l     F .text	0000003c Board_GPIO_Init
1a002474 l     F .text	00000038 Board_SPI_Init
1a0024ac l     F .text	00000024 Board_I2C_Init
1a0024d0 l     F .text	00000030 Board_ADC_Init
1a003a10 l     O .text	00000012 GpioPorts
1a003a2c l     O .text	00000008 GpioButtons
1a003a34 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003a40 l     O .text	0000000c InitClkStates
1a003a4c l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002628 l     F .text	0000002c Chip_UART_GetIndex
1a003ae4 l     O .text	00000008 UART_BClock
1a003aec l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00278c l     F .text	00000014 Chip_ADC_GetClockIndex
1a0027a0 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a002864 l     F .text	000000a8 pll_calc_divs
1a00290c l     F .text	00000104 pll_get_frac
1a002a10 l     F .text	00000048 Chip_Clock_FindBaseClock
1a002c7c l     F .text	00000022 Chip_Clock_GetDivRate
10000554 l     O .bss	00000008 audio_usb_pll_freq
1a003b00 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003b6c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a002f7c l     F .text	0000001a SSP_Write2BFifo
1a002f98 l     F .text	00000018 SSP_Write1BFifo
1a002fb0 l     F .text	0000002a SSP_Read2BFifo
1a002fdc l     F .text	0000002a SSP_Read1BFifo
1a003008 l     F .text	00000014 Chip_SSP_GetClockIndex
1a00301c l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000094 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a003bbc l       .ARM.exidx	00000000 __exidx_end
1a003bbc l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a003bb4 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a003bb4 l       .bss_RAM5	00000000 __init_array_end
1a003bb4 l       .bss_RAM5	00000000 __preinit_array_end
10000574 l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a003bb4 l       .bss_RAM5	00000000 __init_array_start
1a003bb4 l       .bss_RAM5	00000000 __preinit_array_start
1a002aa4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0032c8 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a002244 g     F .text	00000040 TIMER2_IRQHandler
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a0032fc g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
10000538 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a002844 g     F .text	0000000c Chip_ADC_SetResolution
1a00207c g     F .text	00000030 SysTick_Handler
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
53ff465a g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a002284 g     F .text	00000040 TIMER3_IRQHandler
1a002d08 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a001764 g     F .text	00000158 disk_initialize
1a003268 g     F .text	00000000 .hidden __aeabi_uldivmod
10000574 g       .noinit	00000000 _noinit
10000570 g     O .bss	00000004 SystemCoreClock
1a002654 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a000194  w    F .text	00000002 UsageFault_Handler
1a002d84 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
10000560 g     O .bss	00000008 tickCounter
1a0018bc g     F .text	00000014 disk_status
1a0025b0 g     F .text	0000006c Board_SetupClocking
1a003a28 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a001a04 g     F .text	00000284 disk_ioctl
1a001d8c g     F .text	0000000a GPIO1_IRQHandler
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a0002fc g     O .text	00000004 CRP_WORD
1a003804 g     F .text	0000004c __libc_init_array
1a003598 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a002524 g     F .text	0000003c Board_Init
1a003264 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a003048 g     F .text	000000b0 Chip_SSP_RWFrames_Blocking
1a0001a8  w    F .text	00000002 RTC_IRQHandler
10000574 g       .bss	00000000 _ebss
1a0021c8 g     F .text	0000003c TIMER0_IRQHandler
1a002000 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a0031b4 g     F .text	00000030 Chip_I2C_SetClockRate
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a002a58 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0001ac g     F .text	0000001a data_init
1a002204 g     F .text	00000040 TIMER1_IRQHandler
1a003190 g     F .text	00000024 Chip_I2C_Init
1a002158 g     F .text	0000000a UART2_IRQHandler
1a002c14 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a003890 g     O .text	00000136 gpioPinsInit
1a003034 g     F .text	00000012 Chip_SSP_SetClockRate
1a001d98 g     F .text	0000000a GPIO2_IRQHandler
1a002ce4 g     F .text	00000024 Chip_Clock_GetBaseClock
1a001c88 g     F .text	0000006c disk_timerproc
100000d0 g       .bss	00000000 _bss
1a002810 g     F .text	00000032 Chip_ADC_SetSampleRate
1a001520 g     F .text	00000024 f_close
1a001584 g     F .text	00000024 SSPReceive
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a0030f8 g     F .text	0000003e Chip_SSP_SetBitRate
1a002f78 g     F .text	00000002 Chip_GPIO_Init
1a003a24 g     O .text	00000004 OscRateIn
10000574 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a000300 g     F .text	00000008 diskTickHook
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001dd0 g     F .text	0000019c gpioInit
1a001fc4 g     F .text	00000004 sleepUntilNextInterrupt
1a0032f8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a002ac0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a003850 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000308 g     F .text	0000008c main
1a001484 g     F .text	0000009c f_sync
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a002170 g     F .text	00000050 spiInit
1a000198  w    F .text	00000002 SVC_Handler
10000004 g     O .data	00000004 DWT_CTRL
1a0010a8 g     F .text	00000058 f_mount
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a002d14 g     F .text	0000003c Chip_Clock_EnableOpts
1a002adc g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a002f20 g     F .text	00000058 fpuInit
1a002b94 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a002560 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001f6c g     F .text	00000058 gpioWrite
1a0027d0 g     F .text	00000040 Chip_ADC_Init
1a00257c g     F .text	00000034 Board_SetupMuxing
1a0026a8 g     F .text	000000e4 Chip_UART_SetBaudFDR
10000568 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
10000534 g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001fc8 g     F .text	00000020 tickCallbackSet
1a000178 g       .text	00000000 __section_table_end
1a003138 g     F .text	00000038 Chip_SSP_Init
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a002500 g     F .text	00000024 Board_Debug_Init
100000cc g       .data	00000000 _edata
1a003170 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a0012dc g     F .text	000001a8 f_write
1a002dd0 g     F .text	00000150 Chip_SetupCoreClock
1a001d80 g     F .text	0000000a GPIO0_IRQHandler
1a001100 g     F .text	000001dc f_open
1a001958 g     F .text	000000ac disk_write
1a000000 g     O .text	00000114 g_pfnVectors
1a0031e4 g     F .text	00000080 ResetISR
1a002850 g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a0032f8  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a0018d0 g     F .text	00000088 disk_read
1a002d50 g     F .text	00000034 Chip_Clock_Enable
1a002164 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a003298 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a0022c4 g     F .text	000000f8 boardInit
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a001fe8 g     F .text	00000018 tickPowerSet
1a002ca0 g     F .text	00000044 Chip_Clock_SetBaseClock
1a001cf4 g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a00261c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e5 31 00 1a 85 01 00 1a 89 01 00 1a     .....1..........
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 5a 46 ff 53     ............ZF.S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	7d 20 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     } ..............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a c9 21 00 1a 05 22 00 1a 45 22 00 1a     .....!..."..E"..
1a00007c:	85 22 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ."..............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a 59 21 00 1a     ....y.......Y!..
1a0000ac:	65 21 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     e!..............
1a0000bc:	a9 01 00 1a 81 1d 00 1a 8d 1d 00 1a 99 1d 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a003bbc 	.word	0x1a003bbc
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000cc 	.word	0x000000cc
1a000120:	1a003bbc 	.word	0x1a003bbc
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003bbc 	.word	0x1a003bbc
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003bbc 	.word	0x1a003bbc
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003bbc 	.word	0x1a003bbc
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000d0 	.word	0x100000d0
1a000154:	000004a4 	.word	0x000004a4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f001 ff96 	bl	1a0020ac <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <diskTickHook>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

// FUNCION que se ejecuta cada vezque ocurre un Tick
void diskTickHook( void *ptr ){
1a000300:	b508      	push	{r3, lr}
   disk_timerproc();   // Disk timer process
1a000302:	f001 fcc1 	bl	1a001c88 <disk_timerproc>
1a000306:	bd08      	pop	{r3, pc}

1a000308 <main>:


/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void ){
1a000308:	b530      	push	{r4, r5, lr}
1a00030a:	b083      	sub	sp, #12

   // ---------- CONFIGURACIONES ------------------------------
   // Inicializar y configurar la plataforma
   boardConfig();
1a00030c:	f001 ffda 	bl	1a0022c4 <boardInit>

   // SPI configuration
   spiConfig( SPI0 );
1a000310:	2000      	movs	r0, #0
1a000312:	f001 ff2d 	bl	1a002170 <spiInit>

   // Inicializar el conteo de Ticks con resolucion de 10ms,
   // con tickHook diskTickHook
   tickConfig( 10 );
1a000316:	200a      	movs	r0, #10
1a000318:	2100      	movs	r1, #0
1a00031a:	f001 fe71 	bl	1a002000 <tickInit>
   tickCallbackSet( diskTickHook, NULL );
1a00031e:	4817      	ldr	r0, [pc, #92]	; (1a00037c <main+0x74>)
1a000320:	2100      	movs	r1, #0
1a000322:	f001 fe51 	bl	1a001fc8 <tickCallbackSet>
   // ------ PROGRAMA QUE ESCRIBE EN LA SD -------

   UINT nbytes;

   // Give a work area to the default drive
   if( f_mount( &fs, "", 0 ) != FR_OK ){
1a000326:	4816      	ldr	r0, [pc, #88]	; (1a000380 <main+0x78>)
1a000328:	4916      	ldr	r1, [pc, #88]	; (1a000384 <main+0x7c>)
1a00032a:	2200      	movs	r2, #0
1a00032c:	f000 febc 	bl	1a0010a8 <f_mount>

   // Create/open a file, then write a string and close it

   uint8_t i=0;

   for( i=0; i<5; i++ ){
1a000330:	2400      	movs	r4, #0
1a000332:	e01d      	b.n	1a000370 <main+0x68>

      if( f_open( &fp, FILENAME, FA_WRITE | FA_OPEN_APPEND ) == FR_OK ){
1a000334:	4814      	ldr	r0, [pc, #80]	; (1a000388 <main+0x80>)
1a000336:	4915      	ldr	r1, [pc, #84]	; (1a00038c <main+0x84>)
1a000338:	2232      	movs	r2, #50	; 0x32
1a00033a:	f000 fee1 	bl	1a001100 <f_open>
1a00033e:	b988      	cbnz	r0, 1a000364 <main+0x5c>
         f_write( &fp, "Hola mundo\r\n", 12, &nbytes );
1a000340:	4d11      	ldr	r5, [pc, #68]	; (1a000388 <main+0x80>)
1a000342:	4628      	mov	r0, r5
1a000344:	4912      	ldr	r1, [pc, #72]	; (1a000390 <main+0x88>)
1a000346:	220c      	movs	r2, #12
1a000348:	ab01      	add	r3, sp, #4
1a00034a:	f000 ffc7 	bl	1a0012dc <f_write>

         f_close(&fp);
1a00034e:	4628      	mov	r0, r5
1a000350:	f001 f8e6 	bl	1a001520 <f_close>

         if( nbytes == 12 ){
1a000354:	9b01      	ldr	r3, [sp, #4]
1a000356:	2b0c      	cmp	r3, #12
1a000358:	d108      	bne.n	1a00036c <main+0x64>
            // Turn ON LEDG if the write operation was successful
            gpioWrite( LEDG, ON );
1a00035a:	2029      	movs	r0, #41	; 0x29
1a00035c:	2101      	movs	r1, #1
1a00035e:	f001 fe05 	bl	1a001f6c <gpioWrite>
1a000362:	e003      	b.n	1a00036c <main+0x64>
         }
      } else{
         // Turn ON LEDR if the write operation was fail
         gpioWrite( LEDR, ON );
1a000364:	2028      	movs	r0, #40	; 0x28
1a000366:	2101      	movs	r1, #1
1a000368:	f001 fe00 	bl	1a001f6c <gpioWrite>

   // Create/open a file, then write a string and close it

   uint8_t i=0;

   for( i=0; i<5; i++ ){
1a00036c:	3401      	adds	r4, #1
1a00036e:	b2e4      	uxtb	r4, r4
1a000370:	2c04      	cmp	r4, #4
1a000372:	d9df      	bls.n	1a000334 <main+0x2c>
   }

   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE )
   {
      sleepUntilNextInterrupt();
1a000374:	f001 fe26 	bl	1a001fc4 <sleepUntilNextInterrupt>
   }
1a000378:	e7fc      	b.n	1a000374 <main+0x6c>
1a00037a:	bf00      	nop
1a00037c:	1a000301 	.word	0x1a000301
1a000380:	100002f8 	.word	0x100002f8
1a000384:	1a003878 	.word	0x1a003878
1a000388:	100000d0 	.word	0x100000d0
1a00038c:	1a003860 	.word	0x1a003860
1a000390:	1a00386c 	.word	0x1a00386c

1a000394 <ld_word>:
static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
	WORD rv;

	rv = ptr[1];
1a000394:	7842      	ldrb	r2, [r0, #1]
	rv = rv << 8 | ptr[0];
1a000396:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a000398:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
1a00039c:	4770      	bx	lr
1a00039e:	bf00      	nop

1a0003a0 <ld_dword>:
static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
1a0003a0:	78c2      	ldrb	r2, [r0, #3]
	rv = rv << 8 | ptr[2];
1a0003a2:	7883      	ldrb	r3, [r0, #2]
1a0003a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
	rv = rv << 8 | ptr[1];
1a0003a8:	7843      	ldrb	r3, [r0, #1]
1a0003aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
1a0003ae:	7800      	ldrb	r0, [r0, #0]
	return rv;
}
1a0003b0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
1a0003b4:	4770      	bx	lr
1a0003b6:	bf00      	nop

1a0003b8 <st_word>:

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0003b8:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val;
1a0003ba:	0a09      	lsrs	r1, r1, #8
1a0003bc:	7041      	strb	r1, [r0, #1]
1a0003be:	4770      	bx	lr

1a0003c0 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
1a0003c0:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
1a0003c2:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a0003c6:	7043      	strb	r3, [r0, #1]
	*ptr++ = (BYTE)val; val >>= 8;
1a0003c8:	f3c1 4307 	ubfx	r3, r1, #16, #8
1a0003cc:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
1a0003ce:	0e09      	lsrs	r1, r1, #24
1a0003d0:	70c1      	strb	r1, [r0, #3]
1a0003d2:	4770      	bx	lr

1a0003d4 <mem_cpy>:
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
	BYTE *d = (BYTE*)dst;
	const BYTE *s = (const BYTE*)src;

	if (cnt) {
1a0003d4:	4613      	mov	r3, r2
1a0003d6:	b12a      	cbz	r2, 1a0003e4 <mem_cpy+0x10>
		do *d++ = *s++; while (--cnt);
1a0003d8:	780a      	ldrb	r2, [r1, #0]
1a0003da:	7002      	strb	r2, [r0, #0]
1a0003dc:	3001      	adds	r0, #1
1a0003de:	3101      	adds	r1, #1
1a0003e0:	3b01      	subs	r3, #1
1a0003e2:	d1f9      	bne.n	1a0003d8 <mem_cpy+0x4>
1a0003e4:	4770      	bx	lr
1a0003e6:	bf00      	nop

1a0003e8 <mem_set>:
/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	do *d++ = (BYTE)val; while (--cnt);
1a0003e8:	7001      	strb	r1, [r0, #0]
1a0003ea:	3001      	adds	r0, #1
1a0003ec:	3a01      	subs	r2, #1
1a0003ee:	d1fb      	bne.n	1a0003e8 <mem_set>
}
1a0003f0:	4770      	bx	lr
1a0003f2:	bf00      	nop

1a0003f4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
1a0003f4:	b430      	push	{r4, r5}
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a0003f6:	1c45      	adds	r5, r0, #1
1a0003f8:	7803      	ldrb	r3, [r0, #0]
1a0003fa:	1c4c      	adds	r4, r1, #1
1a0003fc:	7808      	ldrb	r0, [r1, #0]
1a0003fe:	1a1b      	subs	r3, r3, r0
	} while (--cnt && r == 0);
1a000400:	3a01      	subs	r2, #1
1a000402:	d003      	beq.n	1a00040c <mem_cmp+0x18>
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
	int r = 0;

	do {
		r = *d++ - *s++;
1a000404:	4628      	mov	r0, r5
1a000406:	4621      	mov	r1, r4
	} while (--cnt && r == 0);
1a000408:	2b00      	cmp	r3, #0
1a00040a:	d0f4      	beq.n	1a0003f6 <mem_cmp+0x2>

	return r;
}
1a00040c:	4618      	mov	r0, r3
1a00040e:	bc30      	pop	{r4, r5}
1a000410:	4770      	bx	lr
1a000412:	bf00      	nop

1a000414 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
	while (*str && *str != chr) str++;
1a000414:	e000      	b.n	1a000418 <chk_chr+0x4>
1a000416:	3001      	adds	r0, #1
1a000418:	7803      	ldrb	r3, [r0, #0]
1a00041a:	b10b      	cbz	r3, 1a000420 <chk_chr+0xc>
1a00041c:	428b      	cmp	r3, r1
1a00041e:	d1fa      	bne.n	1a000416 <chk_chr+0x2>
	return *str;
}
1a000420:	4618      	mov	r0, r3
1a000422:	4770      	bx	lr

1a000424 <clust2sect>:
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
1a000424:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
1a000426:	6943      	ldr	r3, [r0, #20]
1a000428:	3b02      	subs	r3, #2
1a00042a:	428b      	cmp	r3, r1
1a00042c:	d904      	bls.n	1a000438 <clust2sect+0x14>
	return clst * fs->csize + fs->database;
1a00042e:	8943      	ldrh	r3, [r0, #10]
1a000430:	6a80      	ldr	r0, [r0, #40]	; 0x28
1a000432:	fb01 0003 	mla	r0, r1, r3, r0
1a000436:	4770      	bx	lr
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
1a000438:	2000      	movs	r0, #0
	return clst * fs->csize + fs->database;
}
1a00043a:	4770      	bx	lr

1a00043c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
1a00043c:	b570      	push	{r4, r5, r6, lr}
1a00043e:	4606      	mov	r6, r0
1a000440:	460d      	mov	r5, r1
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
1a000442:	f101 001a 	add.w	r0, r1, #26
1a000446:	f7ff ffa5 	bl	1a000394 <ld_word>
1a00044a:	4604      	mov	r4, r0
	if (fs->fs_type == FS_FAT32) {
1a00044c:	7833      	ldrb	r3, [r6, #0]
1a00044e:	2b03      	cmp	r3, #3
1a000450:	d105      	bne.n	1a00045e <ld_clust+0x22>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
1a000452:	f105 0014 	add.w	r0, r5, #20
1a000456:	f7ff ff9d 	bl	1a000394 <ld_word>
1a00045a:	ea44 4000 	orr.w	r0, r4, r0, lsl #16
	}

	return cl;
}
1a00045e:	bd70      	pop	{r4, r5, r6, pc}

1a000460 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
1a000460:	b570      	push	{r4, r5, r6, lr}
1a000462:	4606      	mov	r6, r0
1a000464:	460d      	mov	r5, r1
1a000466:	4614      	mov	r4, r2
	st_word(dir + DIR_FstClusLO, (WORD)cl);
1a000468:	f101 001a 	add.w	r0, r1, #26
1a00046c:	b291      	uxth	r1, r2
1a00046e:	f7ff ffa3 	bl	1a0003b8 <st_word>
	if (fs->fs_type == FS_FAT32) {
1a000472:	7833      	ldrb	r3, [r6, #0]
1a000474:	2b03      	cmp	r3, #3
1a000476:	d104      	bne.n	1a000482 <st_clust+0x22>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
1a000478:	f105 0014 	add.w	r0, r5, #20
1a00047c:	0c21      	lsrs	r1, r4, #16
1a00047e:	f7ff ff9b 	bl	1a0003b8 <st_word>
1a000482:	bd70      	pop	{r4, r5, r6, pc}

1a000484 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
1a000484:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000488:	4682      	mov	sl, r0
1a00048a:	4689      	mov	r9, r1
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
1a00048c:	680f      	ldr	r7, [r1, #0]
1a00048e:	f100 0b20 	add.w	fp, r0, #32
	mem_set(sfn, ' ', 11);
1a000492:	4658      	mov	r0, fp
1a000494:	2120      	movs	r1, #32
1a000496:	220b      	movs	r2, #11
1a000498:	f7ff ffa6 	bl	1a0003e8 <mem_set>
	si = i = 0; ni = 8;
1a00049c:	2600      	movs	r6, #0
1a00049e:	4633      	mov	r3, r6
1a0004a0:	f04f 0808 	mov.w	r8, #8
1a0004a4:	e000      	b.n	1a0004a8 <create_name+0x24>
1a0004a6:	462b      	mov	r3, r5
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
1a0004a8:	1c5d      	adds	r5, r3, #1
1a0004aa:	5cfc      	ldrb	r4, [r7, r3]
		if (c <= ' ') break; 			/* Break if end of the path name */
1a0004ac:	2c20      	cmp	r4, #32
1a0004ae:	d92b      	bls.n	1a000508 <create_name+0x84>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
1a0004b0:	2c2f      	cmp	r4, #47	; 0x2f
1a0004b2:	d003      	beq.n	1a0004bc <create_name+0x38>
1a0004b4:	2c5c      	cmp	r4, #92	; 0x5c
1a0004b6:	d107      	bne.n	1a0004c8 <create_name+0x44>
1a0004b8:	e000      	b.n	1a0004bc <create_name+0x38>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
1a0004ba:	3501      	adds	r5, #1
1a0004bc:	5d7b      	ldrb	r3, [r7, r5]
1a0004be:	2b2f      	cmp	r3, #47	; 0x2f
1a0004c0:	d0fb      	beq.n	1a0004ba <create_name+0x36>
1a0004c2:	2b5c      	cmp	r3, #92	; 0x5c
1a0004c4:	d0f9      	beq.n	1a0004ba <create_name+0x36>
1a0004c6:	e01f      	b.n	1a000508 <create_name+0x84>
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
1a0004c8:	2c2e      	cmp	r4, #46	; 0x2e
1a0004ca:	d001      	beq.n	1a0004d0 <create_name+0x4c>
1a0004cc:	4546      	cmp	r6, r8
1a0004ce:	d308      	bcc.n	1a0004e2 <create_name+0x5e>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
1a0004d0:	f1b8 0f0b 	cmp.w	r8, #11
1a0004d4:	d02d      	beq.n	1a000532 <create_name+0xae>
1a0004d6:	2c2e      	cmp	r4, #46	; 0x2e
1a0004d8:	d12e      	bne.n	1a000538 <create_name+0xb4>
			i = 8; ni = 11;				/* Goto extension */
1a0004da:	2608      	movs	r6, #8
1a0004dc:	f04f 080b 	mov.w	r8, #11
1a0004e0:	e7e1      	b.n	1a0004a6 <create_name+0x22>
			continue;
		}
		if (c >= 0x80) {				/* Extended character? */
1a0004e2:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0004e6:	d12a      	bne.n	1a00053e <create_name+0xba>
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
1a0004e8:	4819      	ldr	r0, [pc, #100]	; (1a000550 <create_name+0xcc>)
1a0004ea:	4621      	mov	r1, r4
1a0004ec:	f7ff ff92 	bl	1a000414 <chk_chr>
1a0004f0:	bb40      	cbnz	r0, 1a000544 <create_name+0xc0>
			if (IsLower(c)) c -= 0x20;	/* To upper */
1a0004f2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
1a0004f6:	b2db      	uxtb	r3, r3
1a0004f8:	2b19      	cmp	r3, #25
1a0004fa:	d801      	bhi.n	1a000500 <create_name+0x7c>
1a0004fc:	3c20      	subs	r4, #32
1a0004fe:	b2e4      	uxtb	r4, r4
			sfn[i++] = c;
1a000500:	f80b 4006 	strb.w	r4, [fp, r6]
1a000504:	3601      	adds	r6, #1
1a000506:	e7ce      	b.n	1a0004a6 <create_name+0x22>
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
1a000508:	443d      	add	r5, r7
1a00050a:	f8c9 5000 	str.w	r5, [r9]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
1a00050e:	b1e6      	cbz	r6, 1a00054a <create_name+0xc6>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
1a000510:	f89a 3020 	ldrb.w	r3, [sl, #32]
1a000514:	2be5      	cmp	r3, #229	; 0xe5
1a000516:	d102      	bne.n	1a00051e <create_name+0x9a>
1a000518:	2305      	movs	r3, #5
1a00051a:	f88a 3020 	strb.w	r3, [sl, #32]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
1a00051e:	2c20      	cmp	r4, #32
1a000520:	d801      	bhi.n	1a000526 <create_name+0xa2>
1a000522:	2304      	movs	r3, #4
1a000524:	e000      	b.n	1a000528 <create_name+0xa4>
1a000526:	2300      	movs	r3, #0
1a000528:	f88a 302b 	strb.w	r3, [sl, #43]	; 0x2b

	return FR_OK;
1a00052c:	2000      	movs	r0, #0
1a00052e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
			break;
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
1a000532:	2006      	movs	r0, #6
1a000534:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000538:	2006      	movs	r0, #6
1a00053a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (c >= 0x80) {				/* Extended character? */
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII only cfg) */
1a00053e:	2006      	movs	r0, #6
1a000540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
1a000544:	2006      	movs	r0, #6
1a000546:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (IsLower(c)) c -= 0x20;	/* To upper */
			sfn[i++] = c;
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
1a00054a:	2006      	movs	r0, #6
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
1a00054c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000550:	1a00387c 	.word	0x1a00387c

1a000554 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
1a000554:	6801      	ldr	r1, [r0, #0]
1a000556:	b921      	cbnz	r1, 1a000562 <get_ldnumber+0xe>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a000558:	f04f 33ff 	mov.w	r3, #4294967295
1a00055c:	e01f      	b.n	1a00059e <get_ldnumber+0x4a>
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
1a00055e:	3201      	adds	r2, #1
1a000560:	e000      	b.n	1a000564 <get_ldnumber+0x10>
1a000562:	460a      	mov	r2, r1
1a000564:	7813      	ldrb	r3, [r2, #0]
1a000566:	2b20      	cmp	r3, #32
1a000568:	d901      	bls.n	1a00056e <get_ldnumber+0x1a>
1a00056a:	2b3a      	cmp	r3, #58	; 0x3a
1a00056c:	d1f7      	bne.n	1a00055e <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
1a00056e:	2b3a      	cmp	r3, #58	; 0x3a
1a000570:	d114      	bne.n	1a00059c <get_ldnumber+0x48>

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
1a000572:	b410      	push	{r4}

	if (*path) {	/* If the pointer is not a null */
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
1a000574:	1c4c      	adds	r4, r1, #1
1a000576:	780b      	ldrb	r3, [r1, #0]
1a000578:	3b30      	subs	r3, #48	; 0x30
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
1a00057a:	2b09      	cmp	r3, #9
1a00057c:	d805      	bhi.n	1a00058a <get_ldnumber+0x36>
1a00057e:	4294      	cmp	r4, r2
1a000580:	d106      	bne.n	1a000590 <get_ldnumber+0x3c>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
1a000582:	b943      	cbnz	r3, 1a000596 <get_ldnumber+0x42>
					vol = (int)i;
					*path = ++tt;
1a000584:	3201      	adds	r2, #1
1a000586:	6002      	str	r2, [r0, #0]
1a000588:	e00b      	b.n	1a0005a2 <get_ldnumber+0x4e>
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
1a00058a:	f04f 33ff 	mov.w	r3, #4294967295
1a00058e:	e008      	b.n	1a0005a2 <get_ldnumber+0x4e>
1a000590:	f04f 33ff 	mov.w	r3, #4294967295
1a000594:	e005      	b.n	1a0005a2 <get_ldnumber+0x4e>
1a000596:	f04f 33ff 	mov.w	r3, #4294967295
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
1a00059a:	e002      	b.n	1a0005a2 <get_ldnumber+0x4e>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
1a00059c:	2300      	movs	r3, #0
#endif
	}
	return vol;
}
1a00059e:	4618      	mov	r0, r3
1a0005a0:	4770      	bx	lr
1a0005a2:	4618      	mov	r0, r3
1a0005a4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0005a8:	4770      	bx	lr
1a0005aa:	bf00      	nop

1a0005ac <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	void* dfp,		/* Pointer to the FIL/DIR object to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
1a0005ac:	b538      	push	{r3, r4, r5, lr}
1a0005ae:	460c      	mov	r4, r1
	_FDID *obj = (_FDID*)dfp;	/* Assuming .obj in the FIL/DIR is the first member */
	FRESULT res;


	if (!dfp || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
1a0005b0:	b170      	cbz	r0, 1a0005d0 <validate+0x24>
1a0005b2:	4605      	mov	r5, r0
1a0005b4:	6803      	ldr	r3, [r0, #0]
1a0005b6:	b15b      	cbz	r3, 1a0005d0 <validate+0x24>
1a0005b8:	781a      	ldrb	r2, [r3, #0]
1a0005ba:	b14a      	cbz	r2, 1a0005d0 <validate+0x24>
1a0005bc:	88d9      	ldrh	r1, [r3, #6]
1a0005be:	8882      	ldrh	r2, [r0, #4]
1a0005c0:	4291      	cmp	r1, r2
1a0005c2:	d105      	bne.n	1a0005d0 <validate+0x24>
1a0005c4:	7858      	ldrb	r0, [r3, #1]
1a0005c6:	f001 f979 	bl	1a0018bc <disk_status>
1a0005ca:	f010 0f01 	tst.w	r0, #1
1a0005ce:	d003      	beq.n	1a0005d8 <validate+0x2c>
		*fs = 0;				/* The object is invalid */
1a0005d0:	2300      	movs	r3, #0
1a0005d2:	6023      	str	r3, [r4, #0]
		res = FR_INVALID_OBJECT;
1a0005d4:	2009      	movs	r0, #9
1a0005d6:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
1a0005d8:	682b      	ldr	r3, [r5, #0]
1a0005da:	6023      	str	r3, [r4, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;
1a0005dc:	2000      	movs	r0, #0
	}
	return res;
}
1a0005de:	bd38      	pop	{r3, r4, r5, pc}

1a0005e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
1a0005e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;


	if (fs->wflag) {	/* Write back the sector if it is dirty */
1a0005e2:	78c3      	ldrb	r3, [r0, #3]
1a0005e4:	b303      	cbz	r3, 1a000628 <sync_window+0x48>
1a0005e6:	4604      	mov	r4, r0
		wsect = fs->winsect;	/* Current sector number */
1a0005e8:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
1a0005ea:	f100 0730 	add.w	r7, r0, #48	; 0x30
1a0005ee:	7840      	ldrb	r0, [r0, #1]
1a0005f0:	4639      	mov	r1, r7
1a0005f2:	4632      	mov	r2, r6
1a0005f4:	2301      	movs	r3, #1
1a0005f6:	f001 f9af 	bl	1a001958 <disk_write>
1a0005fa:	b9b8      	cbnz	r0, 1a00062c <sync_window+0x4c>
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
1a0005fc:	2300      	movs	r3, #0
1a0005fe:	70e3      	strb	r3, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
1a000600:	6a23      	ldr	r3, [r4, #32]
1a000602:	1af3      	subs	r3, r6, r3
1a000604:	69a2      	ldr	r2, [r4, #24]
1a000606:	4293      	cmp	r3, r2
1a000608:	d212      	bcs.n	1a000630 <sync_window+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a00060a:	78a5      	ldrb	r5, [r4, #2]
1a00060c:	e008      	b.n	1a000620 <sync_window+0x40>
					wsect += fs->fsize;
1a00060e:	69a3      	ldr	r3, [r4, #24]
1a000610:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
1a000612:	7860      	ldrb	r0, [r4, #1]
1a000614:	4639      	mov	r1, r7
1a000616:	4632      	mov	r2, r6
1a000618:	2301      	movs	r3, #1
1a00061a:	f001 f99d 	bl	1a001958 <disk_write>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
		} else {
			fs->wflag = 0;
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
1a00061e:	3d01      	subs	r5, #1
1a000620:	2d01      	cmp	r5, #1
1a000622:	d8f4      	bhi.n	1a00060e <sync_window+0x2e>
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a000624:	2000      	movs	r0, #0
1a000626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000628:	2000      	movs	r0, #0
1a00062a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	if (fs->wflag) {	/* Write back the sector if it is dirty */
		wsect = fs->winsect;	/* Current sector number */
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
			res = FR_DISK_ERR;
1a00062c:	2001      	movs	r0, #1
1a00062e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS* fs			/* File system object */
)
{
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
1a000630:	2000      	movs	r0, #0
				}
			}
		}
	}
	return res;
}
1a000632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000634 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
1a000634:	b570      	push	{r4, r5, r6, lr}
1a000636:	4604      	mov	r4, r0
1a000638:	460d      	mov	r5, r1
	FRESULT res = FR_OK;


	if (sector != fs->winsect) {	/* Window offset changed? */
1a00063a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
1a00063c:	428b      	cmp	r3, r1
1a00063e:	d010      	beq.n	1a000662 <move_window+0x2e>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
1a000640:	f7ff ffce 	bl	1a0005e0 <sync_window>
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
1a000644:	4606      	mov	r6, r0
1a000646:	b968      	cbnz	r0, 1a000664 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
1a000648:	7860      	ldrb	r0, [r4, #1]
1a00064a:	f104 0130 	add.w	r1, r4, #48	; 0x30
1a00064e:	462a      	mov	r2, r5
1a000650:	2301      	movs	r3, #1
1a000652:	f001 f93d 	bl	1a0018d0 <disk_read>
1a000656:	b110      	cbz	r0, 1a00065e <move_window+0x2a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
				res = FR_DISK_ERR;
1a000658:	2601      	movs	r6, #1
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
1a00065a:	f04f 35ff 	mov.w	r5, #4294967295
				res = FR_DISK_ERR;
			}
			fs->winsect = sector;
1a00065e:	62e5      	str	r5, [r4, #44]	; 0x2c
1a000660:	e000      	b.n	1a000664 <move_window+0x30>
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
	FRESULT res = FR_OK;
1a000662:	2600      	movs	r6, #0
			}
			fs->winsect = sector;
		}
	}
	return res;
}
1a000664:	4630      	mov	r0, r6
1a000666:	bd70      	pop	{r4, r5, r6, pc}

1a000668 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
1a000668:	b510      	push	{r4, lr}
1a00066a:	4604      	mov	r4, r0
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
1a00066c:	2300      	movs	r3, #0
1a00066e:	70c3      	strb	r3, [r0, #3]
1a000670:	f04f 33ff 	mov.w	r3, #4294967295
1a000674:	62c3      	str	r3, [r0, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a000676:	f7ff ffdd 	bl	1a000634 <move_window>
1a00067a:	bb18      	cbnz	r0, 1a0006c4 <check_fs+0x5c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a00067c:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000680:	f7ff fe88 	bl	1a000394 <ld_word>
1a000684:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a000688:	4298      	cmp	r0, r3
1a00068a:	d11d      	bne.n	1a0006c8 <check_fs+0x60>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
1a00068c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
1a000690:	2be9      	cmp	r3, #233	; 0xe9
1a000692:	d005      	beq.n	1a0006a0 <check_fs+0x38>
1a000694:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a000696:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
1a00069a:	4a0f      	ldr	r2, [pc, #60]	; (1a0006d8 <check_fs+0x70>)
1a00069c:	4293      	cmp	r3, r2
1a00069e:	d115      	bne.n	1a0006cc <check_fs+0x64>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a0006a0:	f104 0066 	add.w	r0, r4, #102	; 0x66
1a0006a4:	f7ff fe7c 	bl	1a0003a0 <ld_dword>
1a0006a8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
1a0006ac:	4b0b      	ldr	r3, [pc, #44]	; (1a0006dc <check_fs+0x74>)
1a0006ae:	4298      	cmp	r0, r3
1a0006b0:	d00e      	beq.n	1a0006d0 <check_fs+0x68>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a0006b2:	f104 0082 	add.w	r0, r4, #130	; 0x82
1a0006b6:	f7ff fe73 	bl	1a0003a0 <ld_dword>
1a0006ba:	4b09      	ldr	r3, [pc, #36]	; (1a0006e0 <check_fs+0x78>)
1a0006bc:	4298      	cmp	r0, r3
1a0006be:	d009      	beq.n	1a0006d4 <check_fs+0x6c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a0006c0:	2002      	movs	r0, #2
1a0006c2:	bd10      	pop	{r4, pc}
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT-VBR or not */
)
{
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
1a0006c4:	2004      	movs	r0, #4
1a0006c6:	bd10      	pop	{r4, pc}

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
1a0006c8:	2003      	movs	r0, #3
1a0006ca:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
1a0006cc:	2002      	movs	r0, #2
1a0006ce:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
1a0006d0:	2000      	movs	r0, #0
1a0006d2:	bd10      	pop	{r4, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
1a0006d4:	2000      	movs	r0, #0
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
1a0006d6:	bd10      	pop	{r4, pc}
1a0006d8:	009000eb 	.word	0x009000eb
1a0006dc:	00544146 	.word	0x00544146
1a0006e0:	33544146 	.word	0x33544146

1a0006e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
1a0006e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0006e8:	b084      	sub	sp, #16
1a0006ea:	460e      	mov	r6, r1
1a0006ec:	4617      	mov	r7, r2
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
1a0006ee:	2300      	movs	r3, #0
1a0006f0:	600b      	str	r3, [r1, #0]
	vol = get_ldnumber(path);
1a0006f2:	f7ff ff2f 	bl	1a000554 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0006f6:	1e05      	subs	r5, r0, #0
1a0006f8:	f2c0 812b 	blt.w	1a000952 <find_volume+0x26e>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
1a0006fc:	4baa      	ldr	r3, [pc, #680]	; (1a0009a8 <find_volume+0x2c4>)
1a0006fe:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a000702:	2c00      	cmp	r4, #0
1a000704:	f000 8127 	beq.w	1a000956 <find_volume+0x272>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
1a000708:	6034      	str	r4, [r6, #0]

	mode &= ~FA_READ;					/* Desired access mode, write access or not */
1a00070a:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
1a00070e:	7823      	ldrb	r3, [r4, #0]
1a000710:	b173      	cbz	r3, 1a000730 <find_volume+0x4c>
		stat = disk_status(fs->drv);
1a000712:	7860      	ldrb	r0, [r4, #1]
1a000714:	f001 f8d2 	bl	1a0018bc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
1a000718:	f010 0f01 	tst.w	r0, #1
1a00071c:	d108      	bne.n	1a000730 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
1a00071e:	2f00      	cmp	r7, #0
1a000720:	f000 811b 	beq.w	1a00095a <find_volume+0x276>
1a000724:	f010 0f04 	tst.w	r0, #4
1a000728:	f040 8119 	bne.w	1a00095e <find_volume+0x27a>
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a00072c:	2000      	movs	r0, #0
1a00072e:	e137      	b.n	1a0009a0 <find_volume+0x2bc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
1a000730:	2300      	movs	r3, #0
1a000732:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
1a000734:	b2e8      	uxtb	r0, r5
1a000736:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
1a000738:	f001 f814 	bl	1a001764 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
1a00073c:	f010 0f01 	tst.w	r0, #1
1a000740:	f040 810f 	bne.w	1a000962 <find_volume+0x27e>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
1a000744:	b11f      	cbz	r7, 1a00074e <find_volume+0x6a>
1a000746:	f010 0f04 	tst.w	r0, #4
1a00074a:	f040 810c 	bne.w	1a000966 <find_volume+0x282>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
1a00074e:	4620      	mov	r0, r4
1a000750:	2100      	movs	r1, #0
1a000752:	f7ff ff89 	bl	1a000668 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
1a000756:	2802      	cmp	r0, #2
1a000758:	d014      	beq.n	1a000784 <find_volume+0xa0>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
1a00075a:	2600      	movs	r6, #0
1a00075c:	e027      	b.n	1a0007ae <find_volume+0xca>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a00075e:	eb04 1005 	add.w	r0, r4, r5, lsl #4
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a000762:	f890 31f2 	ldrb.w	r3, [r0, #498]	; 0x1f2
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
			pt = fs->win + (MBR_Table + i * SZ_PTE);
1a000766:	f500 70f7 	add.w	r0, r0, #494	; 0x1ee
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
1a00076a:	b11b      	cbz	r3, 1a000774 <find_volume+0x90>
1a00076c:	3008      	adds	r0, #8
1a00076e:	f7ff fe17 	bl	1a0003a0 <ld_dword>
1a000772:	e000      	b.n	1a000776 <find_volume+0x92>
1a000774:	2000      	movs	r0, #0
1a000776:	ab04      	add	r3, sp, #16
1a000778:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a00077c:	f843 0c10 	str.w	r0, [r3, #-16]
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
		for (i = 0; i < 4; i++) {			/* Get partition offset */
1a000780:	3501      	adds	r5, #1
1a000782:	e000      	b.n	1a000786 <find_volume+0xa2>
1a000784:	2500      	movs	r5, #0
1a000786:	2d03      	cmp	r5, #3
1a000788:	d9e9      	bls.n	1a00075e <find_volume+0x7a>
1a00078a:	2500      	movs	r5, #0
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
		if (i) i--;
		do {								/* Find an FAT volume */
			bsect = br[i];
1a00078c:	ab04      	add	r3, sp, #16
1a00078e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
1a000792:	f853 6c10 	ldr.w	r6, [r3, #-16]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
1a000796:	b126      	cbz	r6, 1a0007a2 <find_volume+0xbe>
1a000798:	4620      	mov	r0, r4
1a00079a:	4631      	mov	r1, r6
1a00079c:	f7ff ff64 	bl	1a000668 <check_fs>
1a0007a0:	e000      	b.n	1a0007a4 <find_volume+0xc0>
1a0007a2:	2003      	movs	r0, #3
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
1a0007a4:	2801      	cmp	r0, #1
1a0007a6:	d902      	bls.n	1a0007ae <find_volume+0xca>
1a0007a8:	3501      	adds	r5, #1
1a0007aa:	2d03      	cmp	r5, #3
1a0007ac:	d9ee      	bls.n	1a00078c <find_volume+0xa8>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a0007ae:	2804      	cmp	r0, #4
1a0007b0:	f000 80db 	beq.w	1a00096a <find_volume+0x286>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a0007b4:	2801      	cmp	r0, #1
1a0007b6:	f200 80da 	bhi.w	1a00096e <find_volume+0x28a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a0007ba:	f104 003b 	add.w	r0, r4, #59	; 0x3b
1a0007be:	f7ff fde9 	bl	1a000394 <ld_word>
1a0007c2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
1a0007c6:	f040 80d4 	bne.w	1a000972 <find_volume+0x28e>

		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
1a0007ca:	f104 0046 	add.w	r0, r4, #70	; 0x46
1a0007ce:	f7ff fde1 	bl	1a000394 <ld_word>
1a0007d2:	4680      	mov	r8, r0
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
1a0007d4:	b920      	cbnz	r0, 1a0007e0 <find_volume+0xfc>
1a0007d6:	f104 0054 	add.w	r0, r4, #84	; 0x54
1a0007da:	f7ff fde1 	bl	1a0003a0 <ld_dword>
1a0007de:	4680      	mov	r8, r0
		fs->fsize = fasize;
1a0007e0:	f8c4 8018 	str.w	r8, [r4, #24]

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
1a0007e4:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
1a0007e8:	f884 9002 	strb.w	r9, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a0007ec:	f109 33ff 	add.w	r3, r9, #4294967295
1a0007f0:	b2db      	uxtb	r3, r3
1a0007f2:	2b01      	cmp	r3, #1
1a0007f4:	f200 80bf 	bhi.w	1a000976 <find_volume+0x292>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */
1a0007f8:	fb08 f909 	mul.w	r9, r8, r9

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
1a0007fc:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
1a000800:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a000802:	2d00      	cmp	r5, #0
1a000804:	f000 80b9 	beq.w	1a00097a <find_volume+0x296>
1a000808:	1e6b      	subs	r3, r5, #1
1a00080a:	421d      	tst	r5, r3
1a00080c:	f040 80b7 	bne.w	1a00097e <find_volume+0x29a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
1a000810:	f104 0041 	add.w	r0, r4, #65	; 0x41
1a000814:	f7ff fdbe 	bl	1a000394 <ld_word>
1a000818:	4682      	mov	sl, r0
1a00081a:	8120      	strh	r0, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a00081c:	f010 0f0f 	tst.w	r0, #15
1a000820:	f040 80af 	bne.w	1a000982 <find_volume+0x29e>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
1a000824:	f104 0043 	add.w	r0, r4, #67	; 0x43
1a000828:	f7ff fdb4 	bl	1a000394 <ld_word>
1a00082c:	4607      	mov	r7, r0
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
1a00082e:	b920      	cbnz	r0, 1a00083a <find_volume+0x156>
1a000830:	f104 0050 	add.w	r0, r4, #80	; 0x50
1a000834:	f7ff fdb4 	bl	1a0003a0 <ld_dword>
1a000838:	4607      	mov	r7, r0

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
1a00083a:	f104 003e 	add.w	r0, r4, #62	; 0x3e
1a00083e:	f7ff fda9 	bl	1a000394 <ld_word>
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000842:	4603      	mov	r3, r0
1a000844:	2800      	cmp	r0, #0
1a000846:	f000 809e 	beq.w	1a000986 <find_volume+0x2a2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
1a00084a:	eb00 0209 	add.w	r2, r0, r9
1a00084e:	eb02 121a 	add.w	r2, r2, sl, lsr #4
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a000852:	4297      	cmp	r7, r2
1a000854:	f0c0 8099 	bcc.w	1a00098a <find_volume+0x2a6>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
1a000858:	1abf      	subs	r7, r7, r2
1a00085a:	fbb7 f5f5 	udiv	r5, r7, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a00085e:	2d00      	cmp	r5, #0
1a000860:	f000 8095 	beq.w	1a00098e <find_volume+0x2aa>
		fmt = FS_FAT32;
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000864:	f64f 71f5 	movw	r1, #65525	; 0xfff5
1a000868:	428d      	cmp	r5, r1
1a00086a:	d901      	bls.n	1a000870 <find_volume+0x18c>
		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
		fmt = FS_FAT32;
1a00086c:	2703      	movs	r7, #3
1a00086e:	e000      	b.n	1a000872 <find_volume+0x18e>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
1a000870:	2702      	movs	r7, #2
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
1a000872:	f640 71f5 	movw	r1, #4085	; 0xff5
1a000876:	428d      	cmp	r5, r1
1a000878:	d800      	bhi.n	1a00087c <find_volume+0x198>
1a00087a:	2701      	movs	r7, #1

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
1a00087c:	3502      	adds	r5, #2
1a00087e:	6165      	str	r5, [r4, #20]
		fs->volbase = bsect;								/* Volume start sector */
1a000880:	61e6      	str	r6, [r4, #28]
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
1a000882:	4433      	add	r3, r6
1a000884:	6223      	str	r3, [r4, #32]
		fs->database = bsect + sysect;						/* Data start sector */
1a000886:	4432      	add	r2, r6
1a000888:	62a2      	str	r2, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
1a00088a:	2f03      	cmp	r7, #3
1a00088c:	d10f      	bne.n	1a0008ae <find_volume+0x1ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a00088e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
1a000892:	f7ff fd7f 	bl	1a000394 <ld_word>
1a000896:	2800      	cmp	r0, #0
1a000898:	d17b      	bne.n	1a000992 <find_volume+0x2ae>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a00089a:	f1ba 0f00 	cmp.w	sl, #0
1a00089e:	d17a      	bne.n	1a000996 <find_volume+0x2b2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
1a0008a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a0008a4:	f7ff fd7c 	bl	1a0003a0 <ld_dword>
1a0008a8:	6260      	str	r0, [r4, #36]	; 0x24
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
1a0008aa:	00ad      	lsls	r5, r5, #2
1a0008ac:	e00e      	b.n	1a0008cc <find_volume+0x1e8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a0008ae:	f1ba 0f00 	cmp.w	sl, #0
1a0008b2:	d072      	beq.n	1a00099a <find_volume+0x2b6>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
1a0008b4:	444b      	add	r3, r9
1a0008b6:	6263      	str	r3, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1a0008b8:	2f02      	cmp	r7, #2
1a0008ba:	d101      	bne.n	1a0008c0 <find_volume+0x1dc>
1a0008bc:	006d      	lsls	r5, r5, #1
1a0008be:	e005      	b.n	1a0008cc <find_volume+0x1e8>
1a0008c0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
1a0008c4:	f005 0501 	and.w	r5, r5, #1
1a0008c8:	eb05 0553 	add.w	r5, r5, r3, lsr #1
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a0008cc:	f205 15ff 	addw	r5, r5, #511	; 0x1ff
1a0008d0:	ebb8 2f55 	cmp.w	r8, r5, lsr #9
1a0008d4:	d363      	bcc.n	1a00099e <find_volume+0x2ba>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
1a0008d6:	f04f 33ff 	mov.w	r3, #4294967295
1a0008da:	6123      	str	r3, [r4, #16]
1a0008dc:	60e3      	str	r3, [r4, #12]
		fs->fsi_flag = 0x80;
1a0008de:	2380      	movs	r3, #128	; 0x80
1a0008e0:	7123      	strb	r3, [r4, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
1a0008e2:	2f03      	cmp	r7, #3
1a0008e4:	d12c      	bne.n	1a000940 <find_volume+0x25c>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
1a0008e6:	f104 0060 	add.w	r0, r4, #96	; 0x60
1a0008ea:	f7ff fd53 	bl	1a000394 <ld_word>
1a0008ee:	2801      	cmp	r0, #1
1a0008f0:	d126      	bne.n	1a000940 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
1a0008f2:	4620      	mov	r0, r4
1a0008f4:	1c71      	adds	r1, r6, #1
1a0008f6:	f7ff fe9d 	bl	1a000634 <move_window>
1a0008fa:	bb08      	cbnz	r0, 1a000940 <find_volume+0x25c>
		{
			fs->fsi_flag = 0;
1a0008fc:	2300      	movs	r3, #0
1a0008fe:	7123      	strb	r3, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
1a000900:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a000904:	f7ff fd46 	bl	1a000394 <ld_word>
1a000908:	f64a 2355 	movw	r3, #43605	; 0xaa55
1a00090c:	4298      	cmp	r0, r3
1a00090e:	d117      	bne.n	1a000940 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
1a000910:	f104 0030 	add.w	r0, r4, #48	; 0x30
1a000914:	f7ff fd44 	bl	1a0003a0 <ld_dword>
1a000918:	4b24      	ldr	r3, [pc, #144]	; (1a0009ac <find_volume+0x2c8>)
1a00091a:	4298      	cmp	r0, r3
1a00091c:	d110      	bne.n	1a000940 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
1a00091e:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a000922:	f7ff fd3d 	bl	1a0003a0 <ld_dword>
1a000926:	4b22      	ldr	r3, [pc, #136]	; (1a0009b0 <find_volume+0x2cc>)
1a000928:	4298      	cmp	r0, r3
1a00092a:	d109      	bne.n	1a000940 <find_volume+0x25c>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
1a00092c:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a000930:	f7ff fd36 	bl	1a0003a0 <ld_dword>
1a000934:	6120      	str	r0, [r4, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
1a000936:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a00093a:	f7ff fd31 	bl	1a0003a0 <ld_dword>
1a00093e:	60e0      	str	r0, [r4, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;	/* FAT sub-type */
1a000940:	7027      	strb	r7, [r4, #0]
	fs->id = ++Fsid;	/* File system mount ID */
1a000942:	4a1c      	ldr	r2, [pc, #112]	; (1a0009b4 <find_volume+0x2d0>)
1a000944:	8813      	ldrh	r3, [r2, #0]
1a000946:	3301      	adds	r3, #1
1a000948:	b29b      	uxth	r3, r3
1a00094a:	8013      	strh	r3, [r2, #0]
1a00094c:	80e3      	strh	r3, [r4, #6]
	fs->cdir = 0;		/* Initialize current directory */
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
1a00094e:	2000      	movs	r0, #0
1a000950:	e026      	b.n	1a0009a0 <find_volume+0x2bc>


	/* Get logical drive number from the path name */
	*rfs = 0;
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
1a000952:	200b      	movs	r0, #11
1a000954:	e024      	b.n	1a0009a0 <find_volume+0x2bc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1a000956:	200c      	movs	r0, #12
1a000958:	e022      	b.n	1a0009a0 <find_volume+0x2bc>
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
			}
			return FR_OK;				/* The file system object is valid */
1a00095a:	2000      	movs	r0, #0
1a00095c:	e020      	b.n	1a0009a0 <find_volume+0x2bc>
	mode &= ~FA_READ;					/* Desired access mode, write access or not */
	if (fs->fs_type) {					/* If the volume has been mounted */
		stat = disk_status(fs->drv);
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
				return FR_WRITE_PROTECTED;
1a00095e:	200a      	movs	r0, #10
1a000960:	e01e      	b.n	1a0009a0 <find_volume+0x2bc>

	fs->fs_type = 0;					/* Clear the file system object */
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
1a000962:	2003      	movs	r0, #3
1a000964:	e01c      	b.n	1a0009a0 <find_volume+0x2bc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
		return FR_WRITE_PROTECTED;
1a000966:	200a      	movs	r0, #10
1a000968:	e01a      	b.n	1a0009a0 <find_volume+0x2bc>
		do {								/* Find an FAT volume */
			bsect = br[i];
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
		} while (!LD2PT(vol) && fmt >= 2 && ++i < 4);
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
1a00096a:	2001      	movs	r0, #1
1a00096c:	e018      	b.n	1a0009a0 <find_volume+0x2bc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
1a00096e:	200d      	movs	r0, #13
1a000970:	e016      	b.n	1a0009a0 <find_volume+0x2bc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
1a000972:	200d      	movs	r0, #13
1a000974:	e014      	b.n	1a0009a0 <find_volume+0x2bc>
		fasize = ld_word(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
		fs->fsize = fasize;

		fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FATs */
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
1a000976:	200d      	movs	r0, #13
1a000978:	e012      	b.n	1a0009a0 <find_volume+0x2bc>
		fasize *= fs->n_fats;								/* Number of sectors for FAT area */

		fs->csize = fs->win[BPB_SecPerClus];				/* Cluster size */
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1a00097a:	200d      	movs	r0, #13
1a00097c:	e010      	b.n	1a0009a0 <find_volume+0x2bc>
1a00097e:	200d      	movs	r0, #13
1a000980:	e00e      	b.n	1a0009a0 <find_volume+0x2bc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
1a000982:	200d      	movs	r0, #13
1a000984:	e00c      	b.n	1a0009a0 <find_volume+0x2bc>

		tsect = ld_word(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
		if (nrsv == 0) return FR_NO_FILESYSTEM;				/* (Must not be 0) */
1a000986:	200d      	movs	r0, #13
1a000988:	e00a      	b.n	1a0009a0 <find_volume+0x2bc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
		if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1a00098a:	200d      	movs	r0, #13
1a00098c:	e008      	b.n	1a0009a0 <find_volume+0x2bc>
		nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
		if (nclst == 0) return FR_NO_FILESYSTEM;			/* (Invalid volume size) */
1a00098e:	200d      	movs	r0, #13
1a000990:	e006      	b.n	1a0009a0 <find_volume+0x2bc>
		fs->n_fatent = nclst + 2;							/* Number of FAT entries */
		fs->volbase = bsect;								/* Volume start sector */
		fs->fatbase = bsect + nrsv; 						/* FAT start sector */
		fs->database = bsect + sysect;						/* Data start sector */
		if (fmt == FS_FAT32) {
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
1a000992:	200d      	movs	r0, #13
1a000994:	e004      	b.n	1a0009a0 <find_volume+0x2bc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1a000996:	200d      	movs	r0, #13
1a000998:	e002      	b.n	1a0009a0 <find_volume+0x2bc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
			szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
1a00099a:	200d      	movs	r0, #13
1a00099c:	e000      	b.n	1a0009a0 <find_volume+0x2bc>
			fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
			szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
1a00099e:	200d      	movs	r0, #13
#endif
#if _FS_LOCK != 0		/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
1a0009a0:	b004      	add	sp, #16
1a0009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0009a6:	bf00      	nop
1a0009a8:	1000052c 	.word	0x1000052c
1a0009ac:	41615252 	.word	0x41615252
1a0009b0:	61417272 	.word	0x61417272
1a0009b4:	10000528 	.word	0x10000528

1a0009b8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
1a0009b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0009bc:	460c      	mov	r4, r1
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
1a0009be:	2901      	cmp	r1, #1
1a0009c0:	d977      	bls.n	1a000ab2 <put_fat+0xfa>
1a0009c2:	4605      	mov	r5, r0
1a0009c4:	4617      	mov	r7, r2
1a0009c6:	6943      	ldr	r3, [r0, #20]
1a0009c8:	428b      	cmp	r3, r1
1a0009ca:	d974      	bls.n	1a000ab6 <put_fat+0xfe>
		switch (fs->fs_type) {
1a0009cc:	7803      	ldrb	r3, [r0, #0]
1a0009ce:	2b02      	cmp	r3, #2
1a0009d0:	d043      	beq.n	1a000a5a <put_fat+0xa2>
1a0009d2:	2b03      	cmp	r3, #3
1a0009d4:	d053      	beq.n	1a000a7e <put_fat+0xc6>
1a0009d6:	2b01      	cmp	r3, #1
1a0009d8:	d16f      	bne.n	1a000aba <put_fat+0x102>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
1a0009da:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a0009de:	6a01      	ldr	r1, [r0, #32]
1a0009e0:	eb01 2158 	add.w	r1, r1, r8, lsr #9
1a0009e4:	f7ff fe26 	bl	1a000634 <move_window>
			if (res != FR_OK) break;
1a0009e8:	4606      	mov	r6, r0
1a0009ea:	2800      	cmp	r0, #0
1a0009ec:	d166      	bne.n	1a000abc <put_fat+0x104>
			p = fs->win + bc++ % SS(fs);
1a0009ee:	f108 0901 	add.w	r9, r8, #1
1a0009f2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
1a0009f6:	f014 0401 	ands.w	r4, r4, #1
1a0009fa:	d00a      	beq.n	1a000a12 <put_fat+0x5a>
1a0009fc:	eb05 0308 	add.w	r3, r5, r8
1a000a00:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
1a000a04:	b2fb      	uxtb	r3, r7
1a000a06:	f002 020f 	and.w	r2, r2, #15
1a000a0a:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
1a000a0e:	b2db      	uxtb	r3, r3
1a000a10:	e000      	b.n	1a000a14 <put_fat+0x5c>
1a000a12:	b2fb      	uxtb	r3, r7
1a000a14:	44a8      	add	r8, r5
1a000a16:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
			fs->wflag = 1;
1a000a1a:	2301      	movs	r3, #1
1a000a1c:	70eb      	strb	r3, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
1a000a1e:	6a29      	ldr	r1, [r5, #32]
1a000a20:	4628      	mov	r0, r5
1a000a22:	eb01 2159 	add.w	r1, r1, r9, lsr #9
1a000a26:	f7ff fe05 	bl	1a000634 <move_window>
			if (res != FR_OK) break;
1a000a2a:	4606      	mov	r6, r0
1a000a2c:	2800      	cmp	r0, #0
1a000a2e:	d145      	bne.n	1a000abc <put_fat+0x104>
			p = fs->win + bc % SS(fs);
1a000a30:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
1a000a34:	b114      	cbz	r4, 1a000a3c <put_fat+0x84>
1a000a36:	f3c7 1707 	ubfx	r7, r7, #4, #8
1a000a3a:	e008      	b.n	1a000a4e <put_fat+0x96>
1a000a3c:	eb05 0309 	add.w	r3, r5, r9
1a000a40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
1a000a44:	f023 030f 	bic.w	r3, r3, #15
1a000a48:	f3c7 2703 	ubfx	r7, r7, #8, #4
1a000a4c:	431f      	orrs	r7, r3
1a000a4e:	44a9      	add	r9, r5
1a000a50:	f889 7030 	strb.w	r7, [r9, #48]	; 0x30
			fs->wflag = 1;
1a000a54:	2301      	movs	r3, #1
1a000a56:	70eb      	strb	r3, [r5, #3]
			break;
1a000a58:	e030      	b.n	1a000abc <put_fat+0x104>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
1a000a5a:	6a01      	ldr	r1, [r0, #32]
1a000a5c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a000a60:	f7ff fde8 	bl	1a000634 <move_window>
			if (res != FR_OK) break;
1a000a64:	4606      	mov	r6, r0
1a000a66:	bb48      	cbnz	r0, 1a000abc <put_fat+0x104>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
1a000a68:	0060      	lsls	r0, r4, #1
1a000a6a:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
1a000a6e:	3030      	adds	r0, #48	; 0x30
1a000a70:	4428      	add	r0, r5
1a000a72:	b2b9      	uxth	r1, r7
1a000a74:	f7ff fca0 	bl	1a0003b8 <st_word>
			fs->wflag = 1;
1a000a78:	2301      	movs	r3, #1
1a000a7a:	70eb      	strb	r3, [r5, #3]
			break;
1a000a7c:	e01e      	b.n	1a000abc <put_fat+0x104>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
1a000a7e:	6a01      	ldr	r1, [r0, #32]
1a000a80:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a000a84:	f7ff fdd6 	bl	1a000634 <move_window>
			if (res != FR_OK) break;
1a000a88:	4606      	mov	r6, r0
1a000a8a:	b9b8      	cbnz	r0, 1a000abc <put_fat+0x104>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
1a000a8c:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
1a000a90:	00a4      	lsls	r4, r4, #2
1a000a92:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
1a000a96:	3430      	adds	r4, #48	; 0x30
1a000a98:	442c      	add	r4, r5
1a000a9a:	4620      	mov	r0, r4
1a000a9c:	f7ff fc80 	bl	1a0003a0 <ld_dword>
1a000aa0:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
1a000aa4:	4620      	mov	r0, r4
1a000aa6:	4339      	orrs	r1, r7
1a000aa8:	f7ff fc8a 	bl	1a0003c0 <st_dword>
			fs->wflag = 1;
1a000aac:	2301      	movs	r3, #1
1a000aae:	70eb      	strb	r3, [r5, #3]
			break;
1a000ab0:	e004      	b.n	1a000abc <put_fat+0x104>
	DWORD val		/* New value to be set to the entry */
)
{
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
1a000ab2:	2602      	movs	r6, #2
1a000ab4:	e002      	b.n	1a000abc <put_fat+0x104>
1a000ab6:	2602      	movs	r6, #2
1a000ab8:	e000      	b.n	1a000abc <put_fat+0x104>
1a000aba:	2602      	movs	r6, #2
			fs->wflag = 1;
			break;
		}
	}
	return res;
}
1a000abc:	4630      	mov	r0, r6
1a000abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000ac2:	bf00      	nop

1a000ac4 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
1a000ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
1a000ac6:	6806      	ldr	r6, [r0, #0]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
1a000ac8:	2901      	cmp	r1, #1
1a000aca:	d951      	bls.n	1a000b70 <get_fat+0xac>
1a000acc:	6973      	ldr	r3, [r6, #20]
1a000ace:	428b      	cmp	r3, r1
1a000ad0:	d950      	bls.n	1a000b74 <get_fat+0xb0>
1a000ad2:	460c      	mov	r4, r1
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */

		switch (fs->fs_type) {
1a000ad4:	7833      	ldrb	r3, [r6, #0]
1a000ad6:	2b02      	cmp	r3, #2
1a000ad8:	d02a      	beq.n	1a000b30 <get_fat+0x6c>
1a000ada:	2b03      	cmp	r3, #3
1a000adc:	d037      	beq.n	1a000b4e <get_fat+0x8a>
1a000ade:	2b01      	cmp	r3, #1
1a000ae0:	d14a      	bne.n	1a000b78 <get_fat+0xb4>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
1a000ae2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a000ae6:	6a31      	ldr	r1, [r6, #32]
1a000ae8:	4630      	mov	r0, r6
1a000aea:	eb01 2155 	add.w	r1, r1, r5, lsr #9
1a000aee:	f7ff fda1 	bl	1a000634 <move_window>
1a000af2:	2800      	cmp	r0, #0
1a000af4:	d142      	bne.n	1a000b7c <get_fat+0xb8>
			wc = fs->win[bc++ % SS(fs)];
1a000af6:	1c6f      	adds	r7, r5, #1
1a000af8:	f3c5 0508 	ubfx	r5, r5, #0, #9
1a000afc:	4435      	add	r5, r6
1a000afe:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
1a000b02:	6a31      	ldr	r1, [r6, #32]
1a000b04:	4630      	mov	r0, r6
1a000b06:	eb01 2157 	add.w	r1, r1, r7, lsr #9
1a000b0a:	f7ff fd93 	bl	1a000634 <move_window>
1a000b0e:	2800      	cmp	r0, #0
1a000b10:	d137      	bne.n	1a000b82 <get_fat+0xbe>
			wc |= fs->win[bc % SS(fs)] << 8;
1a000b12:	f3c7 0708 	ubfx	r7, r7, #0, #9
1a000b16:	443e      	add	r6, r7
1a000b18:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
1a000b1c:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
1a000b20:	f014 0f01 	tst.w	r4, #1
1a000b24:	d001      	beq.n	1a000b2a <get_fat+0x66>
1a000b26:	0900      	lsrs	r0, r0, #4
1a000b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000b2a:	f3c0 000b 	ubfx	r0, r0, #0, #12
			break;
1a000b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
1a000b30:	6a31      	ldr	r1, [r6, #32]
1a000b32:	4630      	mov	r0, r6
1a000b34:	eb01 2114 	add.w	r1, r1, r4, lsr #8
1a000b38:	f7ff fd7c 	bl	1a000634 <move_window>
1a000b3c:	bb20      	cbnz	r0, 1a000b88 <get_fat+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
1a000b3e:	0060      	lsls	r0, r4, #1
1a000b40:	f400 70ff 	and.w	r0, r0, #510	; 0x1fe
1a000b44:	3030      	adds	r0, #48	; 0x30
1a000b46:	4430      	add	r0, r6
1a000b48:	f7ff fc24 	bl	1a000394 <ld_word>
			break;
1a000b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1a000b4e:	6a31      	ldr	r1, [r6, #32]
1a000b50:	4630      	mov	r0, r6
1a000b52:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
1a000b56:	f7ff fd6d 	bl	1a000634 <move_window>
1a000b5a:	b9c0      	cbnz	r0, 1a000b8e <get_fat+0xca>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
1a000b5c:	00a0      	lsls	r0, r4, #2
1a000b5e:	f400 70fe 	and.w	r0, r0, #508	; 0x1fc
1a000b62:	3030      	adds	r0, #48	; 0x30
1a000b64:	4430      	add	r0, r6
1a000b66:	f7ff fc1b 	bl	1a0003a0 <ld_dword>
1a000b6a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
1a000b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	DWORD val;
	FATFS *fs = obj->fs;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */
1a000b70:	2001      	movs	r0, #1
1a000b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000b74:	2001      	movs	r0, #1
1a000b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				}
			}
			/* go next */
#endif
		default:
			val = 1;	/* Internal error */
1a000b78:	2001      	movs	r0, #1
1a000b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
		val = 1;	/* Internal error */

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
1a000b7c:	f04f 30ff 	mov.w	r0, #4294967295
1a000b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000b82:	f04f 30ff 	mov.w	r0, #4294967295
1a000b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000b88:	f04f 30ff 	mov.w	r0, #4294967295
1a000b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000b8e:	f04f 30ff 	mov.w	r0, #4294967295
			val = 1;	/* Internal error */
		}
	}

	return val;
}
1a000b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000b94 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
1a000b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000b98:	4606      	mov	r6, r0
1a000b9a:	460c      	mov	r4, r1
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
1a000b9c:	6807      	ldr	r7, [r0, #0]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
1a000b9e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a000ba2:	d23a      	bcs.n	1a000c1a <dir_sdi+0x86>
1a000ba4:	f011 0f1f 	tst.w	r1, #31
1a000ba8:	d13a      	bne.n	1a000c20 <dir_sdi+0x8c>
		return FR_INT_ERR;
	}
	dp->dptr = ofs;				/* Set current offset */
1a000baa:	6131      	str	r1, [r6, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
1a000bac:	6885      	ldr	r5, [r0, #8]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
1a000bae:	b91d      	cbnz	r5, 1a000bb8 <dir_sdi+0x24>
1a000bb0:	783b      	ldrb	r3, [r7, #0]
1a000bb2:	2b02      	cmp	r3, #2
1a000bb4:	d900      	bls.n	1a000bb8 <dir_sdi+0x24>
		clst = fs->dirbase;
1a000bb6:	6a7d      	ldr	r5, [r7, #36]	; 0x24
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
1a000bb8:	b935      	cbnz	r5, 1a000bc8 <dir_sdi+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1a000bba:	893b      	ldrh	r3, [r7, #8]
1a000bbc:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
1a000bc0:	d931      	bls.n	1a000c26 <dir_sdi+0x92>
		dp->sect = fs->dirbase;
1a000bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
1a000bc4:	61b3      	str	r3, [r6, #24]
1a000bc6:	e01a      	b.n	1a000bfe <dir_sdi+0x6a>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
1a000bc8:	f8b7 800a 	ldrh.w	r8, [r7, #10]
1a000bcc:	ea4f 2848 	mov.w	r8, r8, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
1a000bd0:	e00e      	b.n	1a000bf0 <dir_sdi+0x5c>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
1a000bd2:	4630      	mov	r0, r6
1a000bd4:	4629      	mov	r1, r5
1a000bd6:	f7ff ff75 	bl	1a000ac4 <get_fat>
1a000bda:	4605      	mov	r5, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000bdc:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000be0:	d024      	beq.n	1a000c2c <dir_sdi+0x98>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a000be2:	2801      	cmp	r0, #1
1a000be4:	d925      	bls.n	1a000c32 <dir_sdi+0x9e>
1a000be6:	697b      	ldr	r3, [r7, #20]
1a000be8:	4283      	cmp	r3, r0
1a000bea:	d925      	bls.n	1a000c38 <dir_sdi+0xa4>
			ofs -= csz;
1a000bec:	ebc8 0404 	rsb	r4, r8, r4
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
		dp->sect = fs->dirbase;

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
1a000bf0:	4544      	cmp	r4, r8
1a000bf2:	d2ee      	bcs.n	1a000bd2 <dir_sdi+0x3e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
1a000bf4:	4638      	mov	r0, r7
1a000bf6:	4629      	mov	r1, r5
1a000bf8:	f7ff fc14 	bl	1a000424 <clust2sect>
1a000bfc:	61b0      	str	r0, [r6, #24]
	}
	dp->clust = clst;					/* Current cluster# */
1a000bfe:	6175      	str	r5, [r6, #20]
	if (!dp->sect) return FR_INT_ERR;
1a000c00:	69b3      	ldr	r3, [r6, #24]
1a000c02:	b1e3      	cbz	r3, 1a000c3e <dir_sdi+0xaa>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
1a000c04:	eb03 2354 	add.w	r3, r3, r4, lsr #9
1a000c08:	61b3      	str	r3, [r6, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
1a000c0a:	f3c4 0308 	ubfx	r3, r4, #0, #9
1a000c0e:	3330      	adds	r3, #48	; 0x30
1a000c10:	443b      	add	r3, r7
1a000c12:	61f3      	str	r3, [r6, #28]

	return FR_OK;
1a000c14:	2000      	movs	r0, #0
1a000c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
		return FR_INT_ERR;
1a000c1a:	2002      	movs	r0, #2
1a000c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000c20:	2002      	movs	r0, #2
1a000c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		clst = fs->dirbase;
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
1a000c26:	2002      	movs	r0, #2
1a000c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
		while (ofs >= csz) {				/* Follow cluster chain */
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000c2c:	2001      	movs	r0, #1
1a000c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
1a000c32:	2002      	movs	r0, #2
1a000c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000c38:	2002      	movs	r0, #2
1a000c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			ofs -= csz;
		}
		dp->sect = clust2sect(fs, clst);
	}
	dp->clust = clst;					/* Current cluster# */
	if (!dp->sect) return FR_INT_ERR;
1a000c3e:	2002      	movs	r0, #2
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */

	return FR_OK;
}
1a000c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a000c44 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
1a000c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000c48:	4607      	mov	r7, r0
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
1a000c4a:	6806      	ldr	r6, [r0, #0]


	if (clst == 0) {	/* Create a new chain */
1a000c4c:	4688      	mov	r8, r1
1a000c4e:	b929      	cbnz	r1, 1a000c5c <create_chain+0x18>
		scl = fs->last_clst;				/* Get suggested cluster to start at */
1a000c50:	68f5      	ldr	r5, [r6, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a000c52:	b17d      	cbz	r5, 1a000c74 <create_chain+0x30>
1a000c54:	6973      	ldr	r3, [r6, #20]
1a000c56:	42ab      	cmp	r3, r5
1a000c58:	d90e      	bls.n	1a000c78 <create_chain+0x34>
1a000c5a:	e00e      	b.n	1a000c7a <create_chain+0x36>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
1a000c5c:	f7ff ff32 	bl	1a000ac4 <get_fat>
		if (cs < 2) return 1;				/* Invalid value */
1a000c60:	2801      	cmp	r0, #1
1a000c62:	d94b      	bls.n	1a000cfc <create_chain+0xb8>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
1a000c64:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000c68:	d04f      	beq.n	1a000d0a <create_chain+0xc6>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
1a000c6a:	6973      	ldr	r3, [r6, #20]
1a000c6c:	4283      	cmp	r3, r0
1a000c6e:	d84c      	bhi.n	1a000d0a <create_chain+0xc6>
		scl = clst;
1a000c70:	4645      	mov	r5, r8
1a000c72:	e002      	b.n	1a000c7a <create_chain+0x36>
	FATFS *fs = obj->fs;


	if (clst == 0) {	/* Create a new chain */
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
1a000c74:	2501      	movs	r5, #1
1a000c76:	e000      	b.n	1a000c7a <create_chain+0x36>
1a000c78:	2501      	movs	r5, #1
			}
		}
	} else
#endif
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
1a000c7a:	462c      	mov	r4, r5
		for (;;) {
			ncl++;							/* Next cluster */
1a000c7c:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
1a000c7e:	6973      	ldr	r3, [r6, #20]
1a000c80:	42a3      	cmp	r3, r4
1a000c82:	d802      	bhi.n	1a000c8a <create_chain+0x46>
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
1a000c84:	2d01      	cmp	r5, #1
1a000c86:	d93c      	bls.n	1a000d02 <create_chain+0xbe>
	{	/* At the FAT12/16/32 */
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
1a000c88:	2402      	movs	r4, #2
				if (ncl > scl) return 0;	/* No free cluster */
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
1a000c8a:	4638      	mov	r0, r7
1a000c8c:	4621      	mov	r1, r4
1a000c8e:	f7ff ff19 	bl	1a000ac4 <get_fat>
			if (cs == 0) break;				/* Found a free cluster */
1a000c92:	4603      	mov	r3, r0
1a000c94:	b150      	cbz	r0, 1a000cac <create_chain+0x68>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
1a000c96:	2801      	cmp	r0, #1
1a000c98:	d002      	beq.n	1a000ca0 <create_chain+0x5c>
1a000c9a:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000c9e:	d102      	bne.n	1a000ca6 <create_chain+0x62>
1a000ca0:	4618      	mov	r0, r3
1a000ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ncl == scl) return 0;		/* No free cluster */
1a000ca6:	42ac      	cmp	r4, r5
1a000ca8:	d1e8      	bne.n	1a000c7c <create_chain+0x38>
1a000caa:	e02d      	b.n	1a000d08 <create_chain+0xc4>
	}

	if (_FS_EXFAT && fs->fs_type == FS_EXFAT && obj->stat == 2) {	/* Is it a contiguous chain? */
		res = FR_OK;						/* FAT does not need to be written */
	} else {
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
1a000cac:	4630      	mov	r0, r6
1a000cae:	4621      	mov	r1, r4
1a000cb0:	f04f 32ff 	mov.w	r2, #4294967295
1a000cb4:	f7ff fe80 	bl	1a0009b8 <put_fat>
		if (res == FR_OK && clst) {
1a000cb8:	4603      	mov	r3, r0
1a000cba:	b940      	cbnz	r0, 1a000cce <create_chain+0x8a>
1a000cbc:	f1b8 0f00 	cmp.w	r8, #0
1a000cc0:	d005      	beq.n	1a000cce <create_chain+0x8a>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
1a000cc2:	4630      	mov	r0, r6
1a000cc4:	4641      	mov	r1, r8
1a000cc6:	4622      	mov	r2, r4
1a000cc8:	f7ff fe76 	bl	1a0009b8 <put_fat>
1a000ccc:	4603      	mov	r3, r0
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
1a000cce:	b963      	cbnz	r3, 1a000cea <create_chain+0xa6>
		fs->last_clst = ncl;
1a000cd0:	60f4      	str	r4, [r6, #12]
		if (fs->free_clst < fs->n_fatent - 2) fs->free_clst--;
1a000cd2:	6932      	ldr	r2, [r6, #16]
1a000cd4:	6973      	ldr	r3, [r6, #20]
1a000cd6:	3b02      	subs	r3, #2
1a000cd8:	429a      	cmp	r2, r3
1a000cda:	d201      	bcs.n	1a000ce0 <create_chain+0x9c>
1a000cdc:	3a01      	subs	r2, #1
1a000cde:	6132      	str	r2, [r6, #16]
		fs->fsi_flag |= 1;
1a000ce0:	7933      	ldrb	r3, [r6, #4]
1a000ce2:	f043 0301 	orr.w	r3, r3, #1
1a000ce6:	7133      	strb	r3, [r6, #4]
1a000ce8:	e005      	b.n	1a000cf6 <create_chain+0xb2>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
1a000cea:	2b01      	cmp	r3, #1
1a000cec:	d102      	bne.n	1a000cf4 <create_chain+0xb0>
1a000cee:	f04f 34ff 	mov.w	r4, #4294967295
1a000cf2:	e000      	b.n	1a000cf6 <create_chain+0xb2>
1a000cf4:	2401      	movs	r4, #1
	}

	return ncl;		/* Return new cluster number or error status */
1a000cf6:	4620      	mov	r0, r4
1a000cf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		scl = fs->last_clst;				/* Get suggested cluster to start at */
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
		if (cs < 2) return 1;				/* Invalid value */
1a000cfc:	2001      	movs	r0, #1
1a000cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ncl = scl;	/* Start cluster */
		for (;;) {
			ncl++;							/* Next cluster */
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
				ncl = 2;
				if (ncl > scl) return 0;	/* No free cluster */
1a000d02:	2000      	movs	r0, #0
1a000d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
			if (cs == 0) break;				/* Found a free cluster */
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
			if (ncl == scl) return 0;		/* No free cluster */
1a000d08:	2000      	movs	r0, #0
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Create error status */
	}

	return ncl;		/* Return new cluster number or error status */
}
1a000d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000d0e:	bf00      	nop

1a000d10 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
1a000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000d12:	4607      	mov	r7, r0
1a000d14:	460e      	mov	r6, r1
	FRESULT res = FR_OK;
	DWORD nxt;
	FATFS *fs = obj->fs;
1a000d16:	6804      	ldr	r4, [r0, #0]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a000d18:	2901      	cmp	r1, #1
1a000d1a:	d92c      	bls.n	1a000d76 <remove_chain+0x66>
1a000d1c:	6963      	ldr	r3, [r4, #20]
1a000d1e:	428b      	cmp	r3, r1
1a000d20:	d92b      	bls.n	1a000d7a <remove_chain+0x6a>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
1a000d22:	b132      	cbz	r2, 1a000d32 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
1a000d24:	4620      	mov	r0, r4
1a000d26:	4611      	mov	r1, r2
1a000d28:	f04f 32ff 	mov.w	r2, #4294967295
1a000d2c:	f7ff fe44 	bl	1a0009b8 <put_fat>
		if (res != FR_OK) return res;
1a000d30:	bb28      	cbnz	r0, 1a000d7e <remove_chain+0x6e>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
1a000d32:	4638      	mov	r0, r7
1a000d34:	4631      	mov	r1, r6
1a000d36:	f7ff fec5 	bl	1a000ac4 <get_fat>
		if (nxt == 0) break;				/* Empty cluster? */
1a000d3a:	4605      	mov	r5, r0
1a000d3c:	b300      	cbz	r0, 1a000d80 <remove_chain+0x70>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a000d3e:	2801      	cmp	r0, #1
1a000d40:	d020      	beq.n	1a000d84 <remove_chain+0x74>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a000d42:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000d46:	d01f      	beq.n	1a000d88 <remove_chain+0x78>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
1a000d48:	4620      	mov	r0, r4
1a000d4a:	4631      	mov	r1, r6
1a000d4c:	2200      	movs	r2, #0
1a000d4e:	f7ff fe33 	bl	1a0009b8 <put_fat>
			if (res != FR_OK) return res;
1a000d52:	b100      	cbz	r0, 1a000d56 <remove_chain+0x46>
1a000d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
		if (fs->free_clst != 0xFFFFFFFF) {	/* Update FSINFO */
1a000d56:	6923      	ldr	r3, [r4, #16]
1a000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
1a000d5c:	d005      	beq.n	1a000d6a <remove_chain+0x5a>
			fs->free_clst++;
1a000d5e:	3301      	adds	r3, #1
1a000d60:	6123      	str	r3, [r4, #16]
			fs->fsi_flag |= 1;
1a000d62:	7923      	ldrb	r3, [r4, #4]
1a000d64:	f043 0301 	orr.w	r3, r3, #1
1a000d68:	7123      	strb	r3, [r4, #4]
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a000d6a:	6963      	ldr	r3, [r4, #20]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
1a000d6c:	462e      	mov	r6, r5
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
1a000d6e:	429d      	cmp	r5, r3
1a000d70:	d3df      	bcc.n	1a000d32 <remove_chain+0x22>
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
1a000d72:	2000      	movs	r0, #0
1a000d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
1a000d76:	2002      	movs	r0, #2
1a000d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000d7a:	2002      	movs	r0, #2
1a000d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a000d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
1a000d80:	2000      	movs	r0, #0
1a000d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
		if (nxt == 0) break;				/* Empty cluster? */
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
1a000d84:	2002      	movs	r0, #2
1a000d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
1a000d88:	2001      	movs	r0, #1
			}
		}
	}
#endif
	return FR_OK;
}
1a000d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000d8c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
1a000d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
1a000d90:	6806      	ldr	r6, [r0, #0]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
1a000d92:	6903      	ldr	r3, [r0, #16]
1a000d94:	f103 0520 	add.w	r5, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a000d98:	6983      	ldr	r3, [r0, #24]
1a000d9a:	2b00      	cmp	r3, #0
1a000d9c:	d06e      	beq.n	1a000e7c <dir_next+0xf0>
1a000d9e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
1a000da2:	d26e      	bcs.n	1a000e82 <dir_next+0xf6>
1a000da4:	4688      	mov	r8, r1
1a000da6:	4604      	mov	r4, r0

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
1a000da8:	f3c5 0708 	ubfx	r7, r5, #0, #9
1a000dac:	2f00      	cmp	r7, #0
1a000dae:	d15d      	bne.n	1a000e6c <dir_next+0xe0>
		dp->sect++;				/* Next sector */
1a000db0:	3301      	adds	r3, #1
1a000db2:	6183      	str	r3, [r0, #24]

		if (!dp->clust) {		/* Static table */
1a000db4:	6941      	ldr	r1, [r0, #20]
1a000db6:	b941      	cbnz	r1, 1a000dca <dir_next+0x3e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
1a000db8:	8933      	ldrh	r3, [r6, #8]
1a000dba:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
1a000dbe:	d855      	bhi.n	1a000e6c <dir_next+0xe0>
				dp->sect = 0; return FR_NO_FILE;
1a000dc0:	2300      	movs	r3, #0
1a000dc2:	6183      	str	r3, [r0, #24]
1a000dc4:	2004      	movs	r0, #4
1a000dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
1a000dca:	8973      	ldrh	r3, [r6, #10]
1a000dcc:	3b01      	subs	r3, #1
1a000dce:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
1a000dd2:	d14b      	bne.n	1a000e6c <dir_next+0xe0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
1a000dd4:	f7ff fe76 	bl	1a000ac4 <get_fat>
1a000dd8:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1a000dda:	2801      	cmp	r0, #1
1a000ddc:	d954      	bls.n	1a000e88 <dir_next+0xfc>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1a000dde:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000de2:	d054      	beq.n	1a000e8e <dir_next+0x102>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
1a000de4:	6973      	ldr	r3, [r6, #20]
1a000de6:	4283      	cmp	r3, r0
1a000de8:	d839      	bhi.n	1a000e5e <dir_next+0xd2>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
1a000dea:	f1b8 0f00 	cmp.w	r8, #0
1a000dee:	d104      	bne.n	1a000dfa <dir_next+0x6e>
						dp->sect = 0; return FR_NO_FILE;
1a000df0:	2300      	movs	r3, #0
1a000df2:	61a3      	str	r3, [r4, #24]
1a000df4:	2004      	movs	r0, #4
1a000df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
1a000dfa:	4620      	mov	r0, r4
1a000dfc:	6961      	ldr	r1, [r4, #20]
1a000dfe:	f7ff ff21 	bl	1a000c44 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a000e02:	4681      	mov	r9, r0
1a000e04:	2800      	cmp	r0, #0
1a000e06:	d045      	beq.n	1a000e94 <dir_next+0x108>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a000e08:	2801      	cmp	r0, #1
1a000e0a:	d046      	beq.n	1a000e9a <dir_next+0x10e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000e0c:	f1b0 3fff 	cmp.w	r0, #4294967295
1a000e10:	d046      	beq.n	1a000ea0 <dir_next+0x114>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a000e12:	4630      	mov	r0, r6
1a000e14:	f7ff fbe4 	bl	1a0005e0 <sync_window>
1a000e18:	2800      	cmp	r0, #0
1a000e1a:	d144      	bne.n	1a000ea6 <dir_next+0x11a>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
1a000e1c:	f106 0030 	add.w	r0, r6, #48	; 0x30
1a000e20:	2100      	movs	r1, #0
1a000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
1a000e26:	f7ff fadf 	bl	1a0003e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
1a000e2a:	4630      	mov	r0, r6
1a000e2c:	4649      	mov	r1, r9
1a000e2e:	f7ff faf9 	bl	1a000424 <clust2sect>
1a000e32:	62f0      	str	r0, [r6, #44]	; 0x2c
1a000e34:	f04f 0800 	mov.w	r8, #0
1a000e38:	e00a      	b.n	1a000e50 <dir_next+0xc4>
						fs->wflag = 1;
1a000e3a:	2301      	movs	r3, #1
1a000e3c:	70f3      	strb	r3, [r6, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1a000e3e:	4630      	mov	r0, r6
1a000e40:	f7ff fbce 	bl	1a0005e0 <sync_window>
1a000e44:	bb90      	cbnz	r0, 1a000eac <dir_next+0x120>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
1a000e46:	f108 0801 	add.w	r8, r8, #1
1a000e4a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a000e4c:	3301      	adds	r3, #1
1a000e4e:	62f3      	str	r3, [r6, #44]	; 0x2c
1a000e50:	8973      	ldrh	r3, [r6, #10]
1a000e52:	4543      	cmp	r3, r8
1a000e54:	d8f1      	bhi.n	1a000e3a <dir_next+0xae>
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
					}
					fs->winsect -= n;							/* Restore window offset */
1a000e56:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a000e58:	ebc8 0303 	rsb	r3, r8, r3
1a000e5c:	62f3      	str	r3, [r6, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* If no stretch, report EOT (this is to suppress warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
1a000e5e:	f8c4 9014 	str.w	r9, [r4, #20]
				dp->sect = clust2sect(fs, clst);
1a000e62:	4630      	mov	r0, r6
1a000e64:	4649      	mov	r1, r9
1a000e66:	f7ff fadd 	bl	1a000424 <clust2sect>
1a000e6a:	61a0      	str	r0, [r4, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
1a000e6c:	6125      	str	r5, [r4, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
1a000e6e:	f107 0830 	add.w	r8, r7, #48	; 0x30
1a000e72:	4446      	add	r6, r8
1a000e74:	61e6      	str	r6, [r4, #28]

	return FR_OK;
1a000e76:	2000      	movs	r0, #0
1a000e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
1a000e7c:	2004      	movs	r0, #4
1a000e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000e82:	2004      	movs	r0, #4
1a000e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
1a000e88:	2002      	movs	r0, #2
1a000e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
1a000e8e:	2001      	movs	r0, #1
1a000e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
						dp->sect = 0; return FR_NO_FILE;
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
					if (clst == 0) return FR_DENIED;			/* No free cluster */
1a000e94:	2007      	movs	r0, #7
1a000e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
1a000e9a:	2002      	movs	r0, #2
1a000e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
1a000ea0:	2001      	movs	r0, #1
1a000ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
1a000ea6:	2001      	movs	r0, #1
1a000ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
						fs->wflag = 1;
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
1a000eac:	2001      	movs	r0, #1
	}
	dp->dptr = ofs;						/* Current entry */
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */

	return FR_OK;
}
1a000eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000eb2:	bf00      	nop

1a000eb4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
1a000eb4:	b570      	push	{r4, r5, r6, lr}
1a000eb6:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
1a000eb8:	6806      	ldr	r6, [r0, #0]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
1a000eba:	2100      	movs	r1, #0
1a000ebc:	f7ff fe6a 	bl	1a000b94 <dir_sdi>
	if (res != FR_OK) return res;
1a000ec0:	bb08      	cbnz	r0, 1a000f06 <dir_find+0x52>
	/* At the FAT12/16/32 */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
1a000ec2:	4630      	mov	r0, r6
1a000ec4:	69a1      	ldr	r1, [r4, #24]
1a000ec6:	f7ff fbb5 	bl	1a000634 <move_window>
		if (res != FR_OK) break;
1a000eca:	4605      	mov	r5, r0
1a000ecc:	b9c8      	cbnz	r0, 1a000f02 <dir_find+0x4e>
		c = dp->dir[DIR_Name];
1a000ece:	69e0      	ldr	r0, [r4, #28]
1a000ed0:	7803      	ldrb	r3, [r0, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a000ed2:	b1ab      	cbz	r3, 1a000f00 <dir_find+0x4c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
1a000ed4:	7ac3      	ldrb	r3, [r0, #11]
1a000ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
1a000eda:	71a3      	strb	r3, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
1a000edc:	7ac3      	ldrb	r3, [r0, #11]
1a000ede:	f013 0f08 	tst.w	r3, #8
1a000ee2:	d105      	bne.n	1a000ef0 <dir_find+0x3c>
1a000ee4:	f104 0120 	add.w	r1, r4, #32
1a000ee8:	220b      	movs	r2, #11
1a000eea:	f7ff fa83 	bl	1a0003f4 <mem_cmp>
1a000eee:	b140      	cbz	r0, 1a000f02 <dir_find+0x4e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
1a000ef0:	4620      	mov	r0, r4
1a000ef2:	2100      	movs	r1, #0
1a000ef4:	f7ff ff4a 	bl	1a000d8c <dir_next>
	} while (res == FR_OK);
1a000ef8:	4605      	mov	r5, r0
1a000efa:	2800      	cmp	r0, #0
1a000efc:	d0e1      	beq.n	1a000ec2 <dir_find+0xe>
1a000efe:	e000      	b.n	1a000f02 <dir_find+0x4e>
#endif
	do {
		res = move_window(fs, dp->sect);
		if (res != FR_OK) break;
		c = dp->dir[DIR_Name];
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1a000f00:	2504      	movs	r5, #4
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
	} while (res == FR_OK);

	return res;
1a000f02:	4628      	mov	r0, r5
1a000f04:	bd70      	pop	{r4, r5, r6, pc}
}
1a000f06:	bd70      	pop	{r4, r5, r6, pc}

1a000f08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
1a000f08:	b530      	push	{r4, r5, lr}
1a000f0a:	b083      	sub	sp, #12
1a000f0c:	4604      	mov	r4, r0
1a000f0e:	9101      	str	r1, [sp, #4]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
	FATFS *fs = obj->fs;
1a000f10:	6805      	ldr	r5, [r0, #0]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from the current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
1a000f12:	e001      	b.n	1a000f18 <follow_path+0x10>
1a000f14:	3301      	adds	r3, #1
1a000f16:	9301      	str	r3, [sp, #4]
1a000f18:	9b01      	ldr	r3, [sp, #4]
1a000f1a:	781a      	ldrb	r2, [r3, #0]
1a000f1c:	2a2f      	cmp	r2, #47	; 0x2f
1a000f1e:	d0f9      	beq.n	1a000f14 <follow_path+0xc>
1a000f20:	2a5c      	cmp	r2, #92	; 0x5c
1a000f22:	d0f7      	beq.n	1a000f14 <follow_path+0xc>
		obj->sclust = 0;					/* Start from the root directory */
1a000f24:	2200      	movs	r2, #0
1a000f26:	60a2      	str	r2, [r4, #8]
		obj->objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
1a000f28:	781b      	ldrb	r3, [r3, #0]
1a000f2a:	2b1f      	cmp	r3, #31
1a000f2c:	d808      	bhi.n	1a000f40 <follow_path+0x38>
		dp->fn[NSFLAG] = NS_NONAME;
1a000f2e:	2380      	movs	r3, #128	; 0x80
1a000f30:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
		res = dir_sdi(dp, 0);
1a000f34:	4620      	mov	r0, r4
1a000f36:	4611      	mov	r1, r2
1a000f38:	f7ff fe2c 	bl	1a000b94 <dir_sdi>
1a000f3c:	4603      	mov	r3, r0
1a000f3e:	e026      	b.n	1a000f8e <follow_path+0x86>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
1a000f40:	4620      	mov	r0, r4
1a000f42:	a901      	add	r1, sp, #4
1a000f44:	f7ff fa9e 	bl	1a000484 <create_name>
			if (res != FR_OK) break;
1a000f48:	4603      	mov	r3, r0
1a000f4a:	bb00      	cbnz	r0, 1a000f8e <follow_path+0x86>
			res = dir_find(dp);				/* Find an object with the segment name */
1a000f4c:	4620      	mov	r0, r4
1a000f4e:	f7ff ffb1 	bl	1a000eb4 <dir_find>
			ns = dp->fn[NSFLAG];
1a000f52:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
			if (res != FR_OK) {				/* Failed to find the object */
1a000f56:	4603      	mov	r3, r0
1a000f58:	b128      	cbz	r0, 1a000f66 <follow_path+0x5e>
				if (res == FR_NO_FILE) {	/* Object is not found */
1a000f5a:	2804      	cmp	r0, #4
1a000f5c:	d117      	bne.n	1a000f8e <follow_path+0x86>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a000f5e:	f012 0f04 	tst.w	r2, #4
1a000f62:	d011      	beq.n	1a000f88 <follow_path+0x80>
1a000f64:	e013      	b.n	1a000f8e <follow_path+0x86>
					}
				}
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
1a000f66:	f012 0f04 	tst.w	r2, #4
1a000f6a:	d110      	bne.n	1a000f8e <follow_path+0x86>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
1a000f6c:	79a3      	ldrb	r3, [r4, #6]
1a000f6e:	f013 0f10 	tst.w	r3, #16
1a000f72:	d00b      	beq.n	1a000f8c <follow_path+0x84>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
1a000f74:	6921      	ldr	r1, [r4, #16]
1a000f76:	f3c1 0108 	ubfx	r1, r1, #0, #9
1a000f7a:	3130      	adds	r1, #48	; 0x30
1a000f7c:	4628      	mov	r0, r5
1a000f7e:	4429      	add	r1, r5
1a000f80:	f7ff fa5c 	bl	1a00043c <ld_clust>
1a000f84:	60a0      	str	r0, [r4, #8]
			}
		}
1a000f86:	e7db      	b.n	1a000f40 <follow_path+0x38>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
1a000f88:	2305      	movs	r3, #5
1a000f8a:	e000      	b.n	1a000f8e <follow_path+0x86>
				break;
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
				res = FR_NO_PATH; break;
1a000f8c:	2305      	movs	r3, #5
			}
		}
	}

	return res;
}
1a000f8e:	4618      	mov	r0, r3
1a000f90:	b003      	add	sp, #12
1a000f92:	bd30      	pop	{r4, r5, pc}

1a000f94 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
1a000f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000f96:	4604      	mov	r4, r0
1a000f98:	460f      	mov	r7, r1
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
1a000f9a:	6806      	ldr	r6, [r0, #0]


	res = dir_sdi(dp, 0);
1a000f9c:	2100      	movs	r1, #0
1a000f9e:	f7ff fdf9 	bl	1a000b94 <dir_sdi>
	if (res == FR_OK) {
1a000fa2:	4602      	mov	r2, r0
1a000fa4:	b9b8      	cbnz	r0, 1a000fd6 <dir_alloc+0x42>
1a000fa6:	2500      	movs	r5, #0
		n = 0;
		do {
			res = move_window(fs, dp->sect);
1a000fa8:	4630      	mov	r0, r6
1a000faa:	69a1      	ldr	r1, [r4, #24]
1a000fac:	f7ff fb42 	bl	1a000634 <move_window>
			if (res != FR_OK) break;
1a000fb0:	4602      	mov	r2, r0
1a000fb2:	b980      	cbnz	r0, 1a000fd6 <dir_alloc+0x42>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
1a000fb4:	69e3      	ldr	r3, [r4, #28]
1a000fb6:	781b      	ldrb	r3, [r3, #0]
1a000fb8:	2be5      	cmp	r3, #229	; 0xe5
1a000fba:	d000      	beq.n	1a000fbe <dir_alloc+0x2a>
1a000fbc:	b91b      	cbnz	r3, 1a000fc6 <dir_alloc+0x32>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
1a000fbe:	3501      	adds	r5, #1
1a000fc0:	42bd      	cmp	r5, r7
1a000fc2:	d101      	bne.n	1a000fc8 <dir_alloc+0x34>
1a000fc4:	e007      	b.n	1a000fd6 <dir_alloc+0x42>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
1a000fc6:	2500      	movs	r5, #0
			}
			res = dir_next(dp, 1);
1a000fc8:	4620      	mov	r0, r4
1a000fca:	2101      	movs	r1, #1
1a000fcc:	f7ff fede 	bl	1a000d8c <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
1a000fd0:	4602      	mov	r2, r0
1a000fd2:	2800      	cmp	r0, #0
1a000fd4:	d0e8      	beq.n	1a000fa8 <dir_alloc+0x14>
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
1a000fd6:	2a04      	cmp	r2, #4
1a000fd8:	d100      	bne.n	1a000fdc <dir_alloc+0x48>
1a000fda:	2207      	movs	r2, #7
	return res;
}
1a000fdc:	4610      	mov	r0, r2
1a000fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000fe0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
1a000fe0:	b570      	push	{r4, r5, r6, lr}
1a000fe2:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs = dp->obj.fs;
1a000fe4:	6806      	ldr	r6, [r0, #0]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
1a000fe6:	2101      	movs	r1, #1
1a000fe8:	f7ff ffd4 	bl	1a000f94 <dir_alloc>

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
1a000fec:	4605      	mov	r5, r0
1a000fee:	b990      	cbnz	r0, 1a001016 <dir_register+0x36>
		res = move_window(fs, dp->sect);
1a000ff0:	4630      	mov	r0, r6
1a000ff2:	69a1      	ldr	r1, [r4, #24]
1a000ff4:	f7ff fb1e 	bl	1a000634 <move_window>
		if (res == FR_OK) {
1a000ff8:	4605      	mov	r5, r0
1a000ffa:	b960      	cbnz	r0, 1a001016 <dir_register+0x36>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
1a000ffc:	69e0      	ldr	r0, [r4, #28]
1a000ffe:	2100      	movs	r1, #0
1a001000:	2220      	movs	r2, #32
1a001002:	f7ff f9f1 	bl	1a0003e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
1a001006:	69e0      	ldr	r0, [r4, #28]
1a001008:	f104 0120 	add.w	r1, r4, #32
1a00100c:	220b      	movs	r2, #11
1a00100e:	f7ff f9e1 	bl	1a0003d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
1a001012:	2301      	movs	r3, #1
1a001014:	70f3      	strb	r3, [r6, #3]
		}
	}

	return res;
}
1a001016:	4628      	mov	r0, r5
1a001018:	bd70      	pop	{r4, r5, r6, pc}
1a00101a:	bf00      	nop

1a00101c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
1a00101c:	b570      	push	{r4, r5, r6, lr}
1a00101e:	4604      	mov	r4, r0
	FRESULT res;


	res = sync_window(fs);
1a001020:	f7ff fade 	bl	1a0005e0 <sync_window>
	if (res == FR_OK) {
1a001024:	4605      	mov	r5, r0
1a001026:	2800      	cmp	r0, #0
1a001028:	d137      	bne.n	1a00109a <sync_fs+0x7e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
1a00102a:	7823      	ldrb	r3, [r4, #0]
1a00102c:	2b03      	cmp	r3, #3
1a00102e:	d12d      	bne.n	1a00108c <sync_fs+0x70>
1a001030:	7923      	ldrb	r3, [r4, #4]
1a001032:	2b01      	cmp	r3, #1
1a001034:	d12a      	bne.n	1a00108c <sync_fs+0x70>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
1a001036:	f104 0630 	add.w	r6, r4, #48	; 0x30
1a00103a:	4630      	mov	r0, r6
1a00103c:	2100      	movs	r1, #0
1a00103e:	f44f 7200 	mov.w	r2, #512	; 0x200
1a001042:	f7ff f9d1 	bl	1a0003e8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
1a001046:	f204 202e 	addw	r0, r4, #558	; 0x22e
1a00104a:	f64a 2155 	movw	r1, #43605	; 0xaa55
1a00104e:	f7ff f9b3 	bl	1a0003b8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
1a001052:	4630      	mov	r0, r6
1a001054:	4912      	ldr	r1, [pc, #72]	; (1a0010a0 <sync_fs+0x84>)
1a001056:	f7ff f9b3 	bl	1a0003c0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
1a00105a:	f504 7005 	add.w	r0, r4, #532	; 0x214
1a00105e:	4911      	ldr	r1, [pc, #68]	; (1a0010a4 <sync_fs+0x88>)
1a001060:	f7ff f9ae 	bl	1a0003c0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
1a001064:	f504 7006 	add.w	r0, r4, #536	; 0x218
1a001068:	6921      	ldr	r1, [r4, #16]
1a00106a:	f7ff f9a9 	bl	1a0003c0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
1a00106e:	f504 7007 	add.w	r0, r4, #540	; 0x21c
1a001072:	68e1      	ldr	r1, [r4, #12]
1a001074:	f7ff f9a4 	bl	1a0003c0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
1a001078:	69e2      	ldr	r2, [r4, #28]
1a00107a:	3201      	adds	r2, #1
1a00107c:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
1a00107e:	7860      	ldrb	r0, [r4, #1]
1a001080:	4631      	mov	r1, r6
1a001082:	2301      	movs	r3, #1
1a001084:	f000 fc68 	bl	1a001958 <disk_write>
			fs->fsi_flag = 0;
1a001088:	2300      	movs	r3, #0
1a00108a:	7123      	strb	r3, [r4, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
1a00108c:	7860      	ldrb	r0, [r4, #1]
1a00108e:	2100      	movs	r1, #0
1a001090:	460a      	mov	r2, r1
1a001092:	f000 fcb7 	bl	1a001a04 <disk_ioctl>
1a001096:	b100      	cbz	r0, 1a00109a <sync_fs+0x7e>
1a001098:	2501      	movs	r5, #1
	}

	return res;
}
1a00109a:	4628      	mov	r0, r5
1a00109c:	bd70      	pop	{r4, r5, r6, pc}
1a00109e:	bf00      	nop
1a0010a0:	41615252 	.word	0x41615252
1a0010a4:	61417272 	.word	0x61417272

1a0010a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
1a0010a8:	b510      	push	{r4, lr}
1a0010aa:	b084      	sub	sp, #16
1a0010ac:	9001      	str	r0, [sp, #4]
1a0010ae:	9100      	str	r1, [sp, #0]
1a0010b0:	4614      	mov	r4, r2
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
1a0010b2:	a804      	add	r0, sp, #16
1a0010b4:	f840 1d04 	str.w	r1, [r0, #-4]!


	vol = get_ldnumber(&rp);
1a0010b8:	f7ff fa4c 	bl	1a000554 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
1a0010bc:	2800      	cmp	r0, #0
1a0010be:	db16      	blt.n	1a0010ee <f_mount+0x46>
	cfs = FatFs[vol];					/* Pointer to fs object */
1a0010c0:	4b0e      	ldr	r3, [pc, #56]	; (1a0010fc <f_mount+0x54>)
1a0010c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]

	if (cfs) {
1a0010c6:	b10b      	cbz	r3, 1a0010cc <f_mount+0x24>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
1a0010c8:	2200      	movs	r2, #0
1a0010ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
1a0010cc:	9b01      	ldr	r3, [sp, #4]
1a0010ce:	b10b      	cbz	r3, 1a0010d4 <f_mount+0x2c>
		fs->fs_type = 0;				/* Clear new fs object */
1a0010d0:	2200      	movs	r2, #0
1a0010d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
1a0010d4:	9b01      	ldr	r3, [sp, #4]
1a0010d6:	4a09      	ldr	r2, [pc, #36]	; (1a0010fc <f_mount+0x54>)
1a0010d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a0010dc:	b14b      	cbz	r3, 1a0010f2 <f_mount+0x4a>
1a0010de:	2c01      	cmp	r4, #1
1a0010e0:	d109      	bne.n	1a0010f6 <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
1a0010e2:	4668      	mov	r0, sp
1a0010e4:	a901      	add	r1, sp, #4
1a0010e6:	2200      	movs	r2, #0
1a0010e8:	f7ff fafc 	bl	1a0006e4 <find_volume>
	LEAVE_FF(fs, res);
1a0010ec:	e004      	b.n	1a0010f8 <f_mount+0x50>
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
1a0010ee:	200b      	movs	r0, #11
1a0010f0:	e002      	b.n	1a0010f8 <f_mount+0x50>
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
1a0010f2:	2000      	movs	r0, #0
1a0010f4:	e000      	b.n	1a0010f8 <f_mount+0x50>
1a0010f6:	2000      	movs	r0, #0

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
1a0010f8:	b004      	add	sp, #16
1a0010fa:	bd10      	pop	{r4, pc}
1a0010fc:	1000052c 	.word	0x1000052c

1a001100 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
1a001100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001104:	b08f      	sub	sp, #60	; 0x3c
1a001106:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a001108:	2800      	cmp	r0, #0
1a00110a:	f000 80e0 	beq.w	1a0012ce <f_open+0x1ce>
1a00110e:	4606      	mov	r6, r0
1a001110:	4615      	mov	r5, r2

	/* Get logical drive number */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
1a001112:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
1a001116:	a801      	add	r0, sp, #4
1a001118:	a902      	add	r1, sp, #8
1a00111a:	463a      	mov	r2, r7
1a00111c:	f7ff fae2 	bl	1a0006e4 <find_volume>
	if (res == FR_OK) {
1a001120:	4604      	mov	r4, r0
1a001122:	2800      	cmp	r0, #0
1a001124:	f040 80ce 	bne.w	1a0012c4 <f_open+0x1c4>
		dj.obj.fs = fs;
1a001128:	9b02      	ldr	r3, [sp, #8]
1a00112a:	9303      	str	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
1a00112c:	a803      	add	r0, sp, #12
1a00112e:	9901      	ldr	r1, [sp, #4]
1a001130:	f7ff feea 	bl	1a000f08 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
1a001134:	4604      	mov	r4, r0
1a001136:	b920      	cbnz	r0, 1a001142 <f_open+0x42>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
1a001138:	f99d 3037 	ldrsb.w	r3, [sp, #55]	; 0x37
1a00113c:	2b00      	cmp	r3, #0
1a00113e:	da00      	bge.n	1a001142 <f_open+0x42>
				res = FR_INVALID_NAME;
1a001140:	2406      	movs	r4, #6
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
1a001142:	f015 0f1c 	tst.w	r5, #28
1a001146:	d053      	beq.n	1a0011f0 <f_open+0xf0>
			if (res != FR_OK) {					/* No file, create new */
1a001148:	b144      	cbz	r4, 1a00115c <f_open+0x5c>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
1a00114a:	2c04      	cmp	r4, #4
1a00114c:	d103      	bne.n	1a001156 <f_open+0x56>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
1a00114e:	a803      	add	r0, sp, #12
1a001150:	f7ff ff46 	bl	1a000fe0 <dir_register>
1a001154:	4604      	mov	r4, r0
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
1a001156:	f047 0708 	orr.w	r7, r7, #8
1a00115a:	e00b      	b.n	1a001174 <f_open+0x74>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
1a00115c:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a001160:	f013 0f11 	tst.w	r3, #17
1a001164:	d103      	bne.n	1a00116e <f_open+0x6e>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a001166:	f015 0f04 	tst.w	r5, #4
1a00116a:	d102      	bne.n	1a001172 <f_open+0x72>
1a00116c:	e002      	b.n	1a001174 <f_open+0x74>
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
					res = FR_DENIED;
1a00116e:	2407      	movs	r4, #7
1a001170:	e000      	b.n	1a001174 <f_open+0x74>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
1a001172:	2408      	movs	r4, #8
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
1a001174:	2c00      	cmp	r4, #0
1a001176:	d14b      	bne.n	1a001210 <f_open+0x110>
1a001178:	f017 0f08 	tst.w	r7, #8
1a00117c:	d048      	beq.n	1a001210 <f_open+0x110>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
1a00117e:	4d56      	ldr	r5, [pc, #344]	; (1a0012d8 <f_open+0x1d8>)
1a001180:	980a      	ldr	r0, [sp, #40]	; 0x28
1a001182:	300e      	adds	r0, #14
1a001184:	4629      	mov	r1, r5
1a001186:	f7ff f91b 	bl	1a0003c0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
1a00118a:	980a      	ldr	r0, [sp, #40]	; 0x28
1a00118c:	3016      	adds	r0, #22
1a00118e:	4629      	mov	r1, r5
1a001190:	f7ff f916 	bl	1a0003c0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
1a001194:	2220      	movs	r2, #32
1a001196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a001198:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
1a00119a:	f8dd 8008 	ldr.w	r8, [sp, #8]
1a00119e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a0011a0:	4640      	mov	r0, r8
1a0011a2:	4629      	mov	r1, r5
1a0011a4:	f7ff f94a 	bl	1a00043c <ld_clust>
1a0011a8:	4681      	mov	r9, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
1a0011aa:	4640      	mov	r0, r8
1a0011ac:	4629      	mov	r1, r5
1a0011ae:	2200      	movs	r2, #0
1a0011b0:	f7ff f956 	bl	1a000460 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
1a0011b4:	980a      	ldr	r0, [sp, #40]	; 0x28
1a0011b6:	301c      	adds	r0, #28
1a0011b8:	2100      	movs	r1, #0
1a0011ba:	f7ff f901 	bl	1a0003c0 <st_dword>
					fs->wflag = 1;
1a0011be:	2201      	movs	r2, #1
1a0011c0:	9b02      	ldr	r3, [sp, #8]
1a0011c2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
1a0011c4:	f1b9 0f00 	cmp.w	r9, #0
1a0011c8:	d022      	beq.n	1a001210 <f_open+0x110>
						dw = fs->winsect;
1a0011ca:	9b02      	ldr	r3, [sp, #8]
1a0011cc:	6add      	ldr	r5, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
1a0011ce:	a803      	add	r0, sp, #12
1a0011d0:	4649      	mov	r1, r9
1a0011d2:	2200      	movs	r2, #0
1a0011d4:	f7ff fd9c 	bl	1a000d10 <remove_chain>
						if (res == FR_OK) {
1a0011d8:	4604      	mov	r4, r0
1a0011da:	b9c8      	cbnz	r0, 1a001210 <f_open+0x110>
							res = move_window(fs, dw);
1a0011dc:	9802      	ldr	r0, [sp, #8]
1a0011de:	4629      	mov	r1, r5
1a0011e0:	f7ff fa28 	bl	1a000634 <move_window>
1a0011e4:	4604      	mov	r4, r0
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
1a0011e6:	f109 33ff 	add.w	r3, r9, #4294967295
1a0011ea:	9a02      	ldr	r2, [sp, #8]
1a0011ec:	60d3      	str	r3, [r2, #12]
1a0011ee:	e00f      	b.n	1a001210 <f_open+0x110>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
1a0011f0:	b974      	cbnz	r4, 1a001210 <f_open+0x110>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
1a0011f2:	f89d 3012 	ldrb.w	r3, [sp, #18]
1a0011f6:	f013 0f10 	tst.w	r3, #16
1a0011fa:	d106      	bne.n	1a00120a <f_open+0x10a>
					res = FR_NO_FILE;
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
1a0011fc:	f015 0f02 	tst.w	r5, #2
1a001200:	d006      	beq.n	1a001210 <f_open+0x110>
1a001202:	f013 0f01 	tst.w	r3, #1
1a001206:	d102      	bne.n	1a00120e <f_open+0x10e>
1a001208:	e002      	b.n	1a001210 <f_open+0x110>
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
					res = FR_NO_FILE;
1a00120a:	2404      	movs	r4, #4
1a00120c:	e000      	b.n	1a001210 <f_open+0x110>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
						res = FR_DENIED;
1a00120e:	2407      	movs	r4, #7
					}
				}
			}
		}
		if (res == FR_OK) {
1a001210:	b94c      	cbnz	r4, 1a001226 <f_open+0x126>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
1a001212:	f017 0f08 	tst.w	r7, #8
1a001216:	d001      	beq.n	1a00121c <f_open+0x11c>
				mode |= FA_MODIFIED;
1a001218:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
1a00121c:	9b02      	ldr	r3, [sp, #8]
1a00121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001220:	6233      	str	r3, [r6, #32]
			fp->dir_ptr = dj.dir;
1a001222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1a001224:	6273      	str	r3, [r6, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
1a001226:	2c00      	cmp	r4, #0
1a001228:	d14c      	bne.n	1a0012c4 <f_open+0x1c4>
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
				fp->obj.c_ofs = dj.blk_ofs;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);				/* Get allocation info */
1a00122a:	9d02      	ldr	r5, [sp, #8]
1a00122c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
1a001230:	4628      	mov	r0, r5
1a001232:	4641      	mov	r1, r8
1a001234:	f7ff f902 	bl	1a00043c <ld_clust>
1a001238:	60b0      	str	r0, [r6, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
1a00123a:	f108 001c 	add.w	r0, r8, #28
1a00123e:	f7ff f8af 	bl	1a0003a0 <ld_dword>
1a001242:	60f0      	str	r0, [r6, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
1a001244:	6035      	str	r5, [r6, #0]
			fp->obj.id = fs->id;
1a001246:	88eb      	ldrh	r3, [r5, #6]
1a001248:	80b3      	strh	r3, [r6, #4]
			fp->flag = mode;		/* Set file access mode */
1a00124a:	7437      	strb	r7, [r6, #16]
			fp->err = 0;			/* Clear error flag */
1a00124c:	2100      	movs	r1, #0
1a00124e:	7471      	strb	r1, [r6, #17]
			fp->sect = 0;			/* Invalidate current data sector */
1a001250:	61f1      	str	r1, [r6, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
1a001252:	6171      	str	r1, [r6, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
1a001254:	f106 0828 	add.w	r8, r6, #40	; 0x28
1a001258:	4640      	mov	r0, r8
1a00125a:	f44f 7200 	mov.w	r2, #512	; 0x200
1a00125e:	f7ff f8c3 	bl	1a0003e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
1a001262:	f017 0f20 	tst.w	r7, #32
1a001266:	d02d      	beq.n	1a0012c4 <f_open+0x1c4>
1a001268:	68f5      	ldr	r5, [r6, #12]
1a00126a:	b35d      	cbz	r5, 1a0012c4 <f_open+0x1c4>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
1a00126c:	6175      	str	r5, [r6, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
1a00126e:	9b02      	ldr	r3, [sp, #8]
1a001270:	895f      	ldrh	r7, [r3, #10]
1a001272:	027f      	lsls	r7, r7, #9
				clst = fp->obj.sclust;				/* Follow the cluster chain */
1a001274:	68b1      	ldr	r1, [r6, #8]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a001276:	e00b      	b.n	1a001290 <f_open+0x190>
					clst = get_fat(&fp->obj, clst);
1a001278:	4630      	mov	r0, r6
1a00127a:	f7ff fc23 	bl	1a000ac4 <get_fat>
1a00127e:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
1a001280:	2801      	cmp	r0, #1
1a001282:	d800      	bhi.n	1a001286 <f_open+0x186>
1a001284:	2402      	movs	r4, #2
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
1a001286:	f1b1 3fff 	cmp.w	r1, #4294967295
1a00128a:	d100      	bne.n	1a00128e <f_open+0x18e>
1a00128c:	2401      	movs	r4, #1
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
				clst = fp->obj.sclust;				/* Follow the cluster chain */
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
1a00128e:	1bed      	subs	r5, r5, r7
1a001290:	b90c      	cbnz	r4, 1a001296 <f_open+0x196>
1a001292:	42bd      	cmp	r5, r7
1a001294:	d8f0      	bhi.n	1a001278 <f_open+0x178>
					clst = get_fat(&fp->obj, clst);
					if (clst <= 1) res = FR_INT_ERR;
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
1a001296:	61b1      	str	r1, [r6, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
1a001298:	b9a4      	cbnz	r4, 1a0012c4 <f_open+0x1c4>
1a00129a:	f3c5 0308 	ubfx	r3, r5, #0, #9
1a00129e:	b18b      	cbz	r3, 1a0012c4 <f_open+0x1c4>
					if ((sc = clust2sect(fs, clst)) == 0) {
1a0012a0:	9f02      	ldr	r7, [sp, #8]
1a0012a2:	4638      	mov	r0, r7
1a0012a4:	f7ff f8be 	bl	1a000424 <clust2sect>
1a0012a8:	b148      	cbz	r0, 1a0012be <f_open+0x1be>
						res = FR_INT_ERR;
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
1a0012aa:	eb00 2255 	add.w	r2, r0, r5, lsr #9
1a0012ae:	61f2      	str	r2, [r6, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a0012b0:	7878      	ldrb	r0, [r7, #1]
1a0012b2:	4641      	mov	r1, r8
1a0012b4:	2301      	movs	r3, #1
1a0012b6:	f000 fb0b 	bl	1a0018d0 <disk_read>
1a0012ba:	b910      	cbnz	r0, 1a0012c2 <f_open+0x1c2>
1a0012bc:	e002      	b.n	1a0012c4 <f_open+0x1c4>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
				}
				fp->clust = clst;
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
					if ((sc = clust2sect(fs, clst)) == 0) {
						res = FR_INT_ERR;
1a0012be:	2402      	movs	r4, #2
1a0012c0:	e000      	b.n	1a0012c4 <f_open+0x1c4>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
1a0012c2:	2401      	movs	r4, #1
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
1a0012c4:	b10c      	cbz	r4, 1a0012ca <f_open+0x1ca>
1a0012c6:	2300      	movs	r3, #0
1a0012c8:	6033      	str	r3, [r6, #0]

	LEAVE_FF(fs, res);
1a0012ca:	4620      	mov	r0, r4
1a0012cc:	e000      	b.n	1a0012d0 <f_open+0x1d0>
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
1a0012ce:	2009      	movs	r0, #9
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */

	LEAVE_FF(fs, res);
}
1a0012d0:	b00f      	add	sp, #60	; 0x3c
1a0012d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0012d6:	bf00      	nop
1a0012d8:	48210000 	.word	0x48210000

1a0012dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
1a0012dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0012e0:	b083      	sub	sp, #12
1a0012e2:	4604      	mov	r4, r0
1a0012e4:	4688      	mov	r8, r1
1a0012e6:	4616      	mov	r6, r2
1a0012e8:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
1a0012ea:	2300      	movs	r3, #0
1a0012ec:	603b      	str	r3, [r7, #0]
	res = validate(fp, &fs);
1a0012ee:	a901      	add	r1, sp, #4
1a0012f0:	f7ff f95c 	bl	1a0005ac <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
1a0012f4:	4603      	mov	r3, r0
1a0012f6:	b908      	cbnz	r0, 1a0012fc <f_write+0x20>
1a0012f8:	7c63      	ldrb	r3, [r4, #17]
1a0012fa:	b10b      	cbz	r3, 1a001300 <f_write+0x24>
1a0012fc:	4618      	mov	r0, r3
1a0012fe:	e0be      	b.n	1a00147e <f_write+0x1a2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a001300:	7c23      	ldrb	r3, [r4, #16]
1a001302:	f013 0f02 	tst.w	r3, #2
1a001306:	f000 80b9 	beq.w	1a00147c <f_write+0x1a0>

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
1a00130a:	6963      	ldr	r3, [r4, #20]
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */

	/* Check fptr wrap-around (file size cannot exceed the limit on each FAT specs) */
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
1a00130c:	42f3      	cmn	r3, r6
1a00130e:	f0c0 80ac 	bcc.w	1a00146a <f_write+0x18e>
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
1a001312:	43de      	mvns	r6, r3
1a001314:	e0a9      	b.n	1a00146a <f_write+0x18e>
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
1a001316:	6963      	ldr	r3, [r4, #20]
1a001318:	f3c3 0208 	ubfx	r2, r3, #0, #9
1a00131c:	2a00      	cmp	r2, #0
1a00131e:	f040 8085 	bne.w	1a00142c <f_write+0x150>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
1a001322:	9a01      	ldr	r2, [sp, #4]
1a001324:	8952      	ldrh	r2, [r2, #10]
1a001326:	3a01      	subs	r2, #1
			if (csect == 0) {				/* On the cluster boundary? */
1a001328:	ea12 2953 	ands.w	r9, r2, r3, lsr #9
1a00132c:	d11f      	bne.n	1a00136e <f_write+0x92>
				if (fp->fptr == 0) {		/* On the top of the file? */
1a00132e:	b933      	cbnz	r3, 1a00133e <f_write+0x62>
					clst = fp->obj.sclust;	/* Follow from the origin */
1a001330:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
1a001332:	b940      	cbnz	r0, 1a001346 <f_write+0x6a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
1a001334:	4620      	mov	r0, r4
1a001336:	2100      	movs	r1, #0
1a001338:	f7ff fc84 	bl	1a000c44 <create_chain>
1a00133c:	e003      	b.n	1a001346 <f_write+0x6a>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
1a00133e:	4620      	mov	r0, r4
1a001340:	69a1      	ldr	r1, [r4, #24]
1a001342:	f7ff fc7f 	bl	1a000c44 <create_chain>
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
1a001346:	2800      	cmp	r0, #0
1a001348:	f000 8092 	beq.w	1a001470 <f_write+0x194>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
1a00134c:	2801      	cmp	r0, #1
1a00134e:	d103      	bne.n	1a001358 <f_write+0x7c>
1a001350:	2302      	movs	r3, #2
1a001352:	7463      	strb	r3, [r4, #17]
1a001354:	4618      	mov	r0, r3
1a001356:	e092      	b.n	1a00147e <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
1a001358:	f1b0 3fff 	cmp.w	r0, #4294967295
1a00135c:	d103      	bne.n	1a001366 <f_write+0x8a>
1a00135e:	2301      	movs	r3, #1
1a001360:	7463      	strb	r3, [r4, #17]
1a001362:	4618      	mov	r0, r3
1a001364:	e08b      	b.n	1a00147e <f_write+0x1a2>
				fp->clust = clst;			/* Update current cluster */
1a001366:	61a0      	str	r0, [r4, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
1a001368:	68a3      	ldr	r3, [r4, #8]
1a00136a:	b903      	cbnz	r3, 1a00136e <f_write+0x92>
1a00136c:	60a0      	str	r0, [r4, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
1a00136e:	f994 3010 	ldrsb.w	r3, [r4, #16]
1a001372:	2b00      	cmp	r3, #0
1a001374:	da10      	bge.n	1a001398 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
1a001376:	9b01      	ldr	r3, [sp, #4]
1a001378:	7858      	ldrb	r0, [r3, #1]
1a00137a:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a00137e:	69e2      	ldr	r2, [r4, #28]
1a001380:	2301      	movs	r3, #1
1a001382:	f000 fae9 	bl	1a001958 <disk_write>
1a001386:	b118      	cbz	r0, 1a001390 <f_write+0xb4>
1a001388:	2301      	movs	r3, #1
1a00138a:	7463      	strb	r3, [r4, #17]
1a00138c:	4618      	mov	r0, r3
1a00138e:	e076      	b.n	1a00147e <f_write+0x1a2>
				fp->flag &= ~FA_DIRTY;
1a001390:	7c23      	ldrb	r3, [r4, #16]
1a001392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a001396:	7423      	strb	r3, [r4, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
1a001398:	f8dd a004 	ldr.w	sl, [sp, #4]
1a00139c:	4650      	mov	r0, sl
1a00139e:	69a1      	ldr	r1, [r4, #24]
1a0013a0:	f7ff f840 	bl	1a000424 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
1a0013a4:	4605      	mov	r5, r0
1a0013a6:	b910      	cbnz	r0, 1a0013ae <f_write+0xd2>
1a0013a8:	2002      	movs	r0, #2
1a0013aa:	7460      	strb	r0, [r4, #17]
1a0013ac:	e067      	b.n	1a00147e <f_write+0x1a2>
			sect += csect;
1a0013ae:	444d      	add	r5, r9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
			if (cc) {						/* Write maximum contiguous sectors directly */
1a0013b0:	ea5f 2b56 	movs.w	fp, r6, lsr #9
1a0013b4:	d025      	beq.n	1a001402 <f_write+0x126>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
1a0013b6:	eb09 030b 	add.w	r3, r9, fp
1a0013ba:	f8ba 200a 	ldrh.w	r2, [sl, #10]
1a0013be:	4293      	cmp	r3, r2
1a0013c0:	d901      	bls.n	1a0013c6 <f_write+0xea>
					cc = fs->csize - csect;
1a0013c2:	ebc9 0b02 	rsb	fp, r9, r2
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) {
1a0013c6:	f89a 0001 	ldrb.w	r0, [sl, #1]
1a0013ca:	4641      	mov	r1, r8
1a0013cc:	462a      	mov	r2, r5
1a0013ce:	465b      	mov	r3, fp
1a0013d0:	f000 fac2 	bl	1a001958 <disk_write>
1a0013d4:	b110      	cbz	r0, 1a0013dc <f_write+0x100>
					ABORT(fs, FR_DISK_ERR);
1a0013d6:	2001      	movs	r0, #1
1a0013d8:	7460      	strb	r0, [r4, #17]
1a0013da:	e050      	b.n	1a00147e <f_write+0x1a2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
1a0013dc:	69e1      	ldr	r1, [r4, #28]
1a0013de:	1b49      	subs	r1, r1, r5
1a0013e0:	4559      	cmp	r1, fp
1a0013e2:	d20b      	bcs.n	1a0013fc <f_write+0x120>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
1a0013e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
1a0013e8:	eb08 2141 	add.w	r1, r8, r1, lsl #9
1a0013ec:	f44f 7200 	mov.w	r2, #512	; 0x200
1a0013f0:	f7fe fff0 	bl	1a0003d4 <mem_cpy>
					fp->flag &= ~FA_DIRTY;
1a0013f4:	7c23      	ldrb	r3, [r4, #16]
1a0013f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0013fa:	7423      	strb	r3, [r4, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
1a0013fc:	ea4f 254b 	mov.w	r5, fp, lsl #9
				continue;
1a001400:	e026      	b.n	1a001450 <f_write+0x174>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
1a001402:	69e3      	ldr	r3, [r4, #28]
1a001404:	42ab      	cmp	r3, r5
1a001406:	d010      	beq.n	1a00142a <f_write+0x14e>
				if (fp->fptr < fp->obj.objsize &&
1a001408:	6962      	ldr	r2, [r4, #20]
1a00140a:	68e3      	ldr	r3, [r4, #12]
1a00140c:	429a      	cmp	r2, r3
1a00140e:	d20c      	bcs.n	1a00142a <f_write+0x14e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
1a001410:	f89a 0001 	ldrb.w	r0, [sl, #1]
1a001414:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a001418:	462a      	mov	r2, r5
1a00141a:	2301      	movs	r3, #1
1a00141c:	f000 fa58 	bl	1a0018d0 <disk_read>
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect) {		/* Fill sector cache with file data */
				if (fp->fptr < fp->obj.objsize &&
1a001420:	b118      	cbz	r0, 1a00142a <f_write+0x14e>
					disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
						ABORT(fs, FR_DISK_ERR);
1a001422:	2301      	movs	r3, #1
1a001424:	7463      	strb	r3, [r4, #17]
1a001426:	4618      	mov	r0, r3
1a001428:	e029      	b.n	1a00147e <f_write+0x1a2>
				}
			}
#endif
			fp->sect = sect;
1a00142a:	61e5      	str	r5, [r4, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
1a00142c:	6960      	ldr	r0, [r4, #20]
1a00142e:	f3c0 0008 	ubfx	r0, r0, #0, #9
1a001432:	f5c0 7500 	rsb	r5, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
1a001436:	42b5      	cmp	r5, r6
1a001438:	d900      	bls.n	1a00143c <f_write+0x160>
1a00143a:	4635      	mov	r5, r6
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
1a00143c:	3028      	adds	r0, #40	; 0x28
1a00143e:	4420      	add	r0, r4
1a001440:	4641      	mov	r1, r8
1a001442:	462a      	mov	r2, r5
1a001444:	f7fe ffc6 	bl	1a0003d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
1a001448:	7c23      	ldrb	r3, [r4, #16]
1a00144a:	f063 037f 	orn	r3, r3, #127	; 0x7f
1a00144e:	7423      	strb	r3, [r4, #16]
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
1a001450:	44a8      	add	r8, r5
1a001452:	6963      	ldr	r3, [r4, #20]
1a001454:	442b      	add	r3, r5
1a001456:	6163      	str	r3, [r4, #20]
1a001458:	68e2      	ldr	r2, [r4, #12]
1a00145a:	4293      	cmp	r3, r2
1a00145c:	bf38      	it	cc
1a00145e:	4613      	movcc	r3, r2
1a001460:	60e3      	str	r3, [r4, #12]
1a001462:	683b      	ldr	r3, [r7, #0]
1a001464:	442b      	add	r3, r5
1a001466:	603b      	str	r3, [r7, #0]
1a001468:	1b76      	subs	r6, r6, r5
	if ((_FS_EXFAT && fs->fs_type == FS_EXFAT && fp->fptr + btw < fp->fptr)
		|| (DWORD)fp->fptr + btw < (DWORD)fp->fptr) {
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
	}

	for ( ;  btw;							/* Repeat until all data written */
1a00146a:	2e00      	cmp	r6, #0
1a00146c:	f47f af53 	bne.w	1a001316 <f_write+0x3a>
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */
1a001470:	7c23      	ldrb	r3, [r4, #16]
1a001472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001476:	7423      	strb	r3, [r4, #16]

	LEAVE_FF(fs, FR_OK);
1a001478:	2000      	movs	r0, #0
1a00147a:	e000      	b.n	1a00147e <f_write+0x1a2>


	*bw = 0;	/* Clear write byte counter */
	res = validate(fp, &fs);
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
1a00147c:	2007      	movs	r0, #7
	}

	fp->flag |= FA_MODIFIED;						/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
1a00147e:	b003      	add	sp, #12
1a001480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a001484 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
1a001484:	b530      	push	{r4, r5, lr}
1a001486:	b083      	sub	sp, #12
1a001488:	4604      	mov	r4, r0
	DWORD tm;
	BYTE *dir;
	DEF_NAMBUF


	res = validate(fp, &fs);	/* Check validity of the object */
1a00148a:	a901      	add	r1, sp, #4
1a00148c:	f7ff f88e 	bl	1a0005ac <validate>
	if (res == FR_OK) {
1a001490:	4603      	mov	r3, r0
1a001492:	2800      	cmp	r0, #0
1a001494:	d13d      	bne.n	1a001512 <f_sync+0x8e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
1a001496:	7c22      	ldrb	r2, [r4, #16]
1a001498:	f012 0f40 	tst.w	r2, #64	; 0x40
1a00149c:	d039      	beq.n	1a001512 <f_sync+0x8e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
1a00149e:	f012 0f80 	tst.w	r2, #128	; 0x80
1a0014a2:	d00c      	beq.n	1a0014be <f_sync+0x3a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a0014a4:	9b01      	ldr	r3, [sp, #4]
1a0014a6:	7858      	ldrb	r0, [r3, #1]
1a0014a8:	f104 0128 	add.w	r1, r4, #40	; 0x28
1a0014ac:	69e2      	ldr	r2, [r4, #28]
1a0014ae:	2301      	movs	r3, #1
1a0014b0:	f000 fa52 	bl	1a001958 <disk_write>
1a0014b4:	bb78      	cbnz	r0, 1a001516 <f_sync+0x92>
				fp->flag &= ~FA_DIRTY;
1a0014b6:	7c23      	ldrb	r3, [r4, #16]
1a0014b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
1a0014bc:	7423      	strb	r3, [r4, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
1a0014be:	9801      	ldr	r0, [sp, #4]
1a0014c0:	6a21      	ldr	r1, [r4, #32]
1a0014c2:	f7ff f8b7 	bl	1a000634 <move_window>
				if (res == FR_OK) {
1a0014c6:	4603      	mov	r3, r0
1a0014c8:	bb18      	cbnz	r0, 1a001512 <f_sync+0x8e>
					dir = fp->dir_ptr;
1a0014ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
1a0014cc:	7aeb      	ldrb	r3, [r5, #11]
1a0014ce:	f043 0320 	orr.w	r3, r3, #32
1a0014d2:	72eb      	strb	r3, [r5, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
1a0014d4:	6820      	ldr	r0, [r4, #0]
1a0014d6:	4629      	mov	r1, r5
1a0014d8:	68a2      	ldr	r2, [r4, #8]
1a0014da:	f7fe ffc1 	bl	1a000460 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
1a0014de:	f105 001c 	add.w	r0, r5, #28
1a0014e2:	68e1      	ldr	r1, [r4, #12]
1a0014e4:	f7fe ff6c 	bl	1a0003c0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
1a0014e8:	f105 0016 	add.w	r0, r5, #22
1a0014ec:	490b      	ldr	r1, [pc, #44]	; (1a00151c <f_sync+0x98>)
1a0014ee:	f7fe ff67 	bl	1a0003c0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
1a0014f2:	f105 0012 	add.w	r0, r5, #18
1a0014f6:	2100      	movs	r1, #0
1a0014f8:	f7fe ff5e 	bl	1a0003b8 <st_word>
					fs->wflag = 1;
1a0014fc:	2201      	movs	r2, #1
1a0014fe:	9b01      	ldr	r3, [sp, #4]
1a001500:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
1a001502:	9801      	ldr	r0, [sp, #4]
1a001504:	f7ff fd8a 	bl	1a00101c <sync_fs>
1a001508:	4603      	mov	r3, r0
					fp->flag &= ~FA_MODIFIED;
1a00150a:	7c22      	ldrb	r2, [r4, #16]
1a00150c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
1a001510:	7422      	strb	r2, [r4, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
1a001512:	4618      	mov	r0, r3
1a001514:	e000      	b.n	1a001518 <f_sync+0x94>
	res = validate(fp, &fs);	/* Check validity of the object */
	if (res == FR_OK) {
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
1a001516:	2001      	movs	r0, #1
			}
		}
	}

	LEAVE_FF(fs, res);
}
1a001518:	b003      	add	sp, #12
1a00151a:	bd30      	pop	{r4, r5, pc}
1a00151c:	48210000 	.word	0x48210000

1a001520 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
1a001520:	b510      	push	{r4, lr}
1a001522:	b082      	sub	sp, #8
1a001524:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
1a001526:	f7ff ffad 	bl	1a001484 <f_sync>
	if (res == FR_OK)
1a00152a:	4603      	mov	r3, r0
1a00152c:	b938      	cbnz	r0, 1a00153e <f_close+0x1e>
#endif
	{
		res = validate(fp, &fs);	/* Lock volume */
1a00152e:	4620      	mov	r0, r4
1a001530:	a901      	add	r1, sp, #4
1a001532:	f7ff f83b 	bl	1a0005ac <validate>
		if (res == FR_OK) {
1a001536:	4603      	mov	r3, r0
1a001538:	b908      	cbnz	r0, 1a00153e <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
1a00153a:	2200      	movs	r2, #0
1a00153c:	6022      	str	r2, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
1a00153e:	4618      	mov	r0, r3
1a001540:	b002      	add	sp, #8
1a001542:	bd10      	pop	{r4, pc}

1a001544 <chk_power>:

static
int chk_power(void)		/* Socket power state: 0=off, 1=on */
{
	return 1;
}
1a001544:	2001      	movs	r0, #1
1a001546:	4770      	bx	lr

1a001548 <SSPSend>:

static
BYTE CardType;			/* Card type flags */

static void SSPSend(uint8_t *buf, uint32_t Length)
{
1a001548:	b500      	push	{lr}
1a00154a:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = buf;
1a00154c:	9001      	str	r0, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a00154e:	2300      	movs	r3, #0
1a001550:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = NULL;
1a001552:	9303      	str	r3, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a001554:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a001556:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a001558:	4803      	ldr	r0, [pc, #12]	; (1a001568 <SSPSend+0x20>)
1a00155a:	a901      	add	r1, sp, #4
1a00155c:	f001 fd74 	bl	1a003048 <Chip_SSP_RWFrames_Blocking>
}
1a001560:	b007      	add	sp, #28
1a001562:	f85d fb04 	ldr.w	pc, [sp], #4
1a001566:	bf00      	nop
1a001568:	400c5000 	.word	0x400c5000

1a00156c <xmit_spi>:
/* Transmit a byte to MMC via SPI  (Platform dependent)                  */
/*-----------------------------------------------------------------------*/

//#define xmit_spi(dat) (SSPSend((uint8_t*)&(dat), 1))
static void xmit_spi(BYTE dat)
{
1a00156c:	b500      	push	{lr}
1a00156e:	b083      	sub	sp, #12
1a001570:	ab02      	add	r3, sp, #8
1a001572:	f803 0d01 	strb.w	r0, [r3, #-1]!
    SSPSend((uint8_t*) &dat, 1);
1a001576:	4618      	mov	r0, r3
1a001578:	2101      	movs	r1, #1
1a00157a:	f7ff ffe5 	bl	1a001548 <SSPSend>
}
1a00157e:	b003      	add	sp, #12
1a001580:	f85d fb04 	ldr.w	pc, [sp], #4

1a001584 <SSPReceive>:

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
}

void SSPReceive( uint8_t *buf, uint32_t Length )
{
1a001584:	b500      	push	{lr}
1a001586:	b087      	sub	sp, #28
    Chip_SSP_DATA_SETUP_T xferConfig;

	xferConfig.tx_data = NULL;
1a001588:	2300      	movs	r3, #0
1a00158a:	9301      	str	r3, [sp, #4]
	xferConfig.tx_cnt  = 0;
1a00158c:	9302      	str	r3, [sp, #8]
	xferConfig.rx_data = buf;
1a00158e:	9003      	str	r0, [sp, #12]
	xferConfig.rx_cnt  = 0;
1a001590:	9304      	str	r3, [sp, #16]
	xferConfig.length  = Length;
1a001592:	9105      	str	r1, [sp, #20]

	Chip_SSP_RWFrames_Blocking(LPC_SSP1, &xferConfig);
1a001594:	4803      	ldr	r0, [pc, #12]	; (1a0015a4 <SSPReceive+0x20>)
1a001596:	a901      	add	r1, sp, #4
1a001598:	f001 fd56 	bl	1a003048 <Chip_SSP_RWFrames_Blocking>
}
1a00159c:	b007      	add	sp, #28
1a00159e:	f85d fb04 	ldr.w	pc, [sp], #4
1a0015a2:	bf00      	nop
1a0015a4:	400c5000 	.word	0x400c5000

1a0015a8 <rcvr_spi>:
/* Receive a byte from MMC via SPI  (Platform dependent)                 */
/*-----------------------------------------------------------------------*/

static
BYTE rcvr_spi (void)
{
1a0015a8:	b500      	push	{lr}
1a0015aa:	b083      	sub	sp, #12
    BYTE data = 0;
1a0015ac:	a802      	add	r0, sp, #8
1a0015ae:	2300      	movs	r3, #0
1a0015b0:	f800 3d01 	strb.w	r3, [r0, #-1]!

    SSPReceive(&data, 1);
1a0015b4:	2101      	movs	r1, #1
1a0015b6:	f7ff ffe5 	bl	1a001584 <SSPReceive>

    return data;
}
1a0015ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
1a0015be:	b003      	add	sp, #12
1a0015c0:	f85d fb04 	ldr.w	pc, [sp], #4

1a0015c4 <wait_ready>:
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/

static
BYTE wait_ready (void)
{
1a0015c4:	b508      	push	{r3, lr}
	BYTE res;


	Timer2 = 50;	/* Wait for ready in timeout of 500ms */
1a0015c6:	2232      	movs	r2, #50	; 0x32
1a0015c8:	4b06      	ldr	r3, [pc, #24]	; (1a0015e4 <wait_ready+0x20>)
1a0015ca:	701a      	strb	r2, [r3, #0]
	rcvr_spi();
1a0015cc:	f7ff ffec 	bl	1a0015a8 <rcvr_spi>
	do
		res = rcvr_spi();
1a0015d0:	f7ff ffea 	bl	1a0015a8 <rcvr_spi>
	while ((res != 0xFF) && Timer2);
1a0015d4:	28ff      	cmp	r0, #255	; 0xff
1a0015d6:	d004      	beq.n	1a0015e2 <wait_ready+0x1e>
1a0015d8:	4b02      	ldr	r3, [pc, #8]	; (1a0015e4 <wait_ready+0x20>)
1a0015da:	781b      	ldrb	r3, [r3, #0]
1a0015dc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0015e0:	d1f6      	bne.n	1a0015d0 <wait_ready+0xc>

	return res;
}
1a0015e2:	bd08      	pop	{r3, pc}
1a0015e4:	10000532 	.word	0x10000532

1a0015e8 <deselect>:
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static
void deselect (void)
{
1a0015e8:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutHigh(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->SET[port] = (1 << pin);
1a0015ea:	2101      	movs	r1, #1
1a0015ec:	f242 230c 	movw	r3, #8716	; 0x220c
1a0015f0:	4a02      	ldr	r2, [pc, #8]	; (1a0015fc <deselect+0x14>)
1a0015f2:	50d1      	str	r1, [r2, r3]
	CS_HIGH();
	rcvr_spi();
1a0015f4:	f7ff ffd8 	bl	1a0015a8 <rcvr_spi>
1a0015f8:	bd08      	pop	{r3, pc}
1a0015fa:	bf00      	nop
1a0015fc:	400f4000 	.word	0x400f4000

1a001600 <select_>:
/* Select the card and wait ready                                        */
/*-----------------------------------------------------------------------*/

static
BOOL select_ (void)	/* TRUE:Successful, FALSE:Timeout */
{
1a001600:	b508      	push	{r3, lr}
 * @note	Any bit set as a '0' will not have it's state changed. This only
 * applies to ports configured as an output.
 */
STATIC INLINE void Chip_GPIO_SetPinOutLow(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->CLR[port] = (1 << pin);
1a001602:	2101      	movs	r1, #1
1a001604:	f242 238c 	movw	r3, #8844	; 0x228c
1a001608:	4a05      	ldr	r2, [pc, #20]	; (1a001620 <select_+0x20>)
1a00160a:	50d1      	str	r1, [r2, r3]
	CS_LOW();
	if (wait_ready() != 0xFF) {
1a00160c:	f7ff ffda 	bl	1a0015c4 <wait_ready>
1a001610:	28ff      	cmp	r0, #255	; 0xff
1a001612:	d003      	beq.n	1a00161c <select_+0x1c>
		deselect();
1a001614:	f7ff ffe8 	bl	1a0015e8 <deselect>
		return FALSE;
1a001618:	2000      	movs	r0, #0
1a00161a:	bd08      	pop	{r3, pc}
	}
	return TRUE;
1a00161c:	2001      	movs	r0, #1
}
1a00161e:	bd08      	pop	{r3, pc}
1a001620:	400f4000 	.word	0x400f4000

1a001624 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
1a001624:	b538      	push	{r3, r4, r5, lr}
1a001626:	4604      	mov	r4, r0
1a001628:	460d      	mov	r5, r1
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
1a00162a:	f010 0f80 	tst.w	r0, #128	; 0x80
1a00162e:	d007      	beq.n	1a001640 <send_cmd+0x1c>
		cmd &= 0x7F;
1a001630:	f000 047f 	and.w	r4, r0, #127	; 0x7f
		res = send_cmd(CMD55, 0);
1a001634:	2077      	movs	r0, #119	; 0x77
1a001636:	2100      	movs	r1, #0
1a001638:	f7ff fff4 	bl	1a001624 <send_cmd>
		if (res > 1) return res;
1a00163c:	2801      	cmp	r0, #1
1a00163e:	d82f      	bhi.n	1a0016a0 <send_cmd+0x7c>
	}

	/* Select the card and wait for ready */
	deselect();
1a001640:	f7ff ffd2 	bl	1a0015e8 <deselect>
	if (!select_()) return 0xFF;
1a001644:	f7ff ffdc 	bl	1a001600 <select_>
1a001648:	b348      	cbz	r0, 1a00169e <send_cmd+0x7a>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
1a00164a:	4620      	mov	r0, r4
1a00164c:	f7ff ff8e 	bl	1a00156c <xmit_spi>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
1a001650:	0e28      	lsrs	r0, r5, #24
1a001652:	f7ff ff8b 	bl	1a00156c <xmit_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
1a001656:	f3c5 4007 	ubfx	r0, r5, #16, #8
1a00165a:	f7ff ff87 	bl	1a00156c <xmit_spi>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
1a00165e:	f3c5 2007 	ubfx	r0, r5, #8, #8
1a001662:	f7ff ff83 	bl	1a00156c <xmit_spi>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
1a001666:	b2e8      	uxtb	r0, r5
1a001668:	f7ff ff80 	bl	1a00156c <xmit_spi>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
1a00166c:	2c40      	cmp	r4, #64	; 0x40
1a00166e:	d001      	beq.n	1a001674 <send_cmd+0x50>
	xmit_spi(cmd);						/* Start + Command index */
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
1a001670:	2001      	movs	r0, #1
1a001672:	e000      	b.n	1a001676 <send_cmd+0x52>
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
1a001674:	2095      	movs	r0, #149	; 0x95
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a001676:	2c48      	cmp	r4, #72	; 0x48
1a001678:	d100      	bne.n	1a00167c <send_cmd+0x58>
1a00167a:	2087      	movs	r0, #135	; 0x87
	xmit_spi(n);
1a00167c:	f7ff ff76 	bl	1a00156c <xmit_spi>

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
1a001680:	2c4c      	cmp	r4, #76	; 0x4c
1a001682:	d101      	bne.n	1a001688 <send_cmd+0x64>
1a001684:	f7ff ff90 	bl	1a0015a8 <rcvr_spi>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
1a001688:	240a      	movs	r4, #10

	/* Receive command response */
	if (cmd == CMD12) rcvr_spi();		/* Skip a stuff byte when stop reading */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do
		res = rcvr_spi();
1a00168a:	f7ff ff8d 	bl	1a0015a8 <rcvr_spi>
	while ((res & 0x80) && --n);
1a00168e:	f010 0f80 	tst.w	r0, #128	; 0x80
1a001692:	d005      	beq.n	1a0016a0 <send_cmd+0x7c>
1a001694:	1e63      	subs	r3, r4, #1
1a001696:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a00169a:	d1f6      	bne.n	1a00168a <send_cmd+0x66>

	return res;			/* Return with the response value */
1a00169c:	bd38      	pop	{r3, r4, r5, pc}
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	deselect();
	if (!select_()) return 0xFF;
1a00169e:	20ff      	movs	r0, #255	; 0xff
	do
		res = rcvr_spi();
	while ((res & 0x80) && --n);

	return res;			/* Return with the response value */
}
1a0016a0:	bd38      	pop	{r3, r4, r5, pc}
1a0016a2:	bf00      	nop

1a0016a4 <xmit_datablock>:
static
BOOL xmit_datablock (
	const BYTE *buff,	/* 512 byte data block to be transmitted */
	BYTE token			/* Data/Stop token */
)
{
1a0016a4:	b570      	push	{r4, r5, r6, lr}
1a0016a6:	4606      	mov	r6, r0
1a0016a8:	460c      	mov	r4, r1
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a0016aa:	f7ff ff8b 	bl	1a0015c4 <wait_ready>
1a0016ae:	28ff      	cmp	r0, #255	; 0xff
1a0016b0:	d120      	bne.n	1a0016f4 <xmit_datablock+0x50>

	xmit_spi(token);					/* Xmit data token */
1a0016b2:	4620      	mov	r0, r4
1a0016b4:	f7ff ff5a 	bl	1a00156c <xmit_spi>
	if (token != 0xFD) {	/* Is data token */
1a0016b8:	2cfd      	cmp	r4, #253	; 0xfd
1a0016ba:	d01d      	beq.n	1a0016f8 <xmit_datablock+0x54>
1a0016bc:	2400      	movs	r4, #0
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
1a0016be:	4635      	mov	r5, r6
1a0016c0:	f815 0b02 	ldrb.w	r0, [r5], #2
1a0016c4:	f7ff ff52 	bl	1a00156c <xmit_spi>
			xmit_spi(*buff++);
1a0016c8:	7870      	ldrb	r0, [r6, #1]
1a0016ca:	f7ff ff4f 	bl	1a00156c <xmit_spi>
		} while (--wc);
1a0016ce:	1e63      	subs	r3, r4, #1
	xmit_spi(token);					/* Xmit data token */
	if (token != 0xFD) {	/* Is data token */
		wc = 0;
		do {							/* Xmit the 512 byte data block to MMC */
			xmit_spi(*buff++);
			xmit_spi(*buff++);
1a0016d0:	462e      	mov	r6, r5
		} while (--wc);
1a0016d2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
1a0016d6:	d1f2      	bne.n	1a0016be <xmit_datablock+0x1a>
		xmit_spi(0xFF);					/* CRC (Dummy) */
1a0016d8:	20ff      	movs	r0, #255	; 0xff
1a0016da:	f7ff ff47 	bl	1a00156c <xmit_spi>
		xmit_spi(0xFF);
1a0016de:	20ff      	movs	r0, #255	; 0xff
1a0016e0:	f7ff ff44 	bl	1a00156c <xmit_spi>
		resp = rcvr_spi();				/* Reveive data response */
1a0016e4:	f7ff ff60 	bl	1a0015a8 <rcvr_spi>
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
1a0016e8:	f000 001f 	and.w	r0, r0, #31
1a0016ec:	2805      	cmp	r0, #5
1a0016ee:	d005      	beq.n	1a0016fc <xmit_datablock+0x58>
			return FALSE;
1a0016f0:	2000      	movs	r0, #0
1a0016f2:	bd70      	pop	{r4, r5, r6, pc}
)
{
	BYTE resp, wc;


	if (wait_ready() != 0xFF) return FALSE;
1a0016f4:	2000      	movs	r0, #0
1a0016f6:	bd70      	pop	{r4, r5, r6, pc}
		resp = rcvr_spi();				/* Reveive data response */
		if ((resp & 0x1F) != 0x05)		/* If not accepted, return with error */
			return FALSE;
	}

	return TRUE;
1a0016f8:	2001      	movs	r0, #1
1a0016fa:	bd70      	pop	{r4, r5, r6, pc}
1a0016fc:	2001      	movs	r0, #1
}
1a0016fe:	bd70      	pop	{r4, r5, r6, pc}

1a001700 <rcvr_datablock>:
static
BOOL rcvr_datablock (
	BYTE *buff,			/* Data buffer to store received data */
	UINT btr			/* Byte count (must be multiple of 4) */
)
{
1a001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001702:	4604      	mov	r4, r0
1a001704:	460e      	mov	r6, r1
	BYTE token;


	Timer1 = 20;
1a001706:	2214      	movs	r2, #20
1a001708:	4b15      	ldr	r3, [pc, #84]	; (1a001760 <rcvr_datablock+0x60>)
1a00170a:	701a      	strb	r2, [r3, #0]
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
1a00170c:	f7ff ff4c 	bl	1a0015a8 <rcvr_spi>
	} while ((token == 0xFF) && Timer1);
1a001710:	28ff      	cmp	r0, #255	; 0xff
1a001712:	d104      	bne.n	1a00171e <rcvr_datablock+0x1e>
1a001714:	4b12      	ldr	r3, [pc, #72]	; (1a001760 <rcvr_datablock+0x60>)
1a001716:	781b      	ldrb	r3, [r3, #0]
1a001718:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00171c:	d1f6      	bne.n	1a00170c <rcvr_datablock+0xc>
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a00171e:	28fe      	cmp	r0, #254	; 0xfe
1a001720:	d11b      	bne.n	1a00175a <rcvr_datablock+0x5a>

	do {							/* Receive the data block into buffer */
		rcvr_spi_m(buff++);
1a001722:	1c65      	adds	r5, r4, #1
1a001724:	4620      	mov	r0, r4
1a001726:	2101      	movs	r1, #1
1a001728:	f7ff ff2c 	bl	1a001584 <SSPReceive>
		rcvr_spi_m(buff++);
1a00172c:	1ca7      	adds	r7, r4, #2
1a00172e:	4628      	mov	r0, r5
1a001730:	2101      	movs	r1, #1
1a001732:	f7ff ff27 	bl	1a001584 <SSPReceive>
		rcvr_spi_m(buff++);
1a001736:	1ce5      	adds	r5, r4, #3
1a001738:	4638      	mov	r0, r7
1a00173a:	2101      	movs	r1, #1
1a00173c:	f7ff ff22 	bl	1a001584 <SSPReceive>
		rcvr_spi_m(buff++);
1a001740:	4628      	mov	r0, r5
1a001742:	3404      	adds	r4, #4
1a001744:	2101      	movs	r1, #1
1a001746:	f7ff ff1d 	bl	1a001584 <SSPReceive>
	} while (btr -= 4);
1a00174a:	3e04      	subs	r6, #4
1a00174c:	d1e9      	bne.n	1a001722 <rcvr_datablock+0x22>
	rcvr_spi();						/* Discard CRC */
1a00174e:	f7ff ff2b 	bl	1a0015a8 <rcvr_spi>
	rcvr_spi();
1a001752:	f7ff ff29 	bl	1a0015a8 <rcvr_spi>

	return TRUE;					/* Return with success */
1a001756:	2001      	movs	r0, #1
1a001758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

	Timer1 = 20;
	do {							/* Wait for data packet in timeout of 200ms */
		token = rcvr_spi();
	} while ((token == 0xFF) && Timer1);
	if(token != 0xFE) return FALSE;	/* If not valid data token, retutn with error */
1a00175a:	2000      	movs	r0, #0
	} while (btr -= 4);
	rcvr_spi();						/* Discard CRC */
	rcvr_spi();

	return TRUE;					/* Return with success */
}
1a00175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00175e:	bf00      	nop
1a001760:	10000531 	.word	0x10000531

1a001764 <disk_initialize>:
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a001764:	2800      	cmp	r0, #0
1a001766:	f040 809e 	bne.w	1a0018a6 <disk_initialize+0x142>
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */
1a00176a:	4b51      	ldr	r3, [pc, #324]	; (1a0018b0 <disk_initialize+0x14c>)
1a00176c:	781b      	ldrb	r3, [r3, #0]
1a00176e:	f013 0f02 	tst.w	r3, #2
1a001772:	d008      	beq.n	1a001786 <disk_initialize+0x22>
1a001774:	4b4e      	ldr	r3, [pc, #312]	; (1a0018b0 <disk_initialize+0x14c>)
1a001776:	7818      	ldrb	r0, [r3, #0]
1a001778:	b2c0      	uxtb	r0, r0
1a00177a:	4770      	bx	lr

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a00177c:	f7ff ff14 	bl	1a0015a8 <rcvr_spi>
1a001780:	3c01      	subs	r4, #1
1a001782:	b2e4      	uxtb	r4, r4
1a001784:	e002      	b.n	1a00178c <disk_initialize+0x28>
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
1a001786:	b530      	push	{r4, r5, lr}
1a001788:	b083      	sub	sp, #12
1a00178a:	240a      	movs	r4, #10
	if (drv) return STA_NOINIT;			/* Supports only single drive */
	if (Stat & STA_NODISK) return Stat;	/* No card in the socket */

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */
1a00178c:	2c00      	cmp	r4, #0
1a00178e:	d1f5      	bne.n	1a00177c <disk_initialize+0x18>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
1a001790:	2040      	movs	r0, #64	; 0x40
1a001792:	2100      	movs	r1, #0
1a001794:	f7ff ff46 	bl	1a001624 <send_cmd>
1a001798:	2801      	cmp	r0, #1
1a00179a:	d16b      	bne.n	1a001874 <disk_initialize+0x110>
		Timer1 = 100;						/* Initialization timeout of 1000 msec */
1a00179c:	2264      	movs	r2, #100	; 0x64
1a00179e:	4b45      	ldr	r3, [pc, #276]	; (1a0018b4 <disk_initialize+0x150>)
1a0017a0:	701a      	strb	r2, [r3, #0]
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
1a0017a2:	2048      	movs	r0, #72	; 0x48
1a0017a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
1a0017a8:	f7ff ff3c 	bl	1a001624 <send_cmd>
1a0017ac:	2801      	cmp	r0, #1
1a0017ae:	d13f      	bne.n	1a001830 <disk_initialize+0xcc>
1a0017b0:	e008      	b.n	1a0017c4 <disk_initialize+0x60>
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
1a0017b2:	f7ff fef9 	bl	1a0015a8 <rcvr_spi>
1a0017b6:	ab02      	add	r3, sp, #8
1a0017b8:	442b      	add	r3, r5
1a0017ba:	f803 0c04 	strb.w	r0, [r3, #-4]
1a0017be:	3501      	adds	r5, #1
1a0017c0:	b2ed      	uxtb	r5, r5
1a0017c2:	e000      	b.n	1a0017c6 <disk_initialize+0x62>
1a0017c4:	4625      	mov	r5, r4
1a0017c6:	2d03      	cmp	r5, #3
1a0017c8:	d9f3      	bls.n	1a0017b2 <disk_initialize+0x4e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
1a0017ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a0017ce:	2b01      	cmp	r3, #1
1a0017d0:	d152      	bne.n	1a001878 <disk_initialize+0x114>
1a0017d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0017d6:	2baa      	cmp	r3, #170	; 0xaa
1a0017d8:	d150      	bne.n	1a00187c <disk_initialize+0x118>
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
1a0017da:	4b36      	ldr	r3, [pc, #216]	; (1a0018b4 <disk_initialize+0x150>)
1a0017dc:	781b      	ldrb	r3, [r3, #0]
1a0017de:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0017e2:	d006      	beq.n	1a0017f2 <disk_initialize+0x8e>
1a0017e4:	20e9      	movs	r0, #233	; 0xe9
1a0017e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a0017ea:	f7ff ff1b 	bl	1a001624 <send_cmd>
1a0017ee:	2800      	cmp	r0, #0
1a0017f0:	d1f3      	bne.n	1a0017da <disk_initialize+0x76>
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
1a0017f2:	4b30      	ldr	r3, [pc, #192]	; (1a0018b4 <disk_initialize+0x150>)
1a0017f4:	781b      	ldrb	r3, [r3, #0]
1a0017f6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0017fa:	d041      	beq.n	1a001880 <disk_initialize+0x11c>
1a0017fc:	207a      	movs	r0, #122	; 0x7a
1a0017fe:	2100      	movs	r1, #0
1a001800:	f7ff ff10 	bl	1a001624 <send_cmd>
1a001804:	b148      	cbz	r0, 1a00181a <disk_initialize+0xb6>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a001806:	2400      	movs	r4, #0
1a001808:	e03f      	b.n	1a00188a <disk_initialize+0x126>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDHC */
			for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				while (Timer1 && send_cmd(ACMD41, 1UL << 30));	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (Timer1 && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcvr_spi();
1a00180a:	f7ff fecd 	bl	1a0015a8 <rcvr_spi>
1a00180e:	ab02      	add	r3, sp, #8
1a001810:	4423      	add	r3, r4
1a001812:	f803 0c04 	strb.w	r0, [r3, #-4]
1a001816:	3401      	adds	r4, #1
1a001818:	b2e4      	uxtb	r4, r4
1a00181a:	2c03      	cmp	r4, #3
1a00181c:	d9f5      	bls.n	1a00180a <disk_initialize+0xa6>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
1a00181e:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a001822:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001826:	d001      	beq.n	1a00182c <disk_initialize+0xc8>
1a001828:	240c      	movs	r4, #12
1a00182a:	e02e      	b.n	1a00188a <disk_initialize+0x126>
1a00182c:	2404      	movs	r4, #4
1a00182e:	e02c      	b.n	1a00188a <disk_initialize+0x126>
				}
			}
		} else {							/* SDSC or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
1a001830:	20e9      	movs	r0, #233	; 0xe9
1a001832:	2100      	movs	r1, #0
1a001834:	f7ff fef6 	bl	1a001624 <send_cmd>
1a001838:	2801      	cmp	r0, #1
1a00183a:	d802      	bhi.n	1a001842 <disk_initialize+0xde>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
1a00183c:	2402      	movs	r4, #2
1a00183e:	25e9      	movs	r5, #233	; 0xe9
1a001840:	e001      	b.n	1a001846 <disk_initialize+0xe2>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
1a001842:	2401      	movs	r4, #1
1a001844:	2541      	movs	r5, #65	; 0x41
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
1a001846:	4b1b      	ldr	r3, [pc, #108]	; (1a0018b4 <disk_initialize+0x150>)
1a001848:	781b      	ldrb	r3, [r3, #0]
1a00184a:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00184e:	d005      	beq.n	1a00185c <disk_initialize+0xf8>
1a001850:	4628      	mov	r0, r5
1a001852:	2100      	movs	r1, #0
1a001854:	f7ff fee6 	bl	1a001624 <send_cmd>
1a001858:	2800      	cmp	r0, #0
1a00185a:	d1f4      	bne.n	1a001846 <disk_initialize+0xe2>
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
1a00185c:	4b15      	ldr	r3, [pc, #84]	; (1a0018b4 <disk_initialize+0x150>)
1a00185e:	781b      	ldrb	r3, [r3, #0]
1a001860:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001864:	d00e      	beq.n	1a001884 <disk_initialize+0x120>
1a001866:	2050      	movs	r0, #80	; 0x50
1a001868:	f44f 7100 	mov.w	r1, #512	; 0x200
1a00186c:	f7ff feda 	bl	1a001624 <send_cmd>
1a001870:	b950      	cbnz	r0, 1a001888 <disk_initialize+0x124>
1a001872:	e00a      	b.n	1a00188a <disk_initialize+0x126>

	power_on();							/* Force socket power on */
	FCLK_SLOW();
	for (n = 10; n; n--) rcvr_spi();	/* 80 dummy clocks */

	ty = 0;
1a001874:	2400      	movs	r4, #0
1a001876:	e008      	b.n	1a00188a <disk_initialize+0x126>
1a001878:	2400      	movs	r4, #0
1a00187a:	e006      	b.n	1a00188a <disk_initialize+0x126>
1a00187c:	2400      	movs	r4, #0
1a00187e:	e004      	b.n	1a00188a <disk_initialize+0x126>
1a001880:	2400      	movs	r4, #0
1a001882:	e002      	b.n	1a00188a <disk_initialize+0x126>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			while (Timer1 && send_cmd(cmd, 0));			/* Wait for leaving idle state */
			if (!Timer1 || send_cmd(CMD16, 512) != 0)	/* Set R/W block length to 512 */
				ty = 0;
1a001884:	2400      	movs	r4, #0
1a001886:	e000      	b.n	1a00188a <disk_initialize+0x126>
1a001888:	2400      	movs	r4, #0
		}
	}
	CardType = ty;
1a00188a:	4b0b      	ldr	r3, [pc, #44]	; (1a0018b8 <disk_initialize+0x154>)
1a00188c:	701c      	strb	r4, [r3, #0]
	deselect();
1a00188e:	f7ff feab 	bl	1a0015e8 <deselect>

	if (ty) {			/* Initialization succeded */
1a001892:	b124      	cbz	r4, 1a00189e <disk_initialize+0x13a>
		Stat &= ~STA_NOINIT;		/* Clear STA_NOINIT */
1a001894:	4a06      	ldr	r2, [pc, #24]	; (1a0018b0 <disk_initialize+0x14c>)
1a001896:	7813      	ldrb	r3, [r2, #0]
1a001898:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
1a00189c:	7013      	strb	r3, [r2, #0]
		FCLK_FAST();
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
1a00189e:	4b04      	ldr	r3, [pc, #16]	; (1a0018b0 <disk_initialize+0x14c>)
1a0018a0:	7818      	ldrb	r0, [r3, #0]
1a0018a2:	b2c0      	uxtb	r0, r0
1a0018a4:	e001      	b.n	1a0018aa <disk_initialize+0x146>
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	BYTE n, cmd, ty, ocr[4];

	if (drv) return STA_NOINIT;			/* Supports only single drive */
1a0018a6:	2001      	movs	r0, #1
1a0018a8:	4770      	bx	lr
	} else {			/* Initialization failed */
		power_off();
	}

	return Stat;
}
1a0018aa:	b003      	add	sp, #12
1a0018ac:	bd30      	pop	{r4, r5, pc}
1a0018ae:	bf00      	nop
1a0018b0:	10000000 	.word	0x10000000
1a0018b4:	10000531 	.word	0x10000531
1a0018b8:	10000533 	.word	0x10000533

1a0018bc <disk_status>:

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a0018bc:	b918      	cbnz	r0, 1a0018c6 <disk_status+0xa>
	return Stat;
1a0018be:	4b03      	ldr	r3, [pc, #12]	; (1a0018cc <disk_status+0x10>)
1a0018c0:	7818      	ldrb	r0, [r3, #0]
1a0018c2:	b2c0      	uxtb	r0, r0
1a0018c4:	4770      	bx	lr

DSTATUS disk_status (
	BYTE drv		/* Physical drive nmuber (0) */
)
{
	if (drv) return STA_NOINIT;		/* Supports only single drive */
1a0018c6:	2001      	movs	r0, #1
	return Stat;
}
1a0018c8:	4770      	bx	lr
1a0018ca:	bf00      	nop
1a0018cc:	10000000 	.word	0x10000000

1a0018d0 <disk_read>:
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a0018d0:	bbb8      	cbnz	r0, 1a001942 <disk_read+0x72>
	BYTE drv,			/* Physical drive nmuber (0) */
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a0018d2:	b538      	push	{r3, r4, r5, lr}
1a0018d4:	460d      	mov	r5, r1
1a0018d6:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a0018d8:	b3ab      	cbz	r3, 1a001946 <disk_read+0x76>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a0018da:	4b1d      	ldr	r3, [pc, #116]	; (1a001950 <disk_read+0x80>)
1a0018dc:	781b      	ldrb	r3, [r3, #0]
1a0018de:	f013 0f01 	tst.w	r3, #1
1a0018e2:	d132      	bne.n	1a00194a <disk_read+0x7a>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a0018e4:	4b1b      	ldr	r3, [pc, #108]	; (1a001954 <disk_read+0x84>)
1a0018e6:	781b      	ldrb	r3, [r3, #0]
1a0018e8:	f013 0f08 	tst.w	r3, #8
1a0018ec:	d100      	bne.n	1a0018f0 <disk_read+0x20>
1a0018ee:	0252      	lsls	r2, r2, #9

	if (count == 1) {	/* Single block read */
1a0018f0:	2c01      	cmp	r4, #1
1a0018f2:	d10b      	bne.n	1a00190c <disk_read+0x3c>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
1a0018f4:	2051      	movs	r0, #81	; 0x51
1a0018f6:	4611      	mov	r1, r2
1a0018f8:	f7ff fe94 	bl	1a001624 <send_cmd>
1a0018fc:	b9d8      	cbnz	r0, 1a001936 <disk_read+0x66>
			&& rcvr_datablock(buff, 512))
1a0018fe:	4628      	mov	r0, r5
1a001900:	f44f 7100 	mov.w	r1, #512	; 0x200
1a001904:	f7ff fefc 	bl	1a001700 <rcvr_datablock>
1a001908:	b9a0      	cbnz	r0, 1a001934 <disk_read+0x64>
1a00190a:	e014      	b.n	1a001936 <disk_read+0x66>
			count = 0;
	}
	else {				/* Multiple block read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
1a00190c:	2052      	movs	r0, #82	; 0x52
1a00190e:	4611      	mov	r1, r2
1a001910:	f7ff fe88 	bl	1a001624 <send_cmd>
1a001914:	b978      	cbnz	r0, 1a001936 <disk_read+0x66>
			do {
				if (!rcvr_datablock(buff, 512)) break;
1a001916:	4628      	mov	r0, r5
1a001918:	f44f 7100 	mov.w	r1, #512	; 0x200
1a00191c:	f7ff fef0 	bl	1a001700 <rcvr_datablock>
1a001920:	b118      	cbz	r0, 1a00192a <disk_read+0x5a>
				buff += 512;
1a001922:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a001926:	3c01      	subs	r4, #1
1a001928:	d1f5      	bne.n	1a001916 <disk_read+0x46>
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
1a00192a:	204c      	movs	r0, #76	; 0x4c
1a00192c:	2100      	movs	r1, #0
1a00192e:	f7ff fe79 	bl	1a001624 <send_cmd>
1a001932:	e000      	b.n	1a001936 <disk_read+0x66>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block read */
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
			&& rcvr_datablock(buff, 512))
			count = 0;
1a001934:	2400      	movs	r4, #0
				buff += 512;
			} while (--count);
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
		}
	}
	deselect();
1a001936:	f7ff fe57 	bl	1a0015e8 <deselect>

	return count ? RES_ERROR : RES_OK;
1a00193a:	1c20      	adds	r0, r4, #0
1a00193c:	bf18      	it	ne
1a00193e:	2001      	movne	r0, #1
1a001940:	bd38      	pop	{r3, r4, r5, pc}
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001942:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a001944:	4770      	bx	lr
	BYTE *buff,			/* Pointer to the data buffer to store read data */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001946:	2004      	movs	r0, #4
1a001948:	bd38      	pop	{r3, r4, r5, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a00194a:	2003      	movs	r0, #3
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a00194c:	bd38      	pop	{r3, r4, r5, pc}
1a00194e:	bf00      	nop
1a001950:	10000000 	.word	0x10000000
1a001954:	10000533 	.word	0x10000533

1a001958 <disk_write>:
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a001958:	2800      	cmp	r0, #0
1a00195a:	d146      	bne.n	1a0019ea <disk_write+0x92>
	BYTE drv,			/* Physical drive nmuber (0) */
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
1a00195c:	b570      	push	{r4, r5, r6, lr}
1a00195e:	460d      	mov	r5, r1
1a001960:	4616      	mov	r6, r2
1a001962:	461c      	mov	r4, r3
	if (drv || !count) return RES_PARERR;
1a001964:	2b00      	cmp	r3, #0
1a001966:	d042      	beq.n	1a0019ee <disk_write+0x96>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001968:	4b24      	ldr	r3, [pc, #144]	; (1a0019fc <disk_write+0xa4>)
1a00196a:	781b      	ldrb	r3, [r3, #0]
1a00196c:	f013 0f01 	tst.w	r3, #1
1a001970:	d13f      	bne.n	1a0019f2 <disk_write+0x9a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a001972:	4b22      	ldr	r3, [pc, #136]	; (1a0019fc <disk_write+0xa4>)
1a001974:	781b      	ldrb	r3, [r3, #0]
1a001976:	f013 0f04 	tst.w	r3, #4
1a00197a:	d13c      	bne.n	1a0019f6 <disk_write+0x9e>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */
1a00197c:	4b20      	ldr	r3, [pc, #128]	; (1a001a00 <disk_write+0xa8>)
1a00197e:	781b      	ldrb	r3, [r3, #0]
1a001980:	f013 0f08 	tst.w	r3, #8
1a001984:	d100      	bne.n	1a001988 <disk_write+0x30>
1a001986:	0256      	lsls	r6, r2, #9

	if (count == 1) {	/* Single block write */
1a001988:	2c01      	cmp	r4, #1
1a00198a:	d10a      	bne.n	1a0019a2 <disk_write+0x4a>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
1a00198c:	2058      	movs	r0, #88	; 0x58
1a00198e:	4631      	mov	r1, r6
1a001990:	f7ff fe48 	bl	1a001624 <send_cmd>
1a001994:	bb18      	cbnz	r0, 1a0019de <disk_write+0x86>
			&& xmit_datablock(buff, 0xFE))
1a001996:	4628      	mov	r0, r5
1a001998:	21fe      	movs	r1, #254	; 0xfe
1a00199a:	f7ff fe83 	bl	1a0016a4 <xmit_datablock>
1a00199e:	b9d8      	cbnz	r0, 1a0019d8 <disk_write+0x80>
1a0019a0:	e01d      	b.n	1a0019de <disk_write+0x86>
			count = 0;
	}
	else {				/* Multiple block write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);
1a0019a2:	f013 0f06 	tst.w	r3, #6
1a0019a6:	d003      	beq.n	1a0019b0 <disk_write+0x58>
1a0019a8:	20d7      	movs	r0, #215	; 0xd7
1a0019aa:	4621      	mov	r1, r4
1a0019ac:	f7ff fe3a 	bl	1a001624 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
1a0019b0:	2059      	movs	r0, #89	; 0x59
1a0019b2:	4631      	mov	r1, r6
1a0019b4:	f7ff fe36 	bl	1a001624 <send_cmd>
1a0019b8:	b988      	cbnz	r0, 1a0019de <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
1a0019ba:	4628      	mov	r0, r5
1a0019bc:	21fc      	movs	r1, #252	; 0xfc
1a0019be:	f7ff fe71 	bl	1a0016a4 <xmit_datablock>
1a0019c2:	b118      	cbz	r0, 1a0019cc <disk_write+0x74>
				buff += 512;
1a0019c4:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
1a0019c8:	3c01      	subs	r4, #1
1a0019ca:	d1f6      	bne.n	1a0019ba <disk_write+0x62>
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
1a0019cc:	2000      	movs	r0, #0
1a0019ce:	21fd      	movs	r1, #253	; 0xfd
1a0019d0:	f7ff fe68 	bl	1a0016a4 <xmit_datablock>
1a0019d4:	b110      	cbz	r0, 1a0019dc <disk_write+0x84>
1a0019d6:	e002      	b.n	1a0019de <disk_write+0x86>
	if (!(CardType & CT_BLOCK)) sector *= 512;	/* Convert to byte address if needed */

	if (count == 1) {	/* Single block write */
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
			&& xmit_datablock(buff, 0xFE))
			count = 0;
1a0019d8:	2400      	movs	r4, #0
1a0019da:	e000      	b.n	1a0019de <disk_write+0x86>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
				buff += 512;
			} while (--count);
			if (!xmit_datablock(0, 0xFD))	/* STOP_TRAN token */
				count = 1;
1a0019dc:	2401      	movs	r4, #1
		}
	}
	deselect();
1a0019de:	f7ff fe03 	bl	1a0015e8 <deselect>

	return count ? RES_ERROR : RES_OK;
1a0019e2:	1c20      	adds	r0, r4, #0
1a0019e4:	bf18      	it	ne
1a0019e6:	2001      	movne	r0, #1
1a0019e8:	bd70      	pop	{r4, r5, r6, pc}
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a0019ea:	2004      	movs	r0, #4
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a0019ec:	4770      	bx	lr
	const BYTE *buff,	/* Pointer to the data to be written */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Sector count (1..255) */
)
{
	if (drv || !count) return RES_PARERR;
1a0019ee:	2004      	movs	r0, #4
1a0019f0:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_NOINIT) return RES_NOTRDY;
1a0019f2:	2003      	movs	r0, #3
1a0019f4:	bd70      	pop	{r4, r5, r6, pc}
	if (Stat & STA_PROTECT) return RES_WRPRT;
1a0019f6:	2002      	movs	r0, #2
		}
	}
	deselect();

	return count ? RES_ERROR : RES_OK;
}
1a0019f8:	bd70      	pop	{r4, r5, r6, pc}
1a0019fa:	bf00      	nop
1a0019fc:	10000000 	.word	0x10000000
1a001a00:	10000533 	.word	0x10000533

1a001a04 <disk_ioctl>:
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a001a04:	2800      	cmp	r0, #0
1a001a06:	f040 8136 	bne.w	1a001c76 <disk_ioctl+0x272>
DRESULT disk_ioctl (
	BYTE drv,		/* Physical drive nmuber (0) */
	BYTE ctrl,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
1a001a0a:	b570      	push	{r4, r5, r6, lr}
1a001a0c:	b084      	sub	sp, #16
1a001a0e:	4614      	mov	r4, r2

	if (drv) return RES_PARERR;

	res = RES_ERROR;

	if (ctrl == CTRL_POWER) {
1a001a10:	2905      	cmp	r1, #5
1a001a12:	d10c      	bne.n	1a001a2e <disk_ioctl+0x2a>
		switch (*ptr) {
1a001a14:	7813      	ldrb	r3, [r2, #0]
1a001a16:	2b01      	cmp	r3, #1
1a001a18:	f240 812a 	bls.w	1a001c70 <disk_ioctl+0x26c>
1a001a1c:	2b02      	cmp	r3, #2
1a001a1e:	d001      	beq.n	1a001a24 <disk_ioctl+0x20>
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
			res = RES_OK;
			break;
		default :
			res = RES_PARERR;
1a001a20:	2404      	movs	r4, #4
1a001a22:	e126      	b.n	1a001c72 <disk_ioctl+0x26e>
		case 1:		/* Sub control code == 1 (POWER_ON) */
			power_on();				/* Power on */
			res = RES_OK;
			break;
		case 2:		/* Sub control code == 2 (POWER_GET) */
			*(ptr+1) = (BYTE)chk_power();
1a001a24:	f7ff fd8e 	bl	1a001544 <chk_power>
1a001a28:	7060      	strb	r0, [r4, #1]
			res = RES_OK;
1a001a2a:	2400      	movs	r4, #0
			break;
1a001a2c:	e121      	b.n	1a001c72 <disk_ioctl+0x26e>
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001a2e:	4b94      	ldr	r3, [pc, #592]	; (1a001c80 <disk_ioctl+0x27c>)
1a001a30:	781b      	ldrb	r3, [r3, #0]
1a001a32:	f013 0f01 	tst.w	r3, #1
1a001a36:	f040 8120 	bne.w	1a001c7a <disk_ioctl+0x276>

		switch (ctrl) {
1a001a3a:	290e      	cmp	r1, #14
1a001a3c:	f200 80fc 	bhi.w	1a001c38 <disk_ioctl+0x234>
1a001a40:	e8df f011 	tbh	[pc, r1, lsl #1]
1a001a44:	0018000f 	.word	0x0018000f
1a001a48:	0060005b 	.word	0x0060005b
1a001a4c:	00fa00fa 	.word	0x00fa00fa
1a001a50:	00fa00fa 	.word	0x00fa00fa
1a001a54:	00fa00fa 	.word	0x00fa00fa
1a001a58:	00be00b9 	.word	0x00be00b9
1a001a5c:	00d800cc 	.word	0x00d800cc
1a001a60:	00ec      	.short	0x00ec
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
1a001a62:	f7ff fdcd 	bl	1a001600 <select_>
1a001a66:	2800      	cmp	r0, #0
1a001a68:	f000 80e8 	beq.w	1a001c3c <disk_ioctl+0x238>
				res = RES_OK;
				deselect();
1a001a6c:	f7ff fdbc 	bl	1a0015e8 <deselect>
		if (Stat & STA_NOINIT) return RES_NOTRDY;

		switch (ctrl) {
		case CTRL_SYNC :		/* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
			if (select_()) {
				res = RES_OK;
1a001a70:	2400      	movs	r4, #0
1a001a72:	e0fa      	b.n	1a001c6a <disk_ioctl+0x266>
				deselect();
			}
			break;

		case GET_SECTOR_COUNT :	/* Get number of sectors on the disk (DWORD) */
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
1a001a74:	2049      	movs	r0, #73	; 0x49
1a001a76:	2100      	movs	r1, #0
1a001a78:	f7ff fdd4 	bl	1a001624 <send_cmd>
1a001a7c:	2800      	cmp	r0, #0
1a001a7e:	f040 80df 	bne.w	1a001c40 <disk_ioctl+0x23c>
1a001a82:	4668      	mov	r0, sp
1a001a84:	2110      	movs	r1, #16
1a001a86:	f7ff fe3b 	bl	1a001700 <rcvr_datablock>
1a001a8a:	2800      	cmp	r0, #0
1a001a8c:	f000 80da 	beq.w	1a001c44 <disk_ioctl+0x240>
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
1a001a90:	f89d 3000 	ldrb.w	r3, [sp]
1a001a94:	099b      	lsrs	r3, r3, #6
1a001a96:	2b01      	cmp	r3, #1
1a001a98:	d10b      	bne.n	1a001ab2 <disk_ioctl+0xae>
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
1a001a9a:	f89d 3009 	ldrb.w	r3, [sp, #9]
1a001a9e:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001aa2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
1a001aa6:	3301      	adds	r3, #1
1a001aa8:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << 10;
1a001aaa:	029b      	lsls	r3, r3, #10
1a001aac:	6023      	str	r3, [r4, #0]
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
					*(DWORD*)buff = (DWORD)csize << (n - 9);
				}
				res = RES_OK;
1a001aae:	2400      	movs	r4, #0
1a001ab0:	e0db      	b.n	1a001c6a <disk_ioctl+0x266>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
				if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
					csize = csd[9] + ((WORD)csd[8] << 8) + 1;
					*(DWORD*)buff = (DWORD)csize << 10;
				} else {					/* SDC ver 1.XX or MMC*/
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
1a001ab2:	f89d 3005 	ldrb.w	r3, [sp, #5]
1a001ab6:	f89d 100a 	ldrb.w	r1, [sp, #10]
1a001aba:	f89d 2009 	ldrb.w	r2, [sp, #9]
1a001abe:	f003 030f 	and.w	r3, r3, #15
1a001ac2:	eb03 13d1 	add.w	r3, r3, r1, lsr #7
1a001ac6:	f002 0203 	and.w	r2, r2, #3
1a001aca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
1a001ace:	3202      	adds	r2, #2
1a001ad0:	b2d2      	uxtb	r2, r2
					csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
1a001ad2:	f89d 0008 	ldrb.w	r0, [sp, #8]
1a001ad6:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001ada:	f89d 1006 	ldrb.w	r1, [sp, #6]
1a001ade:	009b      	lsls	r3, r3, #2
1a001ae0:	eb03 1390 	add.w	r3, r3, r0, lsr #6
1a001ae4:	f001 0103 	and.w	r1, r1, #3
1a001ae8:	eb03 2381 	add.w	r3, r3, r1, lsl #10
1a001aec:	3301      	adds	r3, #1
1a001aee:	b29b      	uxth	r3, r3
					*(DWORD*)buff = (DWORD)csize << (n - 9);
1a001af0:	3a09      	subs	r2, #9
1a001af2:	4093      	lsls	r3, r2
1a001af4:	6023      	str	r3, [r4, #0]
				}
				res = RES_OK;
1a001af6:	2400      	movs	r4, #0
1a001af8:	e0b7      	b.n	1a001c6a <disk_ioctl+0x266>
			}
			break;

		case GET_SECTOR_SIZE :	/* Get R/W sector size (WORD) */
			*(WORD*)buff = 512;
1a001afa:	f44f 7300 	mov.w	r3, #512	; 0x200
1a001afe:	8013      	strh	r3, [r2, #0]
			res = RES_OK;
1a001b00:	2400      	movs	r4, #0
			break;
1a001b02:	e0b2      	b.n	1a001c6a <disk_ioctl+0x266>

		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
1a001b04:	4b5f      	ldr	r3, [pc, #380]	; (1a001c84 <disk_ioctl+0x280>)
1a001b06:	781b      	ldrb	r3, [r3, #0]
1a001b08:	f013 0f04 	tst.w	r3, #4
1a001b0c:	d01f      	beq.n	1a001b4e <disk_ioctl+0x14a>
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
1a001b0e:	20cd      	movs	r0, #205	; 0xcd
1a001b10:	2100      	movs	r1, #0
1a001b12:	f7ff fd87 	bl	1a001624 <send_cmd>
1a001b16:	2800      	cmp	r0, #0
1a001b18:	f040 8096 	bne.w	1a001c48 <disk_ioctl+0x244>
					rcvr_spi();
1a001b1c:	f7ff fd44 	bl	1a0015a8 <rcvr_spi>
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
1a001b20:	4668      	mov	r0, sp
1a001b22:	2110      	movs	r1, #16
1a001b24:	f7ff fdec 	bl	1a001700 <rcvr_datablock>
1a001b28:	b930      	cbnz	r0, 1a001b38 <disk_ioctl+0x134>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001b2a:	2401      	movs	r4, #1
1a001b2c:	e09d      	b.n	1a001c6a <disk_ioctl+0x266>
		case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
			if (CardType & CT_SD2) {	/* SDC ver 2.00 */
				if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
					rcvr_spi();
					if (rcvr_datablock(csd, 16)) {				/* Read partial block */
						for (n = 64 - 16; n; n--) rcvr_spi();	/* Purge trailing data */
1a001b2e:	f7ff fd3b 	bl	1a0015a8 <rcvr_spi>
1a001b32:	3d01      	subs	r5, #1
1a001b34:	b2ed      	uxtb	r5, r5
1a001b36:	e000      	b.n	1a001b3a <disk_ioctl+0x136>
1a001b38:	2530      	movs	r5, #48	; 0x30
1a001b3a:	2d00      	cmp	r5, #0
1a001b3c:	d1f7      	bne.n	1a001b2e <disk_ioctl+0x12a>
						*(DWORD*)buff = 16UL << (csd[10] >> 4);
1a001b3e:	f89d 200a 	ldrb.w	r2, [sp, #10]
1a001b42:	0912      	lsrs	r2, r2, #4
1a001b44:	2310      	movs	r3, #16
1a001b46:	4093      	lsls	r3, r2
1a001b48:	6023      	str	r3, [r4, #0]
						res = RES_OK;
1a001b4a:	2400      	movs	r4, #0
1a001b4c:	e08d      	b.n	1a001c6a <disk_ioctl+0x266>
					}
				}
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
1a001b4e:	2049      	movs	r0, #73	; 0x49
1a001b50:	2100      	movs	r1, #0
1a001b52:	f7ff fd67 	bl	1a001624 <send_cmd>
1a001b56:	2800      	cmp	r0, #0
1a001b58:	d178      	bne.n	1a001c4c <disk_ioctl+0x248>
1a001b5a:	4668      	mov	r0, sp
1a001b5c:	2110      	movs	r1, #16
1a001b5e:	f7ff fdcf 	bl	1a001700 <rcvr_datablock>
1a001b62:	2800      	cmp	r0, #0
1a001b64:	d074      	beq.n	1a001c50 <disk_ioctl+0x24c>
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
1a001b66:	4b47      	ldr	r3, [pc, #284]	; (1a001c84 <disk_ioctl+0x280>)
1a001b68:	781b      	ldrb	r3, [r3, #0]
1a001b6a:	f013 0f02 	tst.w	r3, #2
1a001b6e:	d011      	beq.n	1a001b94 <disk_ioctl+0x190>
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
1a001b70:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a001b74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
1a001b78:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001b7c:	09db      	lsrs	r3, r3, #7
1a001b7e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a001b82:	3301      	adds	r3, #1
1a001b84:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001b88:	0992      	lsrs	r2, r2, #6
1a001b8a:	3a01      	subs	r2, #1
1a001b8c:	4093      	lsls	r3, r2
1a001b8e:	6023      	str	r3, [r4, #0]
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
					}
					res = RES_OK;
1a001b90:	2400      	movs	r4, #0
1a001b92:	e06a      	b.n	1a001c6a <disk_ioctl+0x266>
			} else {					/* SDC ver 1.XX or MMC */
				if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
					if (CardType & CT_SD1) {	/* SDC ver 1.XX */
						*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
					} else {					/* MMC */
						*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
1a001b94:	f89d 300a 	ldrb.w	r3, [sp, #10]
1a001b98:	f3c3 0184 	ubfx	r1, r3, #2, #5
1a001b9c:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001ba0:	f003 0003 	and.w	r0, r3, #3
1a001ba4:	095a      	lsrs	r2, r3, #5
1a001ba6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
1a001baa:	1c53      	adds	r3, r2, #1
1a001bac:	fb01 3303 	mla	r3, r1, r3, r3
1a001bb0:	6023      	str	r3, [r4, #0]
					}
					res = RES_OK;
1a001bb2:	2400      	movs	r4, #0
1a001bb4:	e059      	b.n	1a001c6a <disk_ioctl+0x266>
				}
			}
			break;

		case MMC_GET_TYPE :		/* Get card type flags (1 byte) */
			*ptr = CardType;
1a001bb6:	4b33      	ldr	r3, [pc, #204]	; (1a001c84 <disk_ioctl+0x280>)
1a001bb8:	781b      	ldrb	r3, [r3, #0]
1a001bba:	7013      	strb	r3, [r2, #0]
			res = RES_OK;
1a001bbc:	2400      	movs	r4, #0
			break;
1a001bbe:	e054      	b.n	1a001c6a <disk_ioctl+0x266>

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
1a001bc0:	2049      	movs	r0, #73	; 0x49
1a001bc2:	2100      	movs	r1, #0
1a001bc4:	f7ff fd2e 	bl	1a001624 <send_cmd>
1a001bc8:	2800      	cmp	r0, #0
1a001bca:	d143      	bne.n	1a001c54 <disk_ioctl+0x250>
				&& rcvr_datablock(ptr, 16))
1a001bcc:	4620      	mov	r0, r4
1a001bce:	2110      	movs	r1, #16
1a001bd0:	f7ff fd96 	bl	1a001700 <rcvr_datablock>
1a001bd4:	2800      	cmp	r0, #0
1a001bd6:	d13f      	bne.n	1a001c58 <disk_ioctl+0x254>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001bd8:	2401      	movs	r4, #1
1a001bda:	e046      	b.n	1a001c6a <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
1a001bdc:	204a      	movs	r0, #74	; 0x4a
1a001bde:	2100      	movs	r1, #0
1a001be0:	f7ff fd20 	bl	1a001624 <send_cmd>
1a001be4:	bbd0      	cbnz	r0, 1a001c5c <disk_ioctl+0x258>
				&& rcvr_datablock(ptr, 16))
1a001be6:	4620      	mov	r0, r4
1a001be8:	2110      	movs	r1, #16
1a001bea:	f7ff fd89 	bl	1a001700 <rcvr_datablock>
1a001bee:	bbb8      	cbnz	r0, 1a001c60 <disk_ioctl+0x25c>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001bf0:	2401      	movs	r4, #1
1a001bf2:	e03a      	b.n	1a001c6a <disk_ioctl+0x266>
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
1a001bf4:	207a      	movs	r0, #122	; 0x7a
1a001bf6:	2100      	movs	r1, #0
1a001bf8:	f7ff fd14 	bl	1a001624 <send_cmd>
1a001bfc:	b148      	cbz	r0, 1a001c12 <disk_ioctl+0x20e>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001bfe:	2401      	movs	r4, #1
1a001c00:	e033      	b.n	1a001c6a <disk_ioctl+0x266>
				res = RES_OK;
			break;

		case MMC_GET_OCR :		/* Receive OCR as an R3 resp (4 bytes) */
			if (send_cmd(CMD58, 0) == 0) {	/* READ_OCR */
				for (n = 4; n; n--) *ptr++ = rcvr_spi();
1a001c02:	1c66      	adds	r6, r4, #1
1a001c04:	f7ff fcd0 	bl	1a0015a8 <rcvr_spi>
1a001c08:	7020      	strb	r0, [r4, #0]
1a001c0a:	3d01      	subs	r5, #1
1a001c0c:	b2ed      	uxtb	r5, r5
1a001c0e:	4634      	mov	r4, r6
1a001c10:	e000      	b.n	1a001c14 <disk_ioctl+0x210>
1a001c12:	2504      	movs	r5, #4
1a001c14:	2d00      	cmp	r5, #0
1a001c16:	d1f4      	bne.n	1a001c02 <disk_ioctl+0x1fe>
				res = RES_OK;
1a001c18:	2400      	movs	r4, #0
1a001c1a:	e026      	b.n	1a001c6a <disk_ioctl+0x266>
			}
			break;

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
1a001c1c:	20cd      	movs	r0, #205	; 0xcd
1a001c1e:	2100      	movs	r1, #0
1a001c20:	f7ff fd00 	bl	1a001624 <send_cmd>
1a001c24:	b9f0      	cbnz	r0, 1a001c64 <disk_ioctl+0x260>
				rcvr_spi();
1a001c26:	f7ff fcbf 	bl	1a0015a8 <rcvr_spi>
				if (rcvr_datablock(ptr, 64))
1a001c2a:	4620      	mov	r0, r4
1a001c2c:	2140      	movs	r1, #64	; 0x40
1a001c2e:	f7ff fd67 	bl	1a001700 <rcvr_datablock>
1a001c32:	b9c8      	cbnz	r0, 1a001c68 <disk_ioctl+0x264>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001c34:	2401      	movs	r4, #1
1a001c36:	e018      	b.n	1a001c6a <disk_ioctl+0x266>
					res = RES_OK;
			}
			break;

		default:
			res = RES_PARERR;
1a001c38:	2404      	movs	r4, #4
1a001c3a:	e016      	b.n	1a001c6a <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001c3c:	2401      	movs	r4, #1
1a001c3e:	e014      	b.n	1a001c6a <disk_ioctl+0x266>
1a001c40:	2401      	movs	r4, #1
1a001c42:	e012      	b.n	1a001c6a <disk_ioctl+0x266>
1a001c44:	2401      	movs	r4, #1
1a001c46:	e010      	b.n	1a001c6a <disk_ioctl+0x266>
1a001c48:	2401      	movs	r4, #1
1a001c4a:	e00e      	b.n	1a001c6a <disk_ioctl+0x266>
1a001c4c:	2401      	movs	r4, #1
1a001c4e:	e00c      	b.n	1a001c6a <disk_ioctl+0x266>
1a001c50:	2401      	movs	r4, #1
1a001c52:	e00a      	b.n	1a001c6a <disk_ioctl+0x266>
1a001c54:	2401      	movs	r4, #1
1a001c56:	e008      	b.n	1a001c6a <disk_ioctl+0x266>
			break;

		case MMC_GET_CSD :		/* Receive CSD as a data block (16 bytes) */
			if (send_cmd(CMD9, 0) == 0		/* READ_CSD */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a001c58:	2400      	movs	r4, #0
1a001c5a:	e006      	b.n	1a001c6a <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001c5c:	2401      	movs	r4, #1
1a001c5e:	e004      	b.n	1a001c6a <disk_ioctl+0x266>
			break;

		case MMC_GET_CID :		/* Receive CID as a data block (16 bytes) */
			if (send_cmd(CMD10, 0) == 0		/* READ_CID */
				&& rcvr_datablock(ptr, 16))
				res = RES_OK;
1a001c60:	2400      	movs	r4, #0
1a001c62:	e002      	b.n	1a001c6a <disk_ioctl+0x266>
	WORD csize;


	if (drv) return RES_PARERR;

	res = RES_ERROR;
1a001c64:	2401      	movs	r4, #1
1a001c66:	e000      	b.n	1a001c6a <disk_ioctl+0x266>

		case MMC_GET_SDSTAT :	/* Receive SD statsu as a data block (64 bytes) */
			if (send_cmd(ACMD13, 0) == 0) {	/* SD_STATUS */
				rcvr_spi();
				if (rcvr_datablock(ptr, 64))
					res = RES_OK;
1a001c68:	2400      	movs	r4, #0

		default:
			res = RES_PARERR;
		}

		deselect();
1a001c6a:	f7ff fcbd 	bl	1a0015e8 <deselect>
1a001c6e:	e000      	b.n	1a001c72 <disk_ioctl+0x26e>
	if (ctrl == CTRL_POWER) {
		switch (*ptr) {
		case 0:		/* Sub control code == 0 (POWER_OFF) */
			if (chk_power())
				power_off();		/* Power off */
			res = RES_OK;
1a001c70:	2400      	movs	r4, #0
		}

		deselect();
	}

	return res;
1a001c72:	4620      	mov	r0, r4
1a001c74:	e002      	b.n	1a001c7c <disk_ioctl+0x278>
	DRESULT res;
	BYTE n, csd[16], *ptr = buff;
	WORD csize;


	if (drv) return RES_PARERR;
1a001c76:	2004      	movs	r0, #4

		deselect();
	}

	return res;
}
1a001c78:	4770      	bx	lr
		default :
			res = RES_PARERR;
		}
	}
	else {
		if (Stat & STA_NOINIT) return RES_NOTRDY;
1a001c7a:	2003      	movs	r0, #3

		deselect();
	}

	return res;
}
1a001c7c:	b004      	add	sp, #16
1a001c7e:	bd70      	pop	{r4, r5, r6, pc}
1a001c80:	10000000 	.word	0x10000000
1a001c84:	10000533 	.word	0x10000533

1a001c88 <disk_timerproc>:
{
	static BYTE pv;
	BYTE n, s;


	n = Timer1;						/* 100Hz decrement timer */
1a001c88:	4b15      	ldr	r3, [pc, #84]	; (1a001ce0 <disk_timerproc+0x58>)
1a001c8a:	781a      	ldrb	r2, [r3, #0]
	if (n) Timer1 = --n;
1a001c8c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
1a001c90:	b11a      	cbz	r2, 1a001c9a <disk_timerproc+0x12>
1a001c92:	3b01      	subs	r3, #1
1a001c94:	b2db      	uxtb	r3, r3
1a001c96:	4a12      	ldr	r2, [pc, #72]	; (1a001ce0 <disk_timerproc+0x58>)
1a001c98:	7013      	strb	r3, [r2, #0]
	n = Timer2;
1a001c9a:	4b12      	ldr	r3, [pc, #72]	; (1a001ce4 <disk_timerproc+0x5c>)
1a001c9c:	781a      	ldrb	r2, [r3, #0]
	if (n) Timer2 = --n;
1a001c9e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
1a001ca2:	b11a      	cbz	r2, 1a001cac <disk_timerproc+0x24>
1a001ca4:	3b01      	subs	r3, #1
1a001ca6:	b2db      	uxtb	r3, r3
1a001ca8:	4a0e      	ldr	r2, [pc, #56]	; (1a001ce4 <disk_timerproc+0x5c>)
1a001caa:	7013      	strb	r3, [r2, #0]

	n = pv;
1a001cac:	4a0e      	ldr	r2, [pc, #56]	; (1a001ce8 <disk_timerproc+0x60>)
1a001cae:	7811      	ldrb	r1, [r2, #0]
 * @return	true if the GPIO is high, false if low
 * @note	This function replaces Chip_GPIO_ReadPortBit()
 */
STATIC INLINE bool Chip_GPIO_GetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a001cb0:	4b0e      	ldr	r3, [pc, #56]	; (1a001cec <disk_timerproc+0x64>)
1a001cb2:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
1a001cb6:	f013 0fff 	tst.w	r3, #255	; 0xff
1a001cba:	bf14      	ite	ne
1a001cbc:	2301      	movne	r3, #1
1a001cbe:	2300      	moveq	r3, #0
	//pv = SOCKPORT & (SOCKWP | SOCKINS);	/* Sample socket switch */

	/* TODO: Actualizar!!! */
	//pv = ((GPIO_ReadValue(2) & (1<<11)) != 0);
	pv = (Chip_GPIO_GetPinState(LPC_GPIO_PORT, 2, 11) != 0);
1a001cc0:	7013      	strb	r3, [r2, #0]

	if (n == pv) {					/* Have contacts stabled? */
1a001cc2:	4299      	cmp	r1, r3
1a001cc4:	d10a      	bne.n	1a001cdc <disk_timerproc+0x54>
		s = Stat;
1a001cc6:	4a0a      	ldr	r2, [pc, #40]	; (1a001cf0 <disk_timerproc+0x68>)
1a001cc8:	7812      	ldrb	r2, [r2, #0]
1a001cca:	b2d2      	uxtb	r2, r2

		/* write protect NOT supported */

		/* check card detect */
		if (pv)			       /* (Socket empty) */
1a001ccc:	b113      	cbz	r3, 1a001cd4 <disk_timerproc+0x4c>
			s |= (STA_NODISK | STA_NOINIT);
1a001cce:	f042 0303 	orr.w	r3, r2, #3
1a001cd2:	e001      	b.n	1a001cd8 <disk_timerproc+0x50>
		else				       /* (Card inserted) */
			s &= ~STA_NODISK;
1a001cd4:	f002 03fd 	and.w	r3, r2, #253	; 0xfd

		Stat = s;
1a001cd8:	4a05      	ldr	r2, [pc, #20]	; (1a001cf0 <disk_timerproc+0x68>)
1a001cda:	7013      	strb	r3, [r2, #0]
1a001cdc:	4770      	bx	lr
1a001cde:	bf00      	nop
1a001ce0:	10000531 	.word	0x10000531
1a001ce4:	10000532 	.word	0x10000532
1a001ce8:	10000530 	.word	0x10000530
1a001cec:	400f4000 	.word	0x400f4000
1a001cf0:	10000000 	.word	0x10000000

1a001cf4 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001cf4:	4b04      	ldr	r3, [pc, #16]	; (1a001d08 <cyclesCounterInit+0x14>)
1a001cf6:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001cf8:	4b04      	ldr	r3, [pc, #16]	; (1a001d0c <cyclesCounterInit+0x18>)
1a001cfa:	681a      	ldr	r2, [r3, #0]
1a001cfc:	6813      	ldr	r3, [r2, #0]
1a001cfe:	f043 0301 	orr.w	r3, r3, #1
1a001d02:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001d04:	2001      	movs	r0, #1
1a001d06:	4770      	bx	lr
1a001d08:	10000008 	.word	0x10000008
1a001d0c:	10000004 	.word	0x10000004

1a001d10 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a001d10:	2301      	movs	r3, #1
1a001d12:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a001d14:	4a01      	ldr	r2, [pc, #4]	; (1a001d1c <clearInterrupt+0xc>)
1a001d16:	6253      	str	r3, [r2, #36]	; 0x24
1a001d18:	4770      	bx	lr
1a001d1a:	bf00      	nop
1a001d1c:	40087000 	.word	0x40087000

1a001d20 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a001d20:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a001d22:	4b13      	ldr	r3, [pc, #76]	; (1a001d70 <serveInterrupt+0x50>)
1a001d24:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a001d26:	4a13      	ldr	r2, [pc, #76]	; (1a001d74 <serveInterrupt+0x54>)
1a001d28:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a001d2a:	2401      	movs	r4, #1
1a001d2c:	4084      	lsls	r4, r0
1a001d2e:	4214      	tst	r4, r2
1a001d30:	d00a      	beq.n	1a001d48 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a001d32:	4a11      	ldr	r2, [pc, #68]	; (1a001d78 <serveInterrupt+0x58>)
1a001d34:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001d36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a001d3a:	00db      	lsls	r3, r3, #3
1a001d3c:	490f      	ldr	r1, [pc, #60]	; (1a001d7c <serveInterrupt+0x5c>)
1a001d3e:	440b      	add	r3, r1
1a001d40:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a001d42:	4b0c      	ldr	r3, [pc, #48]	; (1a001d74 <serveInterrupt+0x54>)
1a001d44:	61dc      	str	r4, [r3, #28]
1a001d46:	e00f      	b.n	1a001d68 <serveInterrupt+0x48>
1a001d48:	4a0b      	ldr	r2, [pc, #44]	; (1a001d78 <serveInterrupt+0x58>)
1a001d4a:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a001d4c:	4d0b      	ldr	r5, [pc, #44]	; (1a001d7c <serveInterrupt+0x5c>)
1a001d4e:	005e      	lsls	r6, r3, #1
1a001d50:	18f2      	adds	r2, r6, r3
1a001d52:	00d2      	lsls	r2, r2, #3
1a001d54:	442a      	add	r2, r5
1a001d56:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a001d58:	6852      	ldr	r2, [r2, #4]
1a001d5a:	1a89      	subs	r1, r1, r2
1a001d5c:	4433      	add	r3, r6
1a001d5e:	00db      	lsls	r3, r3, #3
1a001d60:	442b      	add	r3, r5
1a001d62:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a001d64:	4b03      	ldr	r3, [pc, #12]	; (1a001d74 <serveInterrupt+0x54>)
1a001d66:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a001d68:	f7ff ffd2 	bl	1a001d10 <clearInterrupt>
1a001d6c:	bd70      	pop	{r4, r5, r6, pc}
1a001d6e:	bf00      	nop
1a001d70:	1a00388c 	.word	0x1a00388c
1a001d74:	40087000 	.word	0x40087000
1a001d78:	40084000 	.word	0x40084000
1a001d7c:	1000000c 	.word	0x1000000c

1a001d80 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a001d80:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a001d82:	2000      	movs	r0, #0
1a001d84:	f7ff ffcc 	bl	1a001d20 <serveInterrupt>
1a001d88:	bd08      	pop	{r3, pc}
1a001d8a:	bf00      	nop

1a001d8c <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a001d8c:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a001d8e:	2001      	movs	r0, #1
1a001d90:	f7ff ffc6 	bl	1a001d20 <serveInterrupt>
1a001d94:	bd08      	pop	{r3, pc}
1a001d96:	bf00      	nop

1a001d98 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a001d98:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a001d9a:	2002      	movs	r0, #2
1a001d9c:	f7ff ffc0 	bl	1a001d20 <serveInterrupt>
1a001da0:	bd08      	pop	{r3, pc}
1a001da2:	bf00      	nop

1a001da4 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001da4:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001da6:	4d09      	ldr	r5, [pc, #36]	; (1a001dcc <gpioObtainPinInit+0x28>)
1a001da8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001dac:	182c      	adds	r4, r5, r0
1a001dae:	5c28      	ldrb	r0, [r5, r0]
1a001db0:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001db2:	7861      	ldrb	r1, [r4, #1]
1a001db4:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001db6:	78a2      	ldrb	r2, [r4, #2]
1a001db8:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001dba:	78e2      	ldrb	r2, [r4, #3]
1a001dbc:	9b02      	ldr	r3, [sp, #8]
1a001dbe:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001dc0:	7922      	ldrb	r2, [r4, #4]
1a001dc2:	9b03      	ldr	r3, [sp, #12]
1a001dc4:	701a      	strb	r2, [r3, #0]
}
1a001dc6:	bc30      	pop	{r4, r5}
1a001dc8:	4770      	bx	lr
1a001dca:	bf00      	nop
1a001dcc:	1a003890 	.word	0x1a003890

1a001dd0 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001dd0:	b570      	push	{r4, r5, r6, lr}
1a001dd2:	b084      	sub	sp, #16
1a001dd4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001dd6:	2300      	movs	r3, #0
1a001dd8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001ddc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001de0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001de4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001de8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001dec:	ab03      	add	r3, sp, #12
1a001dee:	9300      	str	r3, [sp, #0]
1a001df0:	f10d 030b 	add.w	r3, sp, #11
1a001df4:	9301      	str	r3, [sp, #4]
1a001df6:	f10d 010f 	add.w	r1, sp, #15
1a001dfa:	f10d 020e 	add.w	r2, sp, #14
1a001dfe:	f10d 030d 	add.w	r3, sp, #13
1a001e02:	f7ff ffcf 	bl	1a001da4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001e06:	2c05      	cmp	r4, #5
1a001e08:	f200 80a8 	bhi.w	1a001f5c <gpioInit+0x18c>
1a001e0c:	e8df f004 	tbb	[pc, r4]
1a001e10:	46278408 	.word	0x46278408
1a001e14:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001e16:	4853      	ldr	r0, [pc, #332]	; (1a001f64 <gpioInit+0x194>)
1a001e18:	f001 f8ae 	bl	1a002f78 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a001e1c:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a001e1e:	e09e      	b.n	1a001f5e <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001e20:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001e24:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001e28:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001e2c:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001e30:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001e34:	494c      	ldr	r1, [pc, #304]	; (1a001f68 <gpioInit+0x198>)
1a001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001e3a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001e3e:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001e42:	2001      	movs	r0, #1
1a001e44:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001e48:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001e50:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001e54:	ea22 0204 	bic.w	r2, r2, r4
1a001e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001e5c:	e07f      	b.n	1a001f5e <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a001e5e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001e62:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001e66:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001e6a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001e6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001e72:	493d      	ldr	r1, [pc, #244]	; (1a001f68 <gpioInit+0x198>)
1a001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001e78:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001e7c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001e80:	2001      	movs	r0, #1
1a001e82:	fa00 f402 	lsl.w	r4, r0, r2
1a001e86:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001e8e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001e92:	ea22 0204 	bic.w	r2, r2, r4
1a001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001e9a:	e060      	b.n	1a001f5e <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a001e9c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ea0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ea4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001ea8:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001eac:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001eb0:	492d      	ldr	r1, [pc, #180]	; (1a001f68 <gpioInit+0x198>)
1a001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001eb6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001eba:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ebe:	2001      	movs	r0, #1
1a001ec0:	fa00 f402 	lsl.w	r4, r0, r2
1a001ec4:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001ec8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001ecc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001ed0:	ea22 0204 	bic.w	r2, r2, r4
1a001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001ed8:	e041      	b.n	1a001f5e <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a001eda:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ede:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ee2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001ee6:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001eea:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001eee:	491e      	ldr	r1, [pc, #120]	; (1a001f68 <gpioInit+0x198>)
1a001ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001ef4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001ef8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001efc:	2001      	movs	r0, #1
1a001efe:	fa00 f402 	lsl.w	r4, r0, r2
1a001f02:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001f0a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001f0e:	ea22 0204 	bic.w	r2, r2, r4
1a001f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001f16:	e022      	b.n	1a001f5e <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a001f18:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001f1c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001f20:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001f24:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001f28:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001f2c:	490e      	ldr	r1, [pc, #56]	; (1a001f68 <gpioInit+0x198>)
1a001f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001f32:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001f36:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001f3a:	b25a      	sxtb	r2, r3
1a001f3c:	2001      	movs	r0, #1
1a001f3e:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a001f42:	4a08      	ldr	r2, [pc, #32]	; (1a001f64 <gpioInit+0x194>)
1a001f44:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001f48:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a001f4c:	4331      	orrs	r1, r6
1a001f4e:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a001f52:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001f56:	2100      	movs	r1, #0
1a001f58:	54d1      	strb	r1, [r2, r3]
1a001f5a:	e000      	b.n	1a001f5e <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a001f5c:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a001f5e:	b004      	add	sp, #16
1a001f60:	bd70      	pop	{r4, r5, r6, pc}
1a001f62:	bf00      	nop
1a001f64:	400f4000 	.word	0x400f4000
1a001f68:	40086000 	.word	0x40086000

1a001f6c <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001f6c:	b510      	push	{r4, lr}
1a001f6e:	b084      	sub	sp, #16
1a001f70:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001f72:	2300      	movs	r3, #0
1a001f74:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001f78:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001f7c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001f80:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001f84:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001f88:	ab03      	add	r3, sp, #12
1a001f8a:	9300      	str	r3, [sp, #0]
1a001f8c:	f10d 030b 	add.w	r3, sp, #11
1a001f90:	9301      	str	r3, [sp, #4]
1a001f92:	f10d 010f 	add.w	r1, sp, #15
1a001f96:	f10d 020e 	add.w	r2, sp, #14
1a001f9a:	f10d 030d 	add.w	r3, sp, #13
1a001f9e:	f7ff ff01 	bl	1a001da4 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a001fa2:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a001fa6:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001faa:	3400      	adds	r4, #0
1a001fac:	bf18      	it	ne
1a001fae:	2401      	movne	r4, #1
1a001fb0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a001fb4:	4a02      	ldr	r2, [pc, #8]	; (1a001fc0 <gpioWrite+0x54>)
1a001fb6:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a001fb8:	2001      	movs	r0, #1
1a001fba:	b004      	add	sp, #16
1a001fbc:	bd10      	pop	{r4, pc}
1a001fbe:	bf00      	nop
1a001fc0:	400f4000 	.word	0x400f4000

1a001fc4 <sleepUntilNextInterrupt>:
 */
void sleepUntilNextInterrupt( void )
{

   /* Instert an assembly instruction wfi (wait for interrupt) */
   __asm volatile( "wfi" );
1a001fc4:	bf30      	wfi
1a001fc6:	4770      	bx	lr

1a001fc8 <tickCallbackSet>:

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
   if( tickCallback != NULL ) {
1a001fc8:	b118      	cbz	r0, 1a001fd2 <tickCallbackSet+0xa>
      tickHookFunction = tickCallback;
1a001fca:	4a05      	ldr	r2, [pc, #20]	; (1a001fe0 <tickCallbackSet+0x18>)
1a001fcc:	6010      	str	r0, [r2, #0]
}

// Tick interrupt callback
bool_t tickCallbackSet( callBackFuncPtr_t tickCallback, void* tickCallbackParams )
{
   bool_t retVal = TRUE;
1a001fce:	2001      	movs	r0, #1
1a001fd0:	e000      	b.n	1a001fd4 <tickCallbackSet+0xc>
   if( tickCallback != NULL ) {
      tickHookFunction = tickCallback;
   } else {
      retVal = FALSE;
1a001fd2:	2000      	movs	r0, #0
   }
   if( tickCallbackParams != NULL ) {
1a001fd4:	b111      	cbz	r1, 1a001fdc <tickCallbackSet+0x14>
      callBackFuncParams = tickCallbackParams;
1a001fd6:	4b03      	ldr	r3, [pc, #12]	; (1a001fe4 <tickCallbackSet+0x1c>)
1a001fd8:	6019      	str	r1, [r3, #0]
1a001fda:	4770      	bx	lr
   } else {
      retVal &= FALSE;
1a001fdc:	2000      	movs	r0, #0
   }
   return retVal;
}
1a001fde:	4770      	bx	lr
1a001fe0:	10000534 	.word	0x10000534
1a001fe4:	10000538 	.word	0x10000538

1a001fe8 <tickPowerSet>:

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001fe8:	b118      	cbz	r0, 1a001ff2 <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001fea:	2207      	movs	r2, #7
1a001fec:	4b03      	ldr	r3, [pc, #12]	; (1a001ffc <tickPowerSet+0x14>)
1a001fee:	601a      	str	r2, [r3, #0]
1a001ff0:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a001ff2:	2200      	movs	r2, #0
1a001ff4:	4b01      	ldr	r3, [pc, #4]	; (1a001ffc <tickPowerSet+0x14>)
1a001ff6:	601a      	str	r2, [r3, #0]
1a001ff8:	4770      	bx	lr
1a001ffa:	bf00      	nop
1a001ffc:	e000e010 	.word	0xe000e010

1a002000 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a002000:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a002002:	ea50 0301 	orrs.w	r3, r0, r1
1a002006:	d104      	bne.n	1a002012 <tickInit+0x12>
         tickPowerSet( OFF );
1a002008:	2000      	movs	r0, #0
1a00200a:	f7ff ffed 	bl	1a001fe8 <tickPowerSet>
         ret_val = 0;
1a00200e:	2000      	movs	r0, #0
1a002010:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a002012:	f110 32ff 	adds.w	r2, r0, #4294967295
1a002016:	f141 33ff 	adc.w	r3, r1, #4294967295
1a00201a:	2b00      	cmp	r3, #0
1a00201c:	bf08      	it	eq
1a00201e:	2a32      	cmpeq	r2, #50	; 0x32
1a002020:	d222      	bcs.n	1a002068 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a002022:	4b12      	ldr	r3, [pc, #72]	; (1a00206c <tickInit+0x6c>)
1a002024:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a002028:	4b11      	ldr	r3, [pc, #68]	; (1a002070 <tickInit+0x70>)
1a00202a:	681c      	ldr	r4, [r3, #0]
1a00202c:	fba4 2300 	umull	r2, r3, r4, r0
1a002030:	fb04 3301 	mla	r3, r4, r1, r3
1a002034:	4610      	mov	r0, r2
1a002036:	4619      	mov	r1, r3
1a002038:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00203c:	2300      	movs	r3, #0
1a00203e:	f001 f913 	bl	1a003268 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a002042:	3801      	subs	r0, #1
1a002044:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a002048:	d209      	bcs.n	1a00205e <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a00204a:	4b0a      	ldr	r3, [pc, #40]	; (1a002074 <tickInit+0x74>)
1a00204c:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00204e:	21e0      	movs	r1, #224	; 0xe0
1a002050:	4a09      	ldr	r2, [pc, #36]	; (1a002078 <tickInit+0x78>)
1a002052:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a002056:	2200      	movs	r2, #0
1a002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a00205a:	2207      	movs	r2, #7
1a00205c:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a00205e:	2001      	movs	r0, #1
1a002060:	f7ff ffc2 	bl	1a001fe8 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a002064:	2001      	movs	r0, #1
1a002066:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a002068:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a00206a:	bd10      	pop	{r4, pc}
1a00206c:	10000568 	.word	0x10000568
1a002070:	10000570 	.word	0x10000570
1a002074:	e000e010 	.word	0xe000e010
1a002078:	e000ed00 	.word	0xe000ed00

1a00207c <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a00207c:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00207e:	4908      	ldr	r1, [pc, #32]	; (1a0020a0 <SysTick_Handler+0x24>)
1a002080:	e9d1 2300 	ldrd	r2, r3, [r1]
1a002084:	3201      	adds	r2, #1
1a002086:	f143 0300 	adc.w	r3, r3, #0
1a00208a:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a00208e:	4b05      	ldr	r3, [pc, #20]	; (1a0020a4 <SysTick_Handler+0x28>)
1a002090:	681b      	ldr	r3, [r3, #0]
1a002092:	b123      	cbz	r3, 1a00209e <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a002094:	4b03      	ldr	r3, [pc, #12]	; (1a0020a4 <SysTick_Handler+0x28>)
1a002096:	681b      	ldr	r3, [r3, #0]
1a002098:	4a03      	ldr	r2, [pc, #12]	; (1a0020a8 <SysTick_Handler+0x2c>)
1a00209a:	6810      	ldr	r0, [r2, #0]
1a00209c:	4798      	blx	r3
1a00209e:	bd08      	pop	{r3, pc}
1a0020a0:	10000560 	.word	0x10000560
1a0020a4:	10000534 	.word	0x10000534
1a0020a8:	10000538 	.word	0x10000538

1a0020ac <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a0020ac:	b570      	push	{r4, r5, r6, lr}
1a0020ae:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0020b0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a0020b4:	009b      	lsls	r3, r3, #2
1a0020b6:	4a21      	ldr	r2, [pc, #132]	; (1a00213c <uartProcessIRQ+0x90>)
1a0020b8:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0020ba:	6975      	ldr	r5, [r6, #20]
1a0020bc:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a0020be:	f015 0f01 	tst.w	r5, #1
1a0020c2:	d019      	beq.n	1a0020f8 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0020c4:	b930      	cbnz	r0, 1a0020d4 <uartProcessIRQ+0x28>
1a0020c6:	4b1e      	ldr	r3, [pc, #120]	; (1a002140 <uartProcessIRQ+0x94>)
1a0020c8:	681b      	ldr	r3, [r3, #0]
1a0020ca:	b11b      	cbz	r3, 1a0020d4 <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a0020cc:	4b1c      	ldr	r3, [pc, #112]	; (1a002140 <uartProcessIRQ+0x94>)
1a0020ce:	681b      	ldr	r3, [r3, #0]
1a0020d0:	2000      	movs	r0, #0
1a0020d2:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a0020d4:	2c03      	cmp	r4, #3
1a0020d6:	d106      	bne.n	1a0020e6 <uartProcessIRQ+0x3a>
1a0020d8:	4b1a      	ldr	r3, [pc, #104]	; (1a002144 <uartProcessIRQ+0x98>)
1a0020da:	681b      	ldr	r3, [r3, #0]
1a0020dc:	b11b      	cbz	r3, 1a0020e6 <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a0020de:	4b19      	ldr	r3, [pc, #100]	; (1a002144 <uartProcessIRQ+0x98>)
1a0020e0:	681b      	ldr	r3, [r3, #0]
1a0020e2:	2000      	movs	r0, #0
1a0020e4:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a0020e6:	2c05      	cmp	r4, #5
1a0020e8:	d106      	bne.n	1a0020f8 <uartProcessIRQ+0x4c>
1a0020ea:	4b17      	ldr	r3, [pc, #92]	; (1a002148 <uartProcessIRQ+0x9c>)
1a0020ec:	681b      	ldr	r3, [r3, #0]
1a0020ee:	b11b      	cbz	r3, 1a0020f8 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a0020f0:	4b15      	ldr	r3, [pc, #84]	; (1a002148 <uartProcessIRQ+0x9c>)
1a0020f2:	681b      	ldr	r3, [r3, #0]
1a0020f4:	2000      	movs	r0, #0
1a0020f6:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0020f8:	f015 0f20 	tst.w	r5, #32
1a0020fc:	d01d      	beq.n	1a00213a <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0020fe:	6873      	ldr	r3, [r6, #4]
1a002100:	f013 0f02 	tst.w	r3, #2
1a002104:	d019      	beq.n	1a00213a <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a002106:	b934      	cbnz	r4, 1a002116 <uartProcessIRQ+0x6a>
1a002108:	4b10      	ldr	r3, [pc, #64]	; (1a00214c <uartProcessIRQ+0xa0>)
1a00210a:	681b      	ldr	r3, [r3, #0]
1a00210c:	b11b      	cbz	r3, 1a002116 <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a00210e:	4b0f      	ldr	r3, [pc, #60]	; (1a00214c <uartProcessIRQ+0xa0>)
1a002110:	681b      	ldr	r3, [r3, #0]
1a002112:	2000      	movs	r0, #0
1a002114:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a002116:	2c03      	cmp	r4, #3
1a002118:	d106      	bne.n	1a002128 <uartProcessIRQ+0x7c>
1a00211a:	4b0d      	ldr	r3, [pc, #52]	; (1a002150 <uartProcessIRQ+0xa4>)
1a00211c:	681b      	ldr	r3, [r3, #0]
1a00211e:	b11b      	cbz	r3, 1a002128 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a002120:	4b0b      	ldr	r3, [pc, #44]	; (1a002150 <uartProcessIRQ+0xa4>)
1a002122:	681b      	ldr	r3, [r3, #0]
1a002124:	2000      	movs	r0, #0
1a002126:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a002128:	2c05      	cmp	r4, #5
1a00212a:	d106      	bne.n	1a00213a <uartProcessIRQ+0x8e>
1a00212c:	4b09      	ldr	r3, [pc, #36]	; (1a002154 <uartProcessIRQ+0xa8>)
1a00212e:	681b      	ldr	r3, [r3, #0]
1a002130:	b11b      	cbz	r3, 1a00213a <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a002132:	4b08      	ldr	r3, [pc, #32]	; (1a002154 <uartProcessIRQ+0xa8>)
1a002134:	681b      	ldr	r3, [r3, #0]
1a002136:	2000      	movs	r0, #0
1a002138:	4798      	blx	r3
1a00213a:	bd70      	pop	{r4, r5, r6, pc}
1a00213c:	1a0039c8 	.word	0x1a0039c8
1a002140:	1000053c 	.word	0x1000053c
1a002144:	1000054c 	.word	0x1000054c
1a002148:	10000550 	.word	0x10000550
1a00214c:	10000540 	.word	0x10000540
1a002150:	10000544 	.word	0x10000544
1a002154:	10000548 	.word	0x10000548

1a002158 <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a002158:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a00215a:	2003      	movs	r0, #3
1a00215c:	f7ff ffa6 	bl	1a0020ac <uartProcessIRQ>
1a002160:	bd08      	pop	{r3, pc}
1a002162:	bf00      	nop

1a002164 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a002164:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a002166:	2005      	movs	r0, #5
1a002168:	f7ff ffa0 	bl	1a0020ac <uartProcessIRQ>
1a00216c:	bd08      	pop	{r3, pc}
1a00216e:	bf00      	nop

1a002170 <spiInit>:
bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;

   if( spi == SPI0 ) {
1a002170:	b9e8      	cbnz	r0, 1a0021ae <spiInit+0x3e>
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{
1a002172:	b510      	push	{r4, lr}
1a002174:	4b0f      	ldr	r3, [pc, #60]	; (1a0021b4 <spiInit+0x44>)
1a002176:	2200      	movs	r2, #0
1a002178:	f8c3 2790 	str.w	r2, [r3, #1936]	; 0x790
1a00217c:	21c5      	movs	r1, #197	; 0xc5
1a00217e:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
1a002182:	2105      	movs	r1, #5
1a002184:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
1a002188:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a00218c:	490a      	ldr	r1, [pc, #40]	; (1a0021b8 <spiInit+0x48>)
1a00218e:	f242 020c 	movw	r2, #8204	; 0x200c
1a002192:	588b      	ldr	r3, [r1, r2]
1a002194:	f043 0301 	orr.w	r3, r3, #1
1a002198:	508b      	str	r3, [r1, r2]

      Chip_SCU_PinMuxSet(0x6, 1, (SCU_MODE_PULLUP | SCU_MODE_FUNC0)); // CS1 configured as GPIO
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 3, 0);

      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
1a00219a:	4c08      	ldr	r4, [pc, #32]	; (1a0021bc <spiInit+0x4c>)
1a00219c:	4620      	mov	r0, r4
1a00219e:	f000 ffcb 	bl	1a003138 <Chip_SSP_Init>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0021a2:	6863      	ldr	r3, [r4, #4]
1a0021a4:	f043 0302 	orr.w	r3, r3, #2
1a0021a8:	6063      	str	r3, [r4, #4]
/*==================[external functions definition]==========================*/

bool_t spiInit( spiMap_t spi )
{

   bool_t retVal = TRUE;
1a0021aa:	2001      	movs	r0, #1
1a0021ac:	bd10      	pop	{r4, pc}
      // Initialize SSP Peripheral
      Chip_SSP_Init( LPC_SSP1 );
      Chip_SSP_Enable( LPC_SSP1 );

   } else {
      retVal = FALSE;
1a0021ae:	2000      	movs	r0, #0
1a0021b0:	4770      	bx	lr
1a0021b2:	bf00      	nop
1a0021b4:	40086000 	.word	0x40086000
1a0021b8:	400f4000 	.word	0x400f4000
1a0021bc:	400c5000 	.word	0x400c5000

1a0021c0 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0021c0:	e7fe      	b.n	1a0021c0 <errorOcurred>
1a0021c2:	bf00      	nop

1a0021c4 <doNothing>:
}

static void doNothing( void* ptr )
{
1a0021c4:	4770      	bx	lr
1a0021c6:	bf00      	nop

1a0021c8 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0021c8:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0021ca:	2400      	movs	r4, #0
1a0021cc:	e013      	b.n	1a0021f6 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0021ce:	4b0b      	ldr	r3, [pc, #44]	; (1a0021fc <TIMER0_IRQHandler+0x34>)
1a0021d0:	681a      	ldr	r2, [r3, #0]
1a0021d2:	f004 010f 	and.w	r1, r4, #15
1a0021d6:	2301      	movs	r3, #1
1a0021d8:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0021da:	421a      	tst	r2, r3
1a0021dc:	d009      	beq.n	1a0021f2 <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0021de:	4b08      	ldr	r3, [pc, #32]	; (1a002200 <TIMER0_IRQHandler+0x38>)
1a0021e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0021e4:	2000      	movs	r0, #0
1a0021e6:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0021e8:	b262      	sxtb	r2, r4
1a0021ea:	2301      	movs	r3, #1
1a0021ec:	4093      	lsls	r3, r2
1a0021ee:	4a03      	ldr	r2, [pc, #12]	; (1a0021fc <TIMER0_IRQHandler+0x34>)
1a0021f0:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0021f2:	3401      	adds	r4, #1
1a0021f4:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0021f6:	2c03      	cmp	r4, #3
1a0021f8:	d9e9      	bls.n	1a0021ce <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a0021fa:	bd10      	pop	{r4, pc}
1a0021fc:	40084000 	.word	0x40084000
1a002200:	10000054 	.word	0x10000054

1a002204 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a002204:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002206:	2400      	movs	r4, #0
1a002208:	e014      	b.n	1a002234 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00220a:	4b0c      	ldr	r3, [pc, #48]	; (1a00223c <TIMER1_IRQHandler+0x38>)
1a00220c:	681a      	ldr	r2, [r3, #0]
1a00220e:	f004 010f 	and.w	r1, r4, #15
1a002212:	2301      	movs	r3, #1
1a002214:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a002216:	421a      	tst	r2, r3
1a002218:	d00a      	beq.n	1a002230 <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00221a:	1d23      	adds	r3, r4, #4
1a00221c:	4a08      	ldr	r2, [pc, #32]	; (1a002240 <TIMER1_IRQHandler+0x3c>)
1a00221e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002222:	2000      	movs	r0, #0
1a002224:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002226:	b262      	sxtb	r2, r4
1a002228:	2301      	movs	r3, #1
1a00222a:	4093      	lsls	r3, r2
1a00222c:	4a03      	ldr	r2, [pc, #12]	; (1a00223c <TIMER1_IRQHandler+0x38>)
1a00222e:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002230:	3401      	adds	r4, #1
1a002232:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002234:	2c03      	cmp	r4, #3
1a002236:	d9e8      	bls.n	1a00220a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a002238:	bd10      	pop	{r4, pc}
1a00223a:	bf00      	nop
1a00223c:	40085000 	.word	0x40085000
1a002240:	10000054 	.word	0x10000054

1a002244 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a002244:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002246:	2400      	movs	r4, #0
1a002248:	e015      	b.n	1a002276 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00224a:	4b0c      	ldr	r3, [pc, #48]	; (1a00227c <TIMER2_IRQHandler+0x38>)
1a00224c:	681a      	ldr	r2, [r3, #0]
1a00224e:	f004 010f 	and.w	r1, r4, #15
1a002252:	2301      	movs	r3, #1
1a002254:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a002256:	421a      	tst	r2, r3
1a002258:	d00b      	beq.n	1a002272 <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00225a:	f104 0308 	add.w	r3, r4, #8
1a00225e:	4a08      	ldr	r2, [pc, #32]	; (1a002280 <TIMER2_IRQHandler+0x3c>)
1a002260:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a002264:	2000      	movs	r0, #0
1a002266:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a002268:	b262      	sxtb	r2, r4
1a00226a:	2301      	movs	r3, #1
1a00226c:	4093      	lsls	r3, r2
1a00226e:	4a03      	ldr	r2, [pc, #12]	; (1a00227c <TIMER2_IRQHandler+0x38>)
1a002270:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a002272:	3401      	adds	r4, #1
1a002274:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002276:	2c03      	cmp	r4, #3
1a002278:	d9e7      	bls.n	1a00224a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00227a:	bd10      	pop	{r4, pc}
1a00227c:	400c3000 	.word	0x400c3000
1a002280:	10000054 	.word	0x10000054

1a002284 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a002284:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a002286:	2400      	movs	r4, #0
1a002288:	e015      	b.n	1a0022b6 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a00228a:	4b0c      	ldr	r3, [pc, #48]	; (1a0022bc <TIMER3_IRQHandler+0x38>)
1a00228c:	681a      	ldr	r2, [r3, #0]
1a00228e:	f004 010f 	and.w	r1, r4, #15
1a002292:	2301      	movs	r3, #1
1a002294:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a002296:	421a      	tst	r2, r3
1a002298:	d00b      	beq.n	1a0022b2 <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a00229a:	f104 030c 	add.w	r3, r4, #12
1a00229e:	4a08      	ldr	r2, [pc, #32]	; (1a0022c0 <TIMER3_IRQHandler+0x3c>)
1a0022a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0022a4:	2000      	movs	r0, #0
1a0022a6:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0022a8:	b262      	sxtb	r2, r4
1a0022aa:	2301      	movs	r3, #1
1a0022ac:	4093      	lsls	r3, r2
1a0022ae:	4a03      	ldr	r2, [pc, #12]	; (1a0022bc <TIMER3_IRQHandler+0x38>)
1a0022b0:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0022b2:	3401      	adds	r4, #1
1a0022b4:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0022b6:	2c03      	cmp	r4, #3
1a0022b8:	d9e7      	bls.n	1a00228a <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0022ba:	bd10      	pop	{r4, pc}
1a0022bc:	400c4000 	.word	0x400c4000
1a0022c0:	10000054 	.word	0x10000054

1a0022c4 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0022c4:	b508      	push	{r3, lr}

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0022c6:	f000 fac3 	bl	1a002850 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0022ca:	4b3b      	ldr	r3, [pc, #236]	; (1a0023b8 <boardInit+0xf4>)
1a0022cc:	6818      	ldr	r0, [r3, #0]
1a0022ce:	f7ff fd11 	bl	1a001cf4 <cyclesCounterInit>

   Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a0022d2:	f000 f927 	bl	1a002524 <Board_Init>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0022d6:	2001      	movs	r0, #1
1a0022d8:	2100      	movs	r1, #0
1a0022da:	f7ff fe91 	bl	1a002000 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0022de:	2000      	movs	r0, #0
1a0022e0:	2105      	movs	r1, #5
1a0022e2:	f7ff fd75 	bl	1a001dd0 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0022e6:	2024      	movs	r0, #36	; 0x24
1a0022e8:	2100      	movs	r1, #0
1a0022ea:	f7ff fd71 	bl	1a001dd0 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0022ee:	2025      	movs	r0, #37	; 0x25
1a0022f0:	2100      	movs	r1, #0
1a0022f2:	f7ff fd6d 	bl	1a001dd0 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0022f6:	2026      	movs	r0, #38	; 0x26
1a0022f8:	2100      	movs	r1, #0
1a0022fa:	f7ff fd69 	bl	1a001dd0 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0022fe:	2027      	movs	r0, #39	; 0x27
1a002300:	2100      	movs	r1, #0
1a002302:	f7ff fd65 	bl	1a001dd0 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a002306:	2028      	movs	r0, #40	; 0x28
1a002308:	2101      	movs	r1, #1
1a00230a:	f7ff fd61 	bl	1a001dd0 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a00230e:	2029      	movs	r0, #41	; 0x29
1a002310:	2101      	movs	r1, #1
1a002312:	f7ff fd5d 	bl	1a001dd0 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a002316:	202a      	movs	r0, #42	; 0x2a
1a002318:	2101      	movs	r1, #1
1a00231a:	f7ff fd59 	bl	1a001dd0 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a00231e:	202b      	movs	r0, #43	; 0x2b
1a002320:	2101      	movs	r1, #1
1a002322:	f7ff fd55 	bl	1a001dd0 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a002326:	202c      	movs	r0, #44	; 0x2c
1a002328:	2101      	movs	r1, #1
1a00232a:	f7ff fd51 	bl	1a001dd0 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a00232e:	202d      	movs	r0, #45	; 0x2d
1a002330:	2101      	movs	r1, #1
1a002332:	f7ff fd4d 	bl	1a001dd0 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a002336:	202e      	movs	r0, #46	; 0x2e
1a002338:	2100      	movs	r1, #0
1a00233a:	f7ff fd49 	bl	1a001dd0 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a00233e:	202f      	movs	r0, #47	; 0x2f
1a002340:	2100      	movs	r1, #0
1a002342:	f7ff fd45 	bl	1a001dd0 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002346:	2030      	movs	r0, #48	; 0x30
1a002348:	2100      	movs	r1, #0
1a00234a:	f7ff fd41 	bl	1a001dd0 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a00234e:	2031      	movs	r0, #49	; 0x31
1a002350:	2100      	movs	r1, #0
1a002352:	f7ff fd3d 	bl	1a001dd0 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002356:	2032      	movs	r0, #50	; 0x32
1a002358:	2100      	movs	r1, #0
1a00235a:	f7ff fd39 	bl	1a001dd0 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a00235e:	2033      	movs	r0, #51	; 0x33
1a002360:	2100      	movs	r1, #0
1a002362:	f7ff fd35 	bl	1a001dd0 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002366:	2034      	movs	r0, #52	; 0x34
1a002368:	2100      	movs	r1, #0
1a00236a:	f7ff fd31 	bl	1a001dd0 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a00236e:	2035      	movs	r0, #53	; 0x35
1a002370:	2100      	movs	r1, #0
1a002372:	f7ff fd2d 	bl	1a001dd0 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002376:	2036      	movs	r0, #54	; 0x36
1a002378:	2101      	movs	r1, #1
1a00237a:	f7ff fd29 	bl	1a001dd0 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00237e:	2037      	movs	r0, #55	; 0x37
1a002380:	2101      	movs	r1, #1
1a002382:	f7ff fd25 	bl	1a001dd0 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002386:	2038      	movs	r0, #56	; 0x38
1a002388:	2101      	movs	r1, #1
1a00238a:	f7ff fd21 	bl	1a001dd0 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00238e:	2039      	movs	r0, #57	; 0x39
1a002390:	2101      	movs	r1, #1
1a002392:	f7ff fd1d 	bl	1a001dd0 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002396:	203a      	movs	r0, #58	; 0x3a
1a002398:	2101      	movs	r1, #1
1a00239a:	f7ff fd19 	bl	1a001dd0 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00239e:	203b      	movs	r0, #59	; 0x3b
1a0023a0:	2101      	movs	r1, #1
1a0023a2:	f7ff fd15 	bl	1a001dd0 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0023a6:	203c      	movs	r0, #60	; 0x3c
1a0023a8:	2101      	movs	r1, #1
1a0023aa:	f7ff fd11 	bl	1a001dd0 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0023ae:	203d      	movs	r0, #61	; 0x3d
1a0023b0:	2101      	movs	r1, #1
1a0023b2:	f7ff fd0d 	bl	1a001dd0 <gpioInit>
1a0023b6:	bd08      	pop	{r3, pc}
1a0023b8:	10000570 	.word	0x10000570

1a0023bc <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a0023bc:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0023be:	2200      	movs	r2, #0
1a0023c0:	e014      	b.n	1a0023ec <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0023c2:	4b0c      	ldr	r3, [pc, #48]	; (1a0023f4 <Board_LED_Init+0x38>)
1a0023c4:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a0023c8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0023cc:	7859      	ldrb	r1, [r3, #1]
1a0023ce:	480a      	ldr	r0, [pc, #40]	; (1a0023f8 <Board_LED_Init+0x3c>)
1a0023d0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0023d4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a0023d8:	2301      	movs	r3, #1
1a0023da:	408b      	lsls	r3, r1
1a0023dc:	4333      	orrs	r3, r6
1a0023de:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0023e2:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a0023e6:	2300      	movs	r3, #0
1a0023e8:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0023ea:	3201      	adds	r2, #1
1a0023ec:	2a05      	cmp	r2, #5
1a0023ee:	d9e8      	bls.n	1a0023c2 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a0023f0:	bc70      	pop	{r4, r5, r6}
1a0023f2:	4770      	bx	lr
1a0023f4:	1a003a34 	.word	0x1a003a34
1a0023f8:	400f4000 	.word	0x400f4000

1a0023fc <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a0023fc:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0023fe:	2300      	movs	r3, #0
1a002400:	e011      	b.n	1a002426 <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002402:	490b      	ldr	r1, [pc, #44]	; (1a002430 <Board_TEC_Init+0x34>)
1a002404:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002408:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00240c:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00240e:	4c09      	ldr	r4, [pc, #36]	; (1a002434 <Board_TEC_Init+0x38>)
1a002410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002414:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002418:	2101      	movs	r1, #1
1a00241a:	40a9      	lsls	r1, r5
1a00241c:	ea20 0101 	bic.w	r1, r0, r1
1a002420:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002424:	3301      	adds	r3, #1
1a002426:	2b03      	cmp	r3, #3
1a002428:	d9eb      	bls.n	1a002402 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a00242a:	bc30      	pop	{r4, r5}
1a00242c:	4770      	bx	lr
1a00242e:	bf00      	nop
1a002430:	1a003a2c 	.word	0x1a003a2c
1a002434:	400f4000 	.word	0x400f4000

1a002438 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a002438:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a00243a:	2300      	movs	r3, #0
1a00243c:	e011      	b.n	1a002462 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00243e:	490b      	ldr	r1, [pc, #44]	; (1a00246c <Board_GPIO_Init+0x34>)
1a002440:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002444:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002448:	784d      	ldrb	r5, [r1, #1]
1a00244a:	4c09      	ldr	r4, [pc, #36]	; (1a002470 <Board_GPIO_Init+0x38>)
1a00244c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002450:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a002454:	2101      	movs	r1, #1
1a002456:	40a9      	lsls	r1, r5
1a002458:	ea20 0101 	bic.w	r1, r0, r1
1a00245c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002460:	3301      	adds	r3, #1
1a002462:	2b08      	cmp	r3, #8
1a002464:	d9eb      	bls.n	1a00243e <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a002466:	bc30      	pop	{r4, r5}
1a002468:	4770      	bx	lr
1a00246a:	bf00      	nop
1a00246c:	1a003a10 	.word	0x1a003a10
1a002470:	400f4000 	.word	0x400f4000

1a002474 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a002474:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a002476:	4c0b      	ldr	r4, [pc, #44]	; (1a0024a4 <Board_SPI_Init+0x30>)
1a002478:	4620      	mov	r0, r4
1a00247a:	f000 fe5d 	bl	1a003138 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00247e:	6863      	ldr	r3, [r4, #4]
1a002480:	f023 0304 	bic.w	r3, r3, #4
1a002484:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002486:	6823      	ldr	r3, [r4, #0]
1a002488:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00248c:	f043 0307 	orr.w	r3, r3, #7
1a002490:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002492:	4620      	mov	r0, r4
1a002494:	4904      	ldr	r1, [pc, #16]	; (1a0024a8 <Board_SPI_Init+0x34>)
1a002496:	f000 fe2f 	bl	1a0030f8 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a00249a:	6863      	ldr	r3, [r4, #4]
1a00249c:	f043 0302 	orr.w	r3, r3, #2
1a0024a0:	6063      	str	r3, [r4, #4]
1a0024a2:	bd10      	pop	{r4, pc}
1a0024a4:	400c5000 	.word	0x400c5000
1a0024a8:	000186a0 	.word	0x000186a0

1a0024ac <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a0024ac:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a0024ae:	2000      	movs	r0, #0
1a0024b0:	f000 fe6e 	bl	1a003190 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0024b4:	f640 0208 	movw	r2, #2056	; 0x808
1a0024b8:	4b03      	ldr	r3, [pc, #12]	; (1a0024c8 <Board_I2C_Init+0x1c>)
1a0024ba:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0024be:	2000      	movs	r0, #0
1a0024c0:	4902      	ldr	r1, [pc, #8]	; (1a0024cc <Board_I2C_Init+0x20>)
1a0024c2:	f000 fe77 	bl	1a0031b4 <Chip_I2C_SetClockRate>
1a0024c6:	bd08      	pop	{r3, pc}
1a0024c8:	40086000 	.word	0x40086000
1a0024cc:	000f4240 	.word	0x000f4240

1a0024d0 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a0024d0:	b510      	push	{r4, lr}
1a0024d2:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a0024d4:	4c08      	ldr	r4, [pc, #32]	; (1a0024f8 <Board_ADC_Init+0x28>)
1a0024d6:	4620      	mov	r0, r4
1a0024d8:	4669      	mov	r1, sp
1a0024da:	f000 f979 	bl	1a0027d0 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a0024de:	4620      	mov	r0, r4
1a0024e0:	4669      	mov	r1, sp
1a0024e2:	4a06      	ldr	r2, [pc, #24]	; (1a0024fc <Board_ADC_Init+0x2c>)
1a0024e4:	f000 f994 	bl	1a002810 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0024e8:	4620      	mov	r0, r4
1a0024ea:	4669      	mov	r1, sp
1a0024ec:	2200      	movs	r2, #0
1a0024ee:	f000 f9a9 	bl	1a002844 <Chip_ADC_SetResolution>
}
1a0024f2:	b002      	add	sp, #8
1a0024f4:	bd10      	pop	{r4, pc}
1a0024f6:	bf00      	nop
1a0024f8:	400e3000 	.word	0x400e3000
1a0024fc:	00061a80 	.word	0x00061a80

1a002500 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002500:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a002502:	4c07      	ldr	r4, [pc, #28]	; (1a002520 <Board_Debug_Init+0x20>)
1a002504:	4620      	mov	r0, r4
1a002506:	f000 f8a5 	bl	1a002654 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00250a:	4620      	mov	r0, r4
1a00250c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002510:	f000 f8ca 	bl	1a0026a8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002514:	2303      	movs	r3, #3
1a002516:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a002518:	2301      	movs	r3, #1
1a00251a:	65e3      	str	r3, [r4, #92]	; 0x5c
1a00251c:	bd10      	pop	{r4, pc}
1a00251e:	bf00      	nop
1a002520:	400c1000 	.word	0x400c1000

1a002524 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002524:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002526:	f7ff ffeb 	bl	1a002500 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00252a:	480b      	ldr	r0, [pc, #44]	; (1a002558 <Board_Init+0x34>)
1a00252c:	f000 fd24 	bl	1a002f78 <Chip_GPIO_Init>

   Board_LED_Init();
1a002530:	f7ff ff44 	bl	1a0023bc <Board_LED_Init>
   Board_TEC_Init();
1a002534:	f7ff ff62 	bl	1a0023fc <Board_TEC_Init>
   Board_SPI_Init();
1a002538:	f7ff ff9c 	bl	1a002474 <Board_SPI_Init>
   Board_GPIO_Init();
1a00253c:	f7ff ff7c 	bl	1a002438 <Board_GPIO_Init>
   Board_I2C_Init();
1a002540:	f7ff ffb4 	bl	1a0024ac <Board_I2C_Init>
   Board_ADC_Init();
1a002544:	f7ff ffc4 	bl	1a0024d0 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a002548:	4a04      	ldr	r2, [pc, #16]	; (1a00255c <Board_Init+0x38>)
1a00254a:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a00254e:	f043 0304 	orr.w	r3, r3, #4
1a002552:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a002556:	bd08      	pop	{r3, pc}
1a002558:	400f4000 	.word	0x400f4000
1a00255c:	40043000 	.word	0x40043000

1a002560 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a002560:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a002562:	4b04      	ldr	r3, [pc, #16]	; (1a002574 <SystemInit+0x14>)
1a002564:	4a04      	ldr	r2, [pc, #16]	; (1a002578 <SystemInit+0x18>)
1a002566:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a002568:	f000 fcda 	bl	1a002f20 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a00256c:	f000 f856 	bl	1a00261c <Board_SystemInit>
1a002570:	bd08      	pop	{r3, pc}
1a002572:	bf00      	nop
1a002574:	e000ed08 	.word	0xe000ed08
1a002578:	1a000000 	.word	0x1a000000

1a00257c <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a00257c:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00257e:	2300      	movs	r3, #0
1a002580:	e00c      	b.n	1a00259c <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002582:	4a09      	ldr	r2, [pc, #36]	; (1a0025a8 <Board_SetupMuxing+0x2c>)
1a002584:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002588:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a00258c:	784a      	ldrb	r2, [r1, #1]
1a00258e:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002590:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002594:	4905      	ldr	r1, [pc, #20]	; (1a0025ac <Board_SetupMuxing+0x30>)
1a002596:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00259a:	3301      	adds	r3, #1
1a00259c:	2b25      	cmp	r3, #37	; 0x25
1a00259e:	d9f0      	bls.n	1a002582 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0025a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0025a4:	4770      	bx	lr
1a0025a6:	bf00      	nop
1a0025a8:	1a003a4c 	.word	0x1a003a4c
1a0025ac:	40086000 	.word	0x40086000

1a0025b0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0025b0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0025b2:	4a17      	ldr	r2, [pc, #92]	; (1a002610 <Board_SetupClocking+0x60>)
1a0025b4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0025b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0025bc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0025c0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0025c4:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0025c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0025cc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0025d0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0025d4:	2006      	movs	r0, #6
1a0025d6:	490f      	ldr	r1, [pc, #60]	; (1a002614 <Board_SetupClocking+0x64>)
1a0025d8:	2201      	movs	r2, #1
1a0025da:	f000 fbf9 	bl	1a002dd0 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0025de:	2400      	movs	r4, #0
1a0025e0:	e00a      	b.n	1a0025f8 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0025e2:	4a0d      	ldr	r2, [pc, #52]	; (1a002618 <Board_SetupClocking+0x68>)
1a0025e4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0025e8:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0025ec:	7859      	ldrb	r1, [r3, #1]
1a0025ee:	789a      	ldrb	r2, [r3, #2]
1a0025f0:	78db      	ldrb	r3, [r3, #3]
1a0025f2:	f000 fb55 	bl	1a002ca0 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0025f6:	3401      	adds	r4, #1
1a0025f8:	2c02      	cmp	r4, #2
1a0025fa:	d9f2      	bls.n	1a0025e2 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0025fc:	4b04      	ldr	r3, [pc, #16]	; (1a002610 <Board_SetupClocking+0x60>)
1a0025fe:	685a      	ldr	r2, [r3, #4]
1a002600:	f022 020c 	bic.w	r2, r2, #12
1a002604:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002606:	685a      	ldr	r2, [r3, #4]
1a002608:	f042 0203 	orr.w	r2, r2, #3
1a00260c:	605a      	str	r2, [r3, #4]
1a00260e:	bd10      	pop	{r4, pc}
1a002610:	40043000 	.word	0x40043000
1a002614:	0c28cb00 	.word	0x0c28cb00
1a002618:	1a003a40 	.word	0x1a003a40

1a00261c <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00261c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00261e:	f7ff ffad 	bl	1a00257c <Board_SetupMuxing>
    Board_SetupClocking();
1a002622:	f7ff ffc5 	bl	1a0025b0 <Board_SetupClocking>
1a002626:	bd08      	pop	{r3, pc}

1a002628 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002628:	4b09      	ldr	r3, [pc, #36]	; (1a002650 <Chip_UART_GetIndex+0x28>)
1a00262a:	4298      	cmp	r0, r3
1a00262c:	d009      	beq.n	1a002642 <Chip_UART_GetIndex+0x1a>
1a00262e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002632:	4298      	cmp	r0, r3
1a002634:	d007      	beq.n	1a002646 <Chip_UART_GetIndex+0x1e>
1a002636:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00263a:	4298      	cmp	r0, r3
1a00263c:	d005      	beq.n	1a00264a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00263e:	2000      	movs	r0, #0
1a002640:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002642:	2002      	movs	r0, #2
1a002644:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002646:	2003      	movs	r0, #3
1a002648:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a00264a:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a00264c:	4770      	bx	lr
1a00264e:	bf00      	nop
1a002650:	400c1000 	.word	0x400c1000

1a002654 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002654:	b510      	push	{r4, lr}
1a002656:	b082      	sub	sp, #8
1a002658:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00265a:	f7ff ffe5 	bl	1a002628 <Chip_UART_GetIndex>
1a00265e:	4b10      	ldr	r3, [pc, #64]	; (1a0026a0 <Chip_UART_Init+0x4c>)
1a002660:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002664:	2101      	movs	r1, #1
1a002666:	460a      	mov	r2, r1
1a002668:	460b      	mov	r3, r1
1a00266a:	f000 fb53 	bl	1a002d14 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a00266e:	2307      	movs	r3, #7
1a002670:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a002672:	2300      	movs	r3, #0
1a002674:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002676:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002678:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00267a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00267c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00267e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002680:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002682:	4b08      	ldr	r3, [pc, #32]	; (1a0026a4 <Chip_UART_Init+0x50>)
1a002684:	429c      	cmp	r4, r3
1a002686:	d103      	bne.n	1a002690 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a002688:	2300      	movs	r3, #0
1a00268a:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a00268c:	69a3      	ldr	r3, [r4, #24]
1a00268e:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002690:	2303      	movs	r3, #3
1a002692:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002694:	2310      	movs	r3, #16
1a002696:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002698:	9b01      	ldr	r3, [sp, #4]
}
1a00269a:	b002      	add	sp, #8
1a00269c:	bd10      	pop	{r4, pc}
1a00269e:	bf00      	nop
1a0026a0:	1a003aec 	.word	0x1a003aec
1a0026a4:	40082000 	.word	0x40082000

1a0026a8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0026a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0026ac:	b083      	sub	sp, #12
1a0026ae:	4683      	mov	fp, r0
1a0026b0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0026b2:	f7ff ffb9 	bl	1a002628 <Chip_UART_GetIndex>
1a0026b6:	4b34      	ldr	r3, [pc, #208]	; (1a002788 <Chip_UART_SetBaudFDR+0xe0>)
1a0026b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0026bc:	f000 fb62 	bl	1a002d84 <Chip_Clock_GetRate>
1a0026c0:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a0026c2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0026c6:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0026c8:	2300      	movs	r3, #0
1a0026ca:	9301      	str	r3, [sp, #4]
1a0026cc:	46a2      	mov	sl, r4
1a0026ce:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0026d0:	e029      	b.n	1a002726 <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0026d2:	2300      	movs	r3, #0
1a0026d4:	0932      	lsrs	r2, r6, #4
1a0026d6:	0730      	lsls	r0, r6, #28
1a0026d8:	fba0 0104 	umull	r0, r1, r0, r4
1a0026dc:	fb04 1102 	mla	r1, r4, r2, r1
1a0026e0:	1962      	adds	r2, r4, r5
1a0026e2:	fb08 f202 	mul.w	r2, r8, r2
1a0026e6:	f000 fdbf 	bl	1a003268 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a0026ea:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a0026ec:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a0026ee:	2800      	cmp	r0, #0
1a0026f0:	da01      	bge.n	1a0026f6 <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a0026f2:	4243      	negs	r3, r0
				div ++;
1a0026f4:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0026f6:	429f      	cmp	r7, r3
1a0026f8:	d30a      	bcc.n	1a002710 <Chip_UART_SetBaudFDR+0x68>
1a0026fa:	b14a      	cbz	r2, 1a002710 <Chip_UART_SetBaudFDR+0x68>
1a0026fc:	0c11      	lsrs	r1, r2, #16
1a0026fe:	d107      	bne.n	1a002710 <Chip_UART_SetBaudFDR+0x68>
1a002700:	2a02      	cmp	r2, #2
1a002702:	d800      	bhi.n	1a002706 <Chip_UART_SetBaudFDR+0x5e>
1a002704:	b925      	cbnz	r5, 1a002710 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a002706:	b14b      	cbz	r3, 1a00271c <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a002708:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00270a:	9501      	str	r5, [sp, #4]
			sm = m;
1a00270c:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a00270e:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a002710:	3501      	adds	r5, #1
1a002712:	e000      	b.n	1a002716 <Chip_UART_SetBaudFDR+0x6e>
1a002714:	2500      	movs	r5, #0
1a002716:	42a5      	cmp	r5, r4
1a002718:	d3db      	bcc.n	1a0026d2 <Chip_UART_SetBaudFDR+0x2a>
1a00271a:	e003      	b.n	1a002724 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a00271c:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00271e:	9501      	str	r5, [sp, #4]
			sm = m;
1a002720:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a002722:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a002724:	3401      	adds	r4, #1
1a002726:	b10f      	cbz	r7, 1a00272c <Chip_UART_SetBaudFDR+0x84>
1a002728:	2c0f      	cmp	r4, #15
1a00272a:	d9f3      	bls.n	1a002714 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00272c:	f1b9 0f00 	cmp.w	r9, #0
1a002730:	d026      	beq.n	1a002780 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a002732:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002736:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00273a:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00273e:	fa5f f389 	uxtb.w	r3, r9
1a002742:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a002746:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00274a:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00274e:	f8db 300c 	ldr.w	r3, [fp, #12]
1a002752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002756:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00275a:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00275e:	b2da      	uxtb	r2, r3
1a002760:	9901      	ldr	r1, [sp, #4]
1a002762:	f001 030f 	and.w	r3, r1, #15
1a002766:	4313      	orrs	r3, r2
1a002768:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00276c:	0933      	lsrs	r3, r6, #4
1a00276e:	fb0a f303 	mul.w	r3, sl, r3
1a002772:	eb0a 0001 	add.w	r0, sl, r1
1a002776:	fb09 f000 	mul.w	r0, r9, r0
1a00277a:	fbb3 f0f0 	udiv	r0, r3, r0
1a00277e:	e000      	b.n	1a002782 <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a002780:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a002782:	b003      	add	sp, #12
1a002784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002788:	1a003ae4 	.word	0x1a003ae4

1a00278c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00278c:	4b03      	ldr	r3, [pc, #12]	; (1a00279c <Chip_ADC_GetClockIndex+0x10>)
1a00278e:	4298      	cmp	r0, r3
1a002790:	d101      	bne.n	1a002796 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a002792:	2004      	movs	r0, #4
1a002794:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a002796:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a002798:	4770      	bx	lr
1a00279a:	bf00      	nop
1a00279c:	400e4000 	.word	0x400e4000

1a0027a0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0027a0:	b570      	push	{r4, r5, r6, lr}
1a0027a2:	460d      	mov	r5, r1
1a0027a4:	4614      	mov	r4, r2
1a0027a6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0027a8:	f7ff fff0 	bl	1a00278c <Chip_ADC_GetClockIndex>
1a0027ac:	f000 faea 	bl	1a002d84 <Chip_Clock_GetRate>
	if (burstMode) {
1a0027b0:	b115      	cbz	r5, 1a0027b8 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a0027b2:	fb04 f406 	mul.w	r4, r4, r6
1a0027b6:	e003      	b.n	1a0027c0 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0027b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0027bc:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0027c0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0027c4:	0064      	lsls	r4, r4, #1
1a0027c6:	fbb0 f4f4 	udiv	r4, r0, r4
1a0027ca:	1e60      	subs	r0, r4, #1
	return div;
}
1a0027cc:	b2c0      	uxtb	r0, r0
1a0027ce:	bd70      	pop	{r4, r5, r6, pc}

1a0027d0 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0027d0:	b538      	push	{r3, r4, r5, lr}
1a0027d2:	4605      	mov	r5, r0
1a0027d4:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0027d6:	f7ff ffd9 	bl	1a00278c <Chip_ADC_GetClockIndex>
1a0027da:	2101      	movs	r1, #1
1a0027dc:	460a      	mov	r2, r1
1a0027de:	460b      	mov	r3, r1
1a0027e0:	f000 fa98 	bl	1a002d14 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0027e4:	2100      	movs	r1, #0
1a0027e6:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0027e8:	4a08      	ldr	r2, [pc, #32]	; (1a00280c <Chip_ADC_Init+0x3c>)
1a0027ea:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0027ec:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0027ee:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0027f0:	4628      	mov	r0, r5
1a0027f2:	230b      	movs	r3, #11
1a0027f4:	f7ff ffd4 	bl	1a0027a0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0027f8:	0200      	lsls	r0, r0, #8
1a0027fa:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0027fe:	7920      	ldrb	r0, [r4, #4]
1a002800:	f000 0007 	and.w	r0, r0, #7
1a002804:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a002808:	6028      	str	r0, [r5, #0]
1a00280a:	bd38      	pop	{r3, r4, r5, pc}
1a00280c:	00061a80 	.word	0x00061a80

1a002810 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a002810:	b570      	push	{r4, r5, r6, lr}
1a002812:	4606      	mov	r6, r0
1a002814:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a002816:	6804      	ldr	r4, [r0, #0]
1a002818:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00281c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a002820:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a002822:	790b      	ldrb	r3, [r1, #4]
1a002824:	f1c3 030b 	rsb	r3, r3, #11
1a002828:	7949      	ldrb	r1, [r1, #5]
1a00282a:	b2db      	uxtb	r3, r3
1a00282c:	f7ff ffb8 	bl	1a0027a0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a002830:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a002834:	792c      	ldrb	r4, [r5, #4]
1a002836:	f004 0407 	and.w	r4, r4, #7
1a00283a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a00283e:	6030      	str	r0, [r6, #0]
1a002840:	bd70      	pop	{r4, r5, r6, pc}
1a002842:	bf00      	nop

1a002844 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a002844:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a002846:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a002848:	680a      	ldr	r2, [r1, #0]
1a00284a:	f7ff ffe1 	bl	1a002810 <Chip_ADC_SetSampleRate>
1a00284e:	bd08      	pop	{r3, pc}

1a002850 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a002850:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a002852:	2069      	movs	r0, #105	; 0x69
1a002854:	f000 fa96 	bl	1a002d84 <Chip_Clock_GetRate>
1a002858:	4b01      	ldr	r3, [pc, #4]	; (1a002860 <SystemCoreClockUpdate+0x10>)
1a00285a:	6018      	str	r0, [r3, #0]
1a00285c:	bd08      	pop	{r3, pc}
1a00285e:	bf00      	nop
1a002860:	10000570 	.word	0x10000570

1a002864 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002864:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a002866:	680b      	ldr	r3, [r1, #0]
1a002868:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00286c:	d002      	beq.n	1a002874 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00286e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002872:	600b      	str	r3, [r1, #0]
1a002874:	4686      	mov	lr, r0
1a002876:	2601      	movs	r6, #1
1a002878:	e041      	b.n	1a0028fe <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a00287a:	680d      	ldr	r5, [r1, #0]
1a00287c:	f015 0f40 	tst.w	r5, #64	; 0x40
1a002880:	d008      	beq.n	1a002894 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a002882:	1c7b      	adds	r3, r7, #1
1a002884:	fa04 f203 	lsl.w	r2, r4, r3
1a002888:	694b      	ldr	r3, [r1, #20]
1a00288a:	fb03 f302 	mul.w	r3, r3, r2
1a00288e:	fbb3 f3f6 	udiv	r3, r3, r6
1a002892:	e004      	b.n	1a00289e <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a002894:	694b      	ldr	r3, [r1, #20]
1a002896:	fb04 f303 	mul.w	r3, r4, r3
1a00289a:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a00289e:	4a19      	ldr	r2, [pc, #100]	; (1a002904 <pll_calc_divs+0xa0>)
1a0028a0:	4293      	cmp	r3, r2
1a0028a2:	d920      	bls.n	1a0028e6 <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0028a4:	4a18      	ldr	r2, [pc, #96]	; (1a002908 <pll_calc_divs+0xa4>)
1a0028a6:	4293      	cmp	r3, r2
1a0028a8:	d823      	bhi.n	1a0028f2 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0028aa:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0028ae:	d103      	bne.n	1a0028b8 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0028b0:	1c7a      	adds	r2, r7, #1
1a0028b2:	fa23 f202 	lsr.w	r2, r3, r2
1a0028b6:	e000      	b.n	1a0028ba <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0028b8:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0028ba:	1a85      	subs	r5, r0, r2
1a0028bc:	d502      	bpl.n	1a0028c4 <pll_calc_divs+0x60>
		return -val;
1a0028be:	f1c5 0c00 	rsb	ip, r5, #0
1a0028c2:	e000      	b.n	1a0028c6 <pll_calc_divs+0x62>
	return val;
1a0028c4:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0028c6:	45e6      	cmp	lr, ip
1a0028c8:	d90d      	bls.n	1a0028e6 <pll_calc_divs+0x82>
					ppll->nsel = n;
1a0028ca:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a0028cc:	f107 0e01 	add.w	lr, r7, #1
1a0028d0:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a0028d4:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a0028d6:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a0028d8:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0028da:	2d00      	cmp	r5, #0
1a0028dc:	da02      	bge.n	1a0028e4 <pll_calc_divs+0x80>
		return -val;
1a0028de:	f1c5 0e00 	rsb	lr, r5, #0
1a0028e2:	e000      	b.n	1a0028e6 <pll_calc_divs+0x82>
	return val;
1a0028e4:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a0028e6:	3401      	adds	r4, #1
1a0028e8:	e000      	b.n	1a0028ec <pll_calc_divs+0x88>
1a0028ea:	2401      	movs	r4, #1
1a0028ec:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a0028f0:	ddc3      	ble.n	1a00287a <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0028f2:	3701      	adds	r7, #1
1a0028f4:	e000      	b.n	1a0028f8 <pll_calc_divs+0x94>
1a0028f6:	2700      	movs	r7, #0
1a0028f8:	2f03      	cmp	r7, #3
1a0028fa:	ddf6      	ble.n	1a0028ea <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a0028fc:	3601      	adds	r6, #1
1a0028fe:	2e04      	cmp	r6, #4
1a002900:	ddf9      	ble.n	1a0028f6 <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a002902:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002904:	094c5eff 	.word	0x094c5eff
1a002908:	1312d000 	.word	0x1312d000

1a00290c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00290c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00290e:	b099      	sub	sp, #100	; 0x64
1a002910:	4605      	mov	r5, r0
1a002912:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a002914:	4668      	mov	r0, sp
1a002916:	2100      	movs	r1, #0
1a002918:	2260      	movs	r2, #96	; 0x60
1a00291a:	f000 ff99 	bl	1a003850 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00291e:	2380      	movs	r3, #128	; 0x80
1a002920:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a002922:	6963      	ldr	r3, [r4, #20]
1a002924:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a002926:	7923      	ldrb	r3, [r4, #4]
1a002928:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00292c:	4628      	mov	r0, r5
1a00292e:	4669      	mov	r1, sp
1a002930:	f7ff ff98 	bl	1a002864 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a002934:	9b06      	ldr	r3, [sp, #24]
1a002936:	42ab      	cmp	r3, r5
1a002938:	d107      	bne.n	1a00294a <pll_get_frac+0x3e>
		*ppll = pll[0];
1a00293a:	466d      	mov	r5, sp
1a00293c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00293e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002940:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002948:	e05e      	b.n	1a002a08 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00294a:	1aeb      	subs	r3, r5, r3
1a00294c:	d500      	bpl.n	1a002950 <pll_get_frac+0x44>
		return -val;
1a00294e:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a002950:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a002952:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a002954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a002958:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00295a:	6963      	ldr	r3, [r4, #20]
1a00295c:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00295e:	7923      	ldrb	r3, [r4, #4]
1a002960:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a002964:	4628      	mov	r0, r5
1a002966:	a910      	add	r1, sp, #64	; 0x40
1a002968:	f7ff ff7c 	bl	1a002864 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00296c:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00296e:	42ab      	cmp	r3, r5
1a002970:	d107      	bne.n	1a002982 <pll_get_frac+0x76>
		*ppll = pll[2];
1a002972:	ad10      	add	r5, sp, #64	; 0x40
1a002974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a002976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002978:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00297c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a002980:	e042      	b.n	1a002a08 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a002982:	1aeb      	subs	r3, r5, r3
1a002984:	d500      	bpl.n	1a002988 <pll_get_frac+0x7c>
		return -val;
1a002986:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a002988:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00298a:	4b20      	ldr	r3, [pc, #128]	; (1a002a0c <pll_get_frac+0x100>)
1a00298c:	429d      	cmp	r5, r3
1a00298e:	d812      	bhi.n	1a0029b6 <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a002990:	2340      	movs	r3, #64	; 0x40
1a002992:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a002994:	6963      	ldr	r3, [r4, #20]
1a002996:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a002998:	4628      	mov	r0, r5
1a00299a:	a908      	add	r1, sp, #32
1a00299c:	f7ff ff62 	bl	1a002864 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0029a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0029a2:	42ab      	cmp	r3, r5
1a0029a4:	d107      	bne.n	1a0029b6 <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0029a6:	ad08      	add	r5, sp, #32
1a0029a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0029b4:	e028      	b.n	1a002a08 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0029b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0029b8:	1aed      	subs	r5, r5, r3
1a0029ba:	d500      	bpl.n	1a0029be <pll_get_frac+0xb2>
		return -val;
1a0029bc:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0029be:	42ae      	cmp	r6, r5
1a0029c0:	dc11      	bgt.n	1a0029e6 <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a0029c2:	42be      	cmp	r6, r7
1a0029c4:	dc07      	bgt.n	1a0029d6 <pll_get_frac+0xca>
			*ppll = pll[0];
1a0029c6:	466d      	mov	r5, sp
1a0029c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029cc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029d4:	e018      	b.n	1a002a08 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a0029d6:	ad10      	add	r5, sp, #64	; 0x40
1a0029d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029e4:	e010      	b.n	1a002a08 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a0029e6:	42af      	cmp	r7, r5
1a0029e8:	db07      	blt.n	1a0029fa <pll_get_frac+0xee>
			*ppll = pll[1];
1a0029ea:	ad08      	add	r5, sp, #32
1a0029ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0029f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0029f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0029f8:	e006      	b.n	1a002a08 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a0029fa:	ad10      	add	r5, sp, #64	; 0x40
1a0029fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0029fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a002a00:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a002a04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a002a08:	b019      	add	sp, #100	; 0x64
1a002a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a002a0c:	068e7780 	.word	0x068e7780

1a002a10 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a002a10:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a002a12:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a002a14:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002a16:	e010      	b.n	1a002a3a <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a002a18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a1c:	0052      	lsls	r2, r2, #1
1a002a1e:	4d0d      	ldr	r5, [pc, #52]	; (1a002a54 <Chip_Clock_FindBaseClock+0x44>)
1a002a20:	5aaa      	ldrh	r2, [r5, r2]
1a002a22:	4282      	cmp	r2, r0
1a002a24:	d806      	bhi.n	1a002a34 <Chip_Clock_FindBaseClock+0x24>
1a002a26:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a2a:	0052      	lsls	r2, r2, #1
1a002a2c:	442a      	add	r2, r5
1a002a2e:	8852      	ldrh	r2, [r2, #2]
1a002a30:	4282      	cmp	r2, r0
1a002a32:	d201      	bcs.n	1a002a38 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a002a34:	3301      	adds	r3, #1
1a002a36:	e000      	b.n	1a002a3a <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a002a38:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a002a3a:	291c      	cmp	r1, #28
1a002a3c:	d107      	bne.n	1a002a4e <Chip_Clock_FindBaseClock+0x3e>
1a002a3e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a002a42:	0052      	lsls	r2, r2, #1
1a002a44:	4c03      	ldr	r4, [pc, #12]	; (1a002a54 <Chip_Clock_FindBaseClock+0x44>)
1a002a46:	4422      	add	r2, r4
1a002a48:	7914      	ldrb	r4, [r2, #4]
1a002a4a:	428c      	cmp	r4, r1
1a002a4c:	d1e4      	bne.n	1a002a18 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a002a4e:	4608      	mov	r0, r1
1a002a50:	bc30      	pop	{r4, r5}
1a002a52:	4770      	bx	lr
1a002a54:	1a003b00 	.word	0x1a003b00

1a002a58 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a002a58:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a002a5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a002a5e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a002a60:	4a0d      	ldr	r2, [pc, #52]	; (1a002a98 <Chip_Clock_EnableCrystal+0x40>)
1a002a62:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a002a64:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a002a68:	6992      	ldr	r2, [r2, #24]
1a002a6a:	428a      	cmp	r2, r1
1a002a6c:	d001      	beq.n	1a002a72 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a6e:	4a0a      	ldr	r2, [pc, #40]	; (1a002a98 <Chip_Clock_EnableCrystal+0x40>)
1a002a70:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a002a72:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a002a76:	4a09      	ldr	r2, [pc, #36]	; (1a002a9c <Chip_Clock_EnableCrystal+0x44>)
1a002a78:	6811      	ldr	r1, [r2, #0]
1a002a7a:	4a09      	ldr	r2, [pc, #36]	; (1a002aa0 <Chip_Clock_EnableCrystal+0x48>)
1a002a7c:	4291      	cmp	r1, r2
1a002a7e:	d901      	bls.n	1a002a84 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a002a80:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a002a84:	4a04      	ldr	r2, [pc, #16]	; (1a002a98 <Chip_Clock_EnableCrystal+0x40>)
1a002a86:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a002a88:	9b01      	ldr	r3, [sp, #4]
1a002a8a:	1e5a      	subs	r2, r3, #1
1a002a8c:	9201      	str	r2, [sp, #4]
1a002a8e:	2b00      	cmp	r3, #0
1a002a90:	d1fa      	bne.n	1a002a88 <Chip_Clock_EnableCrystal+0x30>
}
1a002a92:	b002      	add	sp, #8
1a002a94:	4770      	bx	lr
1a002a96:	bf00      	nop
1a002a98:	40050000 	.word	0x40050000
1a002a9c:	1a003a24 	.word	0x1a003a24
1a002aa0:	01312cff 	.word	0x01312cff

1a002aa4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a002aa4:	3012      	adds	r0, #18
1a002aa6:	4b05      	ldr	r3, [pc, #20]	; (1a002abc <Chip_Clock_GetDividerSource+0x18>)
1a002aa8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a002aac:	f010 0f01 	tst.w	r0, #1
1a002ab0:	d102      	bne.n	1a002ab8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002ab2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002ab6:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a002ab8:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002aba:	4770      	bx	lr
1a002abc:	40050000 	.word	0x40050000

1a002ac0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a002ac0:	f100 0212 	add.w	r2, r0, #18
1a002ac4:	4b03      	ldr	r3, [pc, #12]	; (1a002ad4 <Chip_Clock_GetDividerDivisor+0x14>)
1a002ac6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a002aca:	4b03      	ldr	r3, [pc, #12]	; (1a002ad8 <Chip_Clock_GetDividerDivisor+0x18>)
1a002acc:	5c18      	ldrb	r0, [r3, r0]
}
1a002ace:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a002ad2:	4770      	bx	lr
1a002ad4:	40050000 	.word	0x40050000
1a002ad8:	1a003af8 	.word	0x1a003af8

1a002adc <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a002adc:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a002ade:	2810      	cmp	r0, #16
1a002ae0:	d80a      	bhi.n	1a002af8 <Chip_Clock_GetClockInputHz+0x1c>
1a002ae2:	e8df f000 	tbb	[pc, r0]
1a002ae6:	0b42      	.short	0x0b42
1a002ae8:	091f160d 	.word	0x091f160d
1a002aec:	2b282522 	.word	0x2b282522
1a002af0:	322e0909 	.word	0x322e0909
1a002af4:	3a36      	.short	0x3a36
1a002af6:	3e          	.byte	0x3e
1a002af7:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002af8:	2000      	movs	r0, #0
1a002afa:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a002afc:	481e      	ldr	r0, [pc, #120]	; (1a002b78 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a002afe:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002b00:	4b1e      	ldr	r3, [pc, #120]	; (1a002b7c <Chip_Clock_GetClockInputHz+0xa0>)
1a002b02:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b06:	f003 0307 	and.w	r3, r3, #7
1a002b0a:	2b04      	cmp	r3, #4
1a002b0c:	d130      	bne.n	1a002b70 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a002b0e:	2000      	movs	r0, #0
1a002b10:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a002b12:	4b1a      	ldr	r3, [pc, #104]	; (1a002b7c <Chip_Clock_GetClockInputHz+0xa0>)
1a002b14:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a002b18:	f003 0307 	and.w	r3, r3, #7
1a002b1c:	2b04      	cmp	r3, #4
1a002b1e:	d029      	beq.n	1a002b74 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a002b20:	4817      	ldr	r0, [pc, #92]	; (1a002b80 <Chip_Clock_GetClockInputHz+0xa4>)
1a002b22:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a002b24:	4b17      	ldr	r3, [pc, #92]	; (1a002b84 <Chip_Clock_GetClockInputHz+0xa8>)
1a002b26:	6818      	ldr	r0, [r3, #0]
		break;
1a002b28:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a002b2a:	4b17      	ldr	r3, [pc, #92]	; (1a002b88 <Chip_Clock_GetClockInputHz+0xac>)
1a002b2c:	6818      	ldr	r0, [r3, #0]
		break;
1a002b2e:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a002b30:	4b16      	ldr	r3, [pc, #88]	; (1a002b8c <Chip_Clock_GetClockInputHz+0xb0>)
1a002b32:	6818      	ldr	r0, [r3, #0]
		break;
1a002b34:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a002b36:	4b15      	ldr	r3, [pc, #84]	; (1a002b8c <Chip_Clock_GetClockInputHz+0xb0>)
1a002b38:	6858      	ldr	r0, [r3, #4]
		break;
1a002b3a:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a002b3c:	f000 f86a 	bl	1a002c14 <Chip_Clock_GetMainPLLHz>
		break;
1a002b40:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a002b42:	2100      	movs	r1, #0
1a002b44:	f000 f89a 	bl	1a002c7c <Chip_Clock_GetDivRate>
		break;
1a002b48:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a002b4a:	2101      	movs	r1, #1
1a002b4c:	f000 f896 	bl	1a002c7c <Chip_Clock_GetDivRate>
		break;
1a002b50:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a002b52:	2102      	movs	r1, #2
1a002b54:	f000 f892 	bl	1a002c7c <Chip_Clock_GetDivRate>
		break;
1a002b58:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a002b5a:	2103      	movs	r1, #3
1a002b5c:	f000 f88e 	bl	1a002c7c <Chip_Clock_GetDivRate>
		break;
1a002b60:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a002b62:	2104      	movs	r1, #4
1a002b64:	f000 f88a 	bl	1a002c7c <Chip_Clock_GetDivRate>
		break;
1a002b68:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a002b6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a002b6e:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a002b70:	4803      	ldr	r0, [pc, #12]	; (1a002b80 <Chip_Clock_GetClockInputHz+0xa4>)
1a002b72:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a002b74:	4806      	ldr	r0, [pc, #24]	; (1a002b90 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a002b76:	bd08      	pop	{r3, pc}
1a002b78:	00b71b00 	.word	0x00b71b00
1a002b7c:	40043000 	.word	0x40043000
1a002b80:	017d7840 	.word	0x017d7840
1a002b84:	1a003a28 	.word	0x1a003a28
1a002b88:	1a003a24 	.word	0x1a003a24
1a002b8c:	10000554 	.word	0x10000554
1a002b90:	02faf080 	.word	0x02faf080

1a002b94 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a002b94:	b538      	push	{r3, r4, r5, lr}
1a002b96:	4605      	mov	r5, r0
1a002b98:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a002b9a:	7908      	ldrb	r0, [r1, #4]
1a002b9c:	f7ff ff9e 	bl	1a002adc <Chip_Clock_GetClockInputHz>
1a002ba0:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a002ba2:	4b19      	ldr	r3, [pc, #100]	; (1a002c08 <Chip_Clock_CalcMainPLLValue+0x74>)
1a002ba4:	442b      	add	r3, r5
1a002ba6:	4a19      	ldr	r2, [pc, #100]	; (1a002c0c <Chip_Clock_CalcMainPLLValue+0x78>)
1a002ba8:	4293      	cmp	r3, r2
1a002baa:	d821      	bhi.n	1a002bf0 <Chip_Clock_CalcMainPLLValue+0x5c>
1a002bac:	b318      	cbz	r0, 1a002bf6 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a002bae:	2380      	movs	r3, #128	; 0x80
1a002bb0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a002bb2:	2300      	movs	r3, #0
1a002bb4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a002bb6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a002bb8:	fbb5 f3f0 	udiv	r3, r5, r0
1a002bbc:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a002bbe:	4a14      	ldr	r2, [pc, #80]	; (1a002c10 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a002bc0:	4295      	cmp	r5, r2
1a002bc2:	d903      	bls.n	1a002bcc <Chip_Clock_CalcMainPLLValue+0x38>
1a002bc4:	fb03 f000 	mul.w	r0, r3, r0
1a002bc8:	42a8      	cmp	r0, r5
1a002bca:	d007      	beq.n	1a002bdc <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a002bcc:	4628      	mov	r0, r5
1a002bce:	4621      	mov	r1, r4
1a002bd0:	f7ff fe9c 	bl	1a00290c <pll_get_frac>
		if (!ppll->nsel) {
1a002bd4:	68a3      	ldr	r3, [r4, #8]
1a002bd6:	b18b      	cbz	r3, 1a002bfc <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a002bd8:	3b01      	subs	r3, #1
1a002bda:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a002bdc:	6923      	ldr	r3, [r4, #16]
1a002bde:	b183      	cbz	r3, 1a002c02 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a002be0:	68e2      	ldr	r2, [r4, #12]
1a002be2:	b10a      	cbz	r2, 1a002be8 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a002be4:	3a01      	subs	r2, #1
1a002be6:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a002be8:	3b01      	subs	r3, #1
1a002bea:	6123      	str	r3, [r4, #16]

	return 0;
1a002bec:	2000      	movs	r0, #0
1a002bee:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a002bf0:	f04f 30ff 	mov.w	r0, #4294967295
1a002bf4:	bd38      	pop	{r3, r4, r5, pc}
1a002bf6:	f04f 30ff 	mov.w	r0, #4294967295
1a002bfa:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a002bfc:	f04f 30ff 	mov.w	r0, #4294967295
1a002c00:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a002c02:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a002c06:	bd38      	pop	{r3, r4, r5, pc}
1a002c08:	ff6b3a10 	.word	0xff6b3a10
1a002c0c:	0b940510 	.word	0x0b940510
1a002c10:	094c5eff 	.word	0x094c5eff

1a002c14 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a002c14:	b570      	push	{r4, r5, r6, lr}
1a002c16:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a002c18:	4d16      	ldr	r5, [pc, #88]	; (1a002c74 <Chip_Clock_GetMainPLLHz+0x60>)
1a002c1a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a002c1c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a002c20:	f7ff ff5c 	bl	1a002adc <Chip_Clock_GetClockInputHz>
1a002c24:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a002c26:	4b14      	ldr	r3, [pc, #80]	; (1a002c78 <Chip_Clock_GetMainPLLHz+0x64>)
1a002c28:	6818      	ldr	r0, [r3, #0]
1a002c2a:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a002c2c:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a002c2e:	f010 0001 	ands.w	r0, r0, #1
1a002c32:	d01d      	beq.n	1a002c70 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a002c34:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a002c38:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a002c3c:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a002c40:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a002c44:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a002c46:	3201      	adds	r2, #1
	p = ptab[psel];
1a002c48:	a802      	add	r0, sp, #8
1a002c4a:	4401      	add	r1, r0
1a002c4c:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a002c50:	f014 0f80 	tst.w	r4, #128	; 0x80
1a002c54:	d100      	bne.n	1a002c58 <Chip_Clock_GetMainPLLHz+0x44>
1a002c56:	b125      	cbz	r5, 1a002c62 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a002c58:	fbb6 f0f2 	udiv	r0, r6, r2
1a002c5c:	fb03 f000 	mul.w	r0, r3, r0
1a002c60:	e006      	b.n	1a002c70 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a002c62:	0040      	lsls	r0, r0, #1
1a002c64:	fbb3 f3f0 	udiv	r3, r3, r0
1a002c68:	fbb6 f0f2 	udiv	r0, r6, r2
1a002c6c:	fb00 f003 	mul.w	r0, r0, r3
}
1a002c70:	b002      	add	sp, #8
1a002c72:	bd70      	pop	{r4, r5, r6, pc}
1a002c74:	40050000 	.word	0x40050000
1a002c78:	1a003af4 	.word	0x1a003af4

1a002c7c <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a002c7c:	b538      	push	{r3, r4, r5, lr}
1a002c7e:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a002c80:	4608      	mov	r0, r1
1a002c82:	f7ff ff0f 	bl	1a002aa4 <Chip_Clock_GetDividerSource>
1a002c86:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a002c88:	4620      	mov	r0, r4
1a002c8a:	f7ff ff19 	bl	1a002ac0 <Chip_Clock_GetDividerDivisor>
1a002c8e:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a002c90:	4628      	mov	r0, r5
1a002c92:	f7ff ff23 	bl	1a002adc <Chip_Clock_GetClockInputHz>
1a002c96:	3401      	adds	r4, #1
}
1a002c98:	fbb0 f0f4 	udiv	r0, r0, r4
1a002c9c:	bd38      	pop	{r3, r4, r5, pc}
1a002c9e:	bf00      	nop

1a002ca0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a002ca0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ca2:	0085      	lsls	r5, r0, #2
1a002ca4:	4c0d      	ldr	r4, [pc, #52]	; (1a002cdc <Chip_Clock_SetBaseClock+0x3c>)
1a002ca6:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a002ca8:	281b      	cmp	r0, #27
1a002caa:	d80f      	bhi.n	1a002ccc <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a002cac:	2911      	cmp	r1, #17
1a002cae:	d012      	beq.n	1a002cd6 <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a002cb0:	4c0b      	ldr	r4, [pc, #44]	; (1a002ce0 <Chip_Clock_SetBaseClock+0x40>)
1a002cb2:	402c      	ands	r4, r5

			if (autoblocken) {
1a002cb4:	b10a      	cbz	r2, 1a002cba <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a002cb6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a002cba:	b10b      	cbz	r3, 1a002cc0 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a002cbc:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a002cc0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a002cc4:	0080      	lsls	r0, r0, #2
1a002cc6:	4b05      	ldr	r3, [pc, #20]	; (1a002cdc <Chip_Clock_SetBaseClock+0x3c>)
1a002cc8:	501c      	str	r4, [r3, r0]
1a002cca:	e004      	b.n	1a002cd6 <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a002ccc:	f045 0501 	orr.w	r5, r5, #1
1a002cd0:	0080      	lsls	r0, r0, #2
1a002cd2:	4b02      	ldr	r3, [pc, #8]	; (1a002cdc <Chip_Clock_SetBaseClock+0x3c>)
1a002cd4:	501d      	str	r5, [r3, r0]
	}
}
1a002cd6:	bc30      	pop	{r4, r5}
1a002cd8:	4770      	bx	lr
1a002cda:	bf00      	nop
1a002cdc:	4005005c 	.word	0x4005005c
1a002ce0:	e0fff7fe 	.word	0xe0fff7fe

1a002ce4 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a002ce4:	281b      	cmp	r0, #27
1a002ce6:	d808      	bhi.n	1a002cfa <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a002ce8:	0080      	lsls	r0, r0, #2
1a002cea:	4b06      	ldr	r3, [pc, #24]	; (1a002d04 <Chip_Clock_GetBaseClock+0x20>)
1a002cec:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a002cee:	f010 0f01 	tst.w	r0, #1
1a002cf2:	d104      	bne.n	1a002cfe <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a002cf4:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a002cf8:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a002cfa:	2011      	movs	r0, #17
1a002cfc:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a002cfe:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a002d00:	4770      	bx	lr
1a002d02:	bf00      	nop
1a002d04:	4005005c 	.word	0x4005005c

1a002d08 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a002d08:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a002d0a:	f7ff ffeb 	bl	1a002ce4 <Chip_Clock_GetBaseClock>
1a002d0e:	f7ff fee5 	bl	1a002adc <Chip_Clock_GetClockInputHz>
}
1a002d12:	bd08      	pop	{r3, pc}

1a002d14 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a002d14:	b909      	cbnz	r1, 1a002d1a <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a002d16:	2101      	movs	r1, #1
1a002d18:	e000      	b.n	1a002d1c <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a002d1a:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a002d1c:	b10a      	cbz	r2, 1a002d22 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a002d1e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a002d22:	2b02      	cmp	r3, #2
1a002d24:	d101      	bne.n	1a002d2a <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a002d26:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a002d2a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d2e:	d305      	bcc.n	1a002d3c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a002d30:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d34:	4b04      	ldr	r3, [pc, #16]	; (1a002d48 <Chip_Clock_EnableOpts+0x34>)
1a002d36:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002d3a:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a002d3c:	3020      	adds	r0, #32
1a002d3e:	4b03      	ldr	r3, [pc, #12]	; (1a002d4c <Chip_Clock_EnableOpts+0x38>)
1a002d40:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a002d44:	4770      	bx	lr
1a002d46:	bf00      	nop
1a002d48:	40052000 	.word	0x40052000
1a002d4c:	40051000 	.word	0x40051000

1a002d50 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a002d50:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d54:	d309      	bcc.n	1a002d6a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a002d56:	4a09      	ldr	r2, [pc, #36]	; (1a002d7c <Chip_Clock_Enable+0x2c>)
1a002d58:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a002d5c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d60:	f043 0301 	orr.w	r3, r3, #1
1a002d64:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002d68:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a002d6a:	4a05      	ldr	r2, [pc, #20]	; (1a002d80 <Chip_Clock_Enable+0x30>)
1a002d6c:	3020      	adds	r0, #32
1a002d6e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a002d72:	f043 0301 	orr.w	r3, r3, #1
1a002d76:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a002d7a:	4770      	bx	lr
1a002d7c:	40052000 	.word	0x40052000
1a002d80:	40051000 	.word	0x40051000

1a002d84 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a002d84:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a002d86:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a002d8a:	d305      	bcc.n	1a002d98 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a002d8c:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a002d90:	4a0d      	ldr	r2, [pc, #52]	; (1a002dc8 <Chip_Clock_GetRate+0x44>)
1a002d92:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a002d96:	e004      	b.n	1a002da2 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a002d98:	f100 0320 	add.w	r3, r0, #32
1a002d9c:	4a0b      	ldr	r2, [pc, #44]	; (1a002dcc <Chip_Clock_GetRate+0x48>)
1a002d9e:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a002da2:	f014 0f01 	tst.w	r4, #1
1a002da6:	d00c      	beq.n	1a002dc2 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a002da8:	f7ff fe32 	bl	1a002a10 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a002dac:	f7ff ffac 	bl	1a002d08 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a002db0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a002db4:	d101      	bne.n	1a002dba <Chip_Clock_GetRate+0x36>
			div = 1;
1a002db6:	2301      	movs	r3, #1
1a002db8:	e000      	b.n	1a002dbc <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a002dba:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a002dbc:	fbb0 f0f3 	udiv	r0, r0, r3
1a002dc0:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a002dc2:	2000      	movs	r0, #0
	}

	return rate;
}
1a002dc4:	bd10      	pop	{r4, pc}
1a002dc6:	bf00      	nop
1a002dc8:	40052000 	.word	0x40052000
1a002dcc:	40051000 	.word	0x40051000

1a002dd0 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a002dd0:	b570      	push	{r4, r5, r6, lr}
1a002dd2:	b08a      	sub	sp, #40	; 0x28
1a002dd4:	4605      	mov	r5, r0
1a002dd6:	460e      	mov	r6, r1
1a002dd8:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a002dda:	f242 7310 	movw	r3, #10000	; 0x2710
1a002dde:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a002de0:	2806      	cmp	r0, #6
1a002de2:	d101      	bne.n	1a002de8 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a002de4:	f7ff fe38 	bl	1a002a58 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a002de8:	2004      	movs	r0, #4
1a002dea:	4629      	mov	r1, r5
1a002dec:	2201      	movs	r2, #1
1a002dee:	2300      	movs	r3, #0
1a002df0:	f7ff ff56 	bl	1a002ca0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a002df4:	4a47      	ldr	r2, [pc, #284]	; (1a002f14 <Chip_SetupCoreClock+0x144>)
1a002df6:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a002df8:	f043 0301 	orr.w	r3, r3, #1
1a002dfc:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a002dfe:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a002e02:	4630      	mov	r0, r6
1a002e04:	a901      	add	r1, sp, #4
1a002e06:	f7ff fec5 	bl	1a002b94 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a002e0a:	4b43      	ldr	r3, [pc, #268]	; (1a002f18 <Chip_SetupCoreClock+0x148>)
1a002e0c:	429e      	cmp	r6, r3
1a002e0e:	d913      	bls.n	1a002e38 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a002e10:	9b01      	ldr	r3, [sp, #4]
1a002e12:	f013 0f40 	tst.w	r3, #64	; 0x40
1a002e16:	d000      	beq.n	1a002e1a <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a002e18:	e7fe      	b.n	1a002e18 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a002e1a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002e1e:	d005      	beq.n	1a002e2c <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a002e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a002e24:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a002e26:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a002e28:	2601      	movs	r6, #1
1a002e2a:	e007      	b.n	1a002e3c <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a002e2c:	9b04      	ldr	r3, [sp, #16]
1a002e2e:	3301      	adds	r3, #1
1a002e30:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a002e32:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a002e34:	2600      	movs	r6, #0
1a002e36:	e001      	b.n	1a002e3c <Chip_SetupCoreClock+0x6c>
1a002e38:	2500      	movs	r5, #0
1a002e3a:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002e3c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002e40:	9b01      	ldr	r3, [sp, #4]
1a002e42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002e46:	9a05      	ldr	r2, [sp, #20]
1a002e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002e4c:	9a03      	ldr	r2, [sp, #12]
1a002e4e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002e52:	9a04      	ldr	r2, [sp, #16]
1a002e54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002e58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002e5c:	4a2d      	ldr	r2, [pc, #180]	; (1a002f14 <Chip_SetupCoreClock+0x144>)
1a002e5e:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a002e60:	4b2c      	ldr	r3, [pc, #176]	; (1a002f14 <Chip_SetupCoreClock+0x144>)
1a002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a002e64:	f013 0f01 	tst.w	r3, #1
1a002e68:	d0fa      	beq.n	1a002e60 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a002e6a:	2004      	movs	r0, #4
1a002e6c:	2109      	movs	r1, #9
1a002e6e:	2201      	movs	r2, #1
1a002e70:	2300      	movs	r3, #0
1a002e72:	f7ff ff15 	bl	1a002ca0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a002e76:	b1ee      	cbz	r6, 1a002eb4 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002e78:	f242 7310 	movw	r3, #10000	; 0x2710
1a002e7c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a002e7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002e80:	1e5a      	subs	r2, r3, #1
1a002e82:	9209      	str	r2, [sp, #36]	; 0x24
1a002e84:	2b00      	cmp	r3, #0
1a002e86:	d1fa      	bne.n	1a002e7e <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a002e88:	9b01      	ldr	r3, [sp, #4]
1a002e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002e8e:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a002e90:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002e94:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a002e98:	9a05      	ldr	r2, [sp, #20]
1a002e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a002e9e:	9a03      	ldr	r2, [sp, #12]
1a002ea0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a002ea4:	9a04      	ldr	r2, [sp, #16]
1a002ea6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a002eaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002eae:	4a19      	ldr	r2, [pc, #100]	; (1a002f14 <Chip_SetupCoreClock+0x144>)
1a002eb0:	6453      	str	r3, [r2, #68]	; 0x44
1a002eb2:	e01c      	b.n	1a002eee <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a002eb4:	b1dd      	cbz	r5, 1a002eee <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a002eb6:	f242 7310 	movw	r3, #10000	; 0x2710
1a002eba:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a002ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002ebe:	1e5a      	subs	r2, r3, #1
1a002ec0:	9209      	str	r2, [sp, #36]	; 0x24
1a002ec2:	2b00      	cmp	r3, #0
1a002ec4:	d1fa      	bne.n	1a002ebc <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a002ec6:	9b04      	ldr	r3, [sp, #16]
1a002ec8:	1e59      	subs	r1, r3, #1
1a002eca:	9104      	str	r1, [sp, #16]
1a002ecc:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a002ed0:	9b01      	ldr	r3, [sp, #4]
1a002ed2:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a002ed6:	9b05      	ldr	r3, [sp, #20]
1a002ed8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a002edc:	9b03      	ldr	r3, [sp, #12]
1a002ede:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a002ee2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a002ee6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a002eea:	4a0a      	ldr	r2, [pc, #40]	; (1a002f14 <Chip_SetupCoreClock+0x144>)
1a002eec:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a002eee:	b964      	cbnz	r4, 1a002f0a <Chip_SetupCoreClock+0x13a>
1a002ef0:	e00e      	b.n	1a002f10 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a002ef2:	4a0a      	ldr	r2, [pc, #40]	; (1a002f1c <Chip_SetupCoreClock+0x14c>)
1a002ef4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a002ef8:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a002efc:	7859      	ldrb	r1, [r3, #1]
1a002efe:	789a      	ldrb	r2, [r3, #2]
1a002f00:	78db      	ldrb	r3, [r3, #3]
1a002f02:	f7ff fecd 	bl	1a002ca0 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a002f06:	3401      	adds	r4, #1
1a002f08:	e000      	b.n	1a002f0c <Chip_SetupCoreClock+0x13c>
1a002f0a:	2400      	movs	r4, #0
1a002f0c:	2c11      	cmp	r4, #17
1a002f0e:	d9f0      	bls.n	1a002ef2 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a002f10:	b00a      	add	sp, #40	; 0x28
1a002f12:	bd70      	pop	{r4, r5, r6, pc}
1a002f14:	40050000 	.word	0x40050000
1a002f18:	068e7780 	.word	0x068e7780
1a002f1c:	1a003b6c 	.word	0x1a003b6c

1a002f20 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a002f20:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a002f22:	4b10      	ldr	r3, [pc, #64]	; (1a002f64 <fpuInit+0x44>)
1a002f24:	681b      	ldr	r3, [r3, #0]
1a002f26:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a002f28:	4b0f      	ldr	r3, [pc, #60]	; (1a002f68 <fpuInit+0x48>)
1a002f2a:	681b      	ldr	r3, [r3, #0]
1a002f2c:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a002f2e:	9a02      	ldr	r2, [sp, #8]
1a002f30:	4b0e      	ldr	r3, [pc, #56]	; (1a002f6c <fpuInit+0x4c>)
1a002f32:	429a      	cmp	r2, r3
1a002f34:	d105      	bne.n	1a002f42 <fpuInit+0x22>
1a002f36:	9a01      	ldr	r2, [sp, #4]
1a002f38:	4b0d      	ldr	r3, [pc, #52]	; (1a002f70 <fpuInit+0x50>)
1a002f3a:	429a      	cmp	r2, r3
1a002f3c:	d003      	beq.n	1a002f46 <fpuInit+0x26>
1a002f3e:	2300      	movs	r3, #0
1a002f40:	e002      	b.n	1a002f48 <fpuInit+0x28>
1a002f42:	2300      	movs	r3, #0
1a002f44:	e000      	b.n	1a002f48 <fpuInit+0x28>
1a002f46:	2301      	movs	r3, #1

	if (vfpPresent) {
1a002f48:	f013 0fff 	tst.w	r3, #255	; 0xff
1a002f4c:	d008      	beq.n	1a002f60 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a002f4e:	4a09      	ldr	r2, [pc, #36]	; (1a002f74 <fpuInit+0x54>)
1a002f50:	6813      	ldr	r3, [r2, #0]
1a002f52:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a002f54:	9b03      	ldr	r3, [sp, #12]
1a002f56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a002f5a:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a002f5c:	9b03      	ldr	r3, [sp, #12]
1a002f5e:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a002f60:	b004      	add	sp, #16
1a002f62:	4770      	bx	lr
1a002f64:	e000ef40 	.word	0xe000ef40
1a002f68:	e000ef44 	.word	0xe000ef44
1a002f6c:	10110021 	.word	0x10110021
1a002f70:	11000011 	.word	0x11000011
1a002f74:	e000ed88 	.word	0xe000ed88

1a002f78 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a002f78:	4770      	bx	lr
1a002f7a:	bf00      	nop

1a002f7c <SSP_Write2BFifo>:
 * Private functions
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a002f7c:	680b      	ldr	r3, [r1, #0]
1a002f7e:	b11b      	cbz	r3, 1a002f88 <SSP_Write2BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
												 xf_setup->tx_cnt)));
1a002f80:	684a      	ldr	r2, [r1, #4]
 ****************************************************************************/

STATIC void SSP_Write2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
		Chip_SSP_SendFrame(pSSP, (*(uint16_t *) ((uint32_t) xf_setup->tx_data +
1a002f82:	5a9b      	ldrh	r3, [r3, r2]
 * @param	tx_data	: SSP 16-bit data to be transmited
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_SendFrame(LPC_SSP_T *pSSP, uint16_t tx_data)
{
	pSSP->DR = SSP_DR_BITMASK(tx_data);
1a002f84:	6083      	str	r3, [r0, #8]
1a002f86:	e002      	b.n	1a002f8e <SSP_Write2BFifo+0x12>
1a002f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002f8c:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFFFF);
	}

	xf_setup->tx_cnt += 2;
1a002f8e:	684b      	ldr	r3, [r1, #4]
1a002f90:	3302      	adds	r3, #2
1a002f92:	604b      	str	r3, [r1, #4]
1a002f94:	4770      	bx	lr
1a002f96:	bf00      	nop

1a002f98 <SSP_Write1BFifo>:
}

/** SSP macro: write 1 bytes to FIFO buffer */
STATIC void SSP_Write1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	if (xf_setup->tx_data) {
1a002f98:	680b      	ldr	r3, [r1, #0]
1a002f9a:	b11b      	cbz	r3, 1a002fa4 <SSP_Write1BFifo+0xc>
		Chip_SSP_SendFrame(pSSP, (*(uint8_t *) ((uint32_t) xf_setup->tx_data + xf_setup->tx_cnt)));
1a002f9c:	684a      	ldr	r2, [r1, #4]
1a002f9e:	5c9b      	ldrb	r3, [r3, r2]
1a002fa0:	6083      	str	r3, [r0, #8]
1a002fa2:	e001      	b.n	1a002fa8 <SSP_Write1BFifo+0x10>
1a002fa4:	23ff      	movs	r3, #255	; 0xff
1a002fa6:	6083      	str	r3, [r0, #8]
	}
	else {
		Chip_SSP_SendFrame(pSSP, 0xFF);
	}

	xf_setup->tx_cnt++;
1a002fa8:	684b      	ldr	r3, [r1, #4]
1a002faa:	3301      	adds	r3, #1
1a002fac:	604b      	str	r3, [r1, #4]
1a002fae:	4770      	bx	lr

1a002fb0 <SSP_Read2BFifo>:
}

/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a002fb0:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002fb2:	e007      	b.n	1a002fc4 <SSP_Read2BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002fb4:	6883      	ldr	r3, [r0, #8]
1a002fb6:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a002fb8:	688c      	ldr	r4, [r1, #8]
1a002fba:	b104      	cbz	r4, 1a002fbe <SSP_Read2BFifo+0xe>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a002fbc:	5313      	strh	r3, [r2, r4]
		}

		xf_setup->rx_cnt += 2;
1a002fbe:	68cb      	ldr	r3, [r1, #12]
1a002fc0:	3302      	adds	r3, #2
1a002fc2:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a002fc4:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002fc6:	f013 0f04 	tst.w	r3, #4
1a002fca:	d003      	beq.n	1a002fd4 <SSP_Read2BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002fcc:	68ca      	ldr	r2, [r1, #12]
1a002fce:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 1 bytes from FIFO buffer */
STATIC void SSP_Read2BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002fd0:	429a      	cmp	r2, r3
1a002fd2:	d3ef      	bcc.n	1a002fb4 <SSP_Read2BFifo+0x4>
			*(uint16_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt += 2;
	}
}
1a002fd4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002fd8:	4770      	bx	lr
1a002fda:	bf00      	nop

1a002fdc <SSP_Read1BFifo>:

/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a002fdc:	b410      	push	{r4}
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002fde:	e007      	b.n	1a002ff0 <SSP_Read1BFifo+0x14>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a002fe0:	6883      	ldr	r3, [r0, #8]
1a002fe2:	b29b      	uxth	r3, r3
		   (xf_setup->rx_cnt < xf_setup->length)) {
		rDat = Chip_SSP_ReceiveFrame(pSSP);
		if (xf_setup->rx_data) {
1a002fe4:	688c      	ldr	r4, [r1, #8]
1a002fe6:	b104      	cbz	r4, 1a002fea <SSP_Read1BFifo+0xe>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
1a002fe8:	5513      	strb	r3, [r2, r4]
		}

		xf_setup->rx_cnt++;
1a002fea:	68cb      	ldr	r3, [r1, #12]
1a002fec:	3301      	adds	r3, #1
1a002fee:	60cb      	str	r3, [r1, #12]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a002ff0:	68c3      	ldr	r3, [r0, #12]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002ff2:	f013 0f04 	tst.w	r3, #4
1a002ff6:	d003      	beq.n	1a003000 <SSP_Read1BFifo+0x24>
		   (xf_setup->rx_cnt < xf_setup->length)) {
1a002ff8:	68ca      	ldr	r2, [r1, #12]
1a002ffa:	690b      	ldr	r3, [r1, #16]
/** SSP macro: read 2 bytes from FIFO buffer */
STATIC void SSP_Read1BFifo(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
	uint16_t rDat;

	while ((Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE) == SET) &&
1a002ffc:	429a      	cmp	r2, r3
1a002ffe:	d3ef      	bcc.n	1a002fe0 <SSP_Read1BFifo+0x4>
			*(uint8_t *) ((uint32_t) xf_setup->rx_data + xf_setup->rx_cnt) = rDat;
		}

		xf_setup->rx_cnt++;
	}
}
1a003000:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003004:	4770      	bx	lr
1a003006:	bf00      	nop

1a003008 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003008:	4b03      	ldr	r3, [pc, #12]	; (1a003018 <Chip_SSP_GetClockIndex+0x10>)
1a00300a:	4298      	cmp	r0, r3
1a00300c:	d101      	bne.n	1a003012 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00300e:	20a5      	movs	r0, #165	; 0xa5
1a003010:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003012:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003014:	4770      	bx	lr
1a003016:	bf00      	nop
1a003018:	400c5000 	.word	0x400c5000

1a00301c <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a00301c:	4b04      	ldr	r3, [pc, #16]	; (1a003030 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00301e:	4298      	cmp	r0, r3
1a003020:	d102      	bne.n	1a003028 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a003022:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003026:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003028:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00302c:	4770      	bx	lr
1a00302e:	bf00      	nop
1a003030:	400c5000 	.word	0x400c5000

1a003034 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003034:	6803      	ldr	r3, [r0, #0]
1a003036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a00303a:	0209      	lsls	r1, r1, #8
1a00303c:	b289      	uxth	r1, r1
1a00303e:	430b      	orrs	r3, r1
1a003040:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a003042:	6102      	str	r2, [r0, #16]
1a003044:	4770      	bx	lr
1a003046:	bf00      	nop

1a003048 <Chip_SSP_RWFrames_Blocking>:
}

/* SSP Polling Read/Write in blocking mode */
uint32_t Chip_SSP_RWFrames_Blocking(LPC_SSP_T *pSSP, Chip_SSP_DATA_SETUP_T *xf_setup)
{
1a003048:	b538      	push	{r3, r4, r5, lr}
1a00304a:	4604      	mov	r4, r0
1a00304c:	460d      	mov	r5, r1
	/* Clear all remaining frames in RX FIFO */
	while (Chip_SSP_GetStatus(pSSP, SSP_STAT_RNE)) {
1a00304e:	e000      	b.n	1a003052 <Chip_SSP_RWFrames_Blocking+0xa>
 * @param	pSSP	: The base of SSP peripheral on the chip
 * @return	 SSP 16-bit data received
 */
STATIC INLINE uint16_t Chip_SSP_ReceiveFrame(LPC_SSP_T *pSSP)
{
	return (uint16_t) (SSP_DR_BITMASK(pSSP->DR));
1a003050:	68a3      	ldr	r3, [r4, #8]
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a003052:	68e3      	ldr	r3, [r4, #12]
1a003054:	f013 0f04 	tst.w	r3, #4
1a003058:	d1fa      	bne.n	1a003050 <Chip_SSP_RWFrames_Blocking+0x8>
 * @return	 Nothing
 * @note	Software can clear one or more interrupt condition(s) in the SSP controller
 */
STATIC INLINE void Chip_SSP_ClearIntPending(LPC_SSP_T *pSSP, SSP_INTCLEAR_T IntClear)
{
	pSSP->ICR = IntClear;
1a00305a:	2303      	movs	r3, #3
1a00305c:	6223      	str	r3, [r4, #32]
 * @return	 the number of bits transferred in each frame minus one
 * @note	The return value is 0x03 -> 0xF corresponding to 4bit -> 16bit transfer
 */
STATIC INLINE uint8_t Chip_SSP_GetDataSize(LPC_SSP_T *pSSP)
{
	return SSP_CR0_DSS(pSSP->CR0);
1a00305e:	6823      	ldr	r3, [r4, #0]
1a003060:	f003 030f 	and.w	r3, r3, #15
	}

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
1a003064:	2b07      	cmp	r3, #7
1a003066:	d815      	bhi.n	1a003094 <Chip_SSP_RWFrames_Blocking+0x4c>
1a003068:	e031      	b.n	1a0030ce <Chip_SSP_RWFrames_Blocking+0x86>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a00306a:	68e2      	ldr	r2, [r4, #12]
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a00306c:	f012 0f02 	tst.w	r2, #2
1a003070:	d006      	beq.n	1a003080 <Chip_SSP_RWFrames_Blocking+0x38>
1a003072:	686a      	ldr	r2, [r5, #4]
1a003074:	4293      	cmp	r3, r2
1a003076:	d903      	bls.n	1a003080 <Chip_SSP_RWFrames_Blocking+0x38>
				SSP_Write2BFifo(pSSP, xf_setup);
1a003078:	4620      	mov	r0, r4
1a00307a:	4629      	mov	r1, r5
1a00307c:	f7ff ff7e 	bl	1a002f7c <SSP_Write2BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a003080:	69a3      	ldr	r3, [r4, #24]
1a003082:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a003086:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00308a:	d12f      	bne.n	1a0030ec <Chip_SSP_RWFrames_Blocking+0xa4>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
1a00308c:	4620      	mov	r0, r4
1a00308e:	4629      	mov	r1, r5
1a003090:	f7ff ff8e 	bl	1a002fb0 <SSP_Read2BFifo>

	/* Clear status */
	Chip_SSP_ClearIntPending(pSSP, SSP_INT_CLEAR_BITMASK);

	if (Chip_SSP_GetDataSize(pSSP) > SSP_BITS_8) {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a003094:	68ea      	ldr	r2, [r5, #12]
1a003096:	692b      	ldr	r3, [r5, #16]
1a003098:	429a      	cmp	r2, r3
1a00309a:	d3e6      	bcc.n	1a00306a <Chip_SSP_RWFrames_Blocking+0x22>
1a00309c:	686a      	ldr	r2, [r5, #4]
1a00309e:	4293      	cmp	r3, r2
1a0030a0:	d8e3      	bhi.n	1a00306a <Chip_SSP_RWFrames_Blocking+0x22>
1a0030a2:	e01b      	b.n	1a0030dc <Chip_SSP_RWFrames_Blocking+0x94>
 *						- SSP_STAT_BSY
 * @return	 SSP controller status, SET or RESET
 */
STATIC INLINE FlagStatus Chip_SSP_GetStatus(LPC_SSP_T *pSSP, SSP_STATUS_T Stat)
{
	return (pSSP->SR & Stat) ? SET : RESET;
1a0030a4:	68e2      	ldr	r2, [r4, #12]
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
			/* write data to buffer */
			if (( Chip_SSP_GetStatus(pSSP, SSP_STAT_TNF) == SET) && ( xf_setup->tx_cnt < xf_setup->length) ) {
1a0030a6:	f012 0f02 	tst.w	r2, #2
1a0030aa:	d006      	beq.n	1a0030ba <Chip_SSP_RWFrames_Blocking+0x72>
1a0030ac:	686a      	ldr	r2, [r5, #4]
1a0030ae:	4293      	cmp	r3, r2
1a0030b0:	d903      	bls.n	1a0030ba <Chip_SSP_RWFrames_Blocking+0x72>
				SSP_Write1BFifo(pSSP, xf_setup);
1a0030b2:	4620      	mov	r0, r4
1a0030b4:	4629      	mov	r1, r5
1a0030b6:	f7ff ff6f 	bl	1a002f98 <SSP_Write1BFifo>
 * @return	 Raw interrupt status corresponding to interrupt condition , SET or RESET
 * @note	Get the status of each interrupt condition ,regardless of whether or not the interrupt is enabled
 */
STATIC INLINE IntStatus Chip_SSP_GetRawIntStatus(LPC_SSP_T *pSSP, SSP_RAWINTSTATUS_T RawInt)
{
	return (pSSP->RIS & RawInt) ? SET : RESET;
1a0030ba:	69a3      	ldr	r3, [r4, #24]
1a0030bc:	f003 0301 	and.w	r3, r3, #1
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
1a0030c0:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0030c4:	d114      	bne.n	1a0030f0 <Chip_SSP_RWFrames_Blocking+0xa8>
				return ERROR;
			}

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
1a0030c6:	4620      	mov	r0, r4
1a0030c8:	4629      	mov	r1, r5
1a0030ca:	f7ff ff87 	bl	1a002fdc <SSP_Read1BFifo>
			/* Check for any data available in RX FIFO */
			SSP_Read2BFifo(pSSP, xf_setup);
		}
	}
	else {
		while (xf_setup->rx_cnt < xf_setup->length || xf_setup->tx_cnt < xf_setup->length) {
1a0030ce:	68ea      	ldr	r2, [r5, #12]
1a0030d0:	692b      	ldr	r3, [r5, #16]
1a0030d2:	429a      	cmp	r2, r3
1a0030d4:	d3e6      	bcc.n	1a0030a4 <Chip_SSP_RWFrames_Blocking+0x5c>
1a0030d6:	686a      	ldr	r2, [r5, #4]
1a0030d8:	4293      	cmp	r3, r2
1a0030da:	d8e3      	bhi.n	1a0030a4 <Chip_SSP_RWFrames_Blocking+0x5c>

			/* Check for any data available in RX FIFO */
			SSP_Read1BFifo(pSSP, xf_setup);
		}
	}
	if (xf_setup->tx_data) {
1a0030dc:	682b      	ldr	r3, [r5, #0]
1a0030de:	b10b      	cbz	r3, 1a0030e4 <Chip_SSP_RWFrames_Blocking+0x9c>
		return xf_setup->tx_cnt;
1a0030e0:	6868      	ldr	r0, [r5, #4]
1a0030e2:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
1a0030e4:	68ab      	ldr	r3, [r5, #8]
1a0030e6:	b12b      	cbz	r3, 1a0030f4 <Chip_SSP_RWFrames_Blocking+0xac>
		return xf_setup->rx_cnt;
1a0030e8:	68e8      	ldr	r0, [r5, #12]
1a0030ea:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write2BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a0030ec:	2000      	movs	r0, #0
1a0030ee:	bd38      	pop	{r3, r4, r5, pc}
				SSP_Write1BFifo(pSSP, xf_setup);
			}

			/* Check overrun error */
			if (Chip_SSP_GetRawIntStatus(pSSP, SSP_RORRIS) == SET) {
				return ERROR;
1a0030f0:	2000      	movs	r0, #0
1a0030f2:	bd38      	pop	{r3, r4, r5, pc}
	}
	else if (xf_setup->rx_data) {
		return xf_setup->rx_cnt;
	}

	return 0;
1a0030f4:	2000      	movs	r0, #0
}
1a0030f6:	bd38      	pop	{r3, r4, r5, pc}

1a0030f8 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0030f8:	b570      	push	{r4, r5, r6, lr}
1a0030fa:	4606      	mov	r6, r0
1a0030fc:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0030fe:	f7ff ff8d 	bl	1a00301c <Chip_SSP_GetPeriphClockIndex>
1a003102:	f7ff fe3f 	bl	1a002d84 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003106:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a003108:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a00310c:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00310e:	e00c      	b.n	1a00312a <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003110:	1c4c      	adds	r4, r1, #1
1a003112:	fb02 f304 	mul.w	r3, r2, r4
1a003116:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a00311a:	42ab      	cmp	r3, r5
1a00311c:	d905      	bls.n	1a00312a <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00311e:	2cff      	cmp	r4, #255	; 0xff
1a003120:	d902      	bls.n	1a003128 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a003122:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a003124:	2100      	movs	r1, #0
1a003126:	e000      	b.n	1a00312a <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003128:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00312a:	42ab      	cmp	r3, r5
1a00312c:	d8f0      	bhi.n	1a003110 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00312e:	4630      	mov	r0, r6
1a003130:	f7ff ff80 	bl	1a003034 <Chip_SSP_SetClockRate>
1a003134:	bd70      	pop	{r4, r5, r6, pc}
1a003136:	bf00      	nop

1a003138 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003138:	b510      	push	{r4, lr}
1a00313a:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a00313c:	f7ff ff64 	bl	1a003008 <Chip_SSP_GetClockIndex>
1a003140:	f7ff fe06 	bl	1a002d50 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003144:	4620      	mov	r0, r4
1a003146:	f7ff ff69 	bl	1a00301c <Chip_SSP_GetPeriphClockIndex>
1a00314a:	f7ff fe01 	bl	1a002d50 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a00314e:	6863      	ldr	r3, [r4, #4]
1a003150:	f023 0304 	bic.w	r3, r3, #4
1a003154:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003156:	6823      	ldr	r3, [r4, #0]
1a003158:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a00315c:	f043 0307 	orr.w	r3, r3, #7
1a003160:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003162:	4620      	mov	r0, r4
1a003164:	4901      	ldr	r1, [pc, #4]	; (1a00316c <Chip_SSP_Init+0x34>)
1a003166:	f7ff ffc7 	bl	1a0030f8 <Chip_SSP_SetBitRate>
1a00316a:	bd10      	pop	{r4, pc}
1a00316c:	000186a0 	.word	0x000186a0

1a003170 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003170:	2901      	cmp	r1, #1
1a003172:	d109      	bne.n	1a003188 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a003174:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003178:	0080      	lsls	r0, r0, #2
1a00317a:	4b04      	ldr	r3, [pc, #16]	; (1a00318c <Chip_I2C_EventHandler+0x1c>)
1a00317c:	4418      	add	r0, r3
1a00317e:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a003180:	7d13      	ldrb	r3, [r2, #20]
1a003182:	b2db      	uxtb	r3, r3
1a003184:	2b04      	cmp	r3, #4
1a003186:	d0fb      	beq.n	1a003180 <Chip_I2C_EventHandler+0x10>
1a003188:	4770      	bx	lr
1a00318a:	bf00      	nop
1a00318c:	10000094 	.word	0x10000094

1a003190 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003190:	b570      	push	{r4, r5, r6, lr}
1a003192:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a003194:	4e06      	ldr	r6, [pc, #24]	; (1a0031b0 <Chip_I2C_Init+0x20>)
1a003196:	00c4      	lsls	r4, r0, #3
1a003198:	1a23      	subs	r3, r4, r0
1a00319a:	009b      	lsls	r3, r3, #2
1a00319c:	4433      	add	r3, r6
1a00319e:	8898      	ldrh	r0, [r3, #4]
1a0031a0:	f7ff fdd6 	bl	1a002d50 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a0031a4:	1b60      	subs	r0, r4, r5
1a0031a6:	0080      	lsls	r0, r0, #2
1a0031a8:	5833      	ldr	r3, [r6, r0]
1a0031aa:	226c      	movs	r2, #108	; 0x6c
1a0031ac:	619a      	str	r2, [r3, #24]
1a0031ae:	bd70      	pop	{r4, r5, r6, pc}
1a0031b0:	10000094 	.word	0x10000094

1a0031b4 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a0031b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0031b8:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a0031ba:	4f09      	ldr	r7, [pc, #36]	; (1a0031e0 <Chip_I2C_SetClockRate+0x2c>)
1a0031bc:	00c5      	lsls	r5, r0, #3
1a0031be:	1a2e      	subs	r6, r5, r0
1a0031c0:	00b6      	lsls	r6, r6, #2
1a0031c2:	19bb      	adds	r3, r7, r6
1a0031c4:	8898      	ldrh	r0, [r3, #4]
1a0031c6:	f7ff fddd 	bl	1a002d84 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a0031ca:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a0031ce:	59bb      	ldr	r3, [r7, r6]
1a0031d0:	0842      	lsrs	r2, r0, #1
1a0031d2:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a0031d4:	59bb      	ldr	r3, [r7, r6]
1a0031d6:	691a      	ldr	r2, [r3, #16]
1a0031d8:	1a80      	subs	r0, r0, r2
1a0031da:	6158      	str	r0, [r3, #20]
1a0031dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0031e0:	10000094 	.word	0x10000094

1a0031e4 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a0031e4:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0031e6:	4a18      	ldr	r2, [pc, #96]	; (1a003248 <ResetISR+0x64>)
1a0031e8:	4b18      	ldr	r3, [pc, #96]	; (1a00324c <ResetISR+0x68>)
1a0031ea:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0031ec:	4a18      	ldr	r2, [pc, #96]	; (1a003250 <ResetISR+0x6c>)
1a0031ee:	3304      	adds	r3, #4
1a0031f0:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0031f2:	2300      	movs	r3, #0
1a0031f4:	e005      	b.n	1a003202 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0031f6:	f04f 31ff 	mov.w	r1, #4294967295
1a0031fa:	4a16      	ldr	r2, [pc, #88]	; (1a003254 <ResetISR+0x70>)
1a0031fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a003200:	3301      	adds	r3, #1
1a003202:	2b07      	cmp	r3, #7
1a003204:	d9f7      	bls.n	1a0031f6 <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a003206:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a003208:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a00320a:	f7ff f9a9 	bl	1a002560 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a00320e:	4b12      	ldr	r3, [pc, #72]	; (1a003258 <ResetISR+0x74>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a003210:	e007      	b.n	1a003222 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003212:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a003216:	6818      	ldr	r0, [r3, #0]
1a003218:	6859      	ldr	r1, [r3, #4]
1a00321a:	689a      	ldr	r2, [r3, #8]
1a00321c:	f7fc ffc6 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003220:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a003222:	4a0e      	ldr	r2, [pc, #56]	; (1a00325c <ResetISR+0x78>)
1a003224:	4293      	cmp	r3, r2
1a003226:	d3f4      	bcc.n	1a003212 <ResetISR+0x2e>
1a003228:	e006      	b.n	1a003238 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a00322a:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a00322c:	f854 0b08 	ldr.w	r0, [r4], #8
1a003230:	6859      	ldr	r1, [r3, #4]
1a003232:	f7fc ffc9 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a003236:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a003238:	4a09      	ldr	r2, [pc, #36]	; (1a003260 <ResetISR+0x7c>)
1a00323a:	4293      	cmp	r3, r2
1a00323c:	d3f5      	bcc.n	1a00322a <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a00323e:	f000 fae1 	bl	1a003804 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    main();
1a003242:	f7fd f861 	bl	1a000308 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a003246:	e7fe      	b.n	1a003246 <ResetISR+0x62>
1a003248:	10df1000 	.word	0x10df1000
1a00324c:	40053100 	.word	0x40053100
1a003250:	01dff7ff 	.word	0x01dff7ff
1a003254:	e000e280 	.word	0xe000e280
1a003258:	1a000114 	.word	0x1a000114
1a00325c:	1a000150 	.word	0x1a000150
1a003260:	1a000178 	.word	0x1a000178

1a003264 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a003264:	4770      	bx	lr
1a003266:	bf00      	nop

1a003268 <__aeabi_uldivmod>:
1a003268:	b953      	cbnz	r3, 1a003280 <__aeabi_uldivmod+0x18>
1a00326a:	b94a      	cbnz	r2, 1a003280 <__aeabi_uldivmod+0x18>
1a00326c:	2900      	cmp	r1, #0
1a00326e:	bf08      	it	eq
1a003270:	2800      	cmpeq	r0, #0
1a003272:	bf1c      	itt	ne
1a003274:	f04f 31ff 	movne.w	r1, #4294967295
1a003278:	f04f 30ff 	movne.w	r0, #4294967295
1a00327c:	f000 b83c 	b.w	1a0032f8 <__aeabi_idiv0>
1a003280:	b082      	sub	sp, #8
1a003282:	46ec      	mov	ip, sp
1a003284:	e92d 5000 	stmdb	sp!, {ip, lr}
1a003288:	f000 f81e 	bl	1a0032c8 <__gnu_uldivmod_helper>
1a00328c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a003290:	b002      	add	sp, #8
1a003292:	bc0c      	pop	{r2, r3}
1a003294:	4770      	bx	lr
1a003296:	bf00      	nop

1a003298 <__gnu_ldivmod_helper>:
1a003298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00329c:	9c06      	ldr	r4, [sp, #24]
1a00329e:	4615      	mov	r5, r2
1a0032a0:	4606      	mov	r6, r0
1a0032a2:	460f      	mov	r7, r1
1a0032a4:	4698      	mov	r8, r3
1a0032a6:	f000 f829 	bl	1a0032fc <__divdi3>
1a0032aa:	fb05 f301 	mul.w	r3, r5, r1
1a0032ae:	fb00 3808 	mla	r8, r0, r8, r3
1a0032b2:	fba5 2300 	umull	r2, r3, r5, r0
1a0032b6:	1ab2      	subs	r2, r6, r2
1a0032b8:	4443      	add	r3, r8
1a0032ba:	eb67 0303 	sbc.w	r3, r7, r3
1a0032be:	e9c4 2300 	strd	r2, r3, [r4]
1a0032c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0032c6:	bf00      	nop

1a0032c8 <__gnu_uldivmod_helper>:
1a0032c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0032cc:	9c06      	ldr	r4, [sp, #24]
1a0032ce:	4690      	mov	r8, r2
1a0032d0:	4606      	mov	r6, r0
1a0032d2:	460f      	mov	r7, r1
1a0032d4:	461d      	mov	r5, r3
1a0032d6:	f000 f95f 	bl	1a003598 <__udivdi3>
1a0032da:	fb00 f505 	mul.w	r5, r0, r5
1a0032de:	fba0 2308 	umull	r2, r3, r0, r8
1a0032e2:	fb08 5501 	mla	r5, r8, r1, r5
1a0032e6:	1ab2      	subs	r2, r6, r2
1a0032e8:	442b      	add	r3, r5
1a0032ea:	eb67 0303 	sbc.w	r3, r7, r3
1a0032ee:	e9c4 2300 	strd	r2, r3, [r4]
1a0032f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0032f6:	bf00      	nop

1a0032f8 <__aeabi_idiv0>:
1a0032f8:	4770      	bx	lr
1a0032fa:	bf00      	nop

1a0032fc <__divdi3>:
1a0032fc:	2900      	cmp	r1, #0
1a0032fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a003302:	f2c0 80a6 	blt.w	1a003452 <__divdi3+0x156>
1a003306:	2600      	movs	r6, #0
1a003308:	2b00      	cmp	r3, #0
1a00330a:	f2c0 809c 	blt.w	1a003446 <__divdi3+0x14a>
1a00330e:	4688      	mov	r8, r1
1a003310:	4694      	mov	ip, r2
1a003312:	469e      	mov	lr, r3
1a003314:	4615      	mov	r5, r2
1a003316:	4604      	mov	r4, r0
1a003318:	460f      	mov	r7, r1
1a00331a:	2b00      	cmp	r3, #0
1a00331c:	d13d      	bne.n	1a00339a <__divdi3+0x9e>
1a00331e:	428a      	cmp	r2, r1
1a003320:	d959      	bls.n	1a0033d6 <__divdi3+0xda>
1a003322:	fab2 f382 	clz	r3, r2
1a003326:	b13b      	cbz	r3, 1a003338 <__divdi3+0x3c>
1a003328:	f1c3 0220 	rsb	r2, r3, #32
1a00332c:	409f      	lsls	r7, r3
1a00332e:	fa20 f202 	lsr.w	r2, r0, r2
1a003332:	409d      	lsls	r5, r3
1a003334:	4317      	orrs	r7, r2
1a003336:	409c      	lsls	r4, r3
1a003338:	0c29      	lsrs	r1, r5, #16
1a00333a:	0c22      	lsrs	r2, r4, #16
1a00333c:	fbb7 fef1 	udiv	lr, r7, r1
1a003340:	b2a8      	uxth	r0, r5
1a003342:	fb01 771e 	mls	r7, r1, lr, r7
1a003346:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a00334a:	fb00 f30e 	mul.w	r3, r0, lr
1a00334e:	42bb      	cmp	r3, r7
1a003350:	d90a      	bls.n	1a003368 <__divdi3+0x6c>
1a003352:	197f      	adds	r7, r7, r5
1a003354:	f10e 32ff 	add.w	r2, lr, #4294967295
1a003358:	f080 8105 	bcs.w	1a003566 <__divdi3+0x26a>
1a00335c:	42bb      	cmp	r3, r7
1a00335e:	f240 8102 	bls.w	1a003566 <__divdi3+0x26a>
1a003362:	f1ae 0e02 	sub.w	lr, lr, #2
1a003366:	442f      	add	r7, r5
1a003368:	1aff      	subs	r7, r7, r3
1a00336a:	b2a4      	uxth	r4, r4
1a00336c:	fbb7 f3f1 	udiv	r3, r7, r1
1a003370:	fb01 7713 	mls	r7, r1, r3, r7
1a003374:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003378:	fb00 f003 	mul.w	r0, r0, r3
1a00337c:	42b8      	cmp	r0, r7
1a00337e:	d908      	bls.n	1a003392 <__divdi3+0x96>
1a003380:	197f      	adds	r7, r7, r5
1a003382:	f103 32ff 	add.w	r2, r3, #4294967295
1a003386:	f080 80f0 	bcs.w	1a00356a <__divdi3+0x26e>
1a00338a:	42b8      	cmp	r0, r7
1a00338c:	f240 80ed 	bls.w	1a00356a <__divdi3+0x26e>
1a003390:	3b02      	subs	r3, #2
1a003392:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a003396:	2200      	movs	r2, #0
1a003398:	e003      	b.n	1a0033a2 <__divdi3+0xa6>
1a00339a:	428b      	cmp	r3, r1
1a00339c:	d90f      	bls.n	1a0033be <__divdi3+0xc2>
1a00339e:	2200      	movs	r2, #0
1a0033a0:	4613      	mov	r3, r2
1a0033a2:	1c34      	adds	r4, r6, #0
1a0033a4:	bf18      	it	ne
1a0033a6:	2401      	movne	r4, #1
1a0033a8:	4260      	negs	r0, r4
1a0033aa:	f04f 0500 	mov.w	r5, #0
1a0033ae:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a0033b2:	4058      	eors	r0, r3
1a0033b4:	4051      	eors	r1, r2
1a0033b6:	1900      	adds	r0, r0, r4
1a0033b8:	4169      	adcs	r1, r5
1a0033ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0033be:	fab3 f283 	clz	r2, r3
1a0033c2:	2a00      	cmp	r2, #0
1a0033c4:	f040 8086 	bne.w	1a0034d4 <__divdi3+0x1d8>
1a0033c8:	428b      	cmp	r3, r1
1a0033ca:	d302      	bcc.n	1a0033d2 <__divdi3+0xd6>
1a0033cc:	4584      	cmp	ip, r0
1a0033ce:	f200 80db 	bhi.w	1a003588 <__divdi3+0x28c>
1a0033d2:	2301      	movs	r3, #1
1a0033d4:	e7e5      	b.n	1a0033a2 <__divdi3+0xa6>
1a0033d6:	b912      	cbnz	r2, 1a0033de <__divdi3+0xe2>
1a0033d8:	2301      	movs	r3, #1
1a0033da:	fbb3 f5f2 	udiv	r5, r3, r2
1a0033de:	fab5 f085 	clz	r0, r5
1a0033e2:	2800      	cmp	r0, #0
1a0033e4:	d13b      	bne.n	1a00345e <__divdi3+0x162>
1a0033e6:	1b78      	subs	r0, r7, r5
1a0033e8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0033ec:	fa1f fc85 	uxth.w	ip, r5
1a0033f0:	2201      	movs	r2, #1
1a0033f2:	fbb0 f8fe 	udiv	r8, r0, lr
1a0033f6:	0c21      	lsrs	r1, r4, #16
1a0033f8:	fb0e 0718 	mls	r7, lr, r8, r0
1a0033fc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a003400:	fb0c f308 	mul.w	r3, ip, r8
1a003404:	42bb      	cmp	r3, r7
1a003406:	d907      	bls.n	1a003418 <__divdi3+0x11c>
1a003408:	197f      	adds	r7, r7, r5
1a00340a:	f108 31ff 	add.w	r1, r8, #4294967295
1a00340e:	d202      	bcs.n	1a003416 <__divdi3+0x11a>
1a003410:	42bb      	cmp	r3, r7
1a003412:	f200 80bd 	bhi.w	1a003590 <__divdi3+0x294>
1a003416:	4688      	mov	r8, r1
1a003418:	1aff      	subs	r7, r7, r3
1a00341a:	b2a4      	uxth	r4, r4
1a00341c:	fbb7 f3fe 	udiv	r3, r7, lr
1a003420:	fb0e 7713 	mls	r7, lr, r3, r7
1a003424:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a003428:	fb0c fc03 	mul.w	ip, ip, r3
1a00342c:	45bc      	cmp	ip, r7
1a00342e:	d907      	bls.n	1a003440 <__divdi3+0x144>
1a003430:	197f      	adds	r7, r7, r5
1a003432:	f103 31ff 	add.w	r1, r3, #4294967295
1a003436:	d202      	bcs.n	1a00343e <__divdi3+0x142>
1a003438:	45bc      	cmp	ip, r7
1a00343a:	f200 80a7 	bhi.w	1a00358c <__divdi3+0x290>
1a00343e:	460b      	mov	r3, r1
1a003440:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003444:	e7ad      	b.n	1a0033a2 <__divdi3+0xa6>
1a003446:	4252      	negs	r2, r2
1a003448:	ea6f 0606 	mvn.w	r6, r6
1a00344c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a003450:	e75d      	b.n	1a00330e <__divdi3+0x12>
1a003452:	4240      	negs	r0, r0
1a003454:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a003458:	f04f 36ff 	mov.w	r6, #4294967295
1a00345c:	e754      	b.n	1a003308 <__divdi3+0xc>
1a00345e:	f1c0 0220 	rsb	r2, r0, #32
1a003462:	fa24 f102 	lsr.w	r1, r4, r2
1a003466:	fa07 f300 	lsl.w	r3, r7, r0
1a00346a:	4085      	lsls	r5, r0
1a00346c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003470:	40d7      	lsrs	r7, r2
1a003472:	4319      	orrs	r1, r3
1a003474:	fbb7 f2fe 	udiv	r2, r7, lr
1a003478:	0c0b      	lsrs	r3, r1, #16
1a00347a:	fb0e 7712 	mls	r7, lr, r2, r7
1a00347e:	fa1f fc85 	uxth.w	ip, r5
1a003482:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a003486:	fb0c f702 	mul.w	r7, ip, r2
1a00348a:	429f      	cmp	r7, r3
1a00348c:	fa04 f400 	lsl.w	r4, r4, r0
1a003490:	d907      	bls.n	1a0034a2 <__divdi3+0x1a6>
1a003492:	195b      	adds	r3, r3, r5
1a003494:	f102 30ff 	add.w	r0, r2, #4294967295
1a003498:	d274      	bcs.n	1a003584 <__divdi3+0x288>
1a00349a:	429f      	cmp	r7, r3
1a00349c:	d972      	bls.n	1a003584 <__divdi3+0x288>
1a00349e:	3a02      	subs	r2, #2
1a0034a0:	442b      	add	r3, r5
1a0034a2:	1bdf      	subs	r7, r3, r7
1a0034a4:	b289      	uxth	r1, r1
1a0034a6:	fbb7 f8fe 	udiv	r8, r7, lr
1a0034aa:	fb0e 7318 	mls	r3, lr, r8, r7
1a0034ae:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a0034b2:	fb0c f708 	mul.w	r7, ip, r8
1a0034b6:	429f      	cmp	r7, r3
1a0034b8:	d908      	bls.n	1a0034cc <__divdi3+0x1d0>
1a0034ba:	195b      	adds	r3, r3, r5
1a0034bc:	f108 31ff 	add.w	r1, r8, #4294967295
1a0034c0:	d25c      	bcs.n	1a00357c <__divdi3+0x280>
1a0034c2:	429f      	cmp	r7, r3
1a0034c4:	d95a      	bls.n	1a00357c <__divdi3+0x280>
1a0034c6:	f1a8 0802 	sub.w	r8, r8, #2
1a0034ca:	442b      	add	r3, r5
1a0034cc:	1bd8      	subs	r0, r3, r7
1a0034ce:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a0034d2:	e78e      	b.n	1a0033f2 <__divdi3+0xf6>
1a0034d4:	f1c2 0320 	rsb	r3, r2, #32
1a0034d8:	fa2c f103 	lsr.w	r1, ip, r3
1a0034dc:	fa0e fe02 	lsl.w	lr, lr, r2
1a0034e0:	fa20 f703 	lsr.w	r7, r0, r3
1a0034e4:	ea41 0e0e 	orr.w	lr, r1, lr
1a0034e8:	fa08 f002 	lsl.w	r0, r8, r2
1a0034ec:	fa28 f103 	lsr.w	r1, r8, r3
1a0034f0:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a0034f4:	4338      	orrs	r0, r7
1a0034f6:	fbb1 f8f5 	udiv	r8, r1, r5
1a0034fa:	0c03      	lsrs	r3, r0, #16
1a0034fc:	fb05 1118 	mls	r1, r5, r8, r1
1a003500:	fa1f f78e 	uxth.w	r7, lr
1a003504:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003508:	fb07 f308 	mul.w	r3, r7, r8
1a00350c:	428b      	cmp	r3, r1
1a00350e:	fa0c fc02 	lsl.w	ip, ip, r2
1a003512:	d909      	bls.n	1a003528 <__divdi3+0x22c>
1a003514:	eb11 010e 	adds.w	r1, r1, lr
1a003518:	f108 39ff 	add.w	r9, r8, #4294967295
1a00351c:	d230      	bcs.n	1a003580 <__divdi3+0x284>
1a00351e:	428b      	cmp	r3, r1
1a003520:	d92e      	bls.n	1a003580 <__divdi3+0x284>
1a003522:	f1a8 0802 	sub.w	r8, r8, #2
1a003526:	4471      	add	r1, lr
1a003528:	1ac9      	subs	r1, r1, r3
1a00352a:	b280      	uxth	r0, r0
1a00352c:	fbb1 f3f5 	udiv	r3, r1, r5
1a003530:	fb05 1113 	mls	r1, r5, r3, r1
1a003534:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a003538:	fb07 f703 	mul.w	r7, r7, r3
1a00353c:	428f      	cmp	r7, r1
1a00353e:	d908      	bls.n	1a003552 <__divdi3+0x256>
1a003540:	eb11 010e 	adds.w	r1, r1, lr
1a003544:	f103 30ff 	add.w	r0, r3, #4294967295
1a003548:	d216      	bcs.n	1a003578 <__divdi3+0x27c>
1a00354a:	428f      	cmp	r7, r1
1a00354c:	d914      	bls.n	1a003578 <__divdi3+0x27c>
1a00354e:	3b02      	subs	r3, #2
1a003550:	4471      	add	r1, lr
1a003552:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a003556:	1bc9      	subs	r1, r1, r7
1a003558:	fba3 890c 	umull	r8, r9, r3, ip
1a00355c:	4549      	cmp	r1, r9
1a00355e:	d309      	bcc.n	1a003574 <__divdi3+0x278>
1a003560:	d005      	beq.n	1a00356e <__divdi3+0x272>
1a003562:	2200      	movs	r2, #0
1a003564:	e71d      	b.n	1a0033a2 <__divdi3+0xa6>
1a003566:	4696      	mov	lr, r2
1a003568:	e6fe      	b.n	1a003368 <__divdi3+0x6c>
1a00356a:	4613      	mov	r3, r2
1a00356c:	e711      	b.n	1a003392 <__divdi3+0x96>
1a00356e:	4094      	lsls	r4, r2
1a003570:	4544      	cmp	r4, r8
1a003572:	d2f6      	bcs.n	1a003562 <__divdi3+0x266>
1a003574:	3b01      	subs	r3, #1
1a003576:	e7f4      	b.n	1a003562 <__divdi3+0x266>
1a003578:	4603      	mov	r3, r0
1a00357a:	e7ea      	b.n	1a003552 <__divdi3+0x256>
1a00357c:	4688      	mov	r8, r1
1a00357e:	e7a5      	b.n	1a0034cc <__divdi3+0x1d0>
1a003580:	46c8      	mov	r8, r9
1a003582:	e7d1      	b.n	1a003528 <__divdi3+0x22c>
1a003584:	4602      	mov	r2, r0
1a003586:	e78c      	b.n	1a0034a2 <__divdi3+0x1a6>
1a003588:	4613      	mov	r3, r2
1a00358a:	e70a      	b.n	1a0033a2 <__divdi3+0xa6>
1a00358c:	3b02      	subs	r3, #2
1a00358e:	e757      	b.n	1a003440 <__divdi3+0x144>
1a003590:	f1a8 0802 	sub.w	r8, r8, #2
1a003594:	442f      	add	r7, r5
1a003596:	e73f      	b.n	1a003418 <__divdi3+0x11c>

1a003598 <__udivdi3>:
1a003598:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00359c:	2b00      	cmp	r3, #0
1a00359e:	d144      	bne.n	1a00362a <__udivdi3+0x92>
1a0035a0:	428a      	cmp	r2, r1
1a0035a2:	4615      	mov	r5, r2
1a0035a4:	4604      	mov	r4, r0
1a0035a6:	d94f      	bls.n	1a003648 <__udivdi3+0xb0>
1a0035a8:	fab2 f782 	clz	r7, r2
1a0035ac:	460e      	mov	r6, r1
1a0035ae:	b14f      	cbz	r7, 1a0035c4 <__udivdi3+0x2c>
1a0035b0:	f1c7 0320 	rsb	r3, r7, #32
1a0035b4:	40b9      	lsls	r1, r7
1a0035b6:	fa20 f603 	lsr.w	r6, r0, r3
1a0035ba:	fa02 f507 	lsl.w	r5, r2, r7
1a0035be:	430e      	orrs	r6, r1
1a0035c0:	fa00 f407 	lsl.w	r4, r0, r7
1a0035c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0035c8:	0c23      	lsrs	r3, r4, #16
1a0035ca:	fbb6 f0fe 	udiv	r0, r6, lr
1a0035ce:	b2af      	uxth	r7, r5
1a0035d0:	fb0e 6110 	mls	r1, lr, r0, r6
1a0035d4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a0035d8:	fb07 f100 	mul.w	r1, r7, r0
1a0035dc:	4299      	cmp	r1, r3
1a0035de:	d909      	bls.n	1a0035f4 <__udivdi3+0x5c>
1a0035e0:	195b      	adds	r3, r3, r5
1a0035e2:	f100 32ff 	add.w	r2, r0, #4294967295
1a0035e6:	f080 80ec 	bcs.w	1a0037c2 <__udivdi3+0x22a>
1a0035ea:	4299      	cmp	r1, r3
1a0035ec:	f240 80e9 	bls.w	1a0037c2 <__udivdi3+0x22a>
1a0035f0:	3802      	subs	r0, #2
1a0035f2:	442b      	add	r3, r5
1a0035f4:	1a5a      	subs	r2, r3, r1
1a0035f6:	b2a4      	uxth	r4, r4
1a0035f8:	fbb2 f3fe 	udiv	r3, r2, lr
1a0035fc:	fb0e 2213 	mls	r2, lr, r3, r2
1a003600:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a003604:	fb07 f703 	mul.w	r7, r7, r3
1a003608:	4297      	cmp	r7, r2
1a00360a:	d908      	bls.n	1a00361e <__udivdi3+0x86>
1a00360c:	1952      	adds	r2, r2, r5
1a00360e:	f103 31ff 	add.w	r1, r3, #4294967295
1a003612:	f080 80d8 	bcs.w	1a0037c6 <__udivdi3+0x22e>
1a003616:	4297      	cmp	r7, r2
1a003618:	f240 80d5 	bls.w	1a0037c6 <__udivdi3+0x22e>
1a00361c:	3b02      	subs	r3, #2
1a00361e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a003622:	2600      	movs	r6, #0
1a003624:	4631      	mov	r1, r6
1a003626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00362a:	428b      	cmp	r3, r1
1a00362c:	d847      	bhi.n	1a0036be <__udivdi3+0x126>
1a00362e:	fab3 f683 	clz	r6, r3
1a003632:	2e00      	cmp	r6, #0
1a003634:	d148      	bne.n	1a0036c8 <__udivdi3+0x130>
1a003636:	428b      	cmp	r3, r1
1a003638:	d302      	bcc.n	1a003640 <__udivdi3+0xa8>
1a00363a:	4282      	cmp	r2, r0
1a00363c:	f200 80cd 	bhi.w	1a0037da <__udivdi3+0x242>
1a003640:	2001      	movs	r0, #1
1a003642:	4631      	mov	r1, r6
1a003644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003648:	b912      	cbnz	r2, 1a003650 <__udivdi3+0xb8>
1a00364a:	2501      	movs	r5, #1
1a00364c:	fbb5 f5f2 	udiv	r5, r5, r2
1a003650:	fab5 f885 	clz	r8, r5
1a003654:	f1b8 0f00 	cmp.w	r8, #0
1a003658:	d177      	bne.n	1a00374a <__udivdi3+0x1b2>
1a00365a:	1b4a      	subs	r2, r1, r5
1a00365c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003660:	b2af      	uxth	r7, r5
1a003662:	2601      	movs	r6, #1
1a003664:	fbb2 f0fe 	udiv	r0, r2, lr
1a003668:	0c23      	lsrs	r3, r4, #16
1a00366a:	fb0e 2110 	mls	r1, lr, r0, r2
1a00366e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a003672:	fb07 f300 	mul.w	r3, r7, r0
1a003676:	428b      	cmp	r3, r1
1a003678:	d907      	bls.n	1a00368a <__udivdi3+0xf2>
1a00367a:	1949      	adds	r1, r1, r5
1a00367c:	f100 32ff 	add.w	r2, r0, #4294967295
1a003680:	d202      	bcs.n	1a003688 <__udivdi3+0xf0>
1a003682:	428b      	cmp	r3, r1
1a003684:	f200 80ba 	bhi.w	1a0037fc <__udivdi3+0x264>
1a003688:	4610      	mov	r0, r2
1a00368a:	1ac9      	subs	r1, r1, r3
1a00368c:	b2a4      	uxth	r4, r4
1a00368e:	fbb1 f3fe 	udiv	r3, r1, lr
1a003692:	fb0e 1113 	mls	r1, lr, r3, r1
1a003696:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a00369a:	fb07 f703 	mul.w	r7, r7, r3
1a00369e:	42a7      	cmp	r7, r4
1a0036a0:	d908      	bls.n	1a0036b4 <__udivdi3+0x11c>
1a0036a2:	1964      	adds	r4, r4, r5
1a0036a4:	f103 32ff 	add.w	r2, r3, #4294967295
1a0036a8:	f080 808f 	bcs.w	1a0037ca <__udivdi3+0x232>
1a0036ac:	42a7      	cmp	r7, r4
1a0036ae:	f240 808c 	bls.w	1a0037ca <__udivdi3+0x232>
1a0036b2:	3b02      	subs	r3, #2
1a0036b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0036b8:	4631      	mov	r1, r6
1a0036ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0036be:	2600      	movs	r6, #0
1a0036c0:	4630      	mov	r0, r6
1a0036c2:	4631      	mov	r1, r6
1a0036c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0036c8:	f1c6 0420 	rsb	r4, r6, #32
1a0036cc:	fa22 f504 	lsr.w	r5, r2, r4
1a0036d0:	40b3      	lsls	r3, r6
1a0036d2:	432b      	orrs	r3, r5
1a0036d4:	fa20 fc04 	lsr.w	ip, r0, r4
1a0036d8:	fa01 f706 	lsl.w	r7, r1, r6
1a0036dc:	fa21 f504 	lsr.w	r5, r1, r4
1a0036e0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a0036e4:	ea4c 0707 	orr.w	r7, ip, r7
1a0036e8:	fbb5 f8fe 	udiv	r8, r5, lr
1a0036ec:	0c39      	lsrs	r1, r7, #16
1a0036ee:	fb0e 5518 	mls	r5, lr, r8, r5
1a0036f2:	fa1f fc83 	uxth.w	ip, r3
1a0036f6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a0036fa:	fb0c f108 	mul.w	r1, ip, r8
1a0036fe:	42a9      	cmp	r1, r5
1a003700:	fa02 f206 	lsl.w	r2, r2, r6
1a003704:	d904      	bls.n	1a003710 <__udivdi3+0x178>
1a003706:	18ed      	adds	r5, r5, r3
1a003708:	f108 34ff 	add.w	r4, r8, #4294967295
1a00370c:	d367      	bcc.n	1a0037de <__udivdi3+0x246>
1a00370e:	46a0      	mov	r8, r4
1a003710:	1a6d      	subs	r5, r5, r1
1a003712:	b2bf      	uxth	r7, r7
1a003714:	fbb5 f4fe 	udiv	r4, r5, lr
1a003718:	fb0e 5514 	mls	r5, lr, r4, r5
1a00371c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a003720:	fb0c fc04 	mul.w	ip, ip, r4
1a003724:	458c      	cmp	ip, r1
1a003726:	d904      	bls.n	1a003732 <__udivdi3+0x19a>
1a003728:	18c9      	adds	r1, r1, r3
1a00372a:	f104 35ff 	add.w	r5, r4, #4294967295
1a00372e:	d35c      	bcc.n	1a0037ea <__udivdi3+0x252>
1a003730:	462c      	mov	r4, r5
1a003732:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a003736:	ebcc 0101 	rsb	r1, ip, r1
1a00373a:	fba4 2302 	umull	r2, r3, r4, r2
1a00373e:	4299      	cmp	r1, r3
1a003740:	d348      	bcc.n	1a0037d4 <__udivdi3+0x23c>
1a003742:	d044      	beq.n	1a0037ce <__udivdi3+0x236>
1a003744:	4620      	mov	r0, r4
1a003746:	2600      	movs	r6, #0
1a003748:	e76c      	b.n	1a003624 <__udivdi3+0x8c>
1a00374a:	f1c8 0420 	rsb	r4, r8, #32
1a00374e:	fa01 f308 	lsl.w	r3, r1, r8
1a003752:	fa05 f508 	lsl.w	r5, r5, r8
1a003756:	fa20 f704 	lsr.w	r7, r0, r4
1a00375a:	40e1      	lsrs	r1, r4
1a00375c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a003760:	431f      	orrs	r7, r3
1a003762:	fbb1 f6fe 	udiv	r6, r1, lr
1a003766:	0c3a      	lsrs	r2, r7, #16
1a003768:	fb0e 1116 	mls	r1, lr, r6, r1
1a00376c:	fa1f fc85 	uxth.w	ip, r5
1a003770:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a003774:	fb0c f206 	mul.w	r2, ip, r6
1a003778:	429a      	cmp	r2, r3
1a00377a:	fa00 f408 	lsl.w	r4, r0, r8
1a00377e:	d907      	bls.n	1a003790 <__udivdi3+0x1f8>
1a003780:	195b      	adds	r3, r3, r5
1a003782:	f106 31ff 	add.w	r1, r6, #4294967295
1a003786:	d237      	bcs.n	1a0037f8 <__udivdi3+0x260>
1a003788:	429a      	cmp	r2, r3
1a00378a:	d935      	bls.n	1a0037f8 <__udivdi3+0x260>
1a00378c:	3e02      	subs	r6, #2
1a00378e:	442b      	add	r3, r5
1a003790:	1a9b      	subs	r3, r3, r2
1a003792:	b2bf      	uxth	r7, r7
1a003794:	fbb3 f0fe 	udiv	r0, r3, lr
1a003798:	fb0e 3310 	mls	r3, lr, r0, r3
1a00379c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a0037a0:	fb0c f100 	mul.w	r1, ip, r0
1a0037a4:	4299      	cmp	r1, r3
1a0037a6:	d907      	bls.n	1a0037b8 <__udivdi3+0x220>
1a0037a8:	195b      	adds	r3, r3, r5
1a0037aa:	f100 32ff 	add.w	r2, r0, #4294967295
1a0037ae:	d221      	bcs.n	1a0037f4 <__udivdi3+0x25c>
1a0037b0:	4299      	cmp	r1, r3
1a0037b2:	d91f      	bls.n	1a0037f4 <__udivdi3+0x25c>
1a0037b4:	3802      	subs	r0, #2
1a0037b6:	442b      	add	r3, r5
1a0037b8:	1a5a      	subs	r2, r3, r1
1a0037ba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0037be:	4667      	mov	r7, ip
1a0037c0:	e750      	b.n	1a003664 <__udivdi3+0xcc>
1a0037c2:	4610      	mov	r0, r2
1a0037c4:	e716      	b.n	1a0035f4 <__udivdi3+0x5c>
1a0037c6:	460b      	mov	r3, r1
1a0037c8:	e729      	b.n	1a00361e <__udivdi3+0x86>
1a0037ca:	4613      	mov	r3, r2
1a0037cc:	e772      	b.n	1a0036b4 <__udivdi3+0x11c>
1a0037ce:	40b0      	lsls	r0, r6
1a0037d0:	4290      	cmp	r0, r2
1a0037d2:	d2b7      	bcs.n	1a003744 <__udivdi3+0x1ac>
1a0037d4:	1e60      	subs	r0, r4, #1
1a0037d6:	2600      	movs	r6, #0
1a0037d8:	e724      	b.n	1a003624 <__udivdi3+0x8c>
1a0037da:	4630      	mov	r0, r6
1a0037dc:	e722      	b.n	1a003624 <__udivdi3+0x8c>
1a0037de:	42a9      	cmp	r1, r5
1a0037e0:	d995      	bls.n	1a00370e <__udivdi3+0x176>
1a0037e2:	f1a8 0802 	sub.w	r8, r8, #2
1a0037e6:	441d      	add	r5, r3
1a0037e8:	e792      	b.n	1a003710 <__udivdi3+0x178>
1a0037ea:	458c      	cmp	ip, r1
1a0037ec:	d9a0      	bls.n	1a003730 <__udivdi3+0x198>
1a0037ee:	3c02      	subs	r4, #2
1a0037f0:	4419      	add	r1, r3
1a0037f2:	e79e      	b.n	1a003732 <__udivdi3+0x19a>
1a0037f4:	4610      	mov	r0, r2
1a0037f6:	e7df      	b.n	1a0037b8 <__udivdi3+0x220>
1a0037f8:	460e      	mov	r6, r1
1a0037fa:	e7c9      	b.n	1a003790 <__udivdi3+0x1f8>
1a0037fc:	3802      	subs	r0, #2
1a0037fe:	4429      	add	r1, r5
1a003800:	e743      	b.n	1a00368a <__udivdi3+0xf2>
1a003802:	bf00      	nop

1a003804 <__libc_init_array>:
1a003804:	b570      	push	{r4, r5, r6, lr}
1a003806:	4b0e      	ldr	r3, [pc, #56]	; (1a003840 <__libc_init_array+0x3c>)
1a003808:	4c0e      	ldr	r4, [pc, #56]	; (1a003844 <__libc_init_array+0x40>)
1a00380a:	1ae4      	subs	r4, r4, r3
1a00380c:	10a4      	asrs	r4, r4, #2
1a00380e:	2500      	movs	r5, #0
1a003810:	461e      	mov	r6, r3
1a003812:	42a5      	cmp	r5, r4
1a003814:	d004      	beq.n	1a003820 <__libc_init_array+0x1c>
1a003816:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00381a:	4798      	blx	r3
1a00381c:	3501      	adds	r5, #1
1a00381e:	e7f8      	b.n	1a003812 <__libc_init_array+0xe>
1a003820:	f7ff fd20 	bl	1a003264 <_init>
1a003824:	4c08      	ldr	r4, [pc, #32]	; (1a003848 <__libc_init_array+0x44>)
1a003826:	4b09      	ldr	r3, [pc, #36]	; (1a00384c <__libc_init_array+0x48>)
1a003828:	1ae4      	subs	r4, r4, r3
1a00382a:	10a4      	asrs	r4, r4, #2
1a00382c:	2500      	movs	r5, #0
1a00382e:	461e      	mov	r6, r3
1a003830:	42a5      	cmp	r5, r4
1a003832:	d004      	beq.n	1a00383e <__libc_init_array+0x3a>
1a003834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a003838:	4798      	blx	r3
1a00383a:	3501      	adds	r5, #1
1a00383c:	e7f8      	b.n	1a003830 <__libc_init_array+0x2c>
1a00383e:	bd70      	pop	{r4, r5, r6, pc}
1a003840:	1a003bb4 	.word	0x1a003bb4
1a003844:	1a003bb4 	.word	0x1a003bb4
1a003848:	1a003bb4 	.word	0x1a003bb4
1a00384c:	1a003bb4 	.word	0x1a003bb4

1a003850 <memset>:
1a003850:	4402      	add	r2, r0
1a003852:	4603      	mov	r3, r0
1a003854:	4293      	cmp	r3, r2
1a003856:	d002      	beq.n	1a00385e <memset+0xe>
1a003858:	f803 1b01 	strb.w	r1, [r3], #1
1a00385c:	e7fa      	b.n	1a003854 <memset+0x4>
1a00385e:	4770      	bx	lr
1a003860:	6f68      	ldr	r0, [r5, #116]	; 0x74
1a003862:	616c      	str	r4, [r5, #20]
1a003864:	742e      	strb	r6, [r5, #16]
1a003866:	7478      	strb	r0, [r7, #17]
1a003868:	0000      	movs	r0, r0
1a00386a:	0000      	movs	r0, r0
1a00386c:	6f48      	ldr	r0, [r1, #116]	; 0x74
1a00386e:	616c      	str	r4, [r5, #20]
1a003870:	6d20      	ldr	r0, [r4, #80]	; 0x50
1a003872:	6e75      	ldr	r5, [r6, #100]	; 0x64
1a003874:	6f64      	ldr	r4, [r4, #116]	; 0x74
1a003876:	0a0d      	lsrs	r5, r1, #8
1a003878:	00000000 	.word	0x00000000
1a00387c:	2c2b2a22 	.word	0x2c2b2a22
1a003880:	3d3c3b3a 	.word	0x3d3c3b3a
1a003884:	5d5b3f3e 	.word	0x5d5b3f3e
1a003888:	00007f7c 	.word	0x00007f7c

1a00388c <ultrasonicSensorsIrqMap>:
1a00388c:	00020100                                ....

1a003890 <gpioPinsInit>:
1a003890:	02000104 00050701 05010d03 04080100     ................
1a0038a0:	02020002 02000304 00000403 04070002     ................
1a0038b0:	030c0300 09050402 05040103 04030208     ................
1a0038c0:	04020305 06040504 0802000c 03000b06     ................
1a0038d0:	00090607 07060503 060f0504 03030004     ................
1a0038e0:	02000404 00050404 06040502 04060200     ................
1a0038f0:	0c050408 05040a04 0003010e 14010a00     ................
1a003900:	010f0000 0d000012 00001101 0010010c     ................
1a003910:	07070300 000f0300 01000001 00000000     ................
1a003920:	000a0600 08060603 06100504 04030005     ................
1a003930:	03000106 04090400 04010d05 010b0000     ................
1a003940:	0200000f 00000001 00010104 02010800     ................
1a003950:	01090000 09010006 05040002 04010200     ................
1a003960:	02020105 02020504 0e00000a 01000b02     ................
1a003970:	000c020b 00040c01 04000200 01020001     ................
1a003980:	02000204 00030402 03070302 070b0300     ................
1a003990:	0c030004 03000507 0006070d 01020e03     ................
1a0039a0:	04010504 06020006 02000504 00040405     ................
1a0039b0:	08040402 040c0504 0d050409 05040a04     ................
1a0039c0:	0005010e 00000801                       ........

1a0039c8 <lpcUarts>:
1a0039c8:	40081000 06020406 00180205 40081000     ...@...........@
1a0039d8:	09070509 00180706 40082000 00000000     ......... .@....
1a0039e8:	00190000 400c1000 07060107 001a0602     .......@........
1a0039f8:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003a08:	02020302 001b0204                       ........

1a003a10 <GpioPorts>:
1a003a10:	03030003 0f050403 05031005 07030603     ................
1a003a20:	00000802                                ....

1a003a24 <OscRateIn>:
1a003a24:	00b71b00                                ....

1a003a28 <ExtRateIn>:
1a003a28:	00000000                                ....

1a003a2c <GpioButtons>:
1a003a2c:	08000400 09010900                       ........

1a003a34 <GpioLeds>:
1a003a34:	01050005 0e000205 0c010b01              ............

1a003a40 <InitClkStates>:
1a003a40:	00010308 00010307 01010f01              ............

1a003a4c <pinmuxing>:
1a003a4c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a003a5c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a003a6c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a003a7c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a003a8c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a003a9c:	00d50301 00d50401 00160107 00560207     ..............V.
1a003aac:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003abc:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a003acc:	00b31201 00f01301 00b31401 00b60707     ................
1a003adc:	00f20000 00b60100                       ........

1a003ae4 <UART_BClock>:
1a003ae4:	01a201c2 01620182                       ......b.

1a003aec <UART_PClock>:
1a003aec:	00820081 00a200a1 08040201 0f0f0f03     ................
1a003afc:	000000ff                                ....

1a003b00 <periph_to_base>:
1a003b00:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003b10:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003b20:	000100e0 01000100 01200003 00060120     .......... . ...
1a003b30:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003b40:	01820013 00120182 01a201a2 01c20011     ................
1a003b50:	001001c2 01e201e2 0202000f 000e0202     ................
1a003b60:	02220222 0223000d 001c0223              "."...#.#...

1a003b6c <InitClkStates>:
1a003b6c:	00010100 00010909 0001090a 01010701     ................
1a003b7c:	00010902 00010906 0101090c 0001090d     ................
1a003b8c:	0001090e 0001090f 00010910 00010911     ................
1a003b9c:	00010912 00010913 00011114 00011119     ................
1a003bac:	0001111a 0001111b                       ........
