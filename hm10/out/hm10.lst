
PCSE/hm10/out/hm10.elf:     file format elf32-littlearm
PCSE/hm10/out/hm10.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a001ad9

Program Header:
0x70000001 off    0x0000a554 vaddr 0x1a002554 paddr 0x1a002554 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**15
         filesz 0x000000b4 memsz 0x0000010c flags rw-
    LOAD off    0x00008000 vaddr 0x1a000000 paddr 0x1a000000 align 2**15
         filesz 0x0000255c memsz 0x0000255c flags r-x
    LOAD off    0x00010000 vaddr 0x10000000 paddr 0x1a00255c align 2**15
         filesz 0x000000c8 memsz 0x000000c8 flags rw-
private flags = 5000402: [Version5 EABI] [hard-float ABI] [has entry point]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002554  1a000000  1a000000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000c8  10000000  1a00255c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000100c8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000100c8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000100c8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000100c8  2**2
                  CONTENTS
  6 .bss          00000044  100000c8  100000c8  000000c8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000100c8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000100c8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000100c8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000100c8  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002554  1a002554  0000a554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000100c8  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000100c8  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000100c8  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000100c8  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000100c8  2**2
                  CONTENTS
 17 .noinit       00000000  1000010c  1000010c  000100c8  2**2
                  CONTENTS
 18 .debug_info   0001370e  00000000  00000000  000100c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000032a0  00000000  00000000  000237d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00006e8e  00000000  00000000  00026a76  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000988  00000000  00000000  0002d904  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000888  00000000  00000000  0002e28c  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000a6d2  00000000  00000000  0002eb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   0000cca8  00000000  00000000  000391e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001e3e8  00000000  00000000  00045e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  00064276  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  000642e6  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001814  00000000  00000000  00064320  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000c8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002554 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000010c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a000854 l     F .text	000000ac uartProcessIRQ
100000d4 l     O .bss	00000004 rxIsrCallbackUART0
100000d8 l     O .bss	00000004 txIsrCallbackUART0
100000dc l     O .bss	00000004 txIsrCallbackUART2
100000e0 l     O .bss	00000004 txIsrCallbackUART3
1a002368 l     O .text	00000048 lpcUarts
100000e4 l     O .bss	00000004 rxIsrCallbackUART2
100000e8 l     O .bss	00000004 rxIsrCallbackUART3
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 hm10.c
100000c8 l     O .bss	00000001 consolePrint
100000c9 l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000004 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a000478 l     F .text	00000010 clearInterrupt
1a000488 l     F .text	00000060 serveInterrupt
10000008 l     O .data	00000048 ultrasonicSensors
1a00222c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a00050c l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_timer.c
1a000b8c l     F .text	00000002 errorOcurred
1a000b90 l     F .text	00000002 doNothing
10000050 l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 board.c
1a000dac l     F .text	00000040 Board_LED_Init
1a000dec l     F .text	0000003c Board_TEC_Init
1a000e28 l     F .text	0000003c Board_GPIO_Init
1a000e64 l     F .text	00000038 Board_SPI_Init
1a000e9c l     F .text	00000024 Board_I2C_Init
1a000ec0 l     F .text	00000030 Board_ADC_Init
1a0023b0 l     O .text	00000012 GpioPorts
1a0023cc l     O .text	00000008 GpioButtons
1a0023d4 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0023e0 l     O .text	0000000c InitClkStates
1a0023ec l     O .text	00000098 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001018 l     F .text	0000002c Chip_UART_GetIndex
1a002484 l     O .text	00000008 UART_BClock
1a00248c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0011bc l     F .text	00000014 Chip_ADC_GetClockIndex
1a0011d0 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a001294 l     F .text	000000a8 pll_calc_divs
1a00133c l     F .text	00000104 pll_get_frac
1a001440 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0016ac l     F .text	00000022 Chip_Clock_GetDivRate
100000ec l     O .bss	00000008 audio_usb_pll_freq
1a0024a0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00250c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a0019ac l     F .text	00000014 Chip_SSP_GetClockIndex
1a0019c0 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000090 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a080000 l       *ABS*	00000000 __top_MFlashA512
1a00255c l       .ARM.exidx	00000000 __exidx_end
1a00255c l       .ARM.exidx	00000000 _etext
20008000 l       *ABS*	00000000 __top_RamAHB32
1a002554 l       .ARM.exidx	00000000 __exidx_start
20010000 l       *ABS*	00000000 __top_RamAHB_ETB16
10008000 l       *ABS*	00000000 __top_RamLoc32
00000000 l       *UND*	00000000 _printf_float
2000c000 l       *ABS*	00000000 __top_RamAHB16
1008a000 l       *ABS*	00000000 __top_RamLoc40
1a002554 l       .bss_RAM5	00000000 __init_array_end
1a002554 l       .bss_RAM5	00000000 __preinit_array_end
1000010c l       .bss	00000000 _pvHeapStart
1b080000 l       *ABS*	00000000 __top_MFlashB512
1a002554 l       .bss_RAM5	00000000 __init_array_start
1a002554 l       .bss_RAM5	00000000 __preinit_array_start
1a0014d4 g     F .text	0000001c Chip_Clock_GetDividerSource
1a001bc0 g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a000c10 g     F .text	00000040 TIMER2_IRQHandler
1a000930 g     F .text	00000014 uartRxRead
1a00019c  w    F .text	00000002 DebugMon_Handler
1a0001a8  w    F .text	00000002 RIT_IRQHandler
1a0001a8  w    F .text	00000002 ADCHS_IRQHandler
1a001bf4 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a0001a8  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001a8  w    F .text	00000002 I2C0_IRQHandler
1a0009d4 g     F .text	0000001c uartReadByte
1a000b4c g     F .text	0000003e delayRead
100000d0 g     O .bss	00000004 callBackFuncParams
1a000188  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001274 g     F .text	0000000c Chip_ADC_SetResolution
1a000824 g     F .text	00000030 SysTick_Handler
1a001098 g     F .text	00000040 Chip_UART_SetBaud
1a000ca0 g     F .text	00000008 printString
1a0001a8  w    F .text	00000002 SDIO_IRQHandler
1a0001a8  w    F .text	00000002 ATIMER_IRQHandler
1a0001a0  w    F .text	00000002 PendSV_Handler
1a000184  w    F .text	00000002 NMI_Handler
1a000150 g       .text	00000000 __data_section_table_end
1a0001a8  w    F .text	00000002 I2C1_IRQHandler
1a0001a8  w    F .text	00000002 UART1_IRQHandler
1a0001a8  w    F .text	00000002 GPIO5_IRQHandler
1a0001a8  w    F .text	00000002 CAN1_IRQHandler
53ff5d66 g       *ABS*	00000000 __valid_user_code_checksum
1a0001a8  w    F .text	00000002 USB1_IRQHandler
1a0001a8  w    F .text	00000002 I2S0_IRQHandler
1a0009f0 g     F .text	0000007c waitForReceiveStringOrTimeout
1a000c50 g     F .text	00000040 TIMER3_IRQHandler
1a001738 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a000178 g     F .text	0000000a UART0_IRQHandler
1a0001c8 g     F .text	00000012 bss_init
1a0001a8  w    F .text	00000002 SGPIO_IRQHandler
1a001b60 g     F .text	00000000 .hidden __aeabi_uldivmod
1000010c g       .noinit	00000000 _noinit
1a000ac4 g     F .text	00000018 uartWriteString
10000108 g     O .bss	00000004 SystemCoreClock
1a001044 g     F .text	00000054 Chip_UART_Init
1a0001a8  w    F .text	00000002 ADC0_IRQHandler
1a000194  w    F .text	00000002 UsageFault_Handler
1a0017b4 g     F .text	0000004c Chip_Clock_GetRate
1a0001a8  w    F .text	00000002 GPIO6_IRQHandler
1a000c90 g     F .text	0000000e printInitUart
100000f8 g     O .bss	00000008 tickCounter
1a000fa0 g     F .text	0000006c Board_SetupClocking
1a0023c8 g     O .text	00000004 ExtRateIn
1a0001a8  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0004f4 g     F .text	0000000a GPIO1_IRQHandler
1a0001a8  w    F .text	00000002 SSP0_IRQHandler
1a000900 g     F .text	00000018 uartRxReady
1a0002fc g     O .text	00000004 CRP_WORD
1a0020fc g     F .text	0000004c __libc_init_array
1a001e90 g     F .text	0000026a .hidden __udivdi3
1a0001a8  w    F .text	00000002 ADC1_IRQHandler
1a000f14 g     F .text	0000003c Board_Init
1a001b5c g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001a8  w    F .text	00000002 RTC_IRQHandler
1000010c g       .bss	00000000 _ebss
1a000b94 g     F .text	0000003c TIMER0_IRQHandler
1a0007a8 g     F .text	0000007c tickInit
1a0001a8  w    F .text	00000002 SPI_IRQHandler
1a001aa8 g     F .text	00000030 Chip_I2C_SetClockRate
1a0001a8  w    F .text	00000002 LCD_IRQHandler
1a001488 g     F .text	0000004c Chip_Clock_EnableCrystal
1a000300 g     F .text	0000002c hm10bleTest
1a0001ac g     F .text	0000001a data_init
1a00032c g     F .text	0000001c hm10blePrintATCommands
1a000bd0 g     F .text	00000040 TIMER1_IRQHandler
1a001a84 g     F .text	00000024 Chip_I2C_Init
1a000adc g     F .text	0000000a UART2_IRQHandler
1a000ca8 g     F .text	00000010 printEnter
1a001644 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a002230 g     O .text	00000136 gpioPinsInit
1a000aa8 g     F .text	0000001a uartWriteByte
1a0019d8 g     F .text	00000012 Chip_SSP_SetClockRate
1a000500 g     F .text	0000000a GPIO2_IRQHandler
1a001714 g     F .text	00000024 Chip_Clock_GetBaseClock
100000c8 g       .bss	00000000 _bss
1a001240 g     F .text	00000032 Chip_ADC_SetSampleRate
1a000b2c g     F .text	00000020 delayInit
1a0001a8  w    F .text	00000002 I2S1_IRQHandler
1a0019ec g     F .text	0000003e Chip_SSP_SetBitRate
1a0019a8 g     F .text	00000002 Chip_GPIO_Init
1a0023c4 g     O .text	00000004 OscRateIn
1a000958 g     F .text	0000007c uartInit
1000010c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001a8  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000538 g     F .text	0000019c gpioInit
1a001bf0  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0001a8  w    F .text	00000002 USB0_IRQHandler
1a0001a8  w    F .text	00000002 GPIO3_IRQHandler
1a0001a8  w    F .text	00000002 SCT_IRQHandler
1a0014f0 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002148 g     F .text	00000010 memset
1a00018c  w    F .text	00000002 MemManage_Handler
1a000348 g     F .text	00000114 main
1a0001a8  w    F .text	00000002 WDT_IRQHandler
1a000198  w    F .text	00000002 SVC_Handler
10000000 g     O .data	00000004 DWT_CTRL
1a000918 g     F .text	00000018 uartTxReady
1a0001a8  w    F .text	00000002 GPIO7_IRQHandler
1a001744 g     F .text	0000003c Chip_Clock_EnableOpts
1a00150c g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a001950 g     F .text	00000058 fpuInit
1a0015c4 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000f50 g     F .text	0000001c SystemInit
1a0001a8  w    F .text	00000002 SPIFI_IRQHandler
1a000af4 g     F .text	00000038 delay
1a0001a8  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0006d4 g     F .text	00000058 gpioWrite
1a001200 g     F .text	00000040 Chip_ADC_Init
1a000f6c g     F .text	00000034 Board_SetupMuxing
1a0010d8 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a000784 g     F .text	0000000c tickRead
10000100 g     O .bss	00000008 tickRateMS
1a0001a8  w    F .text	00000002 ETH_IRQHandler
100000cc g     O .bss	00000004 tickHookFunction
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a000a6c g     F .text	0000003a waitForReceiveStringOrTimeoutBlocking
1a000944 g     F .text	00000014 uartTxWrite
1a0001a8  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000178 g       .text	00000000 __section_table_end
1a001a2c g     F .text	00000038 Chip_SSP_Init
1a0001a8  w    F .text	00000002 GINT0_IRQHandler
1a0001a8  w    F .text	00000002 DAC_IRQHandler
1a000ef0 g     F .text	00000024 Board_Debug_Init
100000c8 g       .data	00000000 _edata
1a001a64 g     F .text	00000020 Chip_I2C_EventHandler
1a0001a8  w    F .text	00000002 M0SUB_IRQHandler
1a001800 g     F .text	00000150 Chip_SetupCoreClock
1a0004e8 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a001ad8 g     F .text	00000084 ResetISR
1a001280 g     F .text	00000014 SystemCoreClockUpdate
1a0001a8  w    F .text	00000002 DMA_IRQHandler
1a0001a8  w    F .text	00000002 EVRT_IRQHandler
1a001bf0  w    F .text	00000002 .hidden __aeabi_idiv0
1a000190  w    F .text	00000002 BusFault_Handler
1a001780 g     F .text	00000034 Chip_Clock_Enable
1a000ae8 g     F .text	0000000a UART3_IRQHandler
1a0001a8  w    F .text	00000002 MCPWM_IRQHandler
1a001b90 g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a0001a8  w    F .text	00000002 M0APP_IRQHandler
1a00072c g     F .text	00000058 gpioRead
1a000cb8 g     F .text	000000f4 boardInit
1a0001a8  w    F .text	00000002 GINT1_IRQHandler
1a000790 g     F .text	00000018 tickPowerSet
1a0016d0 g     F .text	00000044 Chip_Clock_SetBaseClock
1a00045c g     F .text	0000001c cyclesCounterInit
1a0001a8  w    F .text	00000002 GPIO4_IRQHandler
1a00100c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 d9 1a 00 1a 85 01 00 1a 89 01 00 1a     ................
1a000010:	8d 01 00 1a 91 01 00 1a 95 01 00 1a 66 5d ff 53     ............f].S
	...
1a00002c:	99 01 00 1a 9d 01 00 1a 00 00 00 00 a1 01 00 1a     ................
1a00003c:	25 08 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     %...............
1a00004c:	00 00 00 00 a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00005c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00006c:	a9 01 00 1a 95 0b 00 1a d1 0b 00 1a 11 0c 00 1a     ................
1a00007c:	51 0c 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     Q...............
1a00008c:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a00009c:	a9 01 00 1a 79 01 00 1a a9 01 00 1a dd 0a 00 1a     ....y...........
1a0000ac:	e9 0a 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000bc:	a9 01 00 1a e9 04 00 1a f5 04 00 1a 01 05 00 1a     ................
1a0000cc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000dc:	a9 01 00 1a a9 01 00 1a a9 01 00 1a a9 01 00 1a     ................
1a0000ec:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a0000fc:	a9 01 00 1a 00 00 00 00 a9 01 00 1a a9 01 00 1a     ................
1a00010c:	a9 01 00 1a a9 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a00255c 	.word	0x1a00255c
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000c8 	.word	0x000000c8
1a000120:	1a00255c 	.word	0x1a00255c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a00255c 	.word	0x1a00255c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a00255c 	.word	0x1a00255c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a00255c 	.word	0x1a00255c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000c8 	.word	0x100000c8
1a000154:	00000044 	.word	0x00000044
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a000178:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a00017a:	2000      	movs	r0, #0
1a00017c:	f000 fb6a 	bl	1a000854 <uartProcessIRQ>
1a000180:	bd08      	pop	{r3, pc}
1a000182:	bf00      	nop

1a000184 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <NMI_Handler>
1a000186:	bf00      	nop

1a000188 <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <HardFault_Handler>
1a00018a:	bf00      	nop

1a00018c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <MemManage_Handler>
1a00018e:	bf00      	nop

1a000190 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <BusFault_Handler>
1a000192:	bf00      	nop

1a000194 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <UsageFault_Handler>
1a000196:	bf00      	nop

1a000198 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <SVC_Handler>
1a00019a:	bf00      	nop

1a00019c <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <DebugMon_Handler>
1a00019e:	bf00      	nop

1a0001a0 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a0001a0:	e7fe      	b.n	1a0001a0 <PendSV_Handler>
1a0001a2:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a0001a4:	e7fe      	b.n	1a0001a4 <PendSV_Handler+0x4>
1a0001a6:	bf00      	nop

1a0001a8 <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a0001a8:	e7fe      	b.n	1a0001a8 <ADC0_IRQHandler>
1a0001aa:	bf00      	nop

1a0001ac <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001ac:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001ae:	2300      	movs	r3, #0
1a0001b0:	e004      	b.n	1a0001bc <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001b2:	6804      	ldr	r4, [r0, #0]
1a0001b4:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001b8:	3004      	adds	r0, #4
1a0001ba:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	4293      	cmp	r3, r2
1a0001be:	d3f8      	bcc.n	1a0001b2 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001c0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001c4:	4770      	bx	lr
1a0001c6:	bf00      	nop

1a0001c8 <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	2300      	movs	r3, #0
1a0001ca:	e003      	b.n	1a0001d4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001cc:	2200      	movs	r2, #0
1a0001ce:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001d2:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001d4:	428b      	cmp	r3, r1
1a0001d6:	d3f9      	bcc.n	1a0001cc <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001d8:	4770      	bx	lr
1a0001da:	bf00      	nop
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <hm10bleTest>:
/*==================[definiciones de funciones internas]=====================*/

/*==================[definiciones de funciones externas]=====================*/

bool_t hm10bleTest( int32_t uart )
{
1a000300:	b510      	push	{r4, lr}
1a000302:	b082      	sub	sp, #8
   uartWriteString( uart, "AT\r\n" );
1a000304:	b2c4      	uxtb	r4, r0
1a000306:	4620      	mov	r0, r4
1a000308:	4906      	ldr	r1, [pc, #24]	; (1a000324 <hm10bleTest+0x24>)
1a00030a:	f000 fbdb 	bl	1a000ac4 <uartWriteString>
   return waitForReceiveStringOrTimeoutBlocking( uart,
1a00030e:	2232      	movs	r2, #50	; 0x32
1a000310:	2300      	movs	r3, #0
1a000312:	e9cd 2300 	strd	r2, r3, [sp]
1a000316:	4620      	mov	r0, r4
1a000318:	4903      	ldr	r1, [pc, #12]	; (1a000328 <hm10bleTest+0x28>)
1a00031a:	2204      	movs	r2, #4
1a00031c:	f000 fba6 	bl	1a000a6c <waitForReceiveStringOrTimeoutBlocking>
                                                 "OK\r\n", strlen("OK\r\n"),
                                                 50 );
}
1a000320:	b002      	add	sp, #8
1a000322:	bd10      	pop	{r4, pc}
1a000324:	1a002158 	.word	0x1a002158
1a000328:	1a002160 	.word	0x1a002160

1a00032c <hm10blePrintATCommands>:

void hm10blePrintATCommands( int32_t uart )
{
1a00032c:	b510      	push	{r4, lr}
1a00032e:	4604      	mov	r4, r0
   delay(500);
1a000330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000334:	2100      	movs	r1, #0
1a000336:	f000 fbdd 	bl	1a000af4 <delay>
   uartWriteString( uart, "AT+HELP\r\n" );
1a00033a:	b2e0      	uxtb	r0, r4
1a00033c:	4901      	ldr	r1, [pc, #4]	; (1a000344 <hm10blePrintATCommands+0x18>)
1a00033e:	f000 fbc1 	bl	1a000ac4 <uartWriteString>
1a000342:	bd10      	pop	{r4, pc}
1a000344:	1a002168 	.word	0x1a002168

1a000348 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000348:	b510      	push	{r4, lr}
1a00034a:	b082      	sub	sp, #8
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a00034c:	f000 fcb4 	bl	1a000cb8 <boardInit>

   // Inicializar UART_USB para conectar a la PC
   debugPrintConfigUart( UART_PC, 9600 );
1a000350:	4c3a      	ldr	r4, [pc, #232]	; (1a00043c <main+0xf4>)
1a000352:	4620      	mov	r0, r4
1a000354:	2103      	movs	r1, #3
1a000356:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a00035a:	f000 fc99 	bl	1a000c90 <printInitUart>
   debugPrintlnString( "UART_PC configurada." );
1a00035e:	7820      	ldrb	r0, [r4, #0]
1a000360:	4937      	ldr	r1, [pc, #220]	; (1a000440 <main+0xf8>)
1a000362:	f000 fc9d 	bl	1a000ca0 <printString>
1a000366:	7820      	ldrb	r0, [r4, #0]
1a000368:	f000 fc9e 	bl	1a000ca8 <printEnter>

   // Inicializar UART_232 para conectar al modulo bluetooth
   consolePrintConfigUart( UART_BLUETOOTH, 9600 );
1a00036c:	4835      	ldr	r0, [pc, #212]	; (1a000444 <main+0xfc>)
1a00036e:	2105      	movs	r1, #5
1a000370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
1a000374:	f000 fc8c 	bl	1a000c90 <printInitUart>
   debugPrintlnString( "UART_BLUETOOTH para modulo Bluetooth configurada." );
1a000378:	7820      	ldrb	r0, [r4, #0]
1a00037a:	4933      	ldr	r1, [pc, #204]	; (1a000448 <main+0x100>)
1a00037c:	f000 fc90 	bl	1a000ca0 <printString>
1a000380:	7820      	ldrb	r0, [r4, #0]
1a000382:	f000 fc91 	bl	1a000ca8 <printEnter>

   uint8_t data = 0;
1a000386:	2300      	movs	r3, #0
1a000388:	f88d 3007 	strb.w	r3, [sp, #7]

   uartWriteString( UART_PC, "Testeto si el modulo esta conectado enviando: AT\r\n" );
1a00038c:	2003      	movs	r0, #3
1a00038e:	492f      	ldr	r1, [pc, #188]	; (1a00044c <main+0x104>)
1a000390:	f000 fb98 	bl	1a000ac4 <uartWriteString>
   if( hm10bleTest( UART_BLUETOOTH ) ){
1a000394:	2005      	movs	r0, #5
1a000396:	f7ff ffb3 	bl	1a000300 <hm10bleTest>
1a00039a:	b130      	cbz	r0, 1a0003aa <main+0x62>
      debugPrintlnString( "Modulo conectado correctamente." );
1a00039c:	7820      	ldrb	r0, [r4, #0]
1a00039e:	492c      	ldr	r1, [pc, #176]	; (1a000450 <main+0x108>)
1a0003a0:	f000 fc7e 	bl	1a000ca0 <printString>
1a0003a4:	7820      	ldrb	r0, [r4, #0]
1a0003a6:	f000 fc7f 	bl	1a000ca8 <printEnter>

   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE ) {

      // Si leo un dato de una UART lo envio a al otra (bridge)
      if( uartReadByte( UART_PC, &data ) ) {
1a0003aa:	2003      	movs	r0, #3
1a0003ac:	f10d 0107 	add.w	r1, sp, #7
1a0003b0:	f000 fb10 	bl	1a0009d4 <uartReadByte>
1a0003b4:	b120      	cbz	r0, 1a0003c0 <main+0x78>
         uartWriteByte( UART_BLUETOOTH, data );
1a0003b6:	2005      	movs	r0, #5
1a0003b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0003bc:	f000 fb74 	bl	1a000aa8 <uartWriteByte>
      }
      if( uartReadByte( UART_BLUETOOTH, &data ) ) {
1a0003c0:	2005      	movs	r0, #5
1a0003c2:	f10d 0107 	add.w	r1, sp, #7
1a0003c6:	f000 fb05 	bl	1a0009d4 <uartReadByte>
1a0003ca:	b1a0      	cbz	r0, 1a0003f6 <main+0xae>
         if( data == 'h' ) {
1a0003cc:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0003d0:	2b68      	cmp	r3, #104	; 0x68
1a0003d2:	d103      	bne.n	1a0003dc <main+0x94>
            gpioWrite( LEDB, ON );
1a0003d4:	202a      	movs	r0, #42	; 0x2a
1a0003d6:	2101      	movs	r1, #1
1a0003d8:	f000 f97c 	bl	1a0006d4 <gpioWrite>
         }
         if( data == 'l' ) {
1a0003dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a0003e0:	2b6c      	cmp	r3, #108	; 0x6c
1a0003e2:	d103      	bne.n	1a0003ec <main+0xa4>
            gpioWrite( LEDB, OFF );
1a0003e4:	202a      	movs	r0, #42	; 0x2a
1a0003e6:	2100      	movs	r1, #0
1a0003e8:	f000 f974 	bl	1a0006d4 <gpioWrite>
         }
         uartWriteByte( UART_PC, data );
1a0003ec:	2003      	movs	r0, #3
1a0003ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0003f2:	f000 fb59 	bl	1a000aa8 <uartWriteByte>
      }

      // Si presiono TEC1 imprime la lista de comandos AT
      if( !gpioRead( TEC1 ) ) {
1a0003f6:	2024      	movs	r0, #36	; 0x24
1a0003f8:	f000 f998 	bl	1a00072c <gpioRead>
1a0003fc:	b910      	cbnz	r0, 1a000404 <main+0xbc>
         hm10blePrintATCommands( UART_BLUETOOTH );
1a0003fe:	2005      	movs	r0, #5
1a000400:	f7ff ff94 	bl	1a00032c <hm10blePrintATCommands>
      }

      // Si presiono TEC3 enciende el led de la pantalla de la app
      if( !gpioRead( TEC3 ) ) {
1a000404:	2026      	movs	r0, #38	; 0x26
1a000406:	f000 f991 	bl	1a00072c <gpioRead>
1a00040a:	b940      	cbnz	r0, 1a00041e <main+0xd6>
         uartWriteString( UART_BLUETOOTH, "LED_ON\r\n" );
1a00040c:	2005      	movs	r0, #5
1a00040e:	4911      	ldr	r1, [pc, #68]	; (1a000454 <main+0x10c>)
1a000410:	f000 fb58 	bl	1a000ac4 <uartWriteString>
         delay(500);
1a000414:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000418:	2100      	movs	r1, #0
1a00041a:	f000 fb6b 	bl	1a000af4 <delay>
      }
      // Si presiono TEC4 apaga el led de la pantalla de la app
      if( !gpioRead( TEC4 ) ) {
1a00041e:	2027      	movs	r0, #39	; 0x27
1a000420:	f000 f984 	bl	1a00072c <gpioRead>
1a000424:	2800      	cmp	r0, #0
1a000426:	d1c0      	bne.n	1a0003aa <main+0x62>
         uartWriteString( UART_BLUETOOTH, "LED_OFF\r\n" );
1a000428:	2005      	movs	r0, #5
1a00042a:	490b      	ldr	r1, [pc, #44]	; (1a000458 <main+0x110>)
1a00042c:	f000 fb4a 	bl	1a000ac4 <uartWriteString>
         delay(500);
1a000430:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000434:	2100      	movs	r1, #0
1a000436:	f000 fb5d 	bl	1a000af4 <delay>
1a00043a:	e7b6      	b.n	1a0003aa <main+0x62>
1a00043c:	100000c9 	.word	0x100000c9
1a000440:	1a002174 	.word	0x1a002174
1a000444:	100000c8 	.word	0x100000c8
1a000448:	1a00218c 	.word	0x1a00218c
1a00044c:	1a0021c0 	.word	0x1a0021c0
1a000450:	1a0021f4 	.word	0x1a0021f4
1a000454:	1a002214 	.word	0x1a002214
1a000458:	1a002220 	.word	0x1a002220

1a00045c <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a00045c:	4b04      	ldr	r3, [pc, #16]	; (1a000470 <cyclesCounterInit+0x14>)
1a00045e:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a000460:	4b04      	ldr	r3, [pc, #16]	; (1a000474 <cyclesCounterInit+0x18>)
1a000462:	681a      	ldr	r2, [r3, #0]
1a000464:	6813      	ldr	r3, [r2, #0]
1a000466:	f043 0301 	orr.w	r3, r3, #1
1a00046a:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a00046c:	2001      	movs	r0, #1
1a00046e:	4770      	bx	lr
1a000470:	10000004 	.word	0x10000004
1a000474:	10000000 	.word	0x10000000

1a000478 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a000478:	2301      	movs	r3, #1
1a00047a:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00047c:	4a01      	ldr	r2, [pc, #4]	; (1a000484 <clearInterrupt+0xc>)
1a00047e:	6253      	str	r3, [r2, #36]	; 0x24
1a000480:	4770      	bx	lr
1a000482:	bf00      	nop
1a000484:	40087000 	.word	0x40087000

1a000488 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a000488:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00048a:	4b13      	ldr	r3, [pc, #76]	; (1a0004d8 <serveInterrupt+0x50>)
1a00048c:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a00048e:	4a13      	ldr	r2, [pc, #76]	; (1a0004dc <serveInterrupt+0x54>)
1a000490:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a000492:	2401      	movs	r4, #1
1a000494:	4084      	lsls	r4, r0
1a000496:	4214      	tst	r4, r2
1a000498:	d00a      	beq.n	1a0004b0 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00049a:	4a11      	ldr	r2, [pc, #68]	; (1a0004e0 <serveInterrupt+0x58>)
1a00049c:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00049e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a0004a2:	00db      	lsls	r3, r3, #3
1a0004a4:	490f      	ldr	r1, [pc, #60]	; (1a0004e4 <serveInterrupt+0x5c>)
1a0004a6:	440b      	add	r3, r1
1a0004a8:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a0004aa:	4b0c      	ldr	r3, [pc, #48]	; (1a0004dc <serveInterrupt+0x54>)
1a0004ac:	61dc      	str	r4, [r3, #28]
1a0004ae:	e00f      	b.n	1a0004d0 <serveInterrupt+0x48>
1a0004b0:	4a0b      	ldr	r2, [pc, #44]	; (1a0004e0 <serveInterrupt+0x58>)
1a0004b2:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0004b4:	4d0b      	ldr	r5, [pc, #44]	; (1a0004e4 <serveInterrupt+0x5c>)
1a0004b6:	005e      	lsls	r6, r3, #1
1a0004b8:	18f2      	adds	r2, r6, r3
1a0004ba:	00d2      	lsls	r2, r2, #3
1a0004bc:	442a      	add	r2, r5
1a0004be:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0004c0:	6852      	ldr	r2, [r2, #4]
1a0004c2:	1a89      	subs	r1, r1, r2
1a0004c4:	4433      	add	r3, r6
1a0004c6:	00db      	lsls	r3, r3, #3
1a0004c8:	442b      	add	r3, r5
1a0004ca:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0004cc:	4b03      	ldr	r3, [pc, #12]	; (1a0004dc <serveInterrupt+0x54>)
1a0004ce:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0004d0:	f7ff ffd2 	bl	1a000478 <clearInterrupt>
1a0004d4:	bd70      	pop	{r4, r5, r6, pc}
1a0004d6:	bf00      	nop
1a0004d8:	1a00222c 	.word	0x1a00222c
1a0004dc:	40087000 	.word	0x40087000
1a0004e0:	40084000 	.word	0x40084000
1a0004e4:	10000008 	.word	0x10000008

1a0004e8 <GPIO0_IRQHandler>:
/*==================[ISR external functions definition]======================*/
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
void GPIO0_IRQHandler(void)
{
1a0004e8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0004ea:	2000      	movs	r0, #0
1a0004ec:	f7ff ffcc 	bl	1a000488 <serveInterrupt>
1a0004f0:	bd08      	pop	{r3, pc}
1a0004f2:	bf00      	nop

1a0004f4 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0004f4:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0004f6:	2001      	movs	r0, #1
1a0004f8:	f7ff ffc6 	bl	1a000488 <serveInterrupt>
1a0004fc:	bd08      	pop	{r3, pc}
1a0004fe:	bf00      	nop

1a000500 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a000500:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a000502:	2002      	movs	r0, #2
1a000504:	f7ff ffc0 	bl	1a000488 <serveInterrupt>
1a000508:	bd08      	pop	{r3, pc}
1a00050a:	bf00      	nop

1a00050c <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a00050c:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00050e:	4d09      	ldr	r5, [pc, #36]	; (1a000534 <gpioObtainPinInit+0x28>)
1a000510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a000514:	182c      	adds	r4, r5, r0
1a000516:	5c28      	ldrb	r0, [r5, r0]
1a000518:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a00051a:	7861      	ldrb	r1, [r4, #1]
1a00051c:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00051e:	78a2      	ldrb	r2, [r4, #2]
1a000520:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a000522:	78e2      	ldrb	r2, [r4, #3]
1a000524:	9b02      	ldr	r3, [sp, #8]
1a000526:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a000528:	7922      	ldrb	r2, [r4, #4]
1a00052a:	9b03      	ldr	r3, [sp, #12]
1a00052c:	701a      	strb	r2, [r3, #0]
}
1a00052e:	bc30      	pop	{r4, r5}
1a000530:	4770      	bx	lr
1a000532:	bf00      	nop
1a000534:	1a002230 	.word	0x1a002230

1a000538 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a000538:	b570      	push	{r4, r5, r6, lr}
1a00053a:	b084      	sub	sp, #16
1a00053c:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00053e:	2300      	movs	r3, #0
1a000540:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000544:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a000548:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00054c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000550:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000554:	ab03      	add	r3, sp, #12
1a000556:	9300      	str	r3, [sp, #0]
1a000558:	f10d 030b 	add.w	r3, sp, #11
1a00055c:	9301      	str	r3, [sp, #4]
1a00055e:	f10d 010f 	add.w	r1, sp, #15
1a000562:	f10d 020e 	add.w	r2, sp, #14
1a000566:	f10d 030d 	add.w	r3, sp, #13
1a00056a:	f7ff ffcf 	bl	1a00050c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00056e:	2c05      	cmp	r4, #5
1a000570:	f200 80a8 	bhi.w	1a0006c4 <gpioInit+0x18c>
1a000574:	e8df f004 	tbb	[pc, r4]
1a000578:	46278408 	.word	0x46278408
1a00057c:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00057e:	4853      	ldr	r0, [pc, #332]	; (1a0006cc <gpioInit+0x194>)
1a000580:	f001 fa12 	bl	1a0019a8 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a000584:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a000586:	e09e      	b.n	1a0006c6 <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a000588:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00058c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000590:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000594:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000598:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00059c:	494c      	ldr	r1, [pc, #304]	; (1a0006d0 <gpioInit+0x198>)
1a00059e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0005a2:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0005a6:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0005aa:	2001      	movs	r0, #1
1a0005ac:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a0005b0:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0005b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0005b8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0005bc:	ea22 0204 	bic.w	r2, r2, r4
1a0005c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a0005c4:	e07f      	b.n	1a0006c6 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0005c6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0005ca:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0005ce:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0005d2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0005d6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0005da:	493d      	ldr	r1, [pc, #244]	; (1a0006d0 <gpioInit+0x198>)
1a0005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0005e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0005e4:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0005e8:	2001      	movs	r0, #1
1a0005ea:	fa00 f402 	lsl.w	r4, r0, r2
1a0005ee:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a0005f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0005f6:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a0005fa:	ea22 0204 	bic.w	r2, r2, r4
1a0005fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000602:	e060      	b.n	1a0006c6 <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a000604:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000608:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00060c:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000610:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000614:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000618:	492d      	ldr	r1, [pc, #180]	; (1a0006d0 <gpioInit+0x198>)
1a00061a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00061e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000622:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000626:	2001      	movs	r0, #1
1a000628:	fa00 f402 	lsl.w	r4, r0, r2
1a00062c:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a000630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000634:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000638:	ea22 0204 	bic.w	r2, r2, r4
1a00063c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a000640:	e041      	b.n	1a0006c6 <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a000642:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000646:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00064a:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00064e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000652:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000656:	491e      	ldr	r1, [pc, #120]	; (1a0006d0 <gpioInit+0x198>)
1a000658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00065c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000660:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a000664:	2001      	movs	r0, #1
1a000666:	fa00 f402 	lsl.w	r4, r0, r2
1a00066a:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a00066e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a000672:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a000676:	ea22 0204 	bic.w	r2, r2, r4
1a00067a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a00067e:	e022      	b.n	1a0006c6 <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a000680:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a000684:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a000688:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a00068c:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000690:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a000694:	490e      	ldr	r1, [pc, #56]	; (1a0006d0 <gpioInit+0x198>)
1a000696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a00069a:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00069e:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a0006a2:	b25a      	sxtb	r2, r3
1a0006a4:	2001      	movs	r0, #1
1a0006a6:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a0006aa:	4a08      	ldr	r2, [pc, #32]	; (1a0006cc <gpioInit+0x194>)
1a0006ac:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a0006b0:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a0006b4:	4331      	orrs	r1, r6
1a0006b6:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a0006ba:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0006be:	2100      	movs	r1, #0
1a0006c0:	54d1      	strb	r1, [r2, r3]
1a0006c2:	e000      	b.n	1a0006c6 <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a0006c4:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a0006c6:	b004      	add	sp, #16
1a0006c8:	bd70      	pop	{r4, r5, r6, pc}
1a0006ca:	bf00      	nop
1a0006cc:	400f4000 	.word	0x400f4000
1a0006d0:	40086000 	.word	0x40086000

1a0006d4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0006d4:	b510      	push	{r4, lr}
1a0006d6:	b084      	sub	sp, #16
1a0006d8:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0006da:	2300      	movs	r3, #0
1a0006dc:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0006e0:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0006e4:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0006e8:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0006ec:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0006f0:	ab03      	add	r3, sp, #12
1a0006f2:	9300      	str	r3, [sp, #0]
1a0006f4:	f10d 030b 	add.w	r3, sp, #11
1a0006f8:	9301      	str	r3, [sp, #4]
1a0006fa:	f10d 010f 	add.w	r1, sp, #15
1a0006fe:	f10d 020e 	add.w	r2, sp, #14
1a000702:	f10d 030d 	add.w	r3, sp, #13
1a000706:	f7ff ff01 	bl	1a00050c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00070a:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a00070e:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a000712:	3400      	adds	r4, #0
1a000714:	bf18      	it	ne
1a000716:	2401      	movne	r4, #1
1a000718:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a00071c:	4a02      	ldr	r2, [pc, #8]	; (1a000728 <gpioWrite+0x54>)
1a00071e:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a000720:	2001      	movs	r0, #1
1a000722:	b004      	add	sp, #16
1a000724:	bd10      	pop	{r4, pc}
1a000726:	bf00      	nop
1a000728:	400f4000 	.word	0x400f4000

1a00072c <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a00072c:	b500      	push	{lr}
1a00072e:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a000730:	2300      	movs	r3, #0
1a000732:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a000736:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00073a:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00073e:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a000742:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a000746:	ab03      	add	r3, sp, #12
1a000748:	9300      	str	r3, [sp, #0]
1a00074a:	f10d 030b 	add.w	r3, sp, #11
1a00074e:	9301      	str	r3, [sp, #4]
1a000750:	f10d 010f 	add.w	r1, sp, #15
1a000754:	f10d 020e 	add.w	r2, sp, #14
1a000758:	f10d 030d 	add.w	r3, sp, #13
1a00075c:	f7ff fed6 	bl	1a00050c <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a000760:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a000764:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a000768:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a00076c:	4a04      	ldr	r2, [pc, #16]	; (1a000780 <gpioRead+0x54>)
1a00076e:	5cd3      	ldrb	r3, [r2, r3]
1a000770:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a000774:	bf14      	ite	ne
1a000776:	2001      	movne	r0, #1
1a000778:	2000      	moveq	r0, #0
1a00077a:	b005      	add	sp, #20
1a00077c:	f85d fb04 	ldr.w	pc, [sp], #4
1a000780:	400f4000 	.word	0x400f4000

1a000784 <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a000784:	4b01      	ldr	r3, [pc, #4]	; (1a00078c <tickRead+0x8>)
1a000786:	e9d3 0100 	ldrd	r0, r1, [r3]
1a00078a:	4770      	bx	lr
1a00078c:	100000f8 	.word	0x100000f8

1a000790 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a000790:	b118      	cbz	r0, 1a00079a <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a000792:	2207      	movs	r2, #7
1a000794:	4b03      	ldr	r3, [pc, #12]	; (1a0007a4 <tickPowerSet+0x14>)
1a000796:	601a      	str	r2, [r3, #0]
1a000798:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a00079a:	2200      	movs	r2, #0
1a00079c:	4b01      	ldr	r3, [pc, #4]	; (1a0007a4 <tickPowerSet+0x14>)
1a00079e:	601a      	str	r2, [r3, #0]
1a0007a0:	4770      	bx	lr
1a0007a2:	bf00      	nop
1a0007a4:	e000e010 	.word	0xe000e010

1a0007a8 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a0007a8:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a0007aa:	ea50 0301 	orrs.w	r3, r0, r1
1a0007ae:	d104      	bne.n	1a0007ba <tickInit+0x12>
         tickPowerSet( OFF );
1a0007b0:	2000      	movs	r0, #0
1a0007b2:	f7ff ffed 	bl	1a000790 <tickPowerSet>
         ret_val = 0;
1a0007b6:	2000      	movs	r0, #0
1a0007b8:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a0007ba:	f110 32ff 	adds.w	r2, r0, #4294967295
1a0007be:	f141 33ff 	adc.w	r3, r1, #4294967295
1a0007c2:	2b00      	cmp	r3, #0
1a0007c4:	bf08      	it	eq
1a0007c6:	2a32      	cmpeq	r2, #50	; 0x32
1a0007c8:	d222      	bcs.n	1a000810 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a0007ca:	4b12      	ldr	r3, [pc, #72]	; (1a000814 <tickInit+0x6c>)
1a0007cc:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a0007d0:	4b11      	ldr	r3, [pc, #68]	; (1a000818 <tickInit+0x70>)
1a0007d2:	681c      	ldr	r4, [r3, #0]
1a0007d4:	fba4 2300 	umull	r2, r3, r4, r0
1a0007d8:	fb04 3301 	mla	r3, r4, r1, r3
1a0007dc:	4610      	mov	r0, r2
1a0007de:	4619      	mov	r1, r3
1a0007e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a0007e4:	2300      	movs	r3, #0
1a0007e6:	f001 f9bb 	bl	1a001b60 <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a0007ea:	3801      	subs	r0, #1
1a0007ec:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a0007f0:	d209      	bcs.n	1a000806 <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a0007f2:	4b0a      	ldr	r3, [pc, #40]	; (1a00081c <tickInit+0x74>)
1a0007f4:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a0007f6:	21e0      	movs	r1, #224	; 0xe0
1a0007f8:	4a09      	ldr	r2, [pc, #36]	; (1a000820 <tickInit+0x78>)
1a0007fa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a0007fe:	2200      	movs	r2, #0
1a000800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000802:	2207      	movs	r2, #7
1a000804:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a000806:	2001      	movs	r0, #1
1a000808:	f7ff ffc2 	bl	1a000790 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a00080c:	2001      	movs	r0, #1
1a00080e:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a000810:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a000812:	bd10      	pop	{r4, pc}
1a000814:	10000100 	.word	0x10000100
1a000818:	10000108 	.word	0x10000108
1a00081c:	e000e010 	.word	0xe000e010
1a000820:	e000ed00 	.word	0xe000ed00

1a000824 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a000824:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a000826:	4908      	ldr	r1, [pc, #32]	; (1a000848 <SysTick_Handler+0x24>)
1a000828:	e9d1 2300 	ldrd	r2, r3, [r1]
1a00082c:	3201      	adds	r2, #1
1a00082e:	f143 0300 	adc.w	r3, r3, #0
1a000832:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a000836:	4b05      	ldr	r3, [pc, #20]	; (1a00084c <SysTick_Handler+0x28>)
1a000838:	681b      	ldr	r3, [r3, #0]
1a00083a:	b123      	cbz	r3, 1a000846 <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a00083c:	4b03      	ldr	r3, [pc, #12]	; (1a00084c <SysTick_Handler+0x28>)
1a00083e:	681b      	ldr	r3, [r3, #0]
1a000840:	4a03      	ldr	r2, [pc, #12]	; (1a000850 <SysTick_Handler+0x2c>)
1a000842:	6810      	ldr	r0, [r2, #0]
1a000844:	4798      	blx	r3
1a000846:	bd08      	pop	{r3, pc}
1a000848:	100000f8 	.word	0x100000f8
1a00084c:	100000cc 	.word	0x100000cc
1a000850:	100000d0 	.word	0x100000d0

1a000854 <uartProcessIRQ>:
static void uartProcessIRQ( uartMap_t uart );

/*==================[internal functions definition]==========================*/

static void uartProcessIRQ( uartMap_t uart )
{
1a000854:	b570      	push	{r4, r5, r6, lr}
1a000856:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a000858:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00085c:	009b      	lsls	r3, r3, #2
1a00085e:	4a21      	ldr	r2, [pc, #132]	; (1a0008e4 <uartProcessIRQ+0x90>)
1a000860:	58d6      	ldr	r6, [r2, r3]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000862:	6975      	ldr	r5, [r6, #20]
1a000864:	b2ed      	uxtb	r5, r5

   // Rx Interrupt
   if(status & UART_LSR_RDR) { // uartRxReady
1a000866:	f015 0f01 	tst.w	r5, #1
1a00086a:	d019      	beq.n	1a0008a0 <uartProcessIRQ+0x4c>
      // Execute callback
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a00086c:	b930      	cbnz	r0, 1a00087c <uartProcessIRQ+0x28>
1a00086e:	4b1e      	ldr	r3, [pc, #120]	; (1a0008e8 <uartProcessIRQ+0x94>)
1a000870:	681b      	ldr	r3, [r3, #0]
1a000872:	b11b      	cbz	r3, 1a00087c <uartProcessIRQ+0x28>
         (*rxIsrCallbackUART0)(0);
1a000874:	4b1c      	ldr	r3, [pc, #112]	; (1a0008e8 <uartProcessIRQ+0x94>)
1a000876:	681b      	ldr	r3, [r3, #0]
1a000878:	2000      	movs	r0, #0
1a00087a:	4798      	blx	r3

      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a00087c:	2c03      	cmp	r4, #3
1a00087e:	d106      	bne.n	1a00088e <uartProcessIRQ+0x3a>
1a000880:	4b1a      	ldr	r3, [pc, #104]	; (1a0008ec <uartProcessIRQ+0x98>)
1a000882:	681b      	ldr	r3, [r3, #0]
1a000884:	b11b      	cbz	r3, 1a00088e <uartProcessIRQ+0x3a>
         (*rxIsrCallbackUART2)(0);
1a000886:	4b19      	ldr	r3, [pc, #100]	; (1a0008ec <uartProcessIRQ+0x98>)
1a000888:	681b      	ldr	r3, [r3, #0]
1a00088a:	2000      	movs	r0, #0
1a00088c:	4798      	blx	r3

      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a00088e:	2c05      	cmp	r4, #5
1a000890:	d106      	bne.n	1a0008a0 <uartProcessIRQ+0x4c>
1a000892:	4b17      	ldr	r3, [pc, #92]	; (1a0008f0 <uartProcessIRQ+0x9c>)
1a000894:	681b      	ldr	r3, [r3, #0]
1a000896:	b11b      	cbz	r3, 1a0008a0 <uartProcessIRQ+0x4c>
         (*rxIsrCallbackUART3)(0);
1a000898:	4b15      	ldr	r3, [pc, #84]	; (1a0008f0 <uartProcessIRQ+0x9c>)
1a00089a:	681b      	ldr	r3, [r3, #0]
1a00089c:	2000      	movs	r0, #0
1a00089e:	4798      	blx	r3
   }

   // Tx Interrupt
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a0008a0:	f015 0f20 	tst.w	r5, #32
1a0008a4:	d01d      	beq.n	1a0008e2 <uartProcessIRQ+0x8e>
 *			to determine which interrupts are enabled. You can check
 *			for multiple enabled bits if needed.
 */
STATIC INLINE uint32_t Chip_UART_GetIntsEnabled(LPC_USART_T *pUART)
{
	return pUART->IER;
1a0008a6:	6873      	ldr	r3, [r6, #4]
1a0008a8:	f013 0f02 	tst.w	r3, #2
1a0008ac:	d019      	beq.n	1a0008e2 <uartProcessIRQ+0x8e>
       ( Chip_UART_GetIntsEnabled( lpcUarts[uart].uartAddr ) & UART_IER_THREINT ) ) {

      // Execute callback
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a0008ae:	b934      	cbnz	r4, 1a0008be <uartProcessIRQ+0x6a>
1a0008b0:	4b10      	ldr	r3, [pc, #64]	; (1a0008f4 <uartProcessIRQ+0xa0>)
1a0008b2:	681b      	ldr	r3, [r3, #0]
1a0008b4:	b11b      	cbz	r3, 1a0008be <uartProcessIRQ+0x6a>
         (*txIsrCallbackUART0)(0);
1a0008b6:	4b0f      	ldr	r3, [pc, #60]	; (1a0008f4 <uartProcessIRQ+0xa0>)
1a0008b8:	681b      	ldr	r3, [r3, #0]
1a0008ba:	2000      	movs	r0, #0
1a0008bc:	4798      	blx	r3

      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a0008be:	2c03      	cmp	r4, #3
1a0008c0:	d106      	bne.n	1a0008d0 <uartProcessIRQ+0x7c>
1a0008c2:	4b0d      	ldr	r3, [pc, #52]	; (1a0008f8 <uartProcessIRQ+0xa4>)
1a0008c4:	681b      	ldr	r3, [r3, #0]
1a0008c6:	b11b      	cbz	r3, 1a0008d0 <uartProcessIRQ+0x7c>
         (*txIsrCallbackUART2)(0);
1a0008c8:	4b0b      	ldr	r3, [pc, #44]	; (1a0008f8 <uartProcessIRQ+0xa4>)
1a0008ca:	681b      	ldr	r3, [r3, #0]
1a0008cc:	2000      	movs	r0, #0
1a0008ce:	4798      	blx	r3

      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a0008d0:	2c05      	cmp	r4, #5
1a0008d2:	d106      	bne.n	1a0008e2 <uartProcessIRQ+0x8e>
1a0008d4:	4b09      	ldr	r3, [pc, #36]	; (1a0008fc <uartProcessIRQ+0xa8>)
1a0008d6:	681b      	ldr	r3, [r3, #0]
1a0008d8:	b11b      	cbz	r3, 1a0008e2 <uartProcessIRQ+0x8e>
         (*txIsrCallbackUART3)(0);
1a0008da:	4b08      	ldr	r3, [pc, #32]	; (1a0008fc <uartProcessIRQ+0xa8>)
1a0008dc:	681b      	ldr	r3, [r3, #0]
1a0008de:	2000      	movs	r0, #0
1a0008e0:	4798      	blx	r3
1a0008e2:	bd70      	pop	{r4, r5, r6, pc}
1a0008e4:	1a002368 	.word	0x1a002368
1a0008e8:	100000d4 	.word	0x100000d4
1a0008ec:	100000e4 	.word	0x100000e4
1a0008f0:	100000e8 	.word	0x100000e8
1a0008f4:	100000d8 	.word	0x100000d8
1a0008f8:	100000dc 	.word	0x100000dc
1a0008fc:	100000e0 	.word	0x100000e0

1a000900 <uartRxReady>:
//-------------------------------------------------------------

// Return TRUE if have unread data in RX FIFO
bool_t uartRxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a000900:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000904:	0080      	lsls	r0, r0, #2
1a000906:	4b03      	ldr	r3, [pc, #12]	; (1a000914 <uartRxReady+0x14>)
1a000908:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00090a:	6958      	ldr	r0, [r3, #20]
}
1a00090c:	f000 0001 	and.w	r0, r0, #1
1a000910:	4770      	bx	lr
1a000912:	bf00      	nop
1a000914:	1a002368 	.word	0x1a002368

1a000918 <uartTxReady>:
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a000918:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a00091c:	0080      	lsls	r0, r0, #2
1a00091e:	4b03      	ldr	r3, [pc, #12]	; (1a00092c <uartTxReady+0x14>)
1a000920:	581b      	ldr	r3, [r3, r0]
1a000922:	6958      	ldr	r0, [r3, #20]
}
1a000924:	f000 0020 	and.w	r0, r0, #32
1a000928:	4770      	bx	lr
1a00092a:	bf00      	nop
1a00092c:	1a002368 	.word	0x1a002368

1a000930 <uartRxRead>:
// Read from RX FIFO
uint8_t uartRxRead( uartMap_t uart )
{
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a000930:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000934:	0080      	lsls	r0, r0, #2
1a000936:	4b02      	ldr	r3, [pc, #8]	; (1a000940 <uartRxRead+0x10>)
1a000938:	581b      	ldr	r3, [r3, r0]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00093a:	6818      	ldr	r0, [r3, #0]
}
1a00093c:	b2c0      	uxtb	r0, r0
1a00093e:	4770      	bx	lr
1a000940:	1a002368 	.word	0x1a002368

1a000944 <uartTxWrite>:
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a000944:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a000948:	0080      	lsls	r0, r0, #2
1a00094a:	4b02      	ldr	r3, [pc, #8]	; (1a000954 <uartTxWrite+0x10>)
1a00094c:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a00094e:	6019      	str	r1, [r3, #0]
1a000950:	4770      	bx	lr
1a000952:	bf00      	nop
1a000954:	1a002368 	.word	0x1a002368

1a000958 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a000958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00095c:	4607      	mov	r7, r0
1a00095e:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a000960:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a0009d0 <uartInit+0x78>
1a000964:	0044      	lsls	r4, r0, #1
1a000966:	1823      	adds	r3, r4, r0
1a000968:	009b      	lsls	r3, r3, #2
1a00096a:	eb08 0503 	add.w	r5, r8, r3
1a00096e:	f858 6003 	ldr.w	r6, [r8, r3]
1a000972:	4630      	mov	r0, r6
1a000974:	f000 fb66 	bl	1a001044 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a000978:	4630      	mov	r0, r6
1a00097a:	4649      	mov	r1, r9
1a00097c:	f000 fb8c 	bl	1a001098 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a000980:	2307      	movs	r3, #7
1a000982:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000984:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000986:	2301      	movs	r3, #1
1a000988:	65f3      	str	r3, [r6, #92]	; 0x5c
   // Dummy read
   Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00098a:	7929      	ldrb	r1, [r5, #4]
1a00098c:	796b      	ldrb	r3, [r5, #5]
1a00098e:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a000990:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000994:	480c      	ldr	r0, [pc, #48]	; (1a0009c8 <uartInit+0x70>)
1a000996:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00099a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a00099e:	79ee      	ldrb	r6, [r5, #7]
1a0009a0:	7a2a      	ldrb	r2, [r5, #8]
1a0009a2:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a0009a4:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0009a8:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a0009ac:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a0009b0:	2f01      	cmp	r7, #1
1a0009b2:	d107      	bne.n	1a0009c4 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a0009b4:	4a05      	ldr	r2, [pc, #20]	; (1a0009cc <uartInit+0x74>)
1a0009b6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a0009b8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a0009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
1a0009be:	221a      	movs	r2, #26
1a0009c0:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a0009c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0009c8:	40086000 	.word	0x40086000
1a0009cc:	40081000 	.word	0x40081000
1a0009d0:	1a002368 	.word	0x1a002368

1a0009d4 <uartReadByte>:
   }
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
1a0009d4:	b538      	push	{r3, r4, r5, lr}
1a0009d6:	4605      	mov	r5, r0
1a0009d8:	460c      	mov	r4, r1
   bool_t retVal = TRUE;
   if ( uartRxReady(uart) ) {
1a0009da:	f7ff ff91 	bl	1a000900 <uartRxReady>
1a0009de:	b128      	cbz	r0, 1a0009ec <uartReadByte+0x18>
      *receivedByte = uartRxRead(uart);
1a0009e0:	4628      	mov	r0, r5
1a0009e2:	f7ff ffa5 	bl	1a000930 <uartRxRead>
1a0009e6:	7020      	strb	r0, [r4, #0]
}

// Read 1 byte from RX FIFO, check first if exist aviable data
bool_t uartReadByte( uartMap_t uart, uint8_t* receivedByte )
{
   bool_t retVal = TRUE;
1a0009e8:	2001      	movs	r0, #1
1a0009ea:	bd38      	pop	{r3, r4, r5, pc}
   if ( uartRxReady(uart) ) {
      *receivedByte = uartRxRead(uart);
   } else {
      retVal = FALSE;
1a0009ec:	2000      	movs	r0, #0
   }
   return retVal;
}
1a0009ee:	bd38      	pop	{r3, r4, r5, pc}

1a0009f0 <waitForReceiveStringOrTimeout>:

// Check for Receive a given pattern

waitForReceiveStringOrTimeoutState_t waitForReceiveStringOrTimeout(
   uartMap_t uart, waitForReceiveStringOrTimeout_t* instance )
{
1a0009f0:	b510      	push	{r4, lr}
1a0009f2:	b082      	sub	sp, #8
1a0009f4:	460c      	mov	r4, r1

   uint8_t receiveByte;
   //char receiveBuffer[100];

   switch( instance->state ) {
1a0009f6:	780b      	ldrb	r3, [r1, #0]
1a0009f8:	2b04      	cmp	r3, #4
1a0009fa:	d832      	bhi.n	1a000a62 <waitForReceiveStringOrTimeout+0x72>
1a0009fc:	e8df f003 	tbb	[pc, r3]
1a000a00:	312b0e03 	.word	0x312b0e03
1a000a04:	2e          	.byte	0x2e
1a000a05:	00          	.byte	0x00

   case UART_RECEIVE_STRING_CONFIG:

      delayInit( &(instance->delay), instance->timeout );
1a000a06:	f101 0018 	add.w	r0, r1, #24
1a000a0a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a000a0e:	f000 f88d 	bl	1a000b2c <delayInit>

      instance->stringIndex = 0;
1a000a12:	2300      	movs	r3, #0
1a000a14:	8163      	strh	r3, [r4, #10]

      instance->state = UART_RECEIVE_STRING_RECEIVING;
1a000a16:	2301      	movs	r3, #1
1a000a18:	7023      	strb	r3, [r4, #0]

      break;
1a000a1a:	e024      	b.n	1a000a66 <waitForReceiveStringOrTimeout+0x76>

   case UART_RECEIVE_STRING_RECEIVING:

      if( uartReadByte( uart, &receiveByte ) ) {
1a000a1c:	f10d 0107 	add.w	r1, sp, #7
1a000a20:	f7ff ffd8 	bl	1a0009d4 <uartReadByte>
1a000a24:	b178      	cbz	r0, 1a000a46 <waitForReceiveStringOrTimeout+0x56>
         //uartWriteByte( UART_DEBUG, receiveByte ); // TODO: DEBUG
         /*            if( (instance->stringIndex) <= 100 ){
                        receiveBuffer[instance->stringIndex] = receiveByte;
                     }
         */
         if( (instance->string)[(instance->stringIndex)] == receiveByte ) {
1a000a26:	6862      	ldr	r2, [r4, #4]
1a000a28:	8963      	ldrh	r3, [r4, #10]
1a000a2a:	5cd1      	ldrb	r1, [r2, r3]
1a000a2c:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000a30:	4291      	cmp	r1, r2
1a000a32:	d108      	bne.n	1a000a46 <waitForReceiveStringOrTimeout+0x56>

            (instance->stringIndex)++;
1a000a34:	3301      	adds	r3, #1
1a000a36:	b29b      	uxth	r3, r3
1a000a38:	8163      	strh	r3, [r4, #10]

            if( (instance->stringIndex) == (instance->stringSize - 1) ) {
1a000a3a:	8922      	ldrh	r2, [r4, #8]
1a000a3c:	3a01      	subs	r2, #1
1a000a3e:	4293      	cmp	r3, r2
1a000a40:	d101      	bne.n	1a000a46 <waitForReceiveStringOrTimeout+0x56>
               instance->state = UART_RECEIVE_STRING_RECEIVED_OK;
1a000a42:	2302      	movs	r3, #2
1a000a44:	7023      	strb	r3, [r4, #0]

         }

      }

      if( delayRead( &(instance->delay) ) ) {
1a000a46:	f104 0018 	add.w	r0, r4, #24
1a000a4a:	f000 f87f 	bl	1a000b4c <delayRead>
1a000a4e:	b150      	cbz	r0, 1a000a66 <waitForReceiveStringOrTimeout+0x76>
         instance->state = UART_RECEIVE_STRING_TIMEOUT;
1a000a50:	2304      	movs	r3, #4
1a000a52:	7023      	strb	r3, [r4, #0]
1a000a54:	e007      	b.n	1a000a66 <waitForReceiveStringOrTimeout+0x76>
      }

      break;

   case UART_RECEIVE_STRING_RECEIVED_OK:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000a56:	2300      	movs	r3, #0
1a000a58:	700b      	strb	r3, [r1, #0]
      break;
1a000a5a:	e004      	b.n	1a000a66 <waitForReceiveStringOrTimeout+0x76>

   case UART_RECEIVE_STRING_TIMEOUT:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000a5c:	2300      	movs	r3, #0
1a000a5e:	700b      	strb	r3, [r1, #0]
      break;
1a000a60:	e001      	b.n	1a000a66 <waitForReceiveStringOrTimeout+0x76>

   default:
      instance->state = UART_RECEIVE_STRING_CONFIG;
1a000a62:	2300      	movs	r3, #0
1a000a64:	700b      	strb	r3, [r1, #0]
      break;
   }

   return instance->state;
}
1a000a66:	7820      	ldrb	r0, [r4, #0]
1a000a68:	b002      	add	sp, #8
1a000a6a:	bd10      	pop	{r4, pc}

1a000a6c <waitForReceiveStringOrTimeoutBlocking>:
// Devuelve TRUE cuando recibio la cadena patron, si paso el tiempo timeout
// en milisegundos antes de recibir el patron devuelve FALSE.
// No almacena los datos recibidos!! Simplemente espera a recibir cierto patron.
bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout )
{
1a000a6c:	b510      	push	{r4, lr}
1a000a6e:	b08c      	sub	sp, #48	; 0x30
1a000a70:	4604      	mov	r4, r0
   waitForReceiveStringOrTimeout_t waitText;
   waitForReceiveStringOrTimeoutState_t waitTextState;

   waitTextState = UART_RECEIVE_STRING_CONFIG;

   waitText.state = UART_RECEIVE_STRING_CONFIG;
1a000a72:	2000      	movs	r0, #0
1a000a74:	f88d 0000 	strb.w	r0, [sp]
   waitText.string =  string;
1a000a78:	9101      	str	r1, [sp, #4]
   waitText.stringSize = stringSize;
1a000a7a:	f8ad 2008 	strh.w	r2, [sp, #8]
   waitText.timeout = timeout;
1a000a7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a000a82:	e9cd 2304 	strd	r2, r3, [sp, #16]

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000a86:	e003      	b.n	1a000a90 <waitForReceiveStringOrTimeoutBlocking+0x24>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
1a000a88:	4620      	mov	r0, r4
1a000a8a:	4669      	mov	r1, sp
1a000a8c:	f7ff ffb0 	bl	1a0009f0 <waitForReceiveStringOrTimeout>
   waitText.state = UART_RECEIVE_STRING_CONFIG;
   waitText.string =  string;
   waitText.stringSize = stringSize;
   waitText.timeout = timeout;

   while( waitTextState != UART_RECEIVE_STRING_RECEIVED_OK &&
1a000a90:	2802      	cmp	r0, #2
1a000a92:	d001      	beq.n	1a000a98 <waitForReceiveStringOrTimeoutBlocking+0x2c>
1a000a94:	2804      	cmp	r0, #4
1a000a96:	d1f7      	bne.n	1a000a88 <waitForReceiveStringOrTimeoutBlocking+0x1c>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
1a000a98:	2804      	cmp	r0, #4
1a000a9a:	d001      	beq.n	1a000aa0 <waitForReceiveStringOrTimeoutBlocking+0x34>
// No almacena los datos recibidos!! Simplemente espera a recibir cierto patron.
bool_t waitForReceiveStringOrTimeoutBlocking(
   uartMap_t uart, char* string, uint16_t stringSize, tick_t timeout )
{

   bool_t retVal = TRUE; // True if OK
1a000a9c:	2001      	movs	r0, #1
1a000a9e:	e000      	b.n	1a000aa2 <waitForReceiveStringOrTimeoutBlocking+0x36>
          waitTextState != UART_RECEIVE_STRING_TIMEOUT ) {
      waitTextState = waitForReceiveStringOrTimeout( uart, &waitText );
   }

   if( waitTextState == UART_RECEIVE_STRING_TIMEOUT ) {
      retVal = FALSE;
1a000aa0:	2000      	movs	r0, #0
   }

   return retVal;
}
1a000aa2:	b00c      	add	sp, #48	; 0x30
1a000aa4:	bd10      	pop	{r4, pc}
1a000aa6:	bf00      	nop

1a000aa8 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a000aa8:	b538      	push	{r3, r4, r5, lr}
1a000aaa:	4604      	mov	r4, r0
1a000aac:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a000aae:	4620      	mov	r0, r4
1a000ab0:	f7ff ff32 	bl	1a000918 <uartTxReady>
1a000ab4:	2800      	cmp	r0, #0
1a000ab6:	d0fa      	beq.n	1a000aae <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a000ab8:	4620      	mov	r0, r4
1a000aba:	4629      	mov	r1, r5
1a000abc:	f7ff ff42 	bl	1a000944 <uartTxWrite>
1a000ac0:	bd38      	pop	{r3, r4, r5, pc}
1a000ac2:	bf00      	nop

1a000ac4 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a000ac4:	b538      	push	{r3, r4, r5, lr}
1a000ac6:	4605      	mov	r5, r0
1a000ac8:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a000aca:	e003      	b.n	1a000ad4 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a000acc:	4628      	mov	r0, r5
1a000ace:	f7ff ffeb 	bl	1a000aa8 <uartWriteByte>
      str++;
1a000ad2:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a000ad4:	7821      	ldrb	r1, [r4, #0]
1a000ad6:	2900      	cmp	r1, #0
1a000ad8:	d1f8      	bne.n	1a000acc <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a000ada:	bd38      	pop	{r3, r4, r5, pc}

1a000adc <UART2_IRQHandler>:
}

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a000adc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a000ade:	2003      	movs	r0, #3
1a000ae0:	f7ff feb8 	bl	1a000854 <uartProcessIRQ>
1a000ae4:	bd08      	pop	{r3, pc}
1a000ae6:	bf00      	nop

1a000ae8 <UART3_IRQHandler>:
}

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a000ae8:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a000aea:	2005      	movs	r0, #5
1a000aec:	f7ff feb2 	bl	1a000854 <uartProcessIRQ>
1a000af0:	bd08      	pop	{r3, pc}
1a000af2:	bf00      	nop

1a000af4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a000af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000af8:	4680      	mov	r8, r0
1a000afa:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a000afc:	f7ff fe42 	bl	1a000784 <tickRead>
1a000b00:	4606      	mov	r6, r0
1a000b02:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a000b04:	f7ff fe3e 	bl	1a000784 <tickRead>
1a000b08:	1b84      	subs	r4, r0, r6
1a000b0a:	eb61 0507 	sbc.w	r5, r1, r7
1a000b0e:	4640      	mov	r0, r8
1a000b10:	4649      	mov	r1, r9
1a000b12:	4b05      	ldr	r3, [pc, #20]	; (1a000b28 <delay+0x34>)
1a000b14:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000b18:	f001 f822 	bl	1a001b60 <__aeabi_uldivmod>
1a000b1c:	428d      	cmp	r5, r1
1a000b1e:	bf08      	it	eq
1a000b20:	4284      	cmpeq	r4, r0
1a000b22:	d3ef      	bcc.n	1a000b04 <delay+0x10>
}
1a000b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a000b28:	10000100 	.word	0x10000100

1a000b2c <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a000b2c:	b510      	push	{r4, lr}
1a000b2e:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a000b30:	4610      	mov	r0, r2
1a000b32:	4619      	mov	r1, r3
1a000b34:	4b04      	ldr	r3, [pc, #16]	; (1a000b48 <delayInit+0x1c>)
1a000b36:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000b3a:	f001 f811 	bl	1a001b60 <__aeabi_uldivmod>
1a000b3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a000b42:	2300      	movs	r3, #0
1a000b44:	7423      	strb	r3, [r4, #16]
1a000b46:	bd10      	pop	{r4, pc}
1a000b48:	10000100 	.word	0x10000100

1a000b4c <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a000b4c:	b510      	push	{r4, lr}
1a000b4e:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a000b50:	7c03      	ldrb	r3, [r0, #16]
1a000b52:	b93b      	cbnz	r3, 1a000b64 <delayRead+0x18>
      delay->startTime = tickRead();
1a000b54:	f7ff fe16 	bl	1a000784 <tickRead>
1a000b58:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a000b5c:	2301      	movs	r3, #1
1a000b5e:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a000b60:	2000      	movs	r0, #0
1a000b62:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a000b64:	f7ff fe0e 	bl	1a000784 <tickRead>
1a000b68:	e9d4 2300 	ldrd	r2, r3, [r4]
1a000b6c:	1a80      	subs	r0, r0, r2
1a000b6e:	eb61 0103 	sbc.w	r1, r1, r3
1a000b72:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a000b76:	4299      	cmp	r1, r3
1a000b78:	bf08      	it	eq
1a000b7a:	4290      	cmpeq	r0, r2
1a000b7c:	d303      	bcc.n	1a000b86 <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a000b7e:	2300      	movs	r3, #0
1a000b80:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a000b82:	2001      	movs	r0, #1
1a000b84:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a000b86:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a000b88:	bd10      	pop	{r4, pc}
1a000b8a:	bf00      	nop

1a000b8c <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a000b8c:	e7fe      	b.n	1a000b8c <errorOcurred>
1a000b8e:	bf00      	nop

1a000b90 <doNothing>:
}

static void doNothing( void* ptr )
{
1a000b90:	4770      	bx	lr
1a000b92:	bf00      	nop

1a000b94 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a000b94:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000b96:	2400      	movs	r4, #0
1a000b98:	e013      	b.n	1a000bc2 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000b9a:	4b0b      	ldr	r3, [pc, #44]	; (1a000bc8 <TIMER0_IRQHandler+0x34>)
1a000b9c:	681a      	ldr	r2, [r3, #0]
1a000b9e:	f004 010f 	and.w	r1, r4, #15
1a000ba2:	2301      	movs	r3, #1
1a000ba4:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a000ba6:	421a      	tst	r2, r3
1a000ba8:	d009      	beq.n	1a000bbe <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000baa:	4b08      	ldr	r3, [pc, #32]	; (1a000bcc <TIMER0_IRQHandler+0x38>)
1a000bac:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a000bb0:	2000      	movs	r0, #0
1a000bb2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000bb4:	b262      	sxtb	r2, r4
1a000bb6:	2301      	movs	r3, #1
1a000bb8:	4093      	lsls	r3, r2
1a000bba:	4a03      	ldr	r2, [pc, #12]	; (1a000bc8 <TIMER0_IRQHandler+0x34>)
1a000bbc:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000bbe:	3401      	adds	r4, #1
1a000bc0:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000bc2:	2c03      	cmp	r4, #3
1a000bc4:	d9e9      	bls.n	1a000b9a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a000bc6:	bd10      	pop	{r4, pc}
1a000bc8:	40084000 	.word	0x40084000
1a000bcc:	10000050 	.word	0x10000050

1a000bd0 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a000bd0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000bd2:	2400      	movs	r4, #0
1a000bd4:	e014      	b.n	1a000c00 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000bd6:	4b0c      	ldr	r3, [pc, #48]	; (1a000c08 <TIMER1_IRQHandler+0x38>)
1a000bd8:	681a      	ldr	r2, [r3, #0]
1a000bda:	f004 010f 	and.w	r1, r4, #15
1a000bde:	2301      	movs	r3, #1
1a000be0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a000be2:	421a      	tst	r2, r3
1a000be4:	d00a      	beq.n	1a000bfc <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000be6:	1d23      	adds	r3, r4, #4
1a000be8:	4a08      	ldr	r2, [pc, #32]	; (1a000c0c <TIMER1_IRQHandler+0x3c>)
1a000bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000bee:	2000      	movs	r0, #0
1a000bf0:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000bf2:	b262      	sxtb	r2, r4
1a000bf4:	2301      	movs	r3, #1
1a000bf6:	4093      	lsls	r3, r2
1a000bf8:	4a03      	ldr	r2, [pc, #12]	; (1a000c08 <TIMER1_IRQHandler+0x38>)
1a000bfa:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000bfc:	3401      	adds	r4, #1
1a000bfe:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c00:	2c03      	cmp	r4, #3
1a000c02:	d9e8      	bls.n	1a000bd6 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a000c04:	bd10      	pop	{r4, pc}
1a000c06:	bf00      	nop
1a000c08:	40085000 	.word	0x40085000
1a000c0c:	10000050 	.word	0x10000050

1a000c10 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a000c10:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c12:	2400      	movs	r4, #0
1a000c14:	e015      	b.n	1a000c42 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c16:	4b0c      	ldr	r3, [pc, #48]	; (1a000c48 <TIMER2_IRQHandler+0x38>)
1a000c18:	681a      	ldr	r2, [r3, #0]
1a000c1a:	f004 010f 	and.w	r1, r4, #15
1a000c1e:	2301      	movs	r3, #1
1a000c20:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a000c22:	421a      	tst	r2, r3
1a000c24:	d00b      	beq.n	1a000c3e <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000c26:	f104 0308 	add.w	r3, r4, #8
1a000c2a:	4a08      	ldr	r2, [pc, #32]	; (1a000c4c <TIMER2_IRQHandler+0x3c>)
1a000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000c30:	2000      	movs	r0, #0
1a000c32:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000c34:	b262      	sxtb	r2, r4
1a000c36:	2301      	movs	r3, #1
1a000c38:	4093      	lsls	r3, r2
1a000c3a:	4a03      	ldr	r2, [pc, #12]	; (1a000c48 <TIMER2_IRQHandler+0x38>)
1a000c3c:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000c3e:	3401      	adds	r4, #1
1a000c40:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c42:	2c03      	cmp	r4, #3
1a000c44:	d9e7      	bls.n	1a000c16 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a000c46:	bd10      	pop	{r4, pc}
1a000c48:	400c3000 	.word	0x400c3000
1a000c4c:	10000050 	.word	0x10000050

1a000c50 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a000c50:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c52:	2400      	movs	r4, #0
1a000c54:	e015      	b.n	1a000c82 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a000c56:	4b0c      	ldr	r3, [pc, #48]	; (1a000c88 <TIMER3_IRQHandler+0x38>)
1a000c58:	681a      	ldr	r2, [r3, #0]
1a000c5a:	f004 010f 	and.w	r1, r4, #15
1a000c5e:	2301      	movs	r3, #1
1a000c60:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a000c62:	421a      	tst	r2, r3
1a000c64:	d00b      	beq.n	1a000c7e <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a000c66:	f104 030c 	add.w	r3, r4, #12
1a000c6a:	4a08      	ldr	r2, [pc, #32]	; (1a000c8c <TIMER3_IRQHandler+0x3c>)
1a000c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a000c70:	2000      	movs	r0, #0
1a000c72:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a000c74:	b262      	sxtb	r2, r4
1a000c76:	2301      	movs	r3, #1
1a000c78:	4093      	lsls	r3, r2
1a000c7a:	4a03      	ldr	r2, [pc, #12]	; (1a000c88 <TIMER3_IRQHandler+0x38>)
1a000c7c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a000c7e:	3401      	adds	r4, #1
1a000c80:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a000c82:	2c03      	cmp	r4, #3
1a000c84:	d9e7      	bls.n	1a000c56 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a000c86:	bd10      	pop	{r4, pc}
1a000c88:	400c4000 	.word	0x400c4000
1a000c8c:	10000050 	.word	0x10000050

1a000c90 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a000c90:	b508      	push	{r3, lr}
   *printer = uart;
1a000c92:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a000c94:	4608      	mov	r0, r1
1a000c96:	4611      	mov	r1, r2
1a000c98:	f7ff fe5e 	bl	1a000958 <uartInit>
1a000c9c:	bd08      	pop	{r3, pc}
1a000c9e:	bf00      	nop

1a000ca0 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a000ca0:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a000ca2:	f7ff ff0f 	bl	1a000ac4 <uartWriteString>
1a000ca6:	bd08      	pop	{r3, pc}

1a000ca8 <printEnter>:
}

void printEnter( print_t printer )
{
1a000ca8:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a000caa:	4902      	ldr	r1, [pc, #8]	; (1a000cb4 <printEnter+0xc>)
1a000cac:	f7ff ff0a 	bl	1a000ac4 <uartWriteString>
1a000cb0:	bd08      	pop	{r3, pc}
1a000cb2:	bf00      	nop
1a000cb4:	1a0021f0 	.word	0x1a0021f0

1a000cb8 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a000cb8:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a000cba:	f000 fae1 	bl	1a001280 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a000cbe:	4b3a      	ldr	r3, [pc, #232]	; (1a000da8 <boardInit+0xf0>)
1a000cc0:	6818      	ldr	r0, [r3, #0]
1a000cc2:	f7ff fbcb 	bl	1a00045c <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a000cc6:	2001      	movs	r0, #1
1a000cc8:	2100      	movs	r1, #0
1a000cca:	f7ff fd6d 	bl	1a0007a8 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a000cce:	2000      	movs	r0, #0
1a000cd0:	2105      	movs	r1, #5
1a000cd2:	f7ff fc31 	bl	1a000538 <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a000cd6:	2024      	movs	r0, #36	; 0x24
1a000cd8:	2100      	movs	r1, #0
1a000cda:	f7ff fc2d 	bl	1a000538 <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a000cde:	2025      	movs	r0, #37	; 0x25
1a000ce0:	2100      	movs	r1, #0
1a000ce2:	f7ff fc29 	bl	1a000538 <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a000ce6:	2026      	movs	r0, #38	; 0x26
1a000ce8:	2100      	movs	r1, #0
1a000cea:	f7ff fc25 	bl	1a000538 <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a000cee:	2027      	movs	r0, #39	; 0x27
1a000cf0:	2100      	movs	r1, #0
1a000cf2:	f7ff fc21 	bl	1a000538 <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a000cf6:	2028      	movs	r0, #40	; 0x28
1a000cf8:	2101      	movs	r1, #1
1a000cfa:	f7ff fc1d 	bl	1a000538 <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a000cfe:	2029      	movs	r0, #41	; 0x29
1a000d00:	2101      	movs	r1, #1
1a000d02:	f7ff fc19 	bl	1a000538 <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a000d06:	202a      	movs	r0, #42	; 0x2a
1a000d08:	2101      	movs	r1, #1
1a000d0a:	f7ff fc15 	bl	1a000538 <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a000d0e:	202b      	movs	r0, #43	; 0x2b
1a000d10:	2101      	movs	r1, #1
1a000d12:	f7ff fc11 	bl	1a000538 <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a000d16:	202c      	movs	r0, #44	; 0x2c
1a000d18:	2101      	movs	r1, #1
1a000d1a:	f7ff fc0d 	bl	1a000538 <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a000d1e:	202d      	movs	r0, #45	; 0x2d
1a000d20:	2101      	movs	r1, #1
1a000d22:	f7ff fc09 	bl	1a000538 <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a000d26:	202e      	movs	r0, #46	; 0x2e
1a000d28:	2100      	movs	r1, #0
1a000d2a:	f7ff fc05 	bl	1a000538 <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a000d2e:	202f      	movs	r0, #47	; 0x2f
1a000d30:	2100      	movs	r1, #0
1a000d32:	f7ff fc01 	bl	1a000538 <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a000d36:	2030      	movs	r0, #48	; 0x30
1a000d38:	2100      	movs	r1, #0
1a000d3a:	f7ff fbfd 	bl	1a000538 <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a000d3e:	2031      	movs	r0, #49	; 0x31
1a000d40:	2100      	movs	r1, #0
1a000d42:	f7ff fbf9 	bl	1a000538 <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a000d46:	2032      	movs	r0, #50	; 0x32
1a000d48:	2100      	movs	r1, #0
1a000d4a:	f7ff fbf5 	bl	1a000538 <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a000d4e:	2033      	movs	r0, #51	; 0x33
1a000d50:	2100      	movs	r1, #0
1a000d52:	f7ff fbf1 	bl	1a000538 <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a000d56:	2034      	movs	r0, #52	; 0x34
1a000d58:	2100      	movs	r1, #0
1a000d5a:	f7ff fbed 	bl	1a000538 <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a000d5e:	2035      	movs	r0, #53	; 0x35
1a000d60:	2100      	movs	r1, #0
1a000d62:	f7ff fbe9 	bl	1a000538 <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a000d66:	2036      	movs	r0, #54	; 0x36
1a000d68:	2101      	movs	r1, #1
1a000d6a:	f7ff fbe5 	bl	1a000538 <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a000d6e:	2037      	movs	r0, #55	; 0x37
1a000d70:	2101      	movs	r1, #1
1a000d72:	f7ff fbe1 	bl	1a000538 <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a000d76:	2038      	movs	r0, #56	; 0x38
1a000d78:	2101      	movs	r1, #1
1a000d7a:	f7ff fbdd 	bl	1a000538 <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a000d7e:	2039      	movs	r0, #57	; 0x39
1a000d80:	2101      	movs	r1, #1
1a000d82:	f7ff fbd9 	bl	1a000538 <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a000d86:	203a      	movs	r0, #58	; 0x3a
1a000d88:	2101      	movs	r1, #1
1a000d8a:	f7ff fbd5 	bl	1a000538 <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a000d8e:	203b      	movs	r0, #59	; 0x3b
1a000d90:	2101      	movs	r1, #1
1a000d92:	f7ff fbd1 	bl	1a000538 <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a000d96:	203c      	movs	r0, #60	; 0x3c
1a000d98:	2101      	movs	r1, #1
1a000d9a:	f7ff fbcd 	bl	1a000538 <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a000d9e:	203d      	movs	r0, #61	; 0x3d
1a000da0:	2101      	movs	r1, #1
1a000da2:	f7ff fbc9 	bl	1a000538 <gpioInit>
1a000da6:	bd08      	pop	{r3, pc}
1a000da8:	10000108 	.word	0x10000108

1a000dac <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a000dac:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000dae:	2200      	movs	r2, #0
1a000db0:	e014      	b.n	1a000ddc <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000db2:	4b0c      	ldr	r3, [pc, #48]	; (1a000de4 <Board_LED_Init+0x38>)
1a000db4:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a000db8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000dbc:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000dbe:	480a      	ldr	r0, [pc, #40]	; (1a000de8 <Board_LED_Init+0x3c>)
1a000dc0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000dc4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a000dc8:	2301      	movs	r3, #1
1a000dca:	408b      	lsls	r3, r1
1a000dcc:	4333      	orrs	r3, r6
1a000dce:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a000dd2:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a000dd6:	2300      	movs	r3, #0
1a000dd8:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000dda:	3201      	adds	r2, #1
1a000ddc:	2a05      	cmp	r2, #5
1a000dde:	d9e8      	bls.n	1a000db2 <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000de0:	bc70      	pop	{r4, r5, r6}
1a000de2:	4770      	bx	lr
1a000de4:	1a0023d4 	.word	0x1a0023d4
1a000de8:	400f4000 	.word	0x400f4000

1a000dec <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a000dec:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000dee:	2300      	movs	r3, #0
1a000df0:	e011      	b.n	1a000e16 <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000df2:	490b      	ldr	r1, [pc, #44]	; (1a000e20 <Board_TEC_Init+0x34>)
1a000df4:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000df8:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000dfc:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000dfe:	4c09      	ldr	r4, [pc, #36]	; (1a000e24 <Board_TEC_Init+0x38>)
1a000e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000e04:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000e08:	2101      	movs	r1, #1
1a000e0a:	40a9      	lsls	r1, r5
1a000e0c:	ea20 0101 	bic.w	r1, r0, r1
1a000e10:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000e14:	3301      	adds	r3, #1
1a000e16:	2b03      	cmp	r3, #3
1a000e18:	d9eb      	bls.n	1a000df2 <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000e1a:	bc30      	pop	{r4, r5}
1a000e1c:	4770      	bx	lr
1a000e1e:	bf00      	nop
1a000e20:	1a0023cc 	.word	0x1a0023cc
1a000e24:	400f4000 	.word	0x400f4000

1a000e28 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a000e28:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000e2a:	2300      	movs	r3, #0
1a000e2c:	e011      	b.n	1a000e52 <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000e2e:	490b      	ldr	r1, [pc, #44]	; (1a000e5c <Board_GPIO_Init+0x34>)
1a000e30:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000e34:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000e38:	784d      	ldrb	r5, [r1, #1]
1a000e3a:	4c09      	ldr	r4, [pc, #36]	; (1a000e60 <Board_GPIO_Init+0x38>)
1a000e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000e40:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000e44:	2101      	movs	r1, #1
1a000e46:	40a9      	lsls	r1, r5
1a000e48:	ea20 0101 	bic.w	r1, r0, r1
1a000e4c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000e50:	3301      	adds	r3, #1
1a000e52:	2b08      	cmp	r3, #8
1a000e54:	d9eb      	bls.n	1a000e2e <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000e56:	bc30      	pop	{r4, r5}
1a000e58:	4770      	bx	lr
1a000e5a:	bf00      	nop
1a000e5c:	1a0023b0 	.word	0x1a0023b0
1a000e60:	400f4000 	.word	0x400f4000

1a000e64 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000e64:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000e66:	4c0b      	ldr	r4, [pc, #44]	; (1a000e94 <Board_SPI_Init+0x30>)
1a000e68:	4620      	mov	r0, r4
1a000e6a:	f000 fddf 	bl	1a001a2c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000e6e:	6863      	ldr	r3, [r4, #4]
1a000e70:	f023 0304 	bic.w	r3, r3, #4
1a000e74:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000e76:	6823      	ldr	r3, [r4, #0]
1a000e78:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000e7c:	f043 0307 	orr.w	r3, r3, #7
1a000e80:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000e82:	4620      	mov	r0, r4
1a000e84:	4904      	ldr	r1, [pc, #16]	; (1a000e98 <Board_SPI_Init+0x34>)
1a000e86:	f000 fdb1 	bl	1a0019ec <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000e8a:	6863      	ldr	r3, [r4, #4]
1a000e8c:	f043 0302 	orr.w	r3, r3, #2
1a000e90:	6063      	str	r3, [r4, #4]
1a000e92:	bd10      	pop	{r4, pc}
1a000e94:	400c5000 	.word	0x400c5000
1a000e98:	000186a0 	.word	0x000186a0

1a000e9c <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a000e9c:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000e9e:	2000      	movs	r0, #0
1a000ea0:	f000 fdf0 	bl	1a001a84 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000ea4:	f640 0208 	movw	r2, #2056	; 0x808
1a000ea8:	4b03      	ldr	r3, [pc, #12]	; (1a000eb8 <Board_I2C_Init+0x1c>)
1a000eaa:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000eae:	2000      	movs	r0, #0
1a000eb0:	4902      	ldr	r1, [pc, #8]	; (1a000ebc <Board_I2C_Init+0x20>)
1a000eb2:	f000 fdf9 	bl	1a001aa8 <Chip_I2C_SetClockRate>
1a000eb6:	bd08      	pop	{r3, pc}
1a000eb8:	40086000 	.word	0x40086000
1a000ebc:	000f4240 	.word	0x000f4240

1a000ec0 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000ec0:	b510      	push	{r4, lr}
1a000ec2:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000ec4:	4c08      	ldr	r4, [pc, #32]	; (1a000ee8 <Board_ADC_Init+0x28>)
1a000ec6:	4620      	mov	r0, r4
1a000ec8:	4669      	mov	r1, sp
1a000eca:	f000 f999 	bl	1a001200 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000ece:	4620      	mov	r0, r4
1a000ed0:	4669      	mov	r1, sp
1a000ed2:	4a06      	ldr	r2, [pc, #24]	; (1a000eec <Board_ADC_Init+0x2c>)
1a000ed4:	f000 f9b4 	bl	1a001240 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000ed8:	4620      	mov	r0, r4
1a000eda:	4669      	mov	r1, sp
1a000edc:	2200      	movs	r2, #0
1a000ede:	f000 f9c9 	bl	1a001274 <Chip_ADC_SetResolution>
}
1a000ee2:	b002      	add	sp, #8
1a000ee4:	bd10      	pop	{r4, pc}
1a000ee6:	bf00      	nop
1a000ee8:	400e3000 	.word	0x400e3000
1a000eec:	00061a80 	.word	0x00061a80

1a000ef0 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000ef0:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000ef2:	4c07      	ldr	r4, [pc, #28]	; (1a000f10 <Board_Debug_Init+0x20>)
1a000ef4:	4620      	mov	r0, r4
1a000ef6:	f000 f8a5 	bl	1a001044 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000efa:	4620      	mov	r0, r4
1a000efc:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000f00:	f000 f8ea 	bl	1a0010d8 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000f04:	2303      	movs	r3, #3
1a000f06:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000f08:	2301      	movs	r3, #1
1a000f0a:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000f0c:	bd10      	pop	{r4, pc}
1a000f0e:	bf00      	nop
1a000f10:	400c1000 	.word	0x400c1000

1a000f14 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000f14:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000f16:	f7ff ffeb 	bl	1a000ef0 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000f1a:	480b      	ldr	r0, [pc, #44]	; (1a000f48 <Board_Init+0x34>)
1a000f1c:	f000 fd44 	bl	1a0019a8 <Chip_GPIO_Init>

   Board_LED_Init();
1a000f20:	f7ff ff44 	bl	1a000dac <Board_LED_Init>
   Board_TEC_Init();
1a000f24:	f7ff ff62 	bl	1a000dec <Board_TEC_Init>
   Board_SPI_Init();
1a000f28:	f7ff ff9c 	bl	1a000e64 <Board_SPI_Init>
   Board_GPIO_Init();
1a000f2c:	f7ff ff7c 	bl	1a000e28 <Board_GPIO_Init>
   Board_I2C_Init();
1a000f30:	f7ff ffb4 	bl	1a000e9c <Board_I2C_Init>
   Board_ADC_Init();
1a000f34:	f7ff ffc4 	bl	1a000ec0 <Board_ADC_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
	LPC_CREG->CREG6 |= 0x4;
1a000f38:	4a04      	ldr	r2, [pc, #16]	; (1a000f4c <Board_Init+0x38>)
1a000f3a:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a000f3e:	f043 0304 	orr.w	r3, r3, #4
1a000f42:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
1a000f46:	bd08      	pop	{r3, pc}
1a000f48:	400f4000 	.word	0x400f4000
1a000f4c:	40043000 	.word	0x40043000

1a000f50 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000f50:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a000f52:	4b04      	ldr	r3, [pc, #16]	; (1a000f64 <SystemInit+0x14>)
1a000f54:	4a04      	ldr	r2, [pc, #16]	; (1a000f68 <SystemInit+0x18>)
1a000f56:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000f58:	f000 fcfa 	bl	1a001950 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a000f5c:	f000 f856 	bl	1a00100c <Board_SystemInit>
1a000f60:	bd08      	pop	{r3, pc}
1a000f62:	bf00      	nop
1a000f64:	e000ed08 	.word	0xe000ed08
1a000f68:	1a000000 	.word	0x1a000000

1a000f6c <Board_SetupMuxing>:
    {0,  1, (SCU_MODE_HIGHSPEEDSLEW_EN | SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_FUNC6)}, /* TXEN */
};


void Board_SetupMuxing(void)
{
1a000f6c:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000f6e:	2300      	movs	r3, #0
1a000f70:	e00c      	b.n	1a000f8c <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000f72:	4a09      	ldr	r2, [pc, #36]	; (1a000f98 <Board_SetupMuxing+0x2c>)
1a000f74:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000f78:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000f7c:	784a      	ldrb	r2, [r1, #1]
1a000f7e:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000f80:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000f84:	4905      	ldr	r1, [pc, #20]	; (1a000f9c <Board_SetupMuxing+0x30>)
1a000f86:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000f8a:	3301      	adds	r3, #1
1a000f8c:	2b25      	cmp	r3, #37	; 0x25
1a000f8e:	d9f0      	bls.n	1a000f72 <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000f90:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000f94:	4770      	bx	lr
1a000f96:	bf00      	nop
1a000f98:	1a0023ec 	.word	0x1a0023ec
1a000f9c:	40086000 	.word	0x40086000

1a000fa0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000fa0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000fa2:	4a17      	ldr	r2, [pc, #92]	; (1a001000 <Board_SetupClocking+0x60>)
1a000fa4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000fac:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000fb0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000fb4:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000fbc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000fc0:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000fc4:	2006      	movs	r0, #6
1a000fc6:	490f      	ldr	r1, [pc, #60]	; (1a001004 <Board_SetupClocking+0x64>)
1a000fc8:	2201      	movs	r2, #1
1a000fca:	f000 fc19 	bl	1a001800 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000fce:	2400      	movs	r4, #0
1a000fd0:	e00a      	b.n	1a000fe8 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000fd2:	4a0d      	ldr	r2, [pc, #52]	; (1a001008 <Board_SetupClocking+0x68>)
1a000fd4:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000fd8:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000fdc:	7859      	ldrb	r1, [r3, #1]
1a000fde:	789a      	ldrb	r2, [r3, #2]
1a000fe0:	78db      	ldrb	r3, [r3, #3]
1a000fe2:	f000 fb75 	bl	1a0016d0 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000fe6:	3401      	adds	r4, #1
1a000fe8:	2c02      	cmp	r4, #2
1a000fea:	d9f2      	bls.n	1a000fd2 <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000fec:	4b04      	ldr	r3, [pc, #16]	; (1a001000 <Board_SetupClocking+0x60>)
1a000fee:	685a      	ldr	r2, [r3, #4]
1a000ff0:	f022 020c 	bic.w	r2, r2, #12
1a000ff4:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000ff6:	685a      	ldr	r2, [r3, #4]
1a000ff8:	f042 0203 	orr.w	r2, r2, #3
1a000ffc:	605a      	str	r2, [r3, #4]
1a000ffe:	bd10      	pop	{r4, pc}
1a001000:	40043000 	.word	0x40043000
1a001004:	0c28cb00 	.word	0x0c28cb00
1a001008:	1a0023e0 	.word	0x1a0023e0

1a00100c <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a00100c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a00100e:	f7ff ffad 	bl	1a000f6c <Board_SetupMuxing>
    Board_SetupClocking();
1a001012:	f7ff ffc5 	bl	1a000fa0 <Board_SetupClocking>
1a001016:	bd08      	pop	{r3, pc}

1a001018 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001018:	4b09      	ldr	r3, [pc, #36]	; (1a001040 <Chip_UART_GetIndex+0x28>)
1a00101a:	4298      	cmp	r0, r3
1a00101c:	d009      	beq.n	1a001032 <Chip_UART_GetIndex+0x1a>
1a00101e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a001022:	4298      	cmp	r0, r3
1a001024:	d007      	beq.n	1a001036 <Chip_UART_GetIndex+0x1e>
1a001026:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a00102a:	4298      	cmp	r0, r3
1a00102c:	d005      	beq.n	1a00103a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a00102e:	2000      	movs	r0, #0
1a001030:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a001032:	2002      	movs	r0, #2
1a001034:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a001036:	2003      	movs	r0, #3
1a001038:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a00103a:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a00103c:	4770      	bx	lr
1a00103e:	bf00      	nop
1a001040:	400c1000 	.word	0x400c1000

1a001044 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a001044:	b510      	push	{r4, lr}
1a001046:	b082      	sub	sp, #8
1a001048:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a00104a:	f7ff ffe5 	bl	1a001018 <Chip_UART_GetIndex>
1a00104e:	4b10      	ldr	r3, [pc, #64]	; (1a001090 <Chip_UART_Init+0x4c>)
1a001050:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001054:	2101      	movs	r1, #1
1a001056:	460a      	mov	r2, r1
1a001058:	460b      	mov	r3, r1
1a00105a:	f000 fb73 	bl	1a001744 <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a00105e:	2307      	movs	r3, #7
1a001060:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a001062:	2300      	movs	r3, #0
1a001064:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a001066:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001068:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a00106a:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a00106c:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a00106e:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001070:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a001072:	4b08      	ldr	r3, [pc, #32]	; (1a001094 <Chip_UART_Init+0x50>)
1a001074:	429c      	cmp	r4, r3
1a001076:	d103      	bne.n	1a001080 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a001078:	2300      	movs	r3, #0
1a00107a:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a00107c:	69a3      	ldr	r3, [r4, #24]
1a00107e:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a001080:	2303      	movs	r3, #3
1a001082:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001084:	2310      	movs	r3, #16
1a001086:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001088:	9b01      	ldr	r3, [sp, #4]
}
1a00108a:	b002      	add	sp, #8
1a00108c:	bd10      	pop	{r4, pc}
1a00108e:	bf00      	nop
1a001090:	1a00248c 	.word	0x1a00248c
1a001094:	40082000 	.word	0x40082000

1a001098 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001098:	b538      	push	{r3, r4, r5, lr}
1a00109a:	4605      	mov	r5, r0
1a00109c:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00109e:	f7ff ffbb 	bl	1a001018 <Chip_UART_GetIndex>
1a0010a2:	4b0c      	ldr	r3, [pc, #48]	; (1a0010d4 <Chip_UART_SetBaud+0x3c>)
1a0010a4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0010a8:	f000 fb84 	bl	1a0017b4 <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a0010ac:	0124      	lsls	r4, r4, #4
1a0010ae:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0010b2:	68ea      	ldr	r2, [r5, #12]
1a0010b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a0010b8:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a0010ba:	b2da      	uxtb	r2, r3
1a0010bc:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a0010be:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a0010c2:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0010c4:	68ea      	ldr	r2, [r5, #12]
1a0010c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a0010ca:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a0010cc:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a0010d0:	0900      	lsrs	r0, r0, #4
1a0010d2:	bd38      	pop	{r3, r4, r5, pc}
1a0010d4:	1a002484 	.word	0x1a002484

1a0010d8 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0010d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0010dc:	b083      	sub	sp, #12
1a0010de:	4683      	mov	fp, r0
1a0010e0:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0010e2:	f7ff ff99 	bl	1a001018 <Chip_UART_GetIndex>
1a0010e6:	4b34      	ldr	r3, [pc, #208]	; (1a0011b8 <Chip_UART_SetBaudFDR+0xe0>)
1a0010e8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a0010ec:	f000 fb62 	bl	1a0017b4 <Chip_Clock_GetRate>
1a0010f0:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a0010f2:	f04f 37ff 	mov.w	r7, #4294967295

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a0010f6:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0010f8:	2300      	movs	r3, #0
1a0010fa:	9301      	str	r3, [sp, #4]
1a0010fc:	46a2      	mov	sl, r4
1a0010fe:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001100:	e029      	b.n	1a001156 <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001102:	2300      	movs	r3, #0
1a001104:	0932      	lsrs	r2, r6, #4
1a001106:	0730      	lsls	r0, r6, #28
1a001108:	fba0 0104 	umull	r0, r1, r0, r4
1a00110c:	fb04 1102 	mla	r1, r4, r2, r1
1a001110:	1962      	adds	r2, r4, r5
1a001112:	fb08 f202 	mul.w	r2, r8, r2
1a001116:	f000 fd23 	bl	1a001b60 <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a00111a:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a00111c:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a00111e:	2800      	cmp	r0, #0
1a001120:	da01      	bge.n	1a001126 <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a001122:	4243      	negs	r3, r0
				div ++;
1a001124:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001126:	429f      	cmp	r7, r3
1a001128:	d30a      	bcc.n	1a001140 <Chip_UART_SetBaudFDR+0x68>
1a00112a:	b14a      	cbz	r2, 1a001140 <Chip_UART_SetBaudFDR+0x68>
1a00112c:	0c11      	lsrs	r1, r2, #16
1a00112e:	d107      	bne.n	1a001140 <Chip_UART_SetBaudFDR+0x68>
1a001130:	2a02      	cmp	r2, #2
1a001132:	d800      	bhi.n	1a001136 <Chip_UART_SetBaudFDR+0x5e>
1a001134:	b925      	cbnz	r5, 1a001140 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001136:	b14b      	cbz	r3, 1a00114c <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a001138:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00113a:	9501      	str	r5, [sp, #4]
			sm = m;
1a00113c:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a00113e:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a001140:	3501      	adds	r5, #1
1a001142:	e000      	b.n	1a001146 <Chip_UART_SetBaudFDR+0x6e>
1a001144:	2500      	movs	r5, #0
1a001146:	42a5      	cmp	r5, r4
1a001148:	d3db      	bcc.n	1a001102 <Chip_UART_SetBaudFDR+0x2a>
1a00114a:	e003      	b.n	1a001154 <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a00114c:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a00114e:	9501      	str	r5, [sp, #4]
			sm = m;
1a001150:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a001152:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a001154:	3401      	adds	r4, #1
1a001156:	b10f      	cbz	r7, 1a00115c <Chip_UART_SetBaudFDR+0x84>
1a001158:	2c0f      	cmp	r4, #15
1a00115a:	d9f3      	bls.n	1a001144 <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00115c:	f1b9 0f00 	cmp.w	r9, #0
1a001160:	d026      	beq.n	1a0011b0 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001162:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001166:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a00116a:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a00116e:	fa5f f389 	uxtb.w	r3, r9
1a001172:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a001176:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a00117a:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00117e:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001186:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00118a:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a00118e:	b2da      	uxtb	r2, r3
1a001190:	9901      	ldr	r1, [sp, #4]
1a001192:	f001 030f 	and.w	r3, r1, #15
1a001196:	4313      	orrs	r3, r2
1a001198:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00119c:	0933      	lsrs	r3, r6, #4
1a00119e:	fb0a f303 	mul.w	r3, sl, r3
1a0011a2:	eb0a 0001 	add.w	r0, sl, r1
1a0011a6:	fb09 f000 	mul.w	r0, r9, r0
1a0011aa:	fbb3 f0f0 	udiv	r0, r3, r0
1a0011ae:	e000      	b.n	1a0011b2 <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a0011b0:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a0011b2:	b003      	add	sp, #12
1a0011b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0011b8:	1a002484 	.word	0x1a002484

1a0011bc <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0011bc:	4b03      	ldr	r3, [pc, #12]	; (1a0011cc <Chip_ADC_GetClockIndex+0x10>)
1a0011be:	4298      	cmp	r0, r3
1a0011c0:	d101      	bne.n	1a0011c6 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a0011c2:	2004      	movs	r0, #4
1a0011c4:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0011c6:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0011c8:	4770      	bx	lr
1a0011ca:	bf00      	nop
1a0011cc:	400e4000 	.word	0x400e4000

1a0011d0 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0011d0:	b570      	push	{r4, r5, r6, lr}
1a0011d2:	460d      	mov	r5, r1
1a0011d4:	4614      	mov	r4, r2
1a0011d6:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a0011d8:	f7ff fff0 	bl	1a0011bc <Chip_ADC_GetClockIndex>
1a0011dc:	f000 faea 	bl	1a0017b4 <Chip_Clock_GetRate>
	if (burstMode) {
1a0011e0:	b115      	cbz	r5, 1a0011e8 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a0011e2:	fb04 f406 	mul.w	r4, r4, r6
1a0011e6:	e003      	b.n	1a0011f0 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a0011e8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a0011ec:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a0011f0:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a0011f4:	0064      	lsls	r4, r4, #1
1a0011f6:	fbb0 f4f4 	udiv	r4, r0, r4
1a0011fa:	1e60      	subs	r0, r4, #1
	return div;
}
1a0011fc:	b2c0      	uxtb	r0, r0
1a0011fe:	bd70      	pop	{r4, r5, r6, pc}

1a001200 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001200:	b538      	push	{r3, r4, r5, lr}
1a001202:	4605      	mov	r5, r0
1a001204:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001206:	f7ff ffd9 	bl	1a0011bc <Chip_ADC_GetClockIndex>
1a00120a:	2101      	movs	r1, #1
1a00120c:	460a      	mov	r2, r1
1a00120e:	460b      	mov	r3, r1
1a001210:	f000 fa98 	bl	1a001744 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001214:	2100      	movs	r1, #0
1a001216:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001218:	4a08      	ldr	r2, [pc, #32]	; (1a00123c <Chip_ADC_Init+0x3c>)
1a00121a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00121c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00121e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001220:	4628      	mov	r0, r5
1a001222:	230b      	movs	r3, #11
1a001224:	f7ff ffd4 	bl	1a0011d0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001228:	0200      	lsls	r0, r0, #8
1a00122a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00122e:	7920      	ldrb	r0, [r4, #4]
1a001230:	f000 0007 	and.w	r0, r0, #7
1a001234:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a001238:	6028      	str	r0, [r5, #0]
1a00123a:	bd38      	pop	{r3, r4, r5, pc}
1a00123c:	00061a80 	.word	0x00061a80

1a001240 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001240:	b570      	push	{r4, r5, r6, lr}
1a001242:	4606      	mov	r6, r0
1a001244:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001246:	6804      	ldr	r4, [r0, #0]
1a001248:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00124c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001250:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001252:	790b      	ldrb	r3, [r1, #4]
1a001254:	f1c3 030b 	rsb	r3, r3, #11
1a001258:	7949      	ldrb	r1, [r1, #5]
1a00125a:	b2db      	uxtb	r3, r3
1a00125c:	f7ff ffb8 	bl	1a0011d0 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001260:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001264:	792c      	ldrb	r4, [r5, #4]
1a001266:	f004 0407 	and.w	r4, r4, #7
1a00126a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a00126e:	6030      	str	r0, [r6, #0]
1a001270:	bd70      	pop	{r4, r5, r6, pc}
1a001272:	bf00      	nop

1a001274 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001274:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001276:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001278:	680a      	ldr	r2, [r1, #0]
1a00127a:	f7ff ffe1 	bl	1a001240 <Chip_ADC_SetSampleRate>
1a00127e:	bd08      	pop	{r3, pc}

1a001280 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001280:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001282:	2069      	movs	r0, #105	; 0x69
1a001284:	f000 fa96 	bl	1a0017b4 <Chip_Clock_GetRate>
1a001288:	4b01      	ldr	r3, [pc, #4]	; (1a001290 <SystemCoreClockUpdate+0x10>)
1a00128a:	6018      	str	r0, [r3, #0]
1a00128c:	bd08      	pop	{r3, pc}
1a00128e:	bf00      	nop
1a001290:	10000108 	.word	0x10000108

1a001294 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001294:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a001296:	680b      	ldr	r3, [r1, #0]
1a001298:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00129c:	d002      	beq.n	1a0012a4 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00129e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0012a2:	600b      	str	r3, [r1, #0]
1a0012a4:	4686      	mov	lr, r0
1a0012a6:	2601      	movs	r6, #1
1a0012a8:	e041      	b.n	1a00132e <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0012aa:	680d      	ldr	r5, [r1, #0]
1a0012ac:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0012b0:	d008      	beq.n	1a0012c4 <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0012b2:	1c7b      	adds	r3, r7, #1
1a0012b4:	fa04 f203 	lsl.w	r2, r4, r3
1a0012b8:	694b      	ldr	r3, [r1, #20]
1a0012ba:	fb03 f302 	mul.w	r3, r3, r2
1a0012be:	fbb3 f3f6 	udiv	r3, r3, r6
1a0012c2:	e004      	b.n	1a0012ce <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0012c4:	694b      	ldr	r3, [r1, #20]
1a0012c6:	fb04 f303 	mul.w	r3, r4, r3
1a0012ca:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0012ce:	4a19      	ldr	r2, [pc, #100]	; (1a001334 <pll_calc_divs+0xa0>)
1a0012d0:	4293      	cmp	r3, r2
1a0012d2:	d920      	bls.n	1a001316 <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0012d4:	4a18      	ldr	r2, [pc, #96]	; (1a001338 <pll_calc_divs+0xa4>)
1a0012d6:	4293      	cmp	r3, r2
1a0012d8:	d823      	bhi.n	1a001322 <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0012da:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0012de:	d103      	bne.n	1a0012e8 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0012e0:	1c7a      	adds	r2, r7, #1
1a0012e2:	fa23 f202 	lsr.w	r2, r3, r2
1a0012e6:	e000      	b.n	1a0012ea <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0012e8:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0012ea:	1a85      	subs	r5, r0, r2
1a0012ec:	d502      	bpl.n	1a0012f4 <pll_calc_divs+0x60>
		return -val;
1a0012ee:	f1c5 0c00 	rsb	ip, r5, #0
1a0012f2:	e000      	b.n	1a0012f6 <pll_calc_divs+0x62>
	return val;
1a0012f4:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a0012f6:	45e6      	cmp	lr, ip
1a0012f8:	d90d      	bls.n	1a001316 <pll_calc_divs+0x82>
					ppll->nsel = n;
1a0012fa:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a0012fc:	f107 0e01 	add.w	lr, r7, #1
1a001300:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a001304:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a001306:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001308:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00130a:	2d00      	cmp	r5, #0
1a00130c:	da02      	bge.n	1a001314 <pll_calc_divs+0x80>
		return -val;
1a00130e:	f1c5 0e00 	rsb	lr, r5, #0
1a001312:	e000      	b.n	1a001316 <pll_calc_divs+0x82>
	return val;
1a001314:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a001316:	3401      	adds	r4, #1
1a001318:	e000      	b.n	1a00131c <pll_calc_divs+0x88>
1a00131a:	2401      	movs	r4, #1
1a00131c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001320:	ddc3      	ble.n	1a0012aa <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a001322:	3701      	adds	r7, #1
1a001324:	e000      	b.n	1a001328 <pll_calc_divs+0x94>
1a001326:	2700      	movs	r7, #0
1a001328:	2f03      	cmp	r7, #3
1a00132a:	ddf6      	ble.n	1a00131a <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a00132c:	3601      	adds	r6, #1
1a00132e:	2e04      	cmp	r6, #4
1a001330:	ddf9      	ble.n	1a001326 <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a001332:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001334:	094c5eff 	.word	0x094c5eff
1a001338:	1312d000 	.word	0x1312d000

1a00133c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00133c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00133e:	b099      	sub	sp, #100	; 0x64
1a001340:	4605      	mov	r5, r0
1a001342:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a001344:	4668      	mov	r0, sp
1a001346:	2100      	movs	r1, #0
1a001348:	2260      	movs	r2, #96	; 0x60
1a00134a:	f000 fefd 	bl	1a002148 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00134e:	2380      	movs	r3, #128	; 0x80
1a001350:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a001352:	6963      	ldr	r3, [r4, #20]
1a001354:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a001356:	7923      	ldrb	r3, [r4, #4]
1a001358:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a00135c:	4628      	mov	r0, r5
1a00135e:	4669      	mov	r1, sp
1a001360:	f7ff ff98 	bl	1a001294 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a001364:	9b06      	ldr	r3, [sp, #24]
1a001366:	42ab      	cmp	r3, r5
1a001368:	d107      	bne.n	1a00137a <pll_get_frac+0x3e>
		*ppll = pll[0];
1a00136a:	466d      	mov	r5, sp
1a00136c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00136e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001370:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001374:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001378:	e05e      	b.n	1a001438 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a00137a:	1aeb      	subs	r3, r5, r3
1a00137c:	d500      	bpl.n	1a001380 <pll_get_frac+0x44>
		return -val;
1a00137e:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001380:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001382:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a001384:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a001388:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a00138a:	6963      	ldr	r3, [r4, #20]
1a00138c:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a00138e:	7923      	ldrb	r3, [r4, #4]
1a001390:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a001394:	4628      	mov	r0, r5
1a001396:	a910      	add	r1, sp, #64	; 0x40
1a001398:	f7ff ff7c 	bl	1a001294 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a00139c:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a00139e:	42ab      	cmp	r3, r5
1a0013a0:	d107      	bne.n	1a0013b2 <pll_get_frac+0x76>
		*ppll = pll[2];
1a0013a2:	ad10      	add	r5, sp, #64	; 0x40
1a0013a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0013b0:	e042      	b.n	1a001438 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0013b2:	1aeb      	subs	r3, r5, r3
1a0013b4:	d500      	bpl.n	1a0013b8 <pll_get_frac+0x7c>
		return -val;
1a0013b6:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0013b8:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0013ba:	4b20      	ldr	r3, [pc, #128]	; (1a00143c <pll_get_frac+0x100>)
1a0013bc:	429d      	cmp	r5, r3
1a0013be:	d812      	bhi.n	1a0013e6 <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0013c0:	2340      	movs	r3, #64	; 0x40
1a0013c2:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0013c4:	6963      	ldr	r3, [r4, #20]
1a0013c6:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0013c8:	4628      	mov	r0, r5
1a0013ca:	a908      	add	r1, sp, #32
1a0013cc:	f7ff ff62 	bl	1a001294 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0013d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0013d2:	42ab      	cmp	r3, r5
1a0013d4:	d107      	bne.n	1a0013e6 <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0013d6:	ad08      	add	r5, sp, #32
1a0013d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013dc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0013e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0013e4:	e028      	b.n	1a001438 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0013e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0013e8:	1aed      	subs	r5, r5, r3
1a0013ea:	d500      	bpl.n	1a0013ee <pll_get_frac+0xb2>
		return -val;
1a0013ec:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0013ee:	42ae      	cmp	r6, r5
1a0013f0:	dc11      	bgt.n	1a001416 <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a0013f2:	42be      	cmp	r6, r7
1a0013f4:	dc07      	bgt.n	1a001406 <pll_get_frac+0xca>
			*ppll = pll[0];
1a0013f6:	466d      	mov	r5, sp
1a0013f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0013fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0013fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001404:	e018      	b.n	1a001438 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001406:	ad10      	add	r5, sp, #64	; 0x40
1a001408:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00140a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00140c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001414:	e010      	b.n	1a001438 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a001416:	42af      	cmp	r7, r5
1a001418:	db07      	blt.n	1a00142a <pll_get_frac+0xee>
			*ppll = pll[1];
1a00141a:	ad08      	add	r5, sp, #32
1a00141c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00141e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001420:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001428:	e006      	b.n	1a001438 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00142a:	ad10      	add	r5, sp, #64	; 0x40
1a00142c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00142e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001430:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001434:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a001438:	b019      	add	sp, #100	; 0x64
1a00143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00143c:	068e7780 	.word	0x068e7780

1a001440 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001440:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001442:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001444:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001446:	e010      	b.n	1a00146a <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001448:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00144c:	0052      	lsls	r2, r2, #1
1a00144e:	4d0d      	ldr	r5, [pc, #52]	; (1a001484 <Chip_Clock_FindBaseClock+0x44>)
1a001450:	5aaa      	ldrh	r2, [r5, r2]
1a001452:	4282      	cmp	r2, r0
1a001454:	d806      	bhi.n	1a001464 <Chip_Clock_FindBaseClock+0x24>
1a001456:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00145a:	0052      	lsls	r2, r2, #1
1a00145c:	442a      	add	r2, r5
1a00145e:	8852      	ldrh	r2, [r2, #2]
1a001460:	4282      	cmp	r2, r0
1a001462:	d201      	bcs.n	1a001468 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a001464:	3301      	adds	r3, #1
1a001466:	e000      	b.n	1a00146a <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a001468:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00146a:	291c      	cmp	r1, #28
1a00146c:	d107      	bne.n	1a00147e <Chip_Clock_FindBaseClock+0x3e>
1a00146e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001472:	0052      	lsls	r2, r2, #1
1a001474:	4c03      	ldr	r4, [pc, #12]	; (1a001484 <Chip_Clock_FindBaseClock+0x44>)
1a001476:	4422      	add	r2, r4
1a001478:	7914      	ldrb	r4, [r2, #4]
1a00147a:	428c      	cmp	r4, r1
1a00147c:	d1e4      	bne.n	1a001448 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a00147e:	4608      	mov	r0, r1
1a001480:	bc30      	pop	{r4, r5}
1a001482:	4770      	bx	lr
1a001484:	1a0024a0 	.word	0x1a0024a0

1a001488 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a001488:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00148a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a00148e:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a001490:	4a0d      	ldr	r2, [pc, #52]	; (1a0014c8 <Chip_Clock_EnableCrystal+0x40>)
1a001492:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a001494:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a001498:	6992      	ldr	r2, [r2, #24]
1a00149a:	428a      	cmp	r2, r1
1a00149c:	d001      	beq.n	1a0014a2 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00149e:	4a0a      	ldr	r2, [pc, #40]	; (1a0014c8 <Chip_Clock_EnableCrystal+0x40>)
1a0014a0:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0014a2:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0014a6:	4a09      	ldr	r2, [pc, #36]	; (1a0014cc <Chip_Clock_EnableCrystal+0x44>)
1a0014a8:	6811      	ldr	r1, [r2, #0]
1a0014aa:	4a09      	ldr	r2, [pc, #36]	; (1a0014d0 <Chip_Clock_EnableCrystal+0x48>)
1a0014ac:	4291      	cmp	r1, r2
1a0014ae:	d901      	bls.n	1a0014b4 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0014b0:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0014b4:	4a04      	ldr	r2, [pc, #16]	; (1a0014c8 <Chip_Clock_EnableCrystal+0x40>)
1a0014b6:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0014b8:	9b01      	ldr	r3, [sp, #4]
1a0014ba:	1e5a      	subs	r2, r3, #1
1a0014bc:	9201      	str	r2, [sp, #4]
1a0014be:	2b00      	cmp	r3, #0
1a0014c0:	d1fa      	bne.n	1a0014b8 <Chip_Clock_EnableCrystal+0x30>
}
1a0014c2:	b002      	add	sp, #8
1a0014c4:	4770      	bx	lr
1a0014c6:	bf00      	nop
1a0014c8:	40050000 	.word	0x40050000
1a0014cc:	1a0023c4 	.word	0x1a0023c4
1a0014d0:	01312cff 	.word	0x01312cff

1a0014d4 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0014d4:	3012      	adds	r0, #18
1a0014d6:	4b05      	ldr	r3, [pc, #20]	; (1a0014ec <Chip_Clock_GetDividerSource+0x18>)
1a0014d8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0014dc:	f010 0f01 	tst.w	r0, #1
1a0014e0:	d102      	bne.n	1a0014e8 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0014e2:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0014e6:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a0014e8:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a0014ea:	4770      	bx	lr
1a0014ec:	40050000 	.word	0x40050000

1a0014f0 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0014f0:	f100 0212 	add.w	r2, r0, #18
1a0014f4:	4b03      	ldr	r3, [pc, #12]	; (1a001504 <Chip_Clock_GetDividerDivisor+0x14>)
1a0014f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0014fa:	4b03      	ldr	r3, [pc, #12]	; (1a001508 <Chip_Clock_GetDividerDivisor+0x18>)
1a0014fc:	5c18      	ldrb	r0, [r3, r0]
}
1a0014fe:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001502:	4770      	bx	lr
1a001504:	40050000 	.word	0x40050000
1a001508:	1a002498 	.word	0x1a002498

1a00150c <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a00150c:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a00150e:	2810      	cmp	r0, #16
1a001510:	d80a      	bhi.n	1a001528 <Chip_Clock_GetClockInputHz+0x1c>
1a001512:	e8df f000 	tbb	[pc, r0]
1a001516:	0b42      	.short	0x0b42
1a001518:	091f160d 	.word	0x091f160d
1a00151c:	2b282522 	.word	0x2b282522
1a001520:	322e0909 	.word	0x322e0909
1a001524:	3a36      	.short	0x3a36
1a001526:	3e          	.byte	0x3e
1a001527:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001528:	2000      	movs	r0, #0
1a00152a:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a00152c:	481e      	ldr	r0, [pc, #120]	; (1a0015a8 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a00152e:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001530:	4b1e      	ldr	r3, [pc, #120]	; (1a0015ac <Chip_Clock_GetClockInputHz+0xa0>)
1a001532:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001536:	f003 0307 	and.w	r3, r3, #7
1a00153a:	2b04      	cmp	r3, #4
1a00153c:	d130      	bne.n	1a0015a0 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a00153e:	2000      	movs	r0, #0
1a001540:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001542:	4b1a      	ldr	r3, [pc, #104]	; (1a0015ac <Chip_Clock_GetClockInputHz+0xa0>)
1a001544:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001548:	f003 0307 	and.w	r3, r3, #7
1a00154c:	2b04      	cmp	r3, #4
1a00154e:	d029      	beq.n	1a0015a4 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001550:	4817      	ldr	r0, [pc, #92]	; (1a0015b0 <Chip_Clock_GetClockInputHz+0xa4>)
1a001552:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001554:	4b17      	ldr	r3, [pc, #92]	; (1a0015b4 <Chip_Clock_GetClockInputHz+0xa8>)
1a001556:	6818      	ldr	r0, [r3, #0]
		break;
1a001558:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00155a:	4b17      	ldr	r3, [pc, #92]	; (1a0015b8 <Chip_Clock_GetClockInputHz+0xac>)
1a00155c:	6818      	ldr	r0, [r3, #0]
		break;
1a00155e:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001560:	4b16      	ldr	r3, [pc, #88]	; (1a0015bc <Chip_Clock_GetClockInputHz+0xb0>)
1a001562:	6818      	ldr	r0, [r3, #0]
		break;
1a001564:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a001566:	4b15      	ldr	r3, [pc, #84]	; (1a0015bc <Chip_Clock_GetClockInputHz+0xb0>)
1a001568:	6858      	ldr	r0, [r3, #4]
		break;
1a00156a:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a00156c:	f000 f86a 	bl	1a001644 <Chip_Clock_GetMainPLLHz>
		break;
1a001570:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001572:	2100      	movs	r1, #0
1a001574:	f000 f89a 	bl	1a0016ac <Chip_Clock_GetDivRate>
		break;
1a001578:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00157a:	2101      	movs	r1, #1
1a00157c:	f000 f896 	bl	1a0016ac <Chip_Clock_GetDivRate>
		break;
1a001580:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a001582:	2102      	movs	r1, #2
1a001584:	f000 f892 	bl	1a0016ac <Chip_Clock_GetDivRate>
		break;
1a001588:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00158a:	2103      	movs	r1, #3
1a00158c:	f000 f88e 	bl	1a0016ac <Chip_Clock_GetDivRate>
		break;
1a001590:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a001592:	2104      	movs	r1, #4
1a001594:	f000 f88a 	bl	1a0016ac <Chip_Clock_GetDivRate>
		break;
1a001598:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a00159a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a00159e:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0015a0:	4803      	ldr	r0, [pc, #12]	; (1a0015b0 <Chip_Clock_GetClockInputHz+0xa4>)
1a0015a2:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0015a4:	4806      	ldr	r0, [pc, #24]	; (1a0015c0 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0015a6:	bd08      	pop	{r3, pc}
1a0015a8:	00b71b00 	.word	0x00b71b00
1a0015ac:	40043000 	.word	0x40043000
1a0015b0:	017d7840 	.word	0x017d7840
1a0015b4:	1a0023c8 	.word	0x1a0023c8
1a0015b8:	1a0023c4 	.word	0x1a0023c4
1a0015bc:	100000ec 	.word	0x100000ec
1a0015c0:	02faf080 	.word	0x02faf080

1a0015c4 <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0015c4:	b538      	push	{r3, r4, r5, lr}
1a0015c6:	4605      	mov	r5, r0
1a0015c8:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0015ca:	7908      	ldrb	r0, [r1, #4]
1a0015cc:	f7ff ff9e 	bl	1a00150c <Chip_Clock_GetClockInputHz>
1a0015d0:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0015d2:	4b19      	ldr	r3, [pc, #100]	; (1a001638 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0015d4:	442b      	add	r3, r5
1a0015d6:	4a19      	ldr	r2, [pc, #100]	; (1a00163c <Chip_Clock_CalcMainPLLValue+0x78>)
1a0015d8:	4293      	cmp	r3, r2
1a0015da:	d821      	bhi.n	1a001620 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0015dc:	b318      	cbz	r0, 1a001626 <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0015de:	2380      	movs	r3, #128	; 0x80
1a0015e0:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0015e2:	2300      	movs	r3, #0
1a0015e4:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0015e6:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0015e8:	fbb5 f3f0 	udiv	r3, r5, r0
1a0015ec:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0015ee:	4a14      	ldr	r2, [pc, #80]	; (1a001640 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0015f0:	4295      	cmp	r5, r2
1a0015f2:	d903      	bls.n	1a0015fc <Chip_Clock_CalcMainPLLValue+0x38>
1a0015f4:	fb03 f000 	mul.w	r0, r3, r0
1a0015f8:	42a8      	cmp	r0, r5
1a0015fa:	d007      	beq.n	1a00160c <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0015fc:	4628      	mov	r0, r5
1a0015fe:	4621      	mov	r1, r4
1a001600:	f7ff fe9c 	bl	1a00133c <pll_get_frac>
		if (!ppll->nsel) {
1a001604:	68a3      	ldr	r3, [r4, #8]
1a001606:	b18b      	cbz	r3, 1a00162c <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a001608:	3b01      	subs	r3, #1
1a00160a:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a00160c:	6923      	ldr	r3, [r4, #16]
1a00160e:	b183      	cbz	r3, 1a001632 <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001610:	68e2      	ldr	r2, [r4, #12]
1a001612:	b10a      	cbz	r2, 1a001618 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001614:	3a01      	subs	r2, #1
1a001616:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a001618:	3b01      	subs	r3, #1
1a00161a:	6123      	str	r3, [r4, #16]

	return 0;
1a00161c:	2000      	movs	r0, #0
1a00161e:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a001620:	f04f 30ff 	mov.w	r0, #4294967295
1a001624:	bd38      	pop	{r3, r4, r5, pc}
1a001626:	f04f 30ff 	mov.w	r0, #4294967295
1a00162a:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a00162c:	f04f 30ff 	mov.w	r0, #4294967295
1a001630:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a001632:	f04f 30ff 	mov.w	r0, #4294967295
	}

	ppll->msel --;

	return 0;
}
1a001636:	bd38      	pop	{r3, r4, r5, pc}
1a001638:	ff6b3a10 	.word	0xff6b3a10
1a00163c:	0b940510 	.word	0x0b940510
1a001640:	094c5eff 	.word	0x094c5eff

1a001644 <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a001644:	b570      	push	{r4, r5, r6, lr}
1a001646:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001648:	4d16      	ldr	r5, [pc, #88]	; (1a0016a4 <Chip_Clock_GetMainPLLHz+0x60>)
1a00164a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a00164c:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001650:	f7ff ff5c 	bl	1a00150c <Chip_Clock_GetClockInputHz>
1a001654:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001656:	4b14      	ldr	r3, [pc, #80]	; (1a0016a8 <Chip_Clock_GetMainPLLHz+0x64>)
1a001658:	6818      	ldr	r0, [r3, #0]
1a00165a:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00165c:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a00165e:	f010 0001 	ands.w	r0, r0, #1
1a001662:	d01d      	beq.n	1a0016a0 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a001664:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001668:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00166c:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a001670:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a001674:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a001676:	3201      	adds	r2, #1
	p = ptab[psel];
1a001678:	a802      	add	r0, sp, #8
1a00167a:	4401      	add	r1, r0
1a00167c:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a001680:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001684:	d100      	bne.n	1a001688 <Chip_Clock_GetMainPLLHz+0x44>
1a001686:	b125      	cbz	r5, 1a001692 <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a001688:	fbb6 f0f2 	udiv	r0, r6, r2
1a00168c:	fb03 f000 	mul.w	r0, r3, r0
1a001690:	e006      	b.n	1a0016a0 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a001692:	0040      	lsls	r0, r0, #1
1a001694:	fbb3 f3f0 	udiv	r3, r3, r0
1a001698:	fbb6 f0f2 	udiv	r0, r6, r2
1a00169c:	fb00 f003 	mul.w	r0, r0, r3
}
1a0016a0:	b002      	add	sp, #8
1a0016a2:	bd70      	pop	{r4, r5, r6, pc}
1a0016a4:	40050000 	.word	0x40050000
1a0016a8:	1a002494 	.word	0x1a002494

1a0016ac <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0016ac:	b538      	push	{r3, r4, r5, lr}
1a0016ae:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0016b0:	4608      	mov	r0, r1
1a0016b2:	f7ff ff0f 	bl	1a0014d4 <Chip_Clock_GetDividerSource>
1a0016b6:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0016b8:	4620      	mov	r0, r4
1a0016ba:	f7ff ff19 	bl	1a0014f0 <Chip_Clock_GetDividerDivisor>
1a0016be:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0016c0:	4628      	mov	r0, r5
1a0016c2:	f7ff ff23 	bl	1a00150c <Chip_Clock_GetClockInputHz>
1a0016c6:	3401      	adds	r4, #1
}
1a0016c8:	fbb0 f0f4 	udiv	r0, r0, r4
1a0016cc:	bd38      	pop	{r3, r4, r5, pc}
1a0016ce:	bf00      	nop

1a0016d0 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0016d0:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0016d2:	0085      	lsls	r5, r0, #2
1a0016d4:	4c0d      	ldr	r4, [pc, #52]	; (1a00170c <Chip_Clock_SetBaseClock+0x3c>)
1a0016d6:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0016d8:	281b      	cmp	r0, #27
1a0016da:	d80f      	bhi.n	1a0016fc <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a0016dc:	2911      	cmp	r1, #17
1a0016de:	d012      	beq.n	1a001706 <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0016e0:	4c0b      	ldr	r4, [pc, #44]	; (1a001710 <Chip_Clock_SetBaseClock+0x40>)
1a0016e2:	402c      	ands	r4, r5

			if (autoblocken) {
1a0016e4:	b10a      	cbz	r2, 1a0016ea <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a0016e6:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a0016ea:	b10b      	cbz	r3, 1a0016f0 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a0016ec:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0016f0:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0016f4:	0080      	lsls	r0, r0, #2
1a0016f6:	4b05      	ldr	r3, [pc, #20]	; (1a00170c <Chip_Clock_SetBaseClock+0x3c>)
1a0016f8:	501c      	str	r4, [r3, r0]
1a0016fa:	e004      	b.n	1a001706 <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a0016fc:	f045 0501 	orr.w	r5, r5, #1
1a001700:	0080      	lsls	r0, r0, #2
1a001702:	4b02      	ldr	r3, [pc, #8]	; (1a00170c <Chip_Clock_SetBaseClock+0x3c>)
1a001704:	501d      	str	r5, [r3, r0]
	}
}
1a001706:	bc30      	pop	{r4, r5}
1a001708:	4770      	bx	lr
1a00170a:	bf00      	nop
1a00170c:	4005005c 	.word	0x4005005c
1a001710:	e0fff7fe 	.word	0xe0fff7fe

1a001714 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001714:	281b      	cmp	r0, #27
1a001716:	d808      	bhi.n	1a00172a <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001718:	0080      	lsls	r0, r0, #2
1a00171a:	4b06      	ldr	r3, [pc, #24]	; (1a001734 <Chip_Clock_GetBaseClock+0x20>)
1a00171c:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a00171e:	f010 0f01 	tst.w	r0, #1
1a001722:	d104      	bne.n	1a00172e <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001724:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001728:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a00172a:	2011      	movs	r0, #17
1a00172c:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a00172e:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001730:	4770      	bx	lr
1a001732:	bf00      	nop
1a001734:	4005005c 	.word	0x4005005c

1a001738 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a001738:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00173a:	f7ff ffeb 	bl	1a001714 <Chip_Clock_GetBaseClock>
1a00173e:	f7ff fee5 	bl	1a00150c <Chip_Clock_GetClockInputHz>
}
1a001742:	bd08      	pop	{r3, pc}

1a001744 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001744:	b909      	cbnz	r1, 1a00174a <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a001746:	2101      	movs	r1, #1
1a001748:	e000      	b.n	1a00174c <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a00174a:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a00174c:	b10a      	cbz	r2, 1a001752 <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a00174e:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a001752:	2b02      	cmp	r3, #2
1a001754:	d101      	bne.n	1a00175a <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a001756:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a00175a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00175e:	d305      	bcc.n	1a00176c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001760:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a001764:	4b04      	ldr	r3, [pc, #16]	; (1a001778 <Chip_Clock_EnableOpts+0x34>)
1a001766:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00176a:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a00176c:	3020      	adds	r0, #32
1a00176e:	4b03      	ldr	r3, [pc, #12]	; (1a00177c <Chip_Clock_EnableOpts+0x38>)
1a001770:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001774:	4770      	bx	lr
1a001776:	bf00      	nop
1a001778:	40052000 	.word	0x40052000
1a00177c:	40051000 	.word	0x40051000

1a001780 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001780:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001784:	d309      	bcc.n	1a00179a <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a001786:	4a09      	ldr	r2, [pc, #36]	; (1a0017ac <Chip_Clock_Enable+0x2c>)
1a001788:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00178c:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a001790:	f043 0301 	orr.w	r3, r3, #1
1a001794:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a001798:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a00179a:	4a05      	ldr	r2, [pc, #20]	; (1a0017b0 <Chip_Clock_Enable+0x30>)
1a00179c:	3020      	adds	r0, #32
1a00179e:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0017a2:	f043 0301 	orr.w	r3, r3, #1
1a0017a6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0017aa:	4770      	bx	lr
1a0017ac:	40052000 	.word	0x40052000
1a0017b0:	40051000 	.word	0x40051000

1a0017b4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0017b4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0017b6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0017ba:	d305      	bcc.n	1a0017c8 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0017bc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0017c0:	4a0d      	ldr	r2, [pc, #52]	; (1a0017f8 <Chip_Clock_GetRate+0x44>)
1a0017c2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0017c6:	e004      	b.n	1a0017d2 <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0017c8:	f100 0320 	add.w	r3, r0, #32
1a0017cc:	4a0b      	ldr	r2, [pc, #44]	; (1a0017fc <Chip_Clock_GetRate+0x48>)
1a0017ce:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0017d2:	f014 0f01 	tst.w	r4, #1
1a0017d6:	d00c      	beq.n	1a0017f2 <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0017d8:	f7ff fe32 	bl	1a001440 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0017dc:	f7ff ffac 	bl	1a001738 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a0017e0:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0017e4:	d101      	bne.n	1a0017ea <Chip_Clock_GetRate+0x36>
			div = 1;
1a0017e6:	2301      	movs	r3, #1
1a0017e8:	e000      	b.n	1a0017ec <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a0017ea:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a0017ec:	fbb0 f0f3 	udiv	r0, r0, r3
1a0017f0:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a0017f2:	2000      	movs	r0, #0
	}

	return rate;
}
1a0017f4:	bd10      	pop	{r4, pc}
1a0017f6:	bf00      	nop
1a0017f8:	40052000 	.word	0x40052000
1a0017fc:	40051000 	.word	0x40051000

1a001800 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001800:	b570      	push	{r4, r5, r6, lr}
1a001802:	b08a      	sub	sp, #40	; 0x28
1a001804:	4605      	mov	r5, r0
1a001806:	460e      	mov	r6, r1
1a001808:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00180a:	f242 7310 	movw	r3, #10000	; 0x2710
1a00180e:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001810:	2806      	cmp	r0, #6
1a001812:	d101      	bne.n	1a001818 <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a001814:	f7ff fe38 	bl	1a001488 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001818:	2004      	movs	r0, #4
1a00181a:	4629      	mov	r1, r5
1a00181c:	2201      	movs	r2, #1
1a00181e:	2300      	movs	r3, #0
1a001820:	f7ff ff56 	bl	1a0016d0 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001824:	4a47      	ldr	r2, [pc, #284]	; (1a001944 <Chip_SetupCoreClock+0x144>)
1a001826:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001828:	f043 0301 	orr.w	r3, r3, #1
1a00182c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00182e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001832:	4630      	mov	r0, r6
1a001834:	a901      	add	r1, sp, #4
1a001836:	f7ff fec5 	bl	1a0015c4 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00183a:	4b43      	ldr	r3, [pc, #268]	; (1a001948 <Chip_SetupCoreClock+0x148>)
1a00183c:	429e      	cmp	r6, r3
1a00183e:	d913      	bls.n	1a001868 <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a001840:	9b01      	ldr	r3, [sp, #4]
1a001842:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001846:	d000      	beq.n	1a00184a <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a001848:	e7fe      	b.n	1a001848 <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00184a:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00184e:	d005      	beq.n	1a00185c <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001854:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a001856:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a001858:	2601      	movs	r6, #1
1a00185a:	e007      	b.n	1a00186c <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a00185c:	9b04      	ldr	r3, [sp, #16]
1a00185e:	3301      	adds	r3, #1
1a001860:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a001862:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a001864:	2600      	movs	r6, #0
1a001866:	e001      	b.n	1a00186c <Chip_SetupCoreClock+0x6c>
1a001868:	2500      	movs	r5, #0
1a00186a:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a00186c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001870:	9b01      	ldr	r3, [sp, #4]
1a001872:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001876:	9a05      	ldr	r2, [sp, #20]
1a001878:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00187c:	9a03      	ldr	r2, [sp, #12]
1a00187e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001882:	9a04      	ldr	r2, [sp, #16]
1a001884:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001888:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00188c:	4a2d      	ldr	r2, [pc, #180]	; (1a001944 <Chip_SetupCoreClock+0x144>)
1a00188e:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001890:	4b2c      	ldr	r3, [pc, #176]	; (1a001944 <Chip_SetupCoreClock+0x144>)
1a001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001894:	f013 0f01 	tst.w	r3, #1
1a001898:	d0fa      	beq.n	1a001890 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00189a:	2004      	movs	r0, #4
1a00189c:	2109      	movs	r1, #9
1a00189e:	2201      	movs	r2, #1
1a0018a0:	2300      	movs	r3, #0
1a0018a2:	f7ff ff15 	bl	1a0016d0 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0018a6:	b1ee      	cbz	r6, 1a0018e4 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0018a8:	f242 7310 	movw	r3, #10000	; 0x2710
1a0018ac:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0018ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0018b0:	1e5a      	subs	r2, r3, #1
1a0018b2:	9209      	str	r2, [sp, #36]	; 0x24
1a0018b4:	2b00      	cmp	r3, #0
1a0018b6:	d1fa      	bne.n	1a0018ae <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a0018b8:	9b01      	ldr	r3, [sp, #4]
1a0018ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0018be:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0018c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0018c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0018c8:	9a05      	ldr	r2, [sp, #20]
1a0018ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0018ce:	9a03      	ldr	r2, [sp, #12]
1a0018d0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0018d4:	9a04      	ldr	r2, [sp, #16]
1a0018d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0018da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0018de:	4a19      	ldr	r2, [pc, #100]	; (1a001944 <Chip_SetupCoreClock+0x144>)
1a0018e0:	6453      	str	r3, [r2, #68]	; 0x44
1a0018e2:	e01c      	b.n	1a00191e <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0018e4:	b1dd      	cbz	r5, 1a00191e <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0018e6:	f242 7310 	movw	r3, #10000	; 0x2710
1a0018ea:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0018ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0018ee:	1e5a      	subs	r2, r3, #1
1a0018f0:	9209      	str	r2, [sp, #36]	; 0x24
1a0018f2:	2b00      	cmp	r3, #0
1a0018f4:	d1fa      	bne.n	1a0018ec <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0018f6:	9b04      	ldr	r3, [sp, #16]
1a0018f8:	1e59      	subs	r1, r3, #1
1a0018fa:	9104      	str	r1, [sp, #16]
1a0018fc:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001900:	9b01      	ldr	r3, [sp, #4]
1a001902:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a001906:	9b05      	ldr	r3, [sp, #20]
1a001908:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a00190c:	9b03      	ldr	r3, [sp, #12]
1a00190e:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a001912:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a001916:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00191a:	4a0a      	ldr	r2, [pc, #40]	; (1a001944 <Chip_SetupCoreClock+0x144>)
1a00191c:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a00191e:	b964      	cbnz	r4, 1a00193a <Chip_SetupCoreClock+0x13a>
1a001920:	e00e      	b.n	1a001940 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001922:	4a0a      	ldr	r2, [pc, #40]	; (1a00194c <Chip_SetupCoreClock+0x14c>)
1a001924:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a001928:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a00192c:	7859      	ldrb	r1, [r3, #1]
1a00192e:	789a      	ldrb	r2, [r3, #2]
1a001930:	78db      	ldrb	r3, [r3, #3]
1a001932:	f7ff fecd 	bl	1a0016d0 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001936:	3401      	adds	r4, #1
1a001938:	e000      	b.n	1a00193c <Chip_SetupCoreClock+0x13c>
1a00193a:	2400      	movs	r4, #0
1a00193c:	2c11      	cmp	r4, #17
1a00193e:	d9f0      	bls.n	1a001922 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001940:	b00a      	add	sp, #40	; 0x28
1a001942:	bd70      	pop	{r4, r5, r6, pc}
1a001944:	40050000 	.word	0x40050000
1a001948:	068e7780 	.word	0x068e7780
1a00194c:	1a00250c 	.word	0x1a00250c

1a001950 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a001950:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a001952:	4b10      	ldr	r3, [pc, #64]	; (1a001994 <fpuInit+0x44>)
1a001954:	681b      	ldr	r3, [r3, #0]
1a001956:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a001958:	4b0f      	ldr	r3, [pc, #60]	; (1a001998 <fpuInit+0x48>)
1a00195a:	681b      	ldr	r3, [r3, #0]
1a00195c:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00195e:	9a02      	ldr	r2, [sp, #8]
1a001960:	4b0e      	ldr	r3, [pc, #56]	; (1a00199c <fpuInit+0x4c>)
1a001962:	429a      	cmp	r2, r3
1a001964:	d105      	bne.n	1a001972 <fpuInit+0x22>
1a001966:	9a01      	ldr	r2, [sp, #4]
1a001968:	4b0d      	ldr	r3, [pc, #52]	; (1a0019a0 <fpuInit+0x50>)
1a00196a:	429a      	cmp	r2, r3
1a00196c:	d003      	beq.n	1a001976 <fpuInit+0x26>
1a00196e:	2300      	movs	r3, #0
1a001970:	e002      	b.n	1a001978 <fpuInit+0x28>
1a001972:	2300      	movs	r3, #0
1a001974:	e000      	b.n	1a001978 <fpuInit+0x28>
1a001976:	2301      	movs	r3, #1

	if (vfpPresent) {
1a001978:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00197c:	d008      	beq.n	1a001990 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a00197e:	4a09      	ldr	r2, [pc, #36]	; (1a0019a4 <fpuInit+0x54>)
1a001980:	6813      	ldr	r3, [r2, #0]
1a001982:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a001984:	9b03      	ldr	r3, [sp, #12]
1a001986:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a00198a:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a00198c:	9b03      	ldr	r3, [sp, #12]
1a00198e:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a001990:	b004      	add	sp, #16
1a001992:	4770      	bx	lr
1a001994:	e000ef40 	.word	0xe000ef40
1a001998:	e000ef44 	.word	0xe000ef44
1a00199c:	10110021 	.word	0x10110021
1a0019a0:	11000011 	.word	0x11000011
1a0019a4:	e000ed88 	.word	0xe000ed88

1a0019a8 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0019a8:	4770      	bx	lr
1a0019aa:	bf00      	nop

1a0019ac <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0019ac:	4b03      	ldr	r3, [pc, #12]	; (1a0019bc <Chip_SSP_GetClockIndex+0x10>)
1a0019ae:	4298      	cmp	r0, r3
1a0019b0:	d101      	bne.n	1a0019b6 <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a0019b2:	20a5      	movs	r0, #165	; 0xa5
1a0019b4:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a0019b6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a0019b8:	4770      	bx	lr
1a0019ba:	bf00      	nop
1a0019bc:	400c5000 	.word	0x400c5000

1a0019c0 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a0019c0:	4b04      	ldr	r3, [pc, #16]	; (1a0019d4 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a0019c2:	4298      	cmp	r0, r3
1a0019c4:	d102      	bne.n	1a0019cc <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a0019c6:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a0019ca:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a0019cc:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a0019d0:	4770      	bx	lr
1a0019d2:	bf00      	nop
1a0019d4:	400c5000 	.word	0x400c5000

1a0019d8 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a0019d8:	6803      	ldr	r3, [r0, #0]
1a0019da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a0019de:	0209      	lsls	r1, r1, #8
1a0019e0:	b289      	uxth	r1, r1
1a0019e2:	430b      	orrs	r3, r1
1a0019e4:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a0019e6:	6102      	str	r2, [r0, #16]
1a0019e8:	4770      	bx	lr
1a0019ea:	bf00      	nop

1a0019ec <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a0019ec:	b570      	push	{r4, r5, r6, lr}
1a0019ee:	4606      	mov	r6, r0
1a0019f0:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0019f2:	f7ff ffe5 	bl	1a0019c0 <Chip_SSP_GetPeriphClockIndex>
1a0019f6:	f7ff fedd 	bl	1a0017b4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0019fa:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a0019fc:	f04f 33ff 	mov.w	r3, #4294967295
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a001a00:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a001a02:	e00c      	b.n	1a001a1e <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001a04:	1c4c      	adds	r4, r1, #1
1a001a06:	fb02 f304 	mul.w	r3, r2, r4
1a001a0a:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001a0e:	42ab      	cmp	r3, r5
1a001a10:	d905      	bls.n	1a001a1e <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a001a12:	2cff      	cmp	r4, #255	; 0xff
1a001a14:	d902      	bls.n	1a001a1c <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a001a16:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a001a18:	2100      	movs	r1, #0
1a001a1a:	e000      	b.n	1a001a1e <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001a1c:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a001a1e:	42ab      	cmp	r3, r5
1a001a20:	d8f0      	bhi.n	1a001a04 <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001a22:	4630      	mov	r0, r6
1a001a24:	f7ff ffd8 	bl	1a0019d8 <Chip_SSP_SetClockRate>
1a001a28:	bd70      	pop	{r4, r5, r6, pc}
1a001a2a:	bf00      	nop

1a001a2c <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001a2c:	b510      	push	{r4, lr}
1a001a2e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001a30:	f7ff ffbc 	bl	1a0019ac <Chip_SSP_GetClockIndex>
1a001a34:	f7ff fea4 	bl	1a001780 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001a38:	4620      	mov	r0, r4
1a001a3a:	f7ff ffc1 	bl	1a0019c0 <Chip_SSP_GetPeriphClockIndex>
1a001a3e:	f7ff fe9f 	bl	1a001780 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001a42:	6863      	ldr	r3, [r4, #4]
1a001a44:	f023 0304 	bic.w	r3, r3, #4
1a001a48:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001a4a:	6823      	ldr	r3, [r4, #0]
1a001a4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001a50:	f043 0307 	orr.w	r3, r3, #7
1a001a54:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001a56:	4620      	mov	r0, r4
1a001a58:	4901      	ldr	r1, [pc, #4]	; (1a001a60 <Chip_SSP_Init+0x34>)
1a001a5a:	f7ff ffc7 	bl	1a0019ec <Chip_SSP_SetBitRate>
1a001a5e:	bd10      	pop	{r4, pc}
1a001a60:	000186a0 	.word	0x000186a0

1a001a64 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a001a64:	2901      	cmp	r1, #1
1a001a66:	d109      	bne.n	1a001a7c <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a001a68:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001a6c:	0080      	lsls	r0, r0, #2
1a001a6e:	4b04      	ldr	r3, [pc, #16]	; (1a001a80 <Chip_I2C_EventHandler+0x1c>)
1a001a70:	4418      	add	r0, r3
1a001a72:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a001a74:	7d13      	ldrb	r3, [r2, #20]
1a001a76:	b2db      	uxtb	r3, r3
1a001a78:	2b04      	cmp	r3, #4
1a001a7a:	d0fb      	beq.n	1a001a74 <Chip_I2C_EventHandler+0x10>
1a001a7c:	4770      	bx	lr
1a001a7e:	bf00      	nop
1a001a80:	10000090 	.word	0x10000090

1a001a84 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001a84:	b570      	push	{r4, r5, r6, lr}
1a001a86:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a001a88:	4e06      	ldr	r6, [pc, #24]	; (1a001aa4 <Chip_I2C_Init+0x20>)
1a001a8a:	00c4      	lsls	r4, r0, #3
1a001a8c:	1a23      	subs	r3, r4, r0
1a001a8e:	009b      	lsls	r3, r3, #2
1a001a90:	4433      	add	r3, r6
1a001a92:	8898      	ldrh	r0, [r3, #4]
1a001a94:	f7ff fe74 	bl	1a001780 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001a98:	1b60      	subs	r0, r4, r5
1a001a9a:	0080      	lsls	r0, r0, #2
1a001a9c:	5833      	ldr	r3, [r6, r0]
1a001a9e:	226c      	movs	r2, #108	; 0x6c
1a001aa0:	619a      	str	r2, [r3, #24]
1a001aa2:	bd70      	pop	{r4, r5, r6, pc}
1a001aa4:	10000090 	.word	0x10000090

1a001aa8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001aac:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a001aae:	4f09      	ldr	r7, [pc, #36]	; (1a001ad4 <Chip_I2C_SetClockRate+0x2c>)
1a001ab0:	00c5      	lsls	r5, r0, #3
1a001ab2:	1a2e      	subs	r6, r5, r0
1a001ab4:	00b6      	lsls	r6, r6, #2
1a001ab6:	19bb      	adds	r3, r7, r6
1a001ab8:	8898      	ldrh	r0, [r3, #4]
1a001aba:	f7ff fe7b 	bl	1a0017b4 <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001abe:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001ac2:	59bb      	ldr	r3, [r7, r6]
1a001ac4:	0842      	lsrs	r2, r0, #1
1a001ac6:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001ac8:	59bb      	ldr	r3, [r7, r6]
1a001aca:	691a      	ldr	r2, [r3, #16]
1a001acc:	1a80      	subs	r0, r0, r2
1a001ace:	6158      	str	r0, [r3, #20]
1a001ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001ad4:	10000090 	.word	0x10000090

1a001ad8 <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a001ad8:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a001ada:	4a19      	ldr	r2, [pc, #100]	; (1a001b40 <ResetISR+0x68>)
1a001adc:	4b19      	ldr	r3, [pc, #100]	; (1a001b44 <ResetISR+0x6c>)
1a001ade:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a001ae0:	4a19      	ldr	r2, [pc, #100]	; (1a001b48 <ResetISR+0x70>)
1a001ae2:	3304      	adds	r3, #4
1a001ae4:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001ae6:	2300      	movs	r3, #0
1a001ae8:	e005      	b.n	1a001af6 <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a001aea:	f04f 31ff 	mov.w	r1, #4294967295
1a001aee:	4a17      	ldr	r2, [pc, #92]	; (1a001b4c <ResetISR+0x74>)
1a001af0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001af4:	3301      	adds	r3, #1
1a001af6:	2b07      	cmp	r3, #7
1a001af8:	d9f7      	bls.n	1a001aea <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a001afa:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a001afc:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a001afe:	f7ff fa27 	bl	1a000f50 <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a001b02:	4b13      	ldr	r3, [pc, #76]	; (1a001b50 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a001b04:	e007      	b.n	1a001b16 <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001b06:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a001b0a:	6818      	ldr	r0, [r3, #0]
1a001b0c:	6859      	ldr	r1, [r3, #4]
1a001b0e:	689a      	ldr	r2, [r3, #8]
1a001b10:	f7fe fb4c 	bl	1a0001ac <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001b14:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a001b16:	4a0f      	ldr	r2, [pc, #60]	; (1a001b54 <ResetISR+0x7c>)
1a001b18:	4293      	cmp	r3, r2
1a001b1a:	d3f4      	bcc.n	1a001b06 <ResetISR+0x2e>
1a001b1c:	e006      	b.n	1a001b2c <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a001b1e:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a001b20:	f854 0b08 	ldr.w	r0, [r4], #8
1a001b24:	6859      	ldr	r1, [r3, #4]
1a001b26:	f7fe fb4f 	bl	1a0001c8 <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001b2a:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a001b2c:	4a0a      	ldr	r2, [pc, #40]	; (1a001b58 <ResetISR+0x80>)
1a001b2e:	4293      	cmp	r3, r2
1a001b30:	d3f5      	bcc.n	1a001b1e <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a001b32:	f000 fae3 	bl	1a0020fc <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001b36:	f7ff f9ed 	bl	1a000f14 <Board_Init>
    main();
1a001b3a:	f7fe fc05 	bl	1a000348 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a001b3e:	e7fe      	b.n	1a001b3e <ResetISR+0x66>
1a001b40:	10df1000 	.word	0x10df1000
1a001b44:	40053100 	.word	0x40053100
1a001b48:	01dff7ff 	.word	0x01dff7ff
1a001b4c:	e000e280 	.word	0xe000e280
1a001b50:	1a000114 	.word	0x1a000114
1a001b54:	1a000150 	.word	0x1a000150
1a001b58:	1a000178 	.word	0x1a000178

1a001b5c <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a001b5c:	4770      	bx	lr
1a001b5e:	bf00      	nop

1a001b60 <__aeabi_uldivmod>:
1a001b60:	b953      	cbnz	r3, 1a001b78 <__aeabi_uldivmod+0x18>
1a001b62:	b94a      	cbnz	r2, 1a001b78 <__aeabi_uldivmod+0x18>
1a001b64:	2900      	cmp	r1, #0
1a001b66:	bf08      	it	eq
1a001b68:	2800      	cmpeq	r0, #0
1a001b6a:	bf1c      	itt	ne
1a001b6c:	f04f 31ff 	movne.w	r1, #4294967295
1a001b70:	f04f 30ff 	movne.w	r0, #4294967295
1a001b74:	f000 b83c 	b.w	1a001bf0 <__aeabi_idiv0>
1a001b78:	b082      	sub	sp, #8
1a001b7a:	46ec      	mov	ip, sp
1a001b7c:	e92d 5000 	stmdb	sp!, {ip, lr}
1a001b80:	f000 f81e 	bl	1a001bc0 <__gnu_uldivmod_helper>
1a001b84:	f8dd e004 	ldr.w	lr, [sp, #4]
1a001b88:	b002      	add	sp, #8
1a001b8a:	bc0c      	pop	{r2, r3}
1a001b8c:	4770      	bx	lr
1a001b8e:	bf00      	nop

1a001b90 <__gnu_ldivmod_helper>:
1a001b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001b94:	9c06      	ldr	r4, [sp, #24]
1a001b96:	4615      	mov	r5, r2
1a001b98:	4606      	mov	r6, r0
1a001b9a:	460f      	mov	r7, r1
1a001b9c:	4698      	mov	r8, r3
1a001b9e:	f000 f829 	bl	1a001bf4 <__divdi3>
1a001ba2:	fb05 f301 	mul.w	r3, r5, r1
1a001ba6:	fb00 3808 	mla	r8, r0, r8, r3
1a001baa:	fba5 2300 	umull	r2, r3, r5, r0
1a001bae:	1ab2      	subs	r2, r6, r2
1a001bb0:	4443      	add	r3, r8
1a001bb2:	eb67 0303 	sbc.w	r3, r7, r3
1a001bb6:	e9c4 2300 	strd	r2, r3, [r4]
1a001bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001bbe:	bf00      	nop

1a001bc0 <__gnu_uldivmod_helper>:
1a001bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001bc4:	9c06      	ldr	r4, [sp, #24]
1a001bc6:	4690      	mov	r8, r2
1a001bc8:	4606      	mov	r6, r0
1a001bca:	460f      	mov	r7, r1
1a001bcc:	461d      	mov	r5, r3
1a001bce:	f000 f95f 	bl	1a001e90 <__udivdi3>
1a001bd2:	fb00 f505 	mul.w	r5, r0, r5
1a001bd6:	fba0 2308 	umull	r2, r3, r0, r8
1a001bda:	fb08 5501 	mla	r5, r8, r1, r5
1a001bde:	1ab2      	subs	r2, r6, r2
1a001be0:	442b      	add	r3, r5
1a001be2:	eb67 0303 	sbc.w	r3, r7, r3
1a001be6:	e9c4 2300 	strd	r2, r3, [r4]
1a001bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001bee:	bf00      	nop

1a001bf0 <__aeabi_idiv0>:
1a001bf0:	4770      	bx	lr
1a001bf2:	bf00      	nop

1a001bf4 <__divdi3>:
1a001bf4:	2900      	cmp	r1, #0
1a001bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001bfa:	f2c0 80a6 	blt.w	1a001d4a <__divdi3+0x156>
1a001bfe:	2600      	movs	r6, #0
1a001c00:	2b00      	cmp	r3, #0
1a001c02:	f2c0 809c 	blt.w	1a001d3e <__divdi3+0x14a>
1a001c06:	4688      	mov	r8, r1
1a001c08:	4694      	mov	ip, r2
1a001c0a:	469e      	mov	lr, r3
1a001c0c:	4615      	mov	r5, r2
1a001c0e:	4604      	mov	r4, r0
1a001c10:	460f      	mov	r7, r1
1a001c12:	2b00      	cmp	r3, #0
1a001c14:	d13d      	bne.n	1a001c92 <__divdi3+0x9e>
1a001c16:	428a      	cmp	r2, r1
1a001c18:	d959      	bls.n	1a001cce <__divdi3+0xda>
1a001c1a:	fab2 f382 	clz	r3, r2
1a001c1e:	b13b      	cbz	r3, 1a001c30 <__divdi3+0x3c>
1a001c20:	f1c3 0220 	rsb	r2, r3, #32
1a001c24:	409f      	lsls	r7, r3
1a001c26:	fa20 f202 	lsr.w	r2, r0, r2
1a001c2a:	409d      	lsls	r5, r3
1a001c2c:	4317      	orrs	r7, r2
1a001c2e:	409c      	lsls	r4, r3
1a001c30:	0c29      	lsrs	r1, r5, #16
1a001c32:	0c22      	lsrs	r2, r4, #16
1a001c34:	fbb7 fef1 	udiv	lr, r7, r1
1a001c38:	b2a8      	uxth	r0, r5
1a001c3a:	fb01 771e 	mls	r7, r1, lr, r7
1a001c3e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a001c42:	fb00 f30e 	mul.w	r3, r0, lr
1a001c46:	42bb      	cmp	r3, r7
1a001c48:	d90a      	bls.n	1a001c60 <__divdi3+0x6c>
1a001c4a:	197f      	adds	r7, r7, r5
1a001c4c:	f10e 32ff 	add.w	r2, lr, #4294967295
1a001c50:	f080 8105 	bcs.w	1a001e5e <__divdi3+0x26a>
1a001c54:	42bb      	cmp	r3, r7
1a001c56:	f240 8102 	bls.w	1a001e5e <__divdi3+0x26a>
1a001c5a:	f1ae 0e02 	sub.w	lr, lr, #2
1a001c5e:	442f      	add	r7, r5
1a001c60:	1aff      	subs	r7, r7, r3
1a001c62:	b2a4      	uxth	r4, r4
1a001c64:	fbb7 f3f1 	udiv	r3, r7, r1
1a001c68:	fb01 7713 	mls	r7, r1, r3, r7
1a001c6c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a001c70:	fb00 f003 	mul.w	r0, r0, r3
1a001c74:	42b8      	cmp	r0, r7
1a001c76:	d908      	bls.n	1a001c8a <__divdi3+0x96>
1a001c78:	197f      	adds	r7, r7, r5
1a001c7a:	f103 32ff 	add.w	r2, r3, #4294967295
1a001c7e:	f080 80f0 	bcs.w	1a001e62 <__divdi3+0x26e>
1a001c82:	42b8      	cmp	r0, r7
1a001c84:	f240 80ed 	bls.w	1a001e62 <__divdi3+0x26e>
1a001c88:	3b02      	subs	r3, #2
1a001c8a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a001c8e:	2200      	movs	r2, #0
1a001c90:	e003      	b.n	1a001c9a <__divdi3+0xa6>
1a001c92:	428b      	cmp	r3, r1
1a001c94:	d90f      	bls.n	1a001cb6 <__divdi3+0xc2>
1a001c96:	2200      	movs	r2, #0
1a001c98:	4613      	mov	r3, r2
1a001c9a:	1c34      	adds	r4, r6, #0
1a001c9c:	bf18      	it	ne
1a001c9e:	2401      	movne	r4, #1
1a001ca0:	4260      	negs	r0, r4
1a001ca2:	f04f 0500 	mov.w	r5, #0
1a001ca6:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a001caa:	4058      	eors	r0, r3
1a001cac:	4051      	eors	r1, r2
1a001cae:	1900      	adds	r0, r0, r4
1a001cb0:	4169      	adcs	r1, r5
1a001cb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001cb6:	fab3 f283 	clz	r2, r3
1a001cba:	2a00      	cmp	r2, #0
1a001cbc:	f040 8086 	bne.w	1a001dcc <__divdi3+0x1d8>
1a001cc0:	428b      	cmp	r3, r1
1a001cc2:	d302      	bcc.n	1a001cca <__divdi3+0xd6>
1a001cc4:	4584      	cmp	ip, r0
1a001cc6:	f200 80db 	bhi.w	1a001e80 <__divdi3+0x28c>
1a001cca:	2301      	movs	r3, #1
1a001ccc:	e7e5      	b.n	1a001c9a <__divdi3+0xa6>
1a001cce:	b912      	cbnz	r2, 1a001cd6 <__divdi3+0xe2>
1a001cd0:	2301      	movs	r3, #1
1a001cd2:	fbb3 f5f2 	udiv	r5, r3, r2
1a001cd6:	fab5 f085 	clz	r0, r5
1a001cda:	2800      	cmp	r0, #0
1a001cdc:	d13b      	bne.n	1a001d56 <__divdi3+0x162>
1a001cde:	1b78      	subs	r0, r7, r5
1a001ce0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ce4:	fa1f fc85 	uxth.w	ip, r5
1a001ce8:	2201      	movs	r2, #1
1a001cea:	fbb0 f8fe 	udiv	r8, r0, lr
1a001cee:	0c21      	lsrs	r1, r4, #16
1a001cf0:	fb0e 0718 	mls	r7, lr, r8, r0
1a001cf4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a001cf8:	fb0c f308 	mul.w	r3, ip, r8
1a001cfc:	42bb      	cmp	r3, r7
1a001cfe:	d907      	bls.n	1a001d10 <__divdi3+0x11c>
1a001d00:	197f      	adds	r7, r7, r5
1a001d02:	f108 31ff 	add.w	r1, r8, #4294967295
1a001d06:	d202      	bcs.n	1a001d0e <__divdi3+0x11a>
1a001d08:	42bb      	cmp	r3, r7
1a001d0a:	f200 80bd 	bhi.w	1a001e88 <__divdi3+0x294>
1a001d0e:	4688      	mov	r8, r1
1a001d10:	1aff      	subs	r7, r7, r3
1a001d12:	b2a4      	uxth	r4, r4
1a001d14:	fbb7 f3fe 	udiv	r3, r7, lr
1a001d18:	fb0e 7713 	mls	r7, lr, r3, r7
1a001d1c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a001d20:	fb0c fc03 	mul.w	ip, ip, r3
1a001d24:	45bc      	cmp	ip, r7
1a001d26:	d907      	bls.n	1a001d38 <__divdi3+0x144>
1a001d28:	197f      	adds	r7, r7, r5
1a001d2a:	f103 31ff 	add.w	r1, r3, #4294967295
1a001d2e:	d202      	bcs.n	1a001d36 <__divdi3+0x142>
1a001d30:	45bc      	cmp	ip, r7
1a001d32:	f200 80a7 	bhi.w	1a001e84 <__divdi3+0x290>
1a001d36:	460b      	mov	r3, r1
1a001d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001d3c:	e7ad      	b.n	1a001c9a <__divdi3+0xa6>
1a001d3e:	4252      	negs	r2, r2
1a001d40:	ea6f 0606 	mvn.w	r6, r6
1a001d44:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a001d48:	e75d      	b.n	1a001c06 <__divdi3+0x12>
1a001d4a:	4240      	negs	r0, r0
1a001d4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a001d50:	f04f 36ff 	mov.w	r6, #4294967295
1a001d54:	e754      	b.n	1a001c00 <__divdi3+0xc>
1a001d56:	f1c0 0220 	rsb	r2, r0, #32
1a001d5a:	fa24 f102 	lsr.w	r1, r4, r2
1a001d5e:	fa07 f300 	lsl.w	r3, r7, r0
1a001d62:	4085      	lsls	r5, r0
1a001d64:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001d68:	40d7      	lsrs	r7, r2
1a001d6a:	4319      	orrs	r1, r3
1a001d6c:	fbb7 f2fe 	udiv	r2, r7, lr
1a001d70:	0c0b      	lsrs	r3, r1, #16
1a001d72:	fb0e 7712 	mls	r7, lr, r2, r7
1a001d76:	fa1f fc85 	uxth.w	ip, r5
1a001d7a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a001d7e:	fb0c f702 	mul.w	r7, ip, r2
1a001d82:	429f      	cmp	r7, r3
1a001d84:	fa04 f400 	lsl.w	r4, r4, r0
1a001d88:	d907      	bls.n	1a001d9a <__divdi3+0x1a6>
1a001d8a:	195b      	adds	r3, r3, r5
1a001d8c:	f102 30ff 	add.w	r0, r2, #4294967295
1a001d90:	d274      	bcs.n	1a001e7c <__divdi3+0x288>
1a001d92:	429f      	cmp	r7, r3
1a001d94:	d972      	bls.n	1a001e7c <__divdi3+0x288>
1a001d96:	3a02      	subs	r2, #2
1a001d98:	442b      	add	r3, r5
1a001d9a:	1bdf      	subs	r7, r3, r7
1a001d9c:	b289      	uxth	r1, r1
1a001d9e:	fbb7 f8fe 	udiv	r8, r7, lr
1a001da2:	fb0e 7318 	mls	r3, lr, r8, r7
1a001da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a001daa:	fb0c f708 	mul.w	r7, ip, r8
1a001dae:	429f      	cmp	r7, r3
1a001db0:	d908      	bls.n	1a001dc4 <__divdi3+0x1d0>
1a001db2:	195b      	adds	r3, r3, r5
1a001db4:	f108 31ff 	add.w	r1, r8, #4294967295
1a001db8:	d25c      	bcs.n	1a001e74 <__divdi3+0x280>
1a001dba:	429f      	cmp	r7, r3
1a001dbc:	d95a      	bls.n	1a001e74 <__divdi3+0x280>
1a001dbe:	f1a8 0802 	sub.w	r8, r8, #2
1a001dc2:	442b      	add	r3, r5
1a001dc4:	1bd8      	subs	r0, r3, r7
1a001dc6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a001dca:	e78e      	b.n	1a001cea <__divdi3+0xf6>
1a001dcc:	f1c2 0320 	rsb	r3, r2, #32
1a001dd0:	fa2c f103 	lsr.w	r1, ip, r3
1a001dd4:	fa0e fe02 	lsl.w	lr, lr, r2
1a001dd8:	fa20 f703 	lsr.w	r7, r0, r3
1a001ddc:	ea41 0e0e 	orr.w	lr, r1, lr
1a001de0:	fa08 f002 	lsl.w	r0, r8, r2
1a001de4:	fa28 f103 	lsr.w	r1, r8, r3
1a001de8:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a001dec:	4338      	orrs	r0, r7
1a001dee:	fbb1 f8f5 	udiv	r8, r1, r5
1a001df2:	0c03      	lsrs	r3, r0, #16
1a001df4:	fb05 1118 	mls	r1, r5, r8, r1
1a001df8:	fa1f f78e 	uxth.w	r7, lr
1a001dfc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001e00:	fb07 f308 	mul.w	r3, r7, r8
1a001e04:	428b      	cmp	r3, r1
1a001e06:	fa0c fc02 	lsl.w	ip, ip, r2
1a001e0a:	d909      	bls.n	1a001e20 <__divdi3+0x22c>
1a001e0c:	eb11 010e 	adds.w	r1, r1, lr
1a001e10:	f108 39ff 	add.w	r9, r8, #4294967295
1a001e14:	d230      	bcs.n	1a001e78 <__divdi3+0x284>
1a001e16:	428b      	cmp	r3, r1
1a001e18:	d92e      	bls.n	1a001e78 <__divdi3+0x284>
1a001e1a:	f1a8 0802 	sub.w	r8, r8, #2
1a001e1e:	4471      	add	r1, lr
1a001e20:	1ac9      	subs	r1, r1, r3
1a001e22:	b280      	uxth	r0, r0
1a001e24:	fbb1 f3f5 	udiv	r3, r1, r5
1a001e28:	fb05 1113 	mls	r1, r5, r3, r1
1a001e2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a001e30:	fb07 f703 	mul.w	r7, r7, r3
1a001e34:	428f      	cmp	r7, r1
1a001e36:	d908      	bls.n	1a001e4a <__divdi3+0x256>
1a001e38:	eb11 010e 	adds.w	r1, r1, lr
1a001e3c:	f103 30ff 	add.w	r0, r3, #4294967295
1a001e40:	d216      	bcs.n	1a001e70 <__divdi3+0x27c>
1a001e42:	428f      	cmp	r7, r1
1a001e44:	d914      	bls.n	1a001e70 <__divdi3+0x27c>
1a001e46:	3b02      	subs	r3, #2
1a001e48:	4471      	add	r1, lr
1a001e4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a001e4e:	1bc9      	subs	r1, r1, r7
1a001e50:	fba3 890c 	umull	r8, r9, r3, ip
1a001e54:	4549      	cmp	r1, r9
1a001e56:	d309      	bcc.n	1a001e6c <__divdi3+0x278>
1a001e58:	d005      	beq.n	1a001e66 <__divdi3+0x272>
1a001e5a:	2200      	movs	r2, #0
1a001e5c:	e71d      	b.n	1a001c9a <__divdi3+0xa6>
1a001e5e:	4696      	mov	lr, r2
1a001e60:	e6fe      	b.n	1a001c60 <__divdi3+0x6c>
1a001e62:	4613      	mov	r3, r2
1a001e64:	e711      	b.n	1a001c8a <__divdi3+0x96>
1a001e66:	4094      	lsls	r4, r2
1a001e68:	4544      	cmp	r4, r8
1a001e6a:	d2f6      	bcs.n	1a001e5a <__divdi3+0x266>
1a001e6c:	3b01      	subs	r3, #1
1a001e6e:	e7f4      	b.n	1a001e5a <__divdi3+0x266>
1a001e70:	4603      	mov	r3, r0
1a001e72:	e7ea      	b.n	1a001e4a <__divdi3+0x256>
1a001e74:	4688      	mov	r8, r1
1a001e76:	e7a5      	b.n	1a001dc4 <__divdi3+0x1d0>
1a001e78:	46c8      	mov	r8, r9
1a001e7a:	e7d1      	b.n	1a001e20 <__divdi3+0x22c>
1a001e7c:	4602      	mov	r2, r0
1a001e7e:	e78c      	b.n	1a001d9a <__divdi3+0x1a6>
1a001e80:	4613      	mov	r3, r2
1a001e82:	e70a      	b.n	1a001c9a <__divdi3+0xa6>
1a001e84:	3b02      	subs	r3, #2
1a001e86:	e757      	b.n	1a001d38 <__divdi3+0x144>
1a001e88:	f1a8 0802 	sub.w	r8, r8, #2
1a001e8c:	442f      	add	r7, r5
1a001e8e:	e73f      	b.n	1a001d10 <__divdi3+0x11c>

1a001e90 <__udivdi3>:
1a001e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001e94:	2b00      	cmp	r3, #0
1a001e96:	d144      	bne.n	1a001f22 <__udivdi3+0x92>
1a001e98:	428a      	cmp	r2, r1
1a001e9a:	4615      	mov	r5, r2
1a001e9c:	4604      	mov	r4, r0
1a001e9e:	d94f      	bls.n	1a001f40 <__udivdi3+0xb0>
1a001ea0:	fab2 f782 	clz	r7, r2
1a001ea4:	460e      	mov	r6, r1
1a001ea6:	b14f      	cbz	r7, 1a001ebc <__udivdi3+0x2c>
1a001ea8:	f1c7 0320 	rsb	r3, r7, #32
1a001eac:	40b9      	lsls	r1, r7
1a001eae:	fa20 f603 	lsr.w	r6, r0, r3
1a001eb2:	fa02 f507 	lsl.w	r5, r2, r7
1a001eb6:	430e      	orrs	r6, r1
1a001eb8:	fa00 f407 	lsl.w	r4, r0, r7
1a001ebc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001ec0:	0c23      	lsrs	r3, r4, #16
1a001ec2:	fbb6 f0fe 	udiv	r0, r6, lr
1a001ec6:	b2af      	uxth	r7, r5
1a001ec8:	fb0e 6110 	mls	r1, lr, r0, r6
1a001ecc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001ed0:	fb07 f100 	mul.w	r1, r7, r0
1a001ed4:	4299      	cmp	r1, r3
1a001ed6:	d909      	bls.n	1a001eec <__udivdi3+0x5c>
1a001ed8:	195b      	adds	r3, r3, r5
1a001eda:	f100 32ff 	add.w	r2, r0, #4294967295
1a001ede:	f080 80ec 	bcs.w	1a0020ba <__udivdi3+0x22a>
1a001ee2:	4299      	cmp	r1, r3
1a001ee4:	f240 80e9 	bls.w	1a0020ba <__udivdi3+0x22a>
1a001ee8:	3802      	subs	r0, #2
1a001eea:	442b      	add	r3, r5
1a001eec:	1a5a      	subs	r2, r3, r1
1a001eee:	b2a4      	uxth	r4, r4
1a001ef0:	fbb2 f3fe 	udiv	r3, r2, lr
1a001ef4:	fb0e 2213 	mls	r2, lr, r3, r2
1a001ef8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a001efc:	fb07 f703 	mul.w	r7, r7, r3
1a001f00:	4297      	cmp	r7, r2
1a001f02:	d908      	bls.n	1a001f16 <__udivdi3+0x86>
1a001f04:	1952      	adds	r2, r2, r5
1a001f06:	f103 31ff 	add.w	r1, r3, #4294967295
1a001f0a:	f080 80d8 	bcs.w	1a0020be <__udivdi3+0x22e>
1a001f0e:	4297      	cmp	r7, r2
1a001f10:	f240 80d5 	bls.w	1a0020be <__udivdi3+0x22e>
1a001f14:	3b02      	subs	r3, #2
1a001f16:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001f1a:	2600      	movs	r6, #0
1a001f1c:	4631      	mov	r1, r6
1a001f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001f22:	428b      	cmp	r3, r1
1a001f24:	d847      	bhi.n	1a001fb6 <__udivdi3+0x126>
1a001f26:	fab3 f683 	clz	r6, r3
1a001f2a:	2e00      	cmp	r6, #0
1a001f2c:	d148      	bne.n	1a001fc0 <__udivdi3+0x130>
1a001f2e:	428b      	cmp	r3, r1
1a001f30:	d302      	bcc.n	1a001f38 <__udivdi3+0xa8>
1a001f32:	4282      	cmp	r2, r0
1a001f34:	f200 80cd 	bhi.w	1a0020d2 <__udivdi3+0x242>
1a001f38:	2001      	movs	r0, #1
1a001f3a:	4631      	mov	r1, r6
1a001f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001f40:	b912      	cbnz	r2, 1a001f48 <__udivdi3+0xb8>
1a001f42:	2501      	movs	r5, #1
1a001f44:	fbb5 f5f2 	udiv	r5, r5, r2
1a001f48:	fab5 f885 	clz	r8, r5
1a001f4c:	f1b8 0f00 	cmp.w	r8, #0
1a001f50:	d177      	bne.n	1a002042 <__udivdi3+0x1b2>
1a001f52:	1b4a      	subs	r2, r1, r5
1a001f54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001f58:	b2af      	uxth	r7, r5
1a001f5a:	2601      	movs	r6, #1
1a001f5c:	fbb2 f0fe 	udiv	r0, r2, lr
1a001f60:	0c23      	lsrs	r3, r4, #16
1a001f62:	fb0e 2110 	mls	r1, lr, r0, r2
1a001f66:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a001f6a:	fb07 f300 	mul.w	r3, r7, r0
1a001f6e:	428b      	cmp	r3, r1
1a001f70:	d907      	bls.n	1a001f82 <__udivdi3+0xf2>
1a001f72:	1949      	adds	r1, r1, r5
1a001f74:	f100 32ff 	add.w	r2, r0, #4294967295
1a001f78:	d202      	bcs.n	1a001f80 <__udivdi3+0xf0>
1a001f7a:	428b      	cmp	r3, r1
1a001f7c:	f200 80ba 	bhi.w	1a0020f4 <__udivdi3+0x264>
1a001f80:	4610      	mov	r0, r2
1a001f82:	1ac9      	subs	r1, r1, r3
1a001f84:	b2a4      	uxth	r4, r4
1a001f86:	fbb1 f3fe 	udiv	r3, r1, lr
1a001f8a:	fb0e 1113 	mls	r1, lr, r3, r1
1a001f8e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a001f92:	fb07 f703 	mul.w	r7, r7, r3
1a001f96:	42a7      	cmp	r7, r4
1a001f98:	d908      	bls.n	1a001fac <__udivdi3+0x11c>
1a001f9a:	1964      	adds	r4, r4, r5
1a001f9c:	f103 32ff 	add.w	r2, r3, #4294967295
1a001fa0:	f080 808f 	bcs.w	1a0020c2 <__udivdi3+0x232>
1a001fa4:	42a7      	cmp	r7, r4
1a001fa6:	f240 808c 	bls.w	1a0020c2 <__udivdi3+0x232>
1a001faa:	3b02      	subs	r3, #2
1a001fac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001fb0:	4631      	mov	r1, r6
1a001fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001fb6:	2600      	movs	r6, #0
1a001fb8:	4630      	mov	r0, r6
1a001fba:	4631      	mov	r1, r6
1a001fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001fc0:	f1c6 0420 	rsb	r4, r6, #32
1a001fc4:	fa22 f504 	lsr.w	r5, r2, r4
1a001fc8:	40b3      	lsls	r3, r6
1a001fca:	432b      	orrs	r3, r5
1a001fcc:	fa20 fc04 	lsr.w	ip, r0, r4
1a001fd0:	fa01 f706 	lsl.w	r7, r1, r6
1a001fd4:	fa21 f504 	lsr.w	r5, r1, r4
1a001fd8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a001fdc:	ea4c 0707 	orr.w	r7, ip, r7
1a001fe0:	fbb5 f8fe 	udiv	r8, r5, lr
1a001fe4:	0c39      	lsrs	r1, r7, #16
1a001fe6:	fb0e 5518 	mls	r5, lr, r8, r5
1a001fea:	fa1f fc83 	uxth.w	ip, r3
1a001fee:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a001ff2:	fb0c f108 	mul.w	r1, ip, r8
1a001ff6:	42a9      	cmp	r1, r5
1a001ff8:	fa02 f206 	lsl.w	r2, r2, r6
1a001ffc:	d904      	bls.n	1a002008 <__udivdi3+0x178>
1a001ffe:	18ed      	adds	r5, r5, r3
1a002000:	f108 34ff 	add.w	r4, r8, #4294967295
1a002004:	d367      	bcc.n	1a0020d6 <__udivdi3+0x246>
1a002006:	46a0      	mov	r8, r4
1a002008:	1a6d      	subs	r5, r5, r1
1a00200a:	b2bf      	uxth	r7, r7
1a00200c:	fbb5 f4fe 	udiv	r4, r5, lr
1a002010:	fb0e 5514 	mls	r5, lr, r4, r5
1a002014:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a002018:	fb0c fc04 	mul.w	ip, ip, r4
1a00201c:	458c      	cmp	ip, r1
1a00201e:	d904      	bls.n	1a00202a <__udivdi3+0x19a>
1a002020:	18c9      	adds	r1, r1, r3
1a002022:	f104 35ff 	add.w	r5, r4, #4294967295
1a002026:	d35c      	bcc.n	1a0020e2 <__udivdi3+0x252>
1a002028:	462c      	mov	r4, r5
1a00202a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a00202e:	ebcc 0101 	rsb	r1, ip, r1
1a002032:	fba4 2302 	umull	r2, r3, r4, r2
1a002036:	4299      	cmp	r1, r3
1a002038:	d348      	bcc.n	1a0020cc <__udivdi3+0x23c>
1a00203a:	d044      	beq.n	1a0020c6 <__udivdi3+0x236>
1a00203c:	4620      	mov	r0, r4
1a00203e:	2600      	movs	r6, #0
1a002040:	e76c      	b.n	1a001f1c <__udivdi3+0x8c>
1a002042:	f1c8 0420 	rsb	r4, r8, #32
1a002046:	fa01 f308 	lsl.w	r3, r1, r8
1a00204a:	fa05 f508 	lsl.w	r5, r5, r8
1a00204e:	fa20 f704 	lsr.w	r7, r0, r4
1a002052:	40e1      	lsrs	r1, r4
1a002054:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002058:	431f      	orrs	r7, r3
1a00205a:	fbb1 f6fe 	udiv	r6, r1, lr
1a00205e:	0c3a      	lsrs	r2, r7, #16
1a002060:	fb0e 1116 	mls	r1, lr, r6, r1
1a002064:	fa1f fc85 	uxth.w	ip, r5
1a002068:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a00206c:	fb0c f206 	mul.w	r2, ip, r6
1a002070:	429a      	cmp	r2, r3
1a002072:	fa00 f408 	lsl.w	r4, r0, r8
1a002076:	d907      	bls.n	1a002088 <__udivdi3+0x1f8>
1a002078:	195b      	adds	r3, r3, r5
1a00207a:	f106 31ff 	add.w	r1, r6, #4294967295
1a00207e:	d237      	bcs.n	1a0020f0 <__udivdi3+0x260>
1a002080:	429a      	cmp	r2, r3
1a002082:	d935      	bls.n	1a0020f0 <__udivdi3+0x260>
1a002084:	3e02      	subs	r6, #2
1a002086:	442b      	add	r3, r5
1a002088:	1a9b      	subs	r3, r3, r2
1a00208a:	b2bf      	uxth	r7, r7
1a00208c:	fbb3 f0fe 	udiv	r0, r3, lr
1a002090:	fb0e 3310 	mls	r3, lr, r0, r3
1a002094:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a002098:	fb0c f100 	mul.w	r1, ip, r0
1a00209c:	4299      	cmp	r1, r3
1a00209e:	d907      	bls.n	1a0020b0 <__udivdi3+0x220>
1a0020a0:	195b      	adds	r3, r3, r5
1a0020a2:	f100 32ff 	add.w	r2, r0, #4294967295
1a0020a6:	d221      	bcs.n	1a0020ec <__udivdi3+0x25c>
1a0020a8:	4299      	cmp	r1, r3
1a0020aa:	d91f      	bls.n	1a0020ec <__udivdi3+0x25c>
1a0020ac:	3802      	subs	r0, #2
1a0020ae:	442b      	add	r3, r5
1a0020b0:	1a5a      	subs	r2, r3, r1
1a0020b2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a0020b6:	4667      	mov	r7, ip
1a0020b8:	e750      	b.n	1a001f5c <__udivdi3+0xcc>
1a0020ba:	4610      	mov	r0, r2
1a0020bc:	e716      	b.n	1a001eec <__udivdi3+0x5c>
1a0020be:	460b      	mov	r3, r1
1a0020c0:	e729      	b.n	1a001f16 <__udivdi3+0x86>
1a0020c2:	4613      	mov	r3, r2
1a0020c4:	e772      	b.n	1a001fac <__udivdi3+0x11c>
1a0020c6:	40b0      	lsls	r0, r6
1a0020c8:	4290      	cmp	r0, r2
1a0020ca:	d2b7      	bcs.n	1a00203c <__udivdi3+0x1ac>
1a0020cc:	1e60      	subs	r0, r4, #1
1a0020ce:	2600      	movs	r6, #0
1a0020d0:	e724      	b.n	1a001f1c <__udivdi3+0x8c>
1a0020d2:	4630      	mov	r0, r6
1a0020d4:	e722      	b.n	1a001f1c <__udivdi3+0x8c>
1a0020d6:	42a9      	cmp	r1, r5
1a0020d8:	d995      	bls.n	1a002006 <__udivdi3+0x176>
1a0020da:	f1a8 0802 	sub.w	r8, r8, #2
1a0020de:	441d      	add	r5, r3
1a0020e0:	e792      	b.n	1a002008 <__udivdi3+0x178>
1a0020e2:	458c      	cmp	ip, r1
1a0020e4:	d9a0      	bls.n	1a002028 <__udivdi3+0x198>
1a0020e6:	3c02      	subs	r4, #2
1a0020e8:	4419      	add	r1, r3
1a0020ea:	e79e      	b.n	1a00202a <__udivdi3+0x19a>
1a0020ec:	4610      	mov	r0, r2
1a0020ee:	e7df      	b.n	1a0020b0 <__udivdi3+0x220>
1a0020f0:	460e      	mov	r6, r1
1a0020f2:	e7c9      	b.n	1a002088 <__udivdi3+0x1f8>
1a0020f4:	3802      	subs	r0, #2
1a0020f6:	4429      	add	r1, r5
1a0020f8:	e743      	b.n	1a001f82 <__udivdi3+0xf2>
1a0020fa:	bf00      	nop

1a0020fc <__libc_init_array>:
1a0020fc:	b570      	push	{r4, r5, r6, lr}
1a0020fe:	4b0e      	ldr	r3, [pc, #56]	; (1a002138 <__libc_init_array+0x3c>)
1a002100:	4c0e      	ldr	r4, [pc, #56]	; (1a00213c <__libc_init_array+0x40>)
1a002102:	1ae4      	subs	r4, r4, r3
1a002104:	10a4      	asrs	r4, r4, #2
1a002106:	2500      	movs	r5, #0
1a002108:	461e      	mov	r6, r3
1a00210a:	42a5      	cmp	r5, r4
1a00210c:	d004      	beq.n	1a002118 <__libc_init_array+0x1c>
1a00210e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002112:	4798      	blx	r3
1a002114:	3501      	adds	r5, #1
1a002116:	e7f8      	b.n	1a00210a <__libc_init_array+0xe>
1a002118:	f7ff fd20 	bl	1a001b5c <_init>
1a00211c:	4c08      	ldr	r4, [pc, #32]	; (1a002140 <__libc_init_array+0x44>)
1a00211e:	4b09      	ldr	r3, [pc, #36]	; (1a002144 <__libc_init_array+0x48>)
1a002120:	1ae4      	subs	r4, r4, r3
1a002122:	10a4      	asrs	r4, r4, #2
1a002124:	2500      	movs	r5, #0
1a002126:	461e      	mov	r6, r3
1a002128:	42a5      	cmp	r5, r4
1a00212a:	d004      	beq.n	1a002136 <__libc_init_array+0x3a>
1a00212c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002130:	4798      	blx	r3
1a002132:	3501      	adds	r5, #1
1a002134:	e7f8      	b.n	1a002128 <__libc_init_array+0x2c>
1a002136:	bd70      	pop	{r4, r5, r6, pc}
1a002138:	1a002554 	.word	0x1a002554
1a00213c:	1a002554 	.word	0x1a002554
1a002140:	1a002554 	.word	0x1a002554
1a002144:	1a002554 	.word	0x1a002554

1a002148 <memset>:
1a002148:	4402      	add	r2, r0
1a00214a:	4603      	mov	r3, r0
1a00214c:	4293      	cmp	r3, r2
1a00214e:	d002      	beq.n	1a002156 <memset+0xe>
1a002150:	f803 1b01 	strb.w	r1, [r3], #1
1a002154:	e7fa      	b.n	1a00214c <memset+0x4>
1a002156:	4770      	bx	lr
1a002158:	0a0d5441 	.word	0x0a0d5441
1a00215c:	00000000 	.word	0x00000000
1a002160:	0a0d4b4f 	.word	0x0a0d4b4f
1a002164:	00000000 	.word	0x00000000
1a002168:	482b5441 	.word	0x482b5441
1a00216c:	0d504c45 	.word	0x0d504c45
1a002170:	0000000a 	.word	0x0000000a
1a002174:	54524155 	.word	0x54524155
1a002178:	2043505f 	.word	0x2043505f
1a00217c:	666e6f63 	.word	0x666e6f63
1a002180:	72756769 	.word	0x72756769
1a002184:	2e616461 	.word	0x2e616461
1a002188:	00000000 	.word	0x00000000
1a00218c:	54524155 	.word	0x54524155
1a002190:	554c425f 	.word	0x554c425f
1a002194:	4f4f5445 	.word	0x4f4f5445
1a002198:	70204854 	.word	0x70204854
1a00219c:	20617261 	.word	0x20617261
1a0021a0:	75646f6d 	.word	0x75646f6d
1a0021a4:	42206f6c 	.word	0x42206f6c
1a0021a8:	7465756c 	.word	0x7465756c
1a0021ac:	68746f6f 	.word	0x68746f6f
1a0021b0:	6e6f6320 	.word	0x6e6f6320
1a0021b4:	75676966 	.word	0x75676966
1a0021b8:	61646172 	.word	0x61646172
1a0021bc:	0000002e 	.word	0x0000002e
1a0021c0:	74736554 	.word	0x74736554
1a0021c4:	206f7465 	.word	0x206f7465
1a0021c8:	65206973 	.word	0x65206973
1a0021cc:	6f6d206c 	.word	0x6f6d206c
1a0021d0:	6f6c7564 	.word	0x6f6c7564
1a0021d4:	74736520 	.word	0x74736520
1a0021d8:	6f632061 	.word	0x6f632061
1a0021dc:	7463656e 	.word	0x7463656e
1a0021e0:	206f6461 	.word	0x206f6461
1a0021e4:	69766e65 	.word	0x69766e65
1a0021e8:	6f646e61 	.word	0x6f646e61
1a0021ec:	5441203a 	.word	0x5441203a
1a0021f0:	00000a0d 	.word	0x00000a0d
1a0021f4:	75646f4d 	.word	0x75646f4d
1a0021f8:	63206f6c 	.word	0x63206f6c
1a0021fc:	63656e6f 	.word	0x63656e6f
1a002200:	6f646174 	.word	0x6f646174
1a002204:	726f6320 	.word	0x726f6320
1a002208:	74636572 	.word	0x74636572
1a00220c:	6e656d61 	.word	0x6e656d61
1a002210:	002e6574 	.word	0x002e6574
1a002214:	5f44454c 	.word	0x5f44454c
1a002218:	0a0d4e4f 	.word	0x0a0d4e4f
1a00221c:	00000000 	.word	0x00000000
1a002220:	5f44454c 	.word	0x5f44454c
1a002224:	0d46464f 	.word	0x0d46464f
1a002228:	0000000a 	.word	0x0000000a

1a00222c <ultrasonicSensorsIrqMap>:
1a00222c:	00020100                                ....

1a002230 <gpioPinsInit>:
1a002230:	02000104 00050701 05010d03 04080100     ................
1a002240:	02020002 02000304 00000403 04070002     ................
1a002250:	030c0300 09050402 05040103 04030208     ................
1a002260:	04020305 06040504 0802000c 03000b06     ................
1a002270:	00090607 07060503 060f0504 03030004     ................
1a002280:	02000404 00050404 06040502 04060200     ................
1a002290:	0c050408 05040a04 0003010e 14010a00     ................
1a0022a0:	010f0000 0d000012 00001101 0010010c     ................
1a0022b0:	07070300 000f0300 01000001 00000000     ................
1a0022c0:	000a0600 08060603 06100504 04030005     ................
1a0022d0:	03000106 04090400 04010d05 010b0000     ................
1a0022e0:	0200000f 00000001 00010104 02010800     ................
1a0022f0:	01090000 09010006 05040002 04010200     ................
1a002300:	02020105 02020504 0e00000a 01000b02     ................
1a002310:	000c020b 00040c01 04000200 01020001     ................
1a002320:	02000204 00030402 03070302 070b0300     ................
1a002330:	0c030004 03000507 0006070d 01020e03     ................
1a002340:	04010504 06020006 02000504 00040405     ................
1a002350:	08040402 040c0504 0d050409 05040a04     ................
1a002360:	0005010e 00000801                       ........

1a002368 <lpcUarts>:
1a002368:	40081000 06020406 00180205 40081000     ...@...........@
1a002378:	09070509 00180706 40082000 00000000     ......... .@....
1a002388:	00190000 400c1000 07060107 001a0602     .......@........
1a002398:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0023a8:	02020302 001b0204                       ........

1a0023b0 <GpioPorts>:
1a0023b0:	03030003 0f050403 05031005 07030603     ................
1a0023c0:	00000802                                ....

1a0023c4 <OscRateIn>:
1a0023c4:	00b71b00                                ....

1a0023c8 <ExtRateIn>:
1a0023c8:	00000000                                ....

1a0023cc <GpioButtons>:
1a0023cc:	08000400 09010900                       ........

1a0023d4 <GpioLeds>:
1a0023d4:	01050005 0e000205 0c010b01              ............

1a0023e0 <InitClkStates>:
1a0023e0:	00010308 00010307 01010f01              ............

1a0023ec <pinmuxing>:
1a0023ec:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0023fc:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a00240c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a00241c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a00242c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a00243c:	00d50301 00d50401 00160107 00560207     ..............V.
1a00244c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a00245c:	00570206 00f30f01 00f71001 00f31101     ..W.............
1a00246c:	00b31201 00f01301 00b31401 00b60707     ................
1a00247c:	00f20000 00b60100                       ........

1a002484 <UART_BClock>:
1a002484:	01a201c2 01620182                       ......b.

1a00248c <UART_PClock>:
1a00248c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00249c:	000000ff                                ....

1a0024a0 <periph_to_base>:
1a0024a0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0024b0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0024c0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0024d0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0024e0:	01820013 00120182 01a201a2 01c20011     ................
1a0024f0:	001001c2 01e201e2 0202000f 000e0202     ................
1a002500:	02220222 0223000d 001c0223              "."...#.#...

1a00250c <InitClkStates>:
1a00250c:	00010100 00010909 0001090a 01010701     ................
1a00251c:	00010902 00010906 0101090c 0001090d     ................
1a00252c:	0001090e 0001090f 00010910 00010911     ................
1a00253c:	00010912 00010913 00011114 00011119     ................
1a00254c:	0001111a 0001111b                       ........
